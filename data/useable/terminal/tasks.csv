task_id,task_message,task_type,has_bug_fixing,has_code_refactoring,is_fix_related,is_bug_fixing,is_refactoring,total_lines_added_in_commit,total_lines_deleted_in_commit,total_files_affected,total_files_changed,author_email,committer_email,authored_at,authored_year,commited_at,commited_year,commit_time,auther_experience,committer_experience,code_quality,code_complexity,duration
,Population of the console repository with the ColorTool,,,,False,False,False,3213,0,26,25,gillesk@microsoft.com,gillesk@microsoft.com,"08/11/2017, 23:35:53",2017,"08/11/2017, 23:35:53",2017,4,0,0,5.0,4.5,0
,Use invariant culture for parsing double values,,,,False,False,False,4,3,1,1,jmk@bybyte.de,jmk@bybyte.de,"08/12/2017, 12:18:31",2017,"08/12/2017, 12:18:31",2017,3,0,0,2.9,1.0,0
,Add an option to print the colour table for the current scheme,,,,False,False,False,6,2,2,2,nacimota@outlook.com.au,nacimota@outlook.com.au,"08/12/2017, 12:48:42",2017,"08/12/2017, 12:48:42",2017,3,0,0,3.7,1.0,0
,Update README,,,,False,False,False,2,1,1,1,nacimota@outlook.com.au,nacimota@outlook.com.au,"08/12/2017, 12:51:43",2017,"08/12/2017, 12:51:43",2017,3,0,0,3.3,1.0,0
,retarget csproj from net47 to net46,,,,False,False,False,1,1,1,1,oising@gmail.com,oising@gmail.com,"08/12/2017, 18:22:08",2017,"08/12/2017, 18:22:08",2017,4,0,0,2.5,1.0,0
,Default to msbuild.exe on PATH if found,,,,False,False,False,4,0,1,1,dapodd@microsoft.com,dapodd@microsoft.com,"08/13/2017, 00:21:00",2017,"08/13/2017, 00:21:00",2017,1,0,0,5.0,1.2,0
,Fix variable name (from quite to quiet).,,,,True,True,False,3,3,1,1,xanthalas@live.co.uk,xanthalas@live.co.uk,"08/13/2017, 10:13:18",2017,"08/13/2017, 10:13:18",2017,2,0,0,2.5,1.2,0
,Added support for using VS 2017 Build Tools,,,,False,False,False,6,2,1,1,cs.rakowski@gmail.com,cs.rakowski@gmail.com,"08/13/2017, 20:23:57",2017,"08/13/2017, 20:23:57",2017,4,0,0,3.7,1.0,0
,Add build badge for color tool master.,,,,False,False,False,5,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/14/2017, 19:31:11",2017,"08/14/2017, 19:31:11",2017,4,0,0,5.0,1.0,0
,try to trigger github markdown for tables by removing end |,,,,False,False,False,3,2,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/14/2017, 19:34:26",2017,"08/14/2017, 19:34:26",2017,4,0,0,3.0,1.0,0
,Add a table header and see if *that* triggers GitHub to make a markdown table.,,,,False,False,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/14/2017, 19:35:23",2017,"08/14/2017, 19:35:23",2017,4,0,0,2.5,1.0,0
,"Add a switch for exporting settings

  As suggested by #6",,,,False,False,False,66,4,4,4,migrie@microsoft.com,migrie@microsoft.com,"08/14/2017, 20:29:39",2017,"08/14/2017, 20:29:39",2017,4,0,0,4.7,1.5,0
,"ColorTool: Restore old console colors after printing the console table

Unfortunately, when you run `.\colortool.exe --current`,
you might notice that the color of the prompt printed after
the program finishes is slightly different from what it was
before you ran the program.

This changelist fixes the issue by restoring the old console colors
after the program finishes printing the color table.

Testing: manual",,,,True,True,False,4,0,1,1,metathinker@users.noreply.github.com,metathinker@users.noreply.github.com,"08/14/2017, 22:11:46",2017,"08/15/2017, 04:44:53",2017,1,0,0,5.0,1.2,0
,"ColorTool: Fix the included all.bat batch file

This batch file doesn't work if you use build.bat to build
the program, as all.bat looks for ct.exe rather than colortool.exe.
Fortunately, fixing the batch file is almost as easy as working around
its bug manually.",,,,True,True,False,2,2,1,1,metathinker@users.noreply.github.com,metathinker@users.noreply.github.com,"08/15/2017, 04:49:42",2017,"08/15/2017, 04:49:42",2017,1,0,0,2.5,1.2,0
,Fix typos in colortool help message and README,,,,True,True,False,5,5,2,2,nacimota@outlook.com.au,nacimota@outlook.com.au,"08/18/2017, 00:49:01",2017,"08/18/2017, 00:49:01",2017,1,0,0,2.5,1.2,0
,Dynamically generate list of parsers,,,,False,False,False,30,12,6,6,tasou@microsoft.com,tasou@microsoft.com,"08/28/2017, 17:06:45",2017,"08/28/2017, 17:06:45",2017,3,0,0,3.6,1.5,0
,Use simpler csproj format,,,,False,False,False,5,100,2,1,tasou@microsoft.com,tasou@microsoft.com,"08/28/2017, 17:20:25",2017,"08/28/2017, 17:20:25",2017,3,0,0,0.3,2.0,0
,Add option to view available color schemes,,,,False,False,False,78,11,4,4,hugo.v.rijswijk@gmail.com,hugo.v.rijswijk@gmail.com,"09/11/2017, 18:19:33",2017,"09/11/2017, 18:19:33",2017,4,0,0,4.4,1.5,0
,Updated readme,,,,False,False,False,16,9,1,1,rich@bitcrazed.com,noreply@github.com,"10/08/2017, 21:30:31",2017,"10/08/2017, 21:30:31",2017,4,0,0,3.2,1.0,0
,Update README.md,,,,False,False,False,3,3,1,1,rich@bitcrazed.com,noreply@github.com,"10/08/2017, 21:34:48",2017,"10/08/2017, 21:34:48",2017,4,0,0,2.5,1.0,0
,Check for VS 2017 Professional in build.bat,,,,False,False,False,8,0,1,1,bvli@beverli.net,bvli@beverli.net,"10/13/2017, 09:03:00",2017,"10/13/2017, 09:03:00",2017,2,0,0,5.0,1.0,0
,Prototype support for WSL,,,,False,False,False,77,1,2,2,migrie@microsoft.com,migrie@microsoft.com,"10/13/2017, 23:09:49",2017,"10/13/2017, 23:09:49",2017,4,0,0,4.9,1.5,0
,fix the xterm version,,,,True,True,False,142,29,5,4,migrie@microsoft.com,migrie@microsoft.com,"10/23/2017, 17:02:08",2017,"10/23/2017, 17:02:08",2017,3,0,0,4.1,2.4,0
,Fix printing the table in vt mode,,,,True,True,False,29,43,3,3,migrie@microsoft.com,migrie@microsoft.com,"01/19/2018, 21:31:01",2018,"01/19/2018, 21:31:01",2018,4,1,1,2.0,1.8,0
,Enable setting the colors w/ VT even on windows,,,,False,False,False,34,2,3,3,migrie@microsoft.com,migrie@microsoft.com,"01/19/2018, 21:51:56",2018,"01/19/2018, 21:51:56",2018,4,1,1,4.7,1.0,0
,colortool: add support for fg/bg color slot designation,,,,False,False,False,126,49,7,7,yatli@microsoft.com,yatli@microsoft.com,"02/14/2018, 14:40:28",2018,"02/14/2018, 14:40:28",2018,3,0,0,3.6,2.5,0
,weighted RGB distance works well,,,,False,False,False,12,1,1,1,yatli@microsoft.com,yatli@microsoft.com,"02/14/2018, 15:01:37",2018,"02/14/2018, 15:01:37",2018,3,0,0,4.6,1.0,0
,Fix typo from PR feedback.,,,,True,True,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"04/25/2018, 21:17:38",2018,"04/25/2018, 21:17:38",2018,4,1,1,2.5,1.2,0
,Disable automatic assembly info generation,,,,False,False,False,1,0,1,1,twsouthwick@outlook.com,twsouthwick@outlook.com,"04/25/2018, 22:24:59",2018,"04/25/2018, 22:24:59",2018,4,0,0,5.0,1.0,0
,Add error suppression to make listing work better.,,,,True,True,False,25,9,5,5,miniksa@microsoft.com,miniksa@microsoft.com,"04/25/2018, 22:37:40",2018,"04/25/2018, 22:37:40",2018,4,1,1,3.7,1.2,0
,Change listing of available schemes to use directory of executable,,,,False,False,False,4,2,1,1,me@kagehoshi.com,me@kagehoshi.com,"04/26/2018, 14:11:28",2018,"04/26/2018, 14:11:28",2018,3,0,0,3.3,1.0,0
,Adjust 'ANSI 8' color to be more visible against background. Fixes #180,,,,True,False,False,2,2,1,1,mike@certsimple.com,mike@certsimple.com,"05/16/2018, 16:47:47",2018,"05/16/2018, 16:47:47",2018,3,0,0,2.5,1.2,0
,Also update the 'one half dark' dark theme to fix #180,,,,True,False,False,3,3,1,1,mike@certsimple.com,mike@certsimple.com,"05/16/2018, 16:59:04",2018,"05/16/2018, 17:00:25",2018,3,0,0,2.5,1.2,0
,"Add a link to colortool releases page

For those who just want the zip / don't have a build environment set up.",,,,False,False,False,4,0,1,1,mike.maccana@gmail.com,noreply@github.com,"05/16/2018, 17:12:39",2018,"05/16/2018, 17:12:39",2018,3,0,1,5.0,1.0,0
,Add link to a visual editor for .itermcolors files,,,,False,False,False,2,0,1,1,mike.maccana@gmail.com,noreply@github.com,"05/16/2018, 17:18:56",2018,"05/16/2018, 17:18:56",2018,3,0,1,5.0,1.0,0
,"Markdown fixes, also add a description",,,,True,True,False,4,2,1,1,mike@certsimple.com,noreply@github.com,"05/17/2018, 10:28:58",2018,"05/17/2018, 10:28:58",2018,2,0,1,3.3,1.2,0
,Fixed Markdown link,,,,True,True,False,1,1,1,1,nguyen.minh.hai@live.com,noreply@github.com,"05/20/2018, 07:39:20",2018,"05/20/2018, 07:39:20",2018,2,0,1,2.5,1.2,0
,Consolidate schemes path search code,,,,False,False,False,51,69,3,3,code@raboof.com,code@raboof.com,"05/31/2018, 10:57:52",2018,"05/31/2018, 10:58:28",2018,2,0,0,2.7,2.0,0
,Update README.md,,,,False,False,False,2,0,1,1,18221333+miniksa@users.noreply.github.com,noreply@github.com,"06/05/2018, 17:52:57",2018,"06/05/2018, 17:52:57",2018,3,0,1,5.0,1.0,0
,Fix UIntTocolor,,,,True,True,False,3,4,1,1,jaykul@huddledmasses.org,jaykul@huddledmasses.org,"08/19/2018, 05:14:29",2018,"08/19/2018, 05:14:29",2018,1,0,0,2.1,1.2,0
,Add support for parsing concfg (https://github.com/lukesampson/concfg) presets,,,,False,False,False,92,0,1,1,hpierson@microsoft.com,hpierson@microsoft.com,"09/10/2018, 16:38:22",2018,"09/10/2018, 16:38:22",2018,3,0,0,5.0,1.5,0
,"Add an example application that uses the pseudoconsole APIs (#247)

This sample implements a simple ""Echo Console"" that illustrates the mechanism by which a caller can directly invoke & communicate with Command-Line applications.

1. Creates two pipes - one for output, the second for output
1. Creates a Pseudo Console attached to the other end of the pipes
1. Creates a child process (an instance of `ping.exe` in this case), attached to the Pseudo Console
1. Creates a thread that reads the input pipe, displaying received text on the screen",,,,False,False,False,486,0,8,8,rich@bitcrazed.com,noreply@github.com,"09/11/2018, 03:07:17",2018,"09/11/2018, 03:07:17",2018,1,1,1,5.0,3.0,0
,"add project infrastructure (sln, csproj, readme, etc)",,,,False,False,False,145,0,5,5,wafuqua@gmail.com,wafuqua@gmail.com,"09/20/2018, 15:10:12",2018,"09/20/2018, 15:11:24",2018,3,0,0,5.0,2.0,0
,add pinvoke signatures,,,,False,False,False,160,0,3,3,wafuqua@gmail.com,wafuqua@gmail.com,"09/20/2018, 15:11:55",2018,"09/20/2018, 15:11:55",2018,3,0,0,5.0,2.0,0
,"add c# files

- Move from rather ad-hoc, error-prone resource management to IDisposable, which should give us a bit more enforcement.
- Optimistically remove ""buggy"" from readme because the known bugs are now fixed! The main source of bugs was the incorrect InitializeProcThreadAttributeList usage.
- Handle ctrl-c by forwarding it to the PseudoConsole
- Handle terminal close when the window close button is used
- Use .NET's CopyTo in the CopyPipeToOutput, it's much simpler code and seems more robust than the ReadFile/WriteFile approach
- Minor refactor to split native APIs to multiple files",,,,True,True,True,390,0,5,5,wafuqua@gmail.com,wafuqua@gmail.com,"09/20/2018, 15:13:37",2018,"09/20/2018, 15:13:37",2018,3,0,0,5.0,3.0,0
,"implement dispose pattern

- Full Dispose Pattern for ProcessResources since it has unmanaged resources
- Basic Dispose Pattern for PseudoConsolePipe since it has managed resources
- Fix naming of iStdOut to hStdOut
- Change parameter order of Process.Start to make more sense",,,,True,True,False,71,32,4,4,wafuqua@gmail.com,wafuqua@gmail.com,"09/21/2018, 00:29:09",2018,"09/21/2018, 13:47:18",2018,3,0,0,3.4,2.4,0
,"fix exit behavior

old behavior was whenever the user types ""exit"" to stop the entire terminal, which is not correct (e.g. does not work correctly for nested cmd.exe sessions). Now we wait for the top-level process to exit, which I think is more correct.
Also contains a minor rename, Process -> ProcessFactory, ProcessResources -> Process.",,,,True,True,False,75,78,3,3,wafuqua@gmail.com,wafuqua@gmail.com,"09/21/2018, 14:50:18",2018,"09/21/2018, 14:50:18",2018,3,0,0,2.5,2.4,0
,move Process and ProcessFactory classes into separate files,,,,False,False,False,80,71,4,4,wafuqua@gmail.com,wafuqua@gmail.com,"09/21/2018, 14:54:01",2018,"09/21/2018, 14:54:01",2018,3,0,0,1.9,2.0,0
,Set to LF line endings.,,,,False,False,False,86,86,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"10/02/2018, 16:46:15",2018,"10/02/2018, 16:46:15",2018,3,1,1,2.5,2.0,0
,Use helper and move constant for STD_OUTPUT_HANDLE. Use string interpolation for colors. Use Color object and UIntToColor helper for creating our pattern. Add SetLastError annotations to native functions.,,,,False,False,False,15,12,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"10/02/2018, 17:03:26",2018,"10/02/2018, 17:03:26",2018,3,1,1,2.8,1.2,0
,These masks were unused after I used the color helper. Removing.,,,,False,False,False,1,13,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"10/02/2018, 17:16:36",2018,"10/02/2018, 17:16:36",2018,3,1,1,0.4,1.0,0
,Wrap file system export write in try/catch.,,,,False,False,False,22,14,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"10/02/2018, 17:43:03",2018,"10/02/2018, 17:43:03",2018,3,1,1,3.1,1.0,0
,Adjust version lookup to use file version info stamp which is automatically incremented/generated by engineering system.,,,,False,False,False,3,3,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"10/02/2018, 18:18:00",2018,"10/02/2018, 18:18:00",2018,4,1,1,2.5,1.0,0
,"add the new ConPTY samples to the readme

Now that both the ConPTY samples (https://github.com/Microsoft/console/pull/247 and https://github.com/Microsoft/console/pull/260) are merged, mention them on the main repository README.",,,,False,False,False,3,1,1,1,wafuqua@gmail.com,wafuqua@gmail.com,"10/06/2018, 10:49:48",2018,"10/06/2018, 10:49:48",2018,2,0,0,3.7,1.0,0
,Added location flag to colortool and updated help. Also used path combine for schemes directory,,,,False,False,False,35,24,2,2,jakelangford@outlook.com,jakelangford@outlook.com,"10/10/2018, 20:25:36",2018,"10/10/2018, 20:25:36",2018,4,0,0,3.0,1.5,0
,fixed trailing slash at the end of path,,,,True,True,False,1,1,1,1,jake.langford@ditto.ai,jake.langford@ditto.ai,"10/12/2018, 08:11:48",2018,"10/12/2018, 08:11:48",2018,2,0,0,2.5,1.2,0
,Add signing configuration information to repository.,,,,False,False,False,43,0,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"11/29/2018, 18:32:04",2018,"11/29/2018, 18:32:04",2018,4,1,1,5.0,1.0,0
,Austin should be in the list.,,,,False,False,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"11/29/2018, 20:38:36",2018,"11/29/2018, 20:38:36",2018,4,1,1,2.5,1.0,0
,change ISchemeParser ParseScheme reportErrors param default to false,,,,False,False,False,4,4,4,4,hpierson@microsoft.com,hpierson@microsoft.com,"02/27/2019, 16:32:45",2019,"02/27/2019, 16:32:45",2019,3,1,1,2.5,1.2,0
,add --errors cmd line arg to enable scheme parsing error reporting,,,,True,True,False,7,2,1,1,hpierson@microsoft.com,hpierson@microsoft.com,"02/27/2019, 16:33:06",2019,"02/27/2019, 16:33:06",2019,3,1,1,3.9,1.2,0
,updated resources file,,,,False,False,False,27,25,1,1,hpierson@microsoft.com,hpierson@microsoft.com,"02/27/2019, 17:50:08",2019,"02/27/2019, 17:50:08",2019,3,1,1,2.6,1.5,0
,Removed trailing slashes on schemes directory,,,,False,False,False,1,1,1,1,jakelangford@outlook.com,noreply@github.com,"03/28/2019, 17:20:08",2019,"03/28/2019, 17:20:08",2019,3,1,2,2.5,1.0,0
,added popup color to scheme,,,,False,False,False,10,1,2,2,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 15:44:41",2019,"03/29/2019, 15:44:41",2019,3,0,0,4.5,1.0,0
,added abblity to parse popup and screen color from ini file,,,,False,False,False,43,1,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 16:08:57",2019,"03/29/2019, 16:09:09",2019,3,0,0,4.9,1.0,0
,Export now writes screen and popup indexes in ini,,,,False,False,False,20,6,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 16:18:26",2019,"03/29/2019, 16:18:26",2019,3,0,0,3.8,1.0,0
,Document loading colortool schemes from current dir,,,,False,False,False,1,1,1,1,avdi@avdi.codes,avdi@avdi.codes,"03/29/2019, 20:04:58",2019,"03/29/2019, 20:04:58",2019,4,0,0,2.5,1.0,0
,added Support for parsing screen color in json,,,,False,False,False,21,1,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 20:52:04",2019,"03/29/2019, 20:52:04",2019,4,0,0,4.8,1.0,0
,Added check if screen or popup colors were not found.,,,,False,False,False,10,4,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 20:53:50",2019,"03/29/2019, 20:53:50",2019,4,0,0,3.6,1.0,0
,add popup color support to json format,,,,False,False,False,21,1,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"03/29/2019, 21:01:47",2019,"04/02/2019, 17:08:53",2019,3,0,0,4.8,1.0,3
,Fix spelling of foreground (was forground),,,,True,True,False,15,15,1,1,patrick-kranz@live.de,patrick-kranz@live.de,"04/02/2019, 16:48:16",2019,"04/02/2019, 17:09:36",2019,3,0,0,2.5,1.2,0
,encapsule console attributes in struct,,,,False,False,False,31,17,6,6,patrick-kranz@live.de,patrick-kranz@live.de,"04/02/2019, 16:54:00",2019,"04/02/2019, 17:09:54",2019,3,0,0,3.2,1.5,0
,put console attributes in own variable,,,,False,False,False,6,3,3,3,patrick-kranz@live.de,patrick-kranz@live.de,"04/02/2019, 16:56:14",2019,"04/02/2019, 17:09:59",2019,3,0,0,3.3,1.0,0
,initial commit for tools/readconsoleinputstream PR,,,,False,False,False,445,0,5,5,oising@gmail.com,oising@gmail.com,"04/21/2019, 17:31:36",2019,"04/21/2019, 17:31:36",2019,3,1,1,5.0,2.5,0
,add sln file,,,,False,False,False,25,0,1,1,oising@gmail.com,oising@gmail.com,"04/21/2019, 17:32:04",2019,"04/21/2019, 17:32:04",2019,3,1,1,5.0,1.0,0
,"pull logic out of Program.cs

There aren't any user-facing changes in this commit, just pulling logic out of Program.cs. All that remains in Program.cs is command line parsing.

- The functions that wrote to the registry, the console, and the virtual terminal (--xterm) are now in their own files, implementing the `IConsoleTarget` interface
- Move the utility method UIntToColor into ColorScheme, where it can be used as an indexer, e.g. myColorScheme[i] returns a System.Drawing.Color
- The ""export to INI"" functionality is now in a ""SchemeWriters"" namespace; Parsers are now in a ""SchemeParsers"" namespace
- Printing the color table is now in the ColorTable class.",,,,False,False,False,617,547,16,15,wafuqua@gmail.com,wafuqua@gmail.com,"04/23/2019, 14:10:16",2019,"04/23/2019, 14:10:16",2019,3,1,1,2.6,4.0,0
,"replace mutable public fields with properties

The properties are made readonly where possible, which is possible in almost all cases.",,,,False,False,False,264,269,10,10,wafuqua@gmail.com,wafuqua@gmail.com,"04/23/2019, 14:51:05",2019,"04/23/2019, 14:51:05",2019,3,1,1,2.5,3.5,0
,"allow scheme parsers to opt out of attempting to parse a file

This fixes the issue where the INI file parser can throw errors because it's attempting to parse an `.itermcolors` (xml) file.",,,,True,True,False,23,15,5,5,wafuqua@gmail.com,wafuqua@gmail.com,"04/23/2019, 15:04:18",2019,"04/23/2019, 15:04:18",2019,3,1,1,3.0,1.2,0
,"add support for writing foreground / background indices to registry

This functionality was implemented for the ""current console"" but was never implemented for writing to the registry, which affects all future consoles.",,,,False,False,False,53,15,4,4,wafuqua@gmail.com,wafuqua@gmail.com,"04/23/2019, 15:42:32",2019,"04/23/2019, 15:42:32",2019,3,1,1,3.9,1.5,0
,address issues and suggestions in PR review,,,,False,False,False,72,62,4,4,oising@gmail.com,oising@gmail.com,"04/23/2019, 21:38:35",2019,"04/23/2019, 21:38:35",2019,4,1,1,2.7,2.4,0
,remove empty xmldoc,,,,False,False,False,0,5,1,1,oising@gmail.com,oising@gmail.com,"04/23/2019, 21:40:10",2019,"04/23/2019, 21:40:10",2019,4,1,1,0.0,1.0,0
,Retargeted EchoCon sample project to 17763 now Win10 1809 has shipped (#340),,,,False,False,False,1,1,1,1,rich@bitcrazed.com,duhowett@microsoft.com,"04/25/2019, 00:20:20",2019,"04/25/2019, 00:20:20",2019,1,2,0,2.5,1.0,0
,address PR comments (root namespace),,,,False,False,False,1,2,1,1,oising@gmail.com,oising@gmail.com,"04/25/2019, 14:15:02",2019,"04/25/2019, 14:15:02",2019,3,1,1,1.7,1.0,0
,"standardize casing on PascalCase

Feedback from review. I've decided to go with PascalCase as that's more standard in C# and recommended by MS (see the ""Field"" row in the table on https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions)",,,,False,False,False,194,196,12,12,wafuqua@gmail.com,wafuqua@gmail.com,"04/26/2019, 05:34:55",2019,"04/26/2019, 05:34:55",2019,1,1,1,2.5,3.5,0
,moved readconsoleinputstream to samples folder; added readme; updated root readme.,,,,False,False,False,17,0,8,8,oising@gmail.com,oising@gmail.com,"04/29/2019, 18:50:38",2019,"04/29/2019, 18:50:38",2019,4,1,1,5.0,1.5,0
,Move ColorTool to src/ (#422),,,,False,False,False,2,2,37,37,duhowett@microsoft.com,noreply@github.com,"04/30/2019, 19:27:06",2019,"04/30/2019, 19:27:06",2019,4,0,2,2.5,2.5,0
,"Initial release of the Windows Terminal source code

This commit introduces all of the Windows Terminal and Console Host source,
under the MIT license.",,,,False,False,False,182749,0,1165,1027,duhowett@microsoft.com,duhowett@microsoft.com,"05/02/2019, 22:29:04",2019,"05/02/2019, 22:29:04",2019,4,0,0,5.0,5.0,0
,"Merged PR 3215853: Fix spacing/layout for block characters and many retroactively-recategorized emoji (and more!)

This encompasses a handful of problems with column counting.

The Terminal project didn't set a fallback column counter. Oops. I've fixed this to use the `DxEngine` as the fallback.

The `DxEngine` didn't implement its fallback method. Oops. I've fixed this to use the `CustomTextLayout` to figure out the advances based on the same font and fallback pattern as the real final layout, just without ""rounding"" it into cells yet.
- `CustomTextLayout` has been updated to move the advance-correction into a separate phase from glyph shaping. Previously, we corrected the advances to nice round cell counts during shaping, which is fine for drawing, but hard for column count analysis.
- Now that there are separate phases, an `Analyze` method was added to the `CustomTextLayout` which just performs the text analysis steps and the glyph shaping, but no advance correction to column boundaries nor actual drawing.

I've taken the caching code that I was working on to improve chafa, and I've brought it into this. Now that we're doing a lot of fallback and heavy lifting in terms of analysis via the layout, we should cache the results until the font changes.

I've adjusted how column counting is done overall. It's always been in these phases:
1. We used a quick-lookup of ranges of characters we knew to rapidly decide `Narrow`, `Wide` or `Invalid` (a.k.a. ""I dunno"")
2. If it was `Invalid`, we consulted a table based off of the Unicode standard that has either `Narrow`, `Wide`, or `Ambiguous` as a result.
3. If it's still `Ambiguous`, we consult a render engine fallback (usually GDI or now DX) to see how many columns it would take.
4. If we still don't know, then it's `Wide` to be safe.
- I've added an additional flow here. The quick-lookup can now return `Ambiguous` off the bat for some glyph characters in the x2000-x3000 range that used to just be simple shapes but have been retroactively recategorized as emoji and are frequently now using full width color glyphs.
- This new state causes the lookup to go immediately to the render engine if it is available instead of consulting the Unicode standard table first because the half/fullwidth table doesn't appear to have been updated for this nuance to reclass these characters as ambiguous, but we'd like to keep that table as a ""generated from the spec"" sort of table and keep our exceptions in the ""quick lookup"" function.

I have confirmed the following things ""just work"" now:
- The windows logo flag from the demo. (⚫⚪💖✅🌌😊)
- The dotted chart on the side of crossterm demo (•)
- The powerline characters that make arrows with the Consolas patched font (██)
- An accented é
- The warning and checkmark symbols appearing same size as the X. (✔⚠🔥)

Related work items: #21167256, #21237515, #21243859, #21274645, #21296827",,,,True,True,False,1001,133,19,18,miniksa@microsoft.com,duhowett@microsoft.com,"05/01/2019, 23:13:53",2019,"05/02/2019, 22:29:10",2019,4,2,0,4.5,4.8,0
,"Merged PR 3219702: Fix elevation by putting Markup & App in the manifest

Related work items: #21424135",,,,True,True,False,6,2,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"05/02/2019, 22:47:33",2019,"05/02/2019, 22:47:33",2019,4,0,0,3.7,1.2,0
,Add a README and a CODE_OF_CONDUCT,,,,False,False,False,102,52,3,2,dustin@howett.net,dustin@howett.net,"05/06/2019, 05:01:21",2019,"05/06/2019, 05:01:21",2019,1,0,0,3.5,2.0,0
,"Add myself to list of contacts on README

Hey guys, I want in on the fun. Added my twitter handle and information to the contact list.",,,,False,False,False,2,0,1,1,miniksa@microsoft.com,noreply@github.com,"05/06/2019, 18:26:32",2019,"05/06/2019, 18:26:32",2019,4,2,2,5.0,1.0,0
,"tools: add a few more possible locations of MSBuild (#436)

* Add few more possible locations of MSBuild, including VS2019 and VS2017 Professional",,,,False,False,False,32,0,1,1,ganbarukamo@gmail.com,duhowett@microsoft.com,"05/07/2019, 14:27:36",2019,"05/07/2019, 14:27:36",2019,3,0,0,5.0,1.0,0
,docs: fix ORGANIZATION.md hierarchy issues (#478),,,,True,True,False,10,10,1,1,unixzii@gmail.com,duhowett@microsoft.com,"05/07/2019, 14:28:50",2019,"05/07/2019, 14:28:50",2019,3,0,0,2.5,1.2,0
,build: port our Azure CI pipeline to YAML (#510),,,,False,False,False,262,1,7,7,duhowett@microsoft.com,noreply@github.com,"05/07/2019, 14:35:43",2019,"05/07/2019, 14:35:43",2019,3,0,2,5.0,3.0,0
,"ci: check out submodules, too (#512)",,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"05/07/2019, 14:57:46",2019,"05/07/2019, 14:57:46",2019,3,0,2,5.0,1.0,0
,"Add some prerequisites to the readme (#429)

* add some prerequisites to the readme

Add some really basic guidance on how to get started with the Terminal project

* Add note about VS2019",,,,False,False,False,11,0,1,1,migrie@microsoft.com,noreply@github.com,"05/07/2019, 15:23:47",2019,"05/07/2019, 15:23:47",2019,3,2,2,5.0,1.0,0
,"Update GitHub URL link (#505)

""console"" -> ""Terminal""",,,,False,False,False,1,1,1,1,ohlookitsderpy@protonmail.com,migrie@microsoft.com,"05/07/2019, 15:28:50",2019,"05/07/2019, 15:28:50",2019,3,0,2,2.5,1.0,0
,Grammar fixes/improvements (#511),,,,True,True,False,5,5,1,1,40874726+rjackowens@users.noreply.github.com,miniksa@microsoft.com,"05/07/2019, 15:30:01",2019,"05/07/2019, 15:30:01",2019,3,0,2,3.0,1.2,0
,"fix: replaced outdated url (#515)

http://colororacle.cartography.ch/ moved to https://colororacle.org/",,,,True,True,False,1,1,1,1,lorenz.nickel@gmx.net,migrie@microsoft.com,"05/07/2019, 15:30:14",2019,"05/07/2019, 15:30:14",2019,3,0,2,2.5,1.2,0
,Update WindowsTestPasses.md (#470),,,,False,False,False,2,2,1,1,0xflotus@gmail.com,miniksa@microsoft.com,"05/07/2019, 15:31:41",2019,"05/07/2019, 15:31:41",2019,3,0,2,2.5,1.0,0
,doc: Fix typo (#434),,,,True,True,False,2,2,1,1,schabse@gmail.com,miniksa@microsoft.com,"05/07/2019, 15:32:37",2019,"05/07/2019, 15:32:37",2019,3,0,2,2.5,1.2,0
,Fix build errors in VS2019 (#449),,,,True,True,False,1,0,1,1,10217842+aaron-sonin@users.noreply.github.com,migrie@microsoft.com,"05/07/2019, 15:59:33",2019,"05/07/2019, 15:59:33",2019,3,0,2,5.0,1.2,0
,"Add an FAQ to the README (#518)

* Add an FAQ to the README

* drastically->dramatically",,,,False,False,False,21,0,1,1,migrie@microsoft.com,noreply@github.com,"05/07/2019, 16:36:38",2019,"05/07/2019, 16:36:38",2019,3,2,2,5.0,1.0,0
,"Fix grammatical error (#450)

* Fix grammatical error

* Use American English",,,,True,True,False,1,1,1,1,wells.hba@oundleschool.org.uk,migrie@microsoft.com,"05/07/2019, 18:51:14",2019,"05/07/2019, 18:51:14",2019,4,0,2,2.5,1.2,0
,minor readme fix (#494),,,,True,True,False,1,1,1,1,shenjiahuan1999@hotmail.com,migrie@microsoft.com,"05/07/2019, 18:51:41",2019,"05/07/2019, 18:51:41",2019,4,0,2,2.5,1.2,0
,Fix casts warnings. (#509),,,,True,True,False,3,3,3,3,hermes.belusca@sfr.fr,austdi@microsoft.com,"05/07/2019, 19:08:26",2019,"05/07/2019, 19:08:26",2019,4,0,0,2.5,1.2,0
,Put Terminal build pipeline badge on README,,,,False,False,False,1,1,1,1,miniksa@microsoft.com,noreply@github.com,"05/07/2019, 19:57:30",2019,"05/07/2019, 19:57:30",2019,4,2,2,2.5,1.0,0
,Add repositorypath to NuGet config. (#503),,,,False,False,False,3,0,1,1,xiaoshisha@live.com,miniksa@microsoft.com,"05/07/2019, 20:01:49",2019,"05/07/2019, 20:01:49",2019,4,0,2,5.0,1.0,0
,"Clarify where prerequisites packages are installed in VS, could be unclear as 'packages' is overloaded term (#544)",,,,False,False,False,1,1,1,1,yanrez@users.noreply.github.com,migrie@microsoft.com,"05/08/2019, 13:59:36",2019,"05/08/2019, 13:59:36",2019,3,0,2,2.5,1.0,0
,doc: actually link to the Azure CI from the badge (#582),,,,False,False,False,1,1,1,1,stanzilla@users.noreply.github.com,duhowett@microsoft.com,"05/08/2019, 14:18:29",2019,"05/08/2019, 14:18:29",2019,3,0,0,2.5,1.0,0
,"doc: fix some instances of ""it's"" (#552)

part 1/2

[skip ci]",,,,True,True,False,4,4,1,1,jroberts101@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 04:30:41",2019,"05/09/2019, 04:30:41",2019,1,0,0,2.5,1.2,0
,"doc: fix some more instances of ""it's"" (#551)

part 2/2

[skip ci]",,,,True,True,False,5,5,1,1,jroberts101@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 04:31:15",2019,"05/09/2019, 04:31:15",2019,1,0,0,2.5,1.2,0
,"doc: improve some grammar in the README (#542)

Grammatical Errors and sentence structure

[skip ci]",,,,False,False,False,1,1,1,1,redbaron2@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 04:34:36",2019,"05/09/2019, 04:34:36",2019,1,0,0,3.0,1.2,0
,"doc: Explicitly mention tools document in root README (#495)

[skip ci]",,,,False,False,False,2,2,1,1,2749912+bef178@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 04:34:57",2019,"05/09/2019, 04:34:57",2019,1,0,0,2.5,1.0,0
,shared: Fix some Spelling issues in InputStateMachine (#588),,,,True,True,False,2,2,1,1,sckelemen@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 04:35:30",2019,"05/09/2019, 04:35:30",2019,1,0,0,2.5,1.2,0
,"Add .vsconfig for required components to build (#566)

[skip ci]",,,,False,False,False,36,0,1,1,huoyaoyuan@hotmail.com,duhowett@microsoft.com,"05/09/2019, 04:36:26",2019,"05/09/2019, 04:36:26",2019,1,0,0,5.0,1.0,0
,"make closeOnExit: true the default (#599)

* make closeOnExit: true the default

* another very similar instance of _closeOnExit",,,,False,False,False,2,2,2,2,stefano.lanzavecchia@gmail.com,migrie@microsoft.com,"05/09/2019, 14:17:33",2019,"05/09/2019, 14:17:33",2019,3,0,2,2.5,1.2,0
,"close one tab by press ctrl-w and hide the bar (#628)

close one tab by press ctrl-w and hide the bar

fix #614",,,,True,False,False,1,0,1,1,244013304@qq.com,migrie@microsoft.com,"05/09/2019, 17:32:57",2019,"05/09/2019, 17:32:57",2019,3,0,2,5.0,1.2,0
,"Add ARM64 output directories to .gitignore (#630)

[skip ci]",,,,False,False,False,1,0,1,1,ianjfrosst@gmail.com,duhowett@microsoft.com,"05/09/2019, 19:18:05",2019,"05/09/2019, 19:18:05",2019,4,0,0,5.0,1.0,0
,"Lowercase GH org name in .gitmodules (#629)

The `Microsoft` org has been renamed to `microsoft`. While casing isn't an issue with GitHub, just correcting it in case some implementations are case-sensitive.",,,,False,False,False,2,2,1,1,43508+italypaleale@users.noreply.github.com,duhowett@microsoft.com,"05/09/2019, 19:19:46",2019,"05/09/2019, 19:19:45",2019,4,0,0,2.5,1.2,-1
,"add shortcut alt-* for select tab (#623)

* add shortcut alt-* for select tab

* all right, 0 for 10th",,,,False,False,False,85,2,5,5,2749912+bef178@users.noreply.github.com,miniksa@microsoft.com,"05/10/2019, 16:48:36",2019,"05/10/2019, 16:48:36",2019,3,0,2,4.9,1.5,0
,"Update razzle to use vswhere (#13) (#606)

* Update razzle to use vswhere

* Make vswhere pickup build tools

* Make razzle handle errors better

* Make bcz handle MSBUILD with spaces

* Update readmes to use bcz and fix typo",,,,True,False,False,38,70,5,5,amweiss@users.noreply.github.com,miniksa@microsoft.com,"05/10/2019, 17:40:25",2019,"05/10/2019, 17:40:25",2019,3,0,2,1.8,2.4,0
,"Check null pointer before fclose (#586)

* Check null pointer before fclose, because fclose(NULL) will lead to undefined behavior

* Update main.cpp

Cast to one code style

* Update main.cpp

Remove redundant ==",,,,False,False,False,4,1,1,1,adrerek@gmail.com,miniksa@microsoft.com,"05/10/2019, 18:02:24",2019,"05/10/2019, 18:02:24",2019,4,0,2,4.0,1.0,0
,"Bugfix: ESC didn't clear selection (except CMD) (#647)

* Bugfix: ESC didn't clear selection (except CMD)

* Bugfix: ESC didn't clear selection - moved TriggerSelection() to ClearSelection()",,,,False,False,False,2,1,2,2,carlos.zamora@microsoft.com,noreply@github.com,"05/10/2019, 18:16:59",2019,"05/10/2019, 18:16:59",2019,4,0,2,3.3,1.2,0
,"Add a dev manifest, which will be used by default (#558)

* Add a dev manifest, which will be used by default

To build a package named Microsoft.WindowsTerminal, you must build with
/p:WindowsTerminalReleaseBuild=true. This is to improve the SxS
developer/user scenario.

* Change dev manifest version to 0.0.1.0.",,,,False,False,False,79,4,5,5,duhowett@microsoft.com,noreply@github.com,"05/10/2019, 18:56:06",2019,"05/10/2019, 18:56:06",2019,4,0,2,4.8,1.8,0
,"Make powershell the default profile (#639)

* Make powershell the default profile

Sets powershell as the default profile.

* Apply suggestions from code review

Co-Authored-By: Gabriel <gabriel@potter.fr>

* Update src/cascadia/TerminalApp/CascadiaSettings.cpp

Co-Authored-By: Gabriel <gabriel@potter.fr>

* Change profile order",,,,False,False,False,10,10,1,1,40522069+matthew4850@users.noreply.github.com,miniksa@microsoft.com,"05/10/2019, 22:09:22",2019,"05/10/2019, 22:09:22",2019,4,0,2,2.5,1.2,0
,"Bugfix: don't allow closing last tab with middle click (#648)

* Bugfix: don't allow closing last tab with middle click
(Also add a few of the TODOs for similar areas)

* Replaced MSFT TODO with GitHub TODO",,,,False,False,False,8,2,1,1,carlos.zamora@microsoft.com,miniksa@microsoft.com,"05/10/2019, 22:11:23",2019,"05/10/2019, 22:11:23",2019,4,0,2,4.0,1.2,0
,"Improve `startingDirectory` functionality (#604)

* Improve `startingDirectory` functionality

This commit adds the `startingDirectory` property to the default-created
`cmd` and `powershell` profiles, with the default value
`%HOMEDRIVE%%HOMEPATH%`.

Signed-off-by: Fred Miller <fghzxm@outlook.com>

* Use %USERPROFILE% to replace %HOMEDRIVE%%HOMEPATH%

This commit changes `%USERPROFILE%` in the default profiles to
`%HOMEDRIVE%%HOMEPATH%`.

https://stackoverflow.com/posts/36392591/revisions says `%USERPROFILE%`
is better than `%HOMEDRIVE%%HOMEPATH%`, so changed it.

Signed-off-by: Fred Miller <fghzxm@outlook.com>

* Improve `startingDirectory` functionality

This commit adds the `startingDirectory` property to the default-created
`cmd` and `powershell` profiles, with the default value
`%HOMEDRIVE%%HOMEPATH%`.

Signed-off-by: Fred Miller <fghzxm@outlook.com>

* Use %USERPROFILE% to replace %HOMEDRIVE%%HOMEPATH%

This commit changes `%USERPROFILE%` in the default profiles to
`%HOMEDRIVE%%HOMEPATH%`.

https://stackoverflow.com/posts/36392591/revisions says `%USERPROFILE%`
is better than `%HOMEDRIVE%%HOMEPATH%`, so changed it.

Signed-off-by: Fred Miller <fghzxm@outlook.com>

* Consolidate constant

Refer to the externally defined constant in code.

Signed-off-by: Fred Miller <fghzxm@outlook.com>",,,,False,False,False,10,2,3,3,fghzxm@outlook.com,duhowett@microsoft.com,"05/11/2019, 07:02:28",2019,"05/11/2019, 07:02:28",2019,2,0,0,4.3,1.2,0
,"Fix the Generated Files .gitignore (#697)

[skip ci]",,,,True,True,False,1,1,1,1,jaykul@huddledmasses.org,duhowett@microsoft.com,"05/12/2019, 05:56:10",2019,"05/12/2019, 05:56:10",2019,1,1,0,2.5,1.2,0
,Bugfix: The opacity of the text background color was set to 0.9 (#677) (#688),,,,False,False,False,0,2,1,1,ghosty141@gmail.com,migrie@microsoft.com,"05/13/2019, 00:27:16",2019,"05/13/2019, 00:27:16",2019,1,0,2,0.0,1.2,0
,Fixed typo (#723),,,,True,True,False,1,1,1,1,20381559+thatsmyface@users.noreply.github.com,migrie@microsoft.com,"05/13/2019, 13:59:56",2019,"05/13/2019, 13:59:56",2019,3,0,2,2.5,1.2,0
,"Fixed duplicate line in TermControl (#732) (#739)

* Fixed duplicate line in TermControl #732

* Deleted lines, because values were unnecessarily set to default values.",,,,True,False,False,6,11,1,1,mkay00@users.noreply.github.com,duhowett@microsoft.com,"05/13/2019, 16:11:31",2019,"05/13/2019, 16:11:31",2019,3,0,0,1.8,1.2,0
,"Update EXCEPTIONS.md (#736)

updated to indicate HRESULT is preferred over NTSTATUS, as suggested in 
https://github.com/Microsoft/Terminal/blob/master/doc/STYLE.md

[skip ci]",,,,False,False,False,1,1,1,1,andymule@users.noreply.github.com,duhowett@microsoft.com,"05/13/2019, 16:14:41",2019,"05/13/2019, 16:14:41",2019,3,0,0,2.5,1.0,0
,"added windows insider info to readme (#631)

* added windows insider info to readme

* improved readme description for insider program

* minor improvement to readme insider program",,,,False,False,False,1,0,1,1,daniel.gillespie0949@gmail.com,miniksa@microsoft.com,"05/13/2019, 16:35:30",2019,"05/13/2019, 16:35:30",2019,3,0,2,5.0,1.0,0
,doc: append Debugging section with instructions to enable debugging from VS (#726),,,,False,False,False,4,0,1,1,bkoteski88@gmail.com,miniksa@microsoft.com,"05/13/2019, 19:46:18",2019,"05/13/2019, 19:46:18",2019,4,0,2,5.0,1.2,0
,Fix downlevel support for traditional console (#562),,,,True,True,False,3,3,1,1,malxau@users.noreply.github.com,miniksa@microsoft.com,"05/13/2019, 23:10:46",2019,"05/13/2019, 23:10:46",2019,4,0,2,2.5,1.2,0
,"Adding keymapping for access to Settings (#684)

This commit adds the keychord Ctrl+Comma, which launches settings.",,,,False,False,False,20,1,6,6,tim@timheuer.com,duhowett@microsoft.com,"05/14/2019, 01:02:06",2019,"05/14/2019, 01:02:06",2019,1,0,0,4.8,1.5,0
,"doc: improve the formatting of keyboard keys (#730)

Use the `<kbd>` HTML tag

[skip ci]",,,,False,False,False,1,1,1,1,faheel@live.in,duhowett@microsoft.com,"05/14/2019, 01:05:53",2019,"05/14/2019, 01:05:53",2019,1,0,0,3.0,1.0,0
,"Tab to spaces (#578)

* tab to spaces

* change tab size to 4.",,,,False,False,False,73,73,6,6,pythias@gmail.com,duhowett@microsoft.com,"05/14/2019, 01:06:36",2019,"05/14/2019, 01:06:36",2019,1,0,0,2.5,2.5,0
,"Add cursor blinking (#686)

It even respects the user's cursor blink speed setting!",,,,False,False,False,80,1,4,4,34610081+dkter@users.noreply.github.com,duhowett@microsoft.com,"05/14/2019, 01:25:54",2019,"05/14/2019, 01:25:54",2019,1,0,0,4.9,1.5,0
,"fix tab control and tabs is not synced after focused tab is removed (#737)

* trim duplicated github627

* fix tab control and tabs is not synced after focused tab is removed",,,,True,True,False,17,28,1,1,2749912+bef178@users.noreply.github.com,migrie@microsoft.com,"05/14/2019, 13:14:23",2019,"05/14/2019, 13:14:23",2019,3,0,2,1.9,1.2,0
,"Exclude Windows Terminal sources and some other files from git2git (#749)

* Remove Windows Terminal sources from git2git

This will remove Windows Terminal sources from any replications driven by git2git.

* Exclude .nuget and .github as well.

[skip ci]",,,,False,False,False,4,1,1,1,duhowett@microsoft.com,noreply@github.com,"05/14/2019, 15:33:46",2019,"05/14/2019, 15:33:46",2019,3,0,2,4.0,1.0,0
,"Reflect new AppNameDev in readme (#765)

due to #558, app that is built from source will be named ""Windows Terminal (Dev Build)” instead of ""Windows Terminal (Preview)”",,,,False,False,False,1,1,1,1,cody880528@hotmail.com,miniksa@microsoft.com,"05/14/2019, 15:51:19",2019,"05/14/2019, 15:51:19",2019,3,0,2,2.5,1.0,0
,"Add one half color schemes (#466)

* Add One Half Dark & Light color schemes

* WIP: Add One Half Dark/Lite schemes to settings

* Address PR feedback - use gsl::narrow()

* Fix reversed OneHalfLight fg/bg colors

Added in customized colortool scheme colors for last 8 colors",,,,True,True,False,66,4,1,1,r_keith_hill@hotmail.com,miniksa@microsoft.com,"05/14/2019, 18:01:15",2019,"05/14/2019, 18:01:15",2019,4,0,2,4.7,1.8,0
,"Update README.md (#777)

Solution Platform must match the computer architecture",,,,False,False,False,5,0,1,1,sebagomezcorrea@outlook.com,migrie@microsoft.com,"05/14/2019, 18:51:17",2019,"05/14/2019, 18:51:17",2019,4,0,2,5.0,1.0,0
,"Updating readme for more explicit VS2019 Instructions (#560)

* Updating readme for more explicit VS2019 Instructions

Added some more explicit and correct terms for the VS 2019 components that are needed.

* Update Install Instructions

I put the components in sub bullets and reworded some things.",,,,False,False,False,164,159,1,1,tim@timheuer.com,miniksa@microsoft.com,"05/14/2019, 19:44:46",2019,"05/14/2019, 19:44:46",2019,4,0,2,2.5,2.5,0
,"Fix WIL doc summary (#786)

- ""Windows Internal Library"" got named ""Windows Implementation Library"" for its GH release
- Fixed the links to point to the files in the WIL GH instead of the local copies.
- Left the rest of this as general guidance to how we use it.",,,,True,True,False,4,4,1,1,miniksa@microsoft.com,noreply@github.com,"05/14/2019, 20:11:41",2019,"05/14/2019, 20:11:41",2019,4,2,2,2.5,1.2,0
,"Change the Feedback link to take you to github (#789)

Fixes #787.

  Considering we're just duping all feedback hub issues to github, lets cut out
  the middleman and take them straight here.",,,,True,False,False,3,5,1,1,migrie@microsoft.com,miniksa@microsoft.com,"05/14/2019, 20:16:40",2019,"05/14/2019, 20:16:40",2019,4,2,2,1.9,1.2,0
,"added quotes to commands (#785)

thanks!",,,,False,False,False,6,6,1,1,gilmishal@gmail.com,austdi@microsoft.com,"05/14/2019, 21:27:39",2019,"05/14/2019, 21:27:39",2019,4,0,0,2.5,1.0,0
,"Add link to related console-docs GH repository (#784)

The console-docs repository is very related to this one. I feel it should be linked somewhere prominently in this one.
[skip ci]",,,,False,False,False,6,2,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"05/14/2019, 22:04:01",2019,"05/14/2019, 22:04:01",2019,4,2,0,3.7,1.0,0
,"Convert copy to move (#717)

This commit converts 3 spots of copy construction into move
construction.

`return data` was not converted to a move because it should be easily
RVO'able.

Signed-off-by: Fred Miller <fghzxm@outlook.com>",,,,False,False,False,3,3,1,1,fghzxm@outlook.com,duhowett@microsoft.com,"05/14/2019, 22:05:07",2019,"05/14/2019, 22:05:07",2019,4,0,0,2.5,1.0,0
,inbox: reflect incoming changes from Windows,,,,False,False,False,3,0,3,3,duhowett@microsoft.com,noreply@github.com,"05/14/2019, 23:16:43",2019,"05/14/2019, 23:16:43",2019,4,0,2,5.0,1.0,0
,"Make's README list consistent (#790)

Made bullets consistent with other bullets.

[skip ci]",,,,False,False,False,10,10,1,1,jeffreylec@gmail.com,duhowett@microsoft.com,"05/14/2019, 23:19:54",2019,"05/14/2019, 23:19:54",2019,4,0,0,2.5,1.0,0
,"Changes to be able to quit the application via exit inside a CLI prompt. (#746)

* Changes to be able to quit the application via exit inside a CLI prompt.",,,,False,False,False,31,6,7,7,24752637+woachk@users.noreply.github.com,migrie@microsoft.com,"05/15/2019, 12:22:16",2019,"05/15/2019, 12:22:16",2019,3,0,2,4.2,1.5,0
,"Added Keybindings for go up and go down page (#747)

* added keybindings

* untabfied the files

* fixed spacing issues and renamed termheight

* changed function names and other improvements

* made some auto variables const auto

* fixed tabs

* another try for the broken spacing",,,,True,True,False,59,8,9,9,kamuran12580@gmail.com,migrie@microsoft.com,"05/15/2019, 13:21:14",2019,"05/15/2019, 13:21:14",2019,3,0,2,4.5,2.4,0
,"Amend Color array to typed values (#742)

* Amend Color array to typed values

* Re-add the original deserialization code.

* Re-added original deserialization

* Update comment spacing

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Replace tabs with spaces

* Replace array definition and update for loops.

* swapped _table calls to use .at()",,,,False,False,False,44,8,1,1,5765633+obsidianphoenix@users.noreply.github.com,miniksa@microsoft.com,"05/15/2019, 18:12:00",2019,"05/15/2019, 18:12:00",2019,4,0,2,4.2,1.5,0
,"Added a pull request template (#762)

* Close microsoft#752 by adding a pull request template

* Apply suggestions from code review by @miniksa and @bitcrazed

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>
Co-Authored-By: Rich Turner <rich@bitcrazed.com>

* Fixed checkboxes

* Make placeholder uniform

[skip ci]",,,,True,False,False,16,0,1,1,bharatraghunthan9767@gmail.com,miniksa@microsoft.com,"05/15/2019, 19:27:31",2019,"05/15/2019, 19:27:31",2019,4,0,2,5.0,1.2,0
,"Changed ""Windows Internal Library"" to ""Windows Implementation Library"" (#827)",,,,False,False,False,1,1,1,1,mkay00@users.noreply.github.com,miniksa@microsoft.com,"05/15/2019, 19:28:23",2019,"05/15/2019, 19:28:22",2019,4,0,2,2.5,1.0,-1
,"Added documentation policy to README.md (#834)

* Added documentation policy to README.md

* Update README.md

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,4,0,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"05/15/2019, 21:09:58",2019,"05/15/2019, 21:09:58",2019,4,0,2,5.0,1.0,0
,tools: search for MSBuild in prerelease versions of MSVS (#795),,,,False,False,False,7,0,1,1,me@mixaill.tk,miniksa@microsoft.com,"05/16/2019, 03:57:26",2019,"05/16/2019, 03:57:26",2019,1,0,2,5.0,1.0,0
,Fixed typo's and improved consistency. (#704),,,,True,True,False,18,18,8,8,thecloudsaver@gmail.com,miniksa@microsoft.com,"05/16/2019, 04:02:42",2019,"05/16/2019, 04:02:42",2019,1,0,2,3.0,1.8,0
,"ci: Restore Taef.TestAdapter before build (#811)

Fixes #775",,,,True,False,False,23,0,3,1,duhowett@microsoft.com,noreply@github.com,"05/16/2019, 18:22:22",2019,"05/16/2019, 18:22:22",2019,4,0,2,5.0,1.2,0
,"doc: add some new issue templates (#838)

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>
Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

Fixes #751.",,,,True,False,False,80,13,5,3,duhowett@microsoft.com,noreply@github.com,"05/16/2019, 18:24:14",2019,"05/16/2019, 18:24:14",2019,4,0,2,4.5,1.8,0
,inbox: Reflect Windows inbox changes from 20190516,,,,False,False,False,4,2,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"05/16/2019, 23:21:33",2019,"05/16/2019, 23:21:33",2019,4,0,0,3.3,1.0,0
,"doc: Changed ""docs"" to ""doc"" (#862)",,,,False,False,False,1,1,1,1,31769382+aachristian@users.noreply.github.com,duhowett@microsoft.com,"05/17/2019, 00:32:28",2019,"05/17/2019, 00:32:28",2019,1,0,0,2.5,1.0,0
,"fixed on build error xcopy on localized machines (#847)

* fixed on build error xcopy on localized machines

echo ( f | xcopy ) will not work, can get around with putting an '*' at the end, xcopy will treat then as file. This solutions builds 
fine on DE German machine.

* removed echo | f it's not longer needed 

set cmd switch to capital /Y from lower",,,,True,True,False,4,4,1,1,c.boehm@computertechnik-boehm.com,msftbot[bot]@users.noreply.github.com,"05/17/2019, 00:48:00",2019,"05/17/2019, 00:48:00",2019,1,0,0,2.5,1.2,0
,"Delete the keybinding for NewTabProfile9 and SwitchToTab9 (#831)

* Deleted keybinding for NewTabProfile0

* Readded NewTabProfile9 with unbounded shortcut

* Untabify

* Deleted NewTabProfile9 and SwitchToTab9",,,,False,False,False,0,14,3,3,mkay00@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/17/2019, 15:52:01",2019,"05/17/2019, 15:52:01",2019,3,0,0,0.0,1.0,0
,"Fix signatures of some callback functions (#871)

* Fix signatures of callback functions

* Fix calling conventions of callback functions

* Remove now-unnecessary casts of pointers to callback functions",,,,True,True,False,52,49,29,27,b.brachaczek@gmail.com,msftbot[bot]@users.noreply.github.com,"05/17/2019, 20:32:51",2019,"05/17/2019, 20:32:51",2019,4,0,0,2.6,4.2,0
,"Fix #453: Setting historySize=32767 causes WindowsTerminal to hang (#843)

* fix for historySize=32767 hang (except for historySize=0 case); tests still in progress

* tests run and almost pass - failure is a real bug in my change

* fixed bug that caused tests to fail, but it seems another bug causes the app to crash with a zero row count

* fix the additional bug (at a higher layer) mentioned in previous commit description

* Fix chk build assertion failures in new tests

It seems C++/WinRT doesn't like it when you implement a Windows Runtime
interface but then create instances of the implementing class
with function-call lifetime (aka stack allocation). That makes sense
given that WinRT objects are COM objects, but in my defense I was following
this example where they are just fine instantiating the `App` object
on the stack:
https://docs.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/author-apis#if-youre-not-authoring-a-runtime-class

* tabs to spaces

* CR feedback

* fix minor CR feedback (incorrect test log message)",,,,True,False,False,158,10,6,6,1039862+metathinker@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/18/2019, 03:57:34",2019,"05/18/2019, 03:57:34",2019,1,0,0,4.7,3.0,0
,"Add GUIConsole sample (#285)

* Add GUIConsole sample

* Remove acrylic native functions, add a title bar

* Fix WPF app namespaces

* Respond to PR feedback

* Removed unused native calls, and fix up some stray spaces

* Switch pwsh to powershell

* Missed a spot.

* Fix typo, add newlines",,,,True,True,False,1193,0,22,22,pingzing@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/18/2019, 18:17:36",2019,"05/18/2019, 18:17:36",2019,4,0,0,5.0,4.8,0
,"doc: Fix non-grammatical sentence (#895)

Replace `your` with `you` as the word `your` doesn't fit this context.",,,,True,True,False,1,1,1,1,tdh8316@naver.com,duhowett@microsoft.com,"05/18/2019, 20:37:00",2019,"05/18/2019, 20:37:00",2019,4,0,0,2.5,1.2,0
,"Create Bot.md (#884)

* Create Bot.md

#882

* Update Bot.md

* Rename Bot.md to bot.md

* Update doc/bot.md

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* Update bot.md

* Update bot.md",,,,False,False,False,89,0,1,1,miniksa@microsoft.com,msftbot[bot]@users.noreply.github.com,"05/20/2019, 14:27:36",2019,"05/20/2019, 14:27:36",2019,3,2,0,5.0,1.5,0
,"Fix #670: Terminal selects a char when bringing window to foreground (#856)

* Added focus tracking to TermControl to prevent clicks which refocus the terminal window from selecting text.

* Moved open brace to a new line per repo code style.

* Moved the TermControl's _MouseClickHandler's focus check into the Mouse specific block of code. This lets any touch and drag events scroll the terminal's contents.

Fixes #670.",,,,True,False,False,17,3,2,2,5872539+mblowey@users.noreply.github.com,duhowett@microsoft.com,"05/20/2019, 19:05:58",2019,"05/20/2019, 19:05:58",2019,4,0,0,4.2,1.2,0
,"Simplify DPI logic (#829)

* Simply DPI logic

* Apply PR comments

* Update src/cascadia/WindowsTerminal/NonClientIslandWindow.cpp

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* Add comments

* Update src/cascadia/WindowsTerminal/BaseWindow.h

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* Apply PR feedback",,,,False,False,False,68,114,4,4,2091582+ocalvo@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/20/2019, 19:49:28",2019,"05/20/2019, 19:49:28",2019,4,0,0,2.5,2.0,0
,"Added requestedTheme option into terminal settings (#710)

* added requestedTheme option into terminal settings

* fix tabs to 4 spaces

* removed newline

* fix option requestedTheme not shown in profiles.json

* fix indentation

* fix indentation part 2

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,True,True,False,8,5,2,2,gabboxl@virgilio.it,msftbot[bot]@users.noreply.github.com,"05/20/2019, 20:54:19",2019,"05/20/2019, 20:54:19",2019,4,0,0,3.1,1.2,0
,"Merged PR 3286042: Add chafa resource into the DLL built by Windows Razzle

[Git2Git] Merged PR 3285709: Add chafa resource into the DLL built by Windows Razzle #21439265

Add chafa resource into the DLL built by Windows Razzle #21439265",,,,False,False,False,2,0,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"05/21/2019, 00:01:52",2019,"05/21/2019, 00:01:52",2019,1,2,0,5.0,1.0,0
,"inbox PR 3285709: Add chafa resource into the DLL built by Windows Razzle (#912)

[Git2Git] Merged PR 3285709: Add chafa resource into the DLL built by Windows Razzle #21439265",,,,False,False,False,2,0,1,1,duhowett@microsoft.com,noreply@github.com,"05/21/2019, 00:06:21",2019,"05/21/2019, 00:06:21",2019,1,0,2,5.0,1.0,0
,Add behavior of .vsconfig to README (#907),,,,False,False,False,2,5,1,1,heaths@microsoft.com,msftbot[bot]@users.noreply.github.com,"05/21/2019, 05:00:43",2019,"05/21/2019, 05:00:43",2019,1,0,0,1.4,1.0,0
,Fix `it's` versus `its` typo. (#911),,,,True,True,False,44,43,26,25,hermes.belusca-maito@reactos.org,msftbot[bot]@users.noreply.github.com,"05/21/2019, 06:15:44",2019,"05/21/2019, 06:15:44",2019,2,0,0,2.5,3.6,0
,"Support remapping keybindings (#748)

* Add support for serializing keybindings",,,,False,False,False,641,156,10,10,migrie@microsoft.com,noreply@github.com,"05/21/2019, 14:26:04",2019,"05/21/2019, 14:26:04",2019,3,2,2,4.0,3.5,0
,"make copying of files windows localization agnostic (#741)

* make copying of files windows localization agnostic

On a german Windows when building I get the following error:

(D = Datei, V = Verzeichnis)? Ist das Ziel ...\Terminal\x64\Debug\TerminalSettings.pdb ein Dateiname
oder ein Verzeichnisname
(D = Datei, V = Verzeichnis)? f

The trick with piping 'f' for file into stdin does not work here, since
in german file is called 'Datei'. Due to the fact that the UI is
translated a 'd' is expected.

Lets use '*' at the end of the target filename which is a hack to trick
'xcopy' into assuming it is a filename her a target is a folder, if the
target does not exist.

* start fixing commandline tools to run new windows terminal

  * opencas should do the same as openterm.
  * correct the filename in openterm

openterm is able to start the terminal again, but it does not start
properly because of a missing dependency.

* remove openterm command

There is currently no plan on fixing this, because WindowsTerminal.exe
does not support unpackaged activation. Let's remove them for now.",,,,True,True,False,11,73,5,3,184958+hvoigt@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/21/2019, 16:25:54",2019,"05/21/2019, 16:25:54",2019,3,0,0,1.2,1.8,0
,"Remove ATL dependencies (#676) (#719)

* Remove CComBSTR dependency.
* Replace CStructureArray with std::vector.
* Remove CComPtr dependency.
* Add try blocks.
* Remove CString dependency.
* Add comments for string helper functions.
* Remove CComAllocator dependency.

Fixes #676.",,,,True,False,False,487,711,25,24,yurichard3839@gmail.com,duhowett@microsoft.com,"05/21/2019, 17:32:43",2019,"05/21/2019, 17:32:43",2019,3,0,0,2.2,4.8,0
,"Switch to v5 UUIDs as profile GUIDs for the default profiles (#913)

This commit switches the GUIDs for default profiles from being randomly generated to being version 5 UUIDs. More info in #870.

## PR Checklist
* [x] Closes #870
* [x] CLA signed
* [x] Tests added/passed
* [x] Requires documentation to be updated (#883)
* [x] I've discussed this with core contributors already.

## Detailed Description of the Pull Request / Additional comments
This commit has a number of changes that seem ancillary, but they're general goodness. Let me explain:

* I've added a whole new Types test library with only two tests in
* Since UUIDv5 generation requires SHA1, we needed to take a dependency on bcrypt
* I honestly don't think we should have to link bcrypt in conhost, but LTO should take care of that
  * I considered adding a new Terminal-specific Utils/Types library, but that seemed like a waste
* The best way to link bcrypt turned out to be in line with a discussion @miniksa and I had, where we decided we both love APISets and think that the console should link against them exclusively... so I've added `onecore_apiset.lib` to the front of the link line, where it will deflect the linker away from most of the other libs automagically.

```
StartGroup: UuidTests::TestV5UuidU8String
Verify: AreEqual(uuidExpected, uuidActual)
EndGroup: UuidTests::TestV5UuidU8String [Passed]

StartGroup: UuidTests::TestV5UuidU16String
Verify: AreEqual(uuidExpected, uuidActual)
EndGroup: UuidTests::TestV5UuidU16String [Passed]
```",,,,False,False,False,285,13,19,18,duhowett@microsoft.com,noreply@github.com,"05/21/2019, 20:29:16",2019,"05/21/2019, 20:29:16",2019,4,0,2,4.8,4.2,0
,"Fix memory leak, use unique_ptr for Core::Terminal object (#914)",,,,True,True,False,3,3,2,2,dreamer.dead@gmail.com,austdi@microsoft.com,"05/21/2019, 21:07:03",2019,"05/21/2019, 21:07:03",2019,4,0,0,2.5,1.2,0
,"Update README.md - Build the Code section  (#899)

* Update README.md

Fix readme to show correct path of build tools

* Update README.md

Add mention about recommended cli tool for building.

* Update README.md

Cover powershell in build section",,,,True,True,False,11,1,1,1,skowronkow@gmail.com,msftbot[bot]@users.noreply.github.com,"05/21/2019, 21:44:22",2019,"05/21/2019, 21:44:22",2019,4,0,0,4.6,1.2,0
,Use wstring_view for constants instead of wstring (#925),,,,False,False,False,81,81,9,9,mikael.olenfalk@gmail.com,austdi@microsoft.com,"05/21/2019, 22:39:26",2019,"05/21/2019, 22:39:26",2019,4,0,0,2.5,2.5,0
,Remove satement about 1903 being available only on Insider (#928),,,,False,False,False,0,1,1,1,oddball@oddball.tf,migrie@microsoft.com,"05/22/2019, 16:14:02",2019,"05/22/2019, 16:14:02",2019,3,0,2,0.0,1.0,0
,"Bugfix: padding offsets selection (#906)

Closes #660.",,,,False,False,False,32,14,2,2,carlos.zamora@microsoft.com,duhowett@microsoft.com,"05/22/2019, 16:34:20",2019,"05/22/2019, 16:34:20",2019,3,0,0,3.5,1.2,0
,"Re-enable ARM64 in CI (#931)

Fixes #722.",,,,True,False,False,4,0,1,1,duhowett@microsoft.com,austdi@microsoft.com,"05/22/2019, 17:28:50",2019,"05/22/2019, 17:28:50",2019,3,0,0,5.0,1.2,0
,"Adding auto-UI shortcuts to menu based on keymappings (#924)

* Adding vsconfig file for VS2019 help to prompt for missing components requried.

* Adding a keybinding for launching the settings.  Suggested fix for #683

* Modified to comma per PR feedback

* Implements 791 for profile and settings shortcuts (most frequent and have shortcuts)

* Quick change for consistency (missed in first checkin due to using ENUM) on using 'Ctrl' instead of 'Control'

* Adding UI shortcut generation to new keybinding mappings.  Resolving #791

* Making a few changes on reviewer feedback for shortcut UI.

* Additional reviewer feedback on variable name change (not a member var)",,,,True,False,False,123,0,5,5,tim@timheuer.com,migrie@microsoft.com,"05/22/2019, 20:01:33",2019,"05/22/2019, 20:01:33",2019,4,0,2,5.0,2.4,0
,"Add default icons for the default profiles (#934)

This commit introduces a handful of default icons whose paths will be
emitted into the default profiles.

Icons are named after the profile GUIDs, which for the default profiles
are stable v5 UUIDs based on the name of the profile. The plan is that
we'll never have a duplicate default profile, and if the user wants to
duplicate it they'll need to issue it a new GUID.

Eventually, when icons can be inserted through the settings UI, we can
keep the GUID name (to unique them among all icons for all profiles) and
move them into ms-appdata:///roaming/.

The currently included icons are named for the following profiles:

""cmd"" `{0caa0dad-35be-5f56-a8ff-afceeeaa6101}`
""PowerShell Core"" `{574e775e-4f2a-5b96-ac1e-a2962a402336}`
""Windows PowerShell"" `{61c54bbd-c2c6-5271-96e7-009a87ff44bf}`
""WSL"" `{9acb9455-ca41-5af7-950f-6bca1bc9722f}`

The PowerShell profile names aren't being used yet, but this is in
preparation for #918 merging.

Fixes #933.",,,,True,False,False,38,14,13,5,duhowett@microsoft.com,noreply@github.com,"05/22/2019, 20:03:10",2019,"05/22/2019, 20:03:10",2019,4,0,2,3.7,2.4,0
,"set identifying environment variable for new connections (#897)

* set identifying environment variable for new connections

Set a new 'WT_SESSION' environment variable when creating new terminal
connections to allow shells to detect a unique Windows Terminal session.
The value of the variable is a stringified GUID as returned by
CoCreateGuid.

How verified:
- ""razzle"" & vs debug build
- runut
- manual inspection

* * use winrt::guid type for connection guid
* use Utils::GuidToString for guid stringification
* expose guid parameter in ITerminalConnection idl

* - poke guid through ITerminalConnection
- misc. review fixes
- throw if CreateConPty fails in ConhostConnection::Start
- apply [[nodiscard]] and noexcept in various places

* - simplify environment variable extraction in UpdateEnvironmentMapW

* - use Utils::CreateGuid instead of CoCreateGuid in ConHostConnection()",,,,True,True,False,276,54,7,3,binarycrusader@binarycrusader.com,austdi@microsoft.com,"05/22/2019, 20:24:22",2019,"05/22/2019, 20:24:22",2019,4,0,0,4.5,3.0,0
,"Closing the tab shifts focus to the right (#767)

* On closing the tab - the focus is shifted to the right.",,,,False,False,False,15,7,1,1,jurisbog@users.noreply.github.com,migrie@microsoft.com,"05/23/2019, 13:24:40",2019,"05/23/2019, 13:24:40",2019,3,0,2,3.4,1.0,0
,Utf8ToWideCharParser: Fix memory leak in case of error (#836),,,,True,True,False,1,1,1,1,maksqwe1@ukr.net,migrie@microsoft.com,"05/23/2019, 16:05:57",2019,"05/23/2019, 16:05:57",2019,3,0,2,2.5,1.2,0
,"Fix a bunch of static analysis issues (#553)

* static analysis fixes
* using C++ style casts
* explicit delete changed to reset(nullptr)
* fix for null apiMsg.OtherId during tracing in Compare()
* changed INVALID_ID macro to constexpr
* properly handle null ReplyMsg in ConsoleIoThread()
* Fixed wrong static_cast for State.InputBuffer
* compensate for null reply message to fix deref problem of ReplyMsg in srvinit.cpp by changing signature in DeviceComm.h",,,,True,True,False,124,124,15,15,eric_budai@hotmail.com,duhowett@microsoft.com,"05/23/2019, 17:35:30",2019,"05/23/2019, 17:35:30",2019,3,0,0,2.5,4.2,0
,"Enable C++/WinRT Optimizations for local component builds (#949)

Fixes #945.",,,,True,False,False,17,0,9,7,duhowett@microsoft.com,noreply@github.com,"05/23/2019, 17:36:29",2019,"05/23/2019, 17:36:29",2019,3,0,2,5.0,1.8,0
,"fix couple of null pointer dereferences (#927)

found by cppcheck

[src/propsheet/OptionsPage.cpp:216] -> [src/propsheet/OptionsPage.cpp:242]: (warning) Either the condition 'lParam' is redundant or there is possible null pointer dereference: pshn.
[src/propsheet/TerminalPage.cpp:352] -> [src/propsheet/TerminalPage.cpp:378]: (warning) Either the condition 'lParam' is redundant or there is possible null pointer dereference: pshn.",,,,True,True,False,41,35,2,2,chipitsine@gmail.com,migrie@microsoft.com,"05/23/2019, 17:42:39",2019,"05/23/2019, 17:42:39",2019,3,0,2,2.7,1.8,0
,"Added support for DECSCUSR sequences (#941)

* Falling back to legacy cursor for higher values of CursorStyle

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>",,,,False,False,False,73,1,7,7,anirudh.rayabharam@gmail.com,duhowett@microsoft.com,"05/23/2019, 17:44:27",2019,"05/23/2019, 17:44:27",2019,3,0,0,4.9,2.0,0
,"Remove ATL from .vsconfig! (#954)

🎉",,,,False,False,False,2,4,1,1,duhowett@microsoft.com,msftbot[bot]@users.noreply.github.com,"05/23/2019, 17:46:29",2019,"05/23/2019, 17:46:29",2019,3,0,0,1.7,1.0,0
,"Add an error dialog when we fail to parse settings (#903)

  * Load messages from the Resources.resw file
  * Display a message when we fail to parse the settings on an initial parse, or
    on a reload.",,,,True,True,False,224,62,8,8,migrie@microsoft.com,noreply@github.com,"05/23/2019, 20:09:35",2019,"05/23/2019, 20:09:35",2019,4,2,2,3.9,3.6,0
,"Update scroll bar with scroll (#920)

* added another method to scroll with keyboard

* set lastscrolloffset to 0

* fixed unused variable

* renamed ViewPort to Viewport

* changed keyBoard to keyboard in the functions, and added expliantion for function",,,,True,True,False,17,1,4,4,kamuran12580@gmail.com,miniksa@microsoft.com,"05/23/2019, 20:39:29",2019,"05/23/2019, 20:39:29",2019,4,0,2,4.7,1.2,0
,"Update the default settings (#918)

* Update the default settings

  * [x] `alwaysShowTabs` -> `true`
  * [x] `experimental_showTabsInTitlebar` -> `true`
  * [x] always include Windows Powershell (`background`: `#012456`)
  * [x] include PowerShell Core separately (`background`: unset)
  * [x] drop `Courier New` for powershell
  * [x] drop `experimental_` for `experimental_showTabsInTitlebar`
  * [x] reduce default font size to 10pt.

  Fixes #869",,,,True,False,False,49,28,4,4,migrie@microsoft.com,noreply@github.com,"05/23/2019, 22:02:32",2019,"05/23/2019, 22:02:32",2019,4,2,2,3.2,1.8,0
,"Add support for OSC 10 and 11 to set the default colors (#891)

* Support OSC to set default background and foreground colors

* Update the Terminal theme when the background changes

* Fix whitespace per code-review

* Add Documentation Comments

Also fix a few outdated comments and whitespace

* Update Telemetry codes per code review

* Add Unit Tests for OSC ForegroundColor and BackgroundColor

* Add a couple additional test cases

* Minor doc and whitespace change per PR review

* Update comment help per code review

* Add another OSC 10 & 11 test case, improve output

* Comments and syntax cleanup per code reviews",,,,True,True,False,482,72,23,23,jaykul@huddledmasses.org,miniksa@microsoft.com,"05/24/2019, 16:53:00",2019,"05/24/2019, 16:53:00",2019,3,1,2,4.5,4.8,0
,"add .editorconfig file (#585)

* add .editorconfig file

* drop charset from editorconfig

* Update .editorconfig

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>",,,,False,False,False,13,0,1,1,stanzilla@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/24/2019, 18:20:17",2019,"05/24/2019, 18:20:17",2019,4,0,0,5.0,1.0,0
,"Merged PR 3302855: [Git2Git] Merge accumulated build fixes from RS_ONECORE_DEP_ACIOSS

[Git2Git] Git Train: Merge of building/rs_onecore_dep_acioss/190523-1700 into official/rs_onecore_dep_acioss Retrieved from official/rs_onecore_dep_acioss 3fceea90bee761aa93d91c0184a7217d1e2d404b

Related work items: #18974333",,,,True,True,False,4,3,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"05/24/2019, 19:25:59",2019,"05/24/2019, 19:25:59",2019,4,2,0,2.9,1.2,0
,"inbox: Merge accumulated build fixes from RS_ONECORE_DEP_ACIOSS (#1002)

* Merged PR 3302855

[Git2Git] Git Train: Merge of building/rs_onecore_dep_acioss/190523-1700 into official/rs_onecore_dep_acioss Retrieved from official/rs_onecore_dep_acioss 3fceea90bee761aa93d91c0184a7217d1e2d404b

Related work items: #18974333",,,,True,True,False,4,3,2,2,duhowett@microsoft.com,noreply@github.com,"05/24/2019, 19:28:30",2019,"05/24/2019, 19:28:30",2019,4,0,2,2.9,1.2,0
,"Eat all tap keypresses no matter what. (#985)

Fixes #744",,,,True,False,False,8,0,1,1,migrie@microsoft.com,noreply@github.com,"05/24/2019, 20:04:00",2019,"05/24/2019, 20:04:00",2019,4,2,2,5.0,1.2,0
,"Update manifest to correct 1903 version, unref param fix (#1008)

* Update manifest to correct 1903 version

While messing around with building with VS2019/14.2/etc, I noticed that the version we're using in the compatibility manifest doesn't match guidance for XAML Islands. This puts the version information from the public guidance into the manifest and leaves a link back to the page where I got this idea from.

* comment out unused params in IslandWindow::OnResize",,,,True,True,False,5,2,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"05/24/2019, 21:26:40",2019,"05/24/2019, 21:26:40",2019,4,2,0,3.6,1.2,0
,fix build break from using `await` instead of `co_await` (#1009),,,,True,True,False,3,3,1,1,migrie@microsoft.com,msftbot[bot]@users.noreply.github.com,"05/24/2019, 21:27:45",2019,"05/24/2019, 21:27:45",2019,4,2,0,2.5,1.2,0
,Fix the bell sound when Alt+key is pressed. (#1006),,,,True,True,False,7,0,1,1,migrie@microsoft.com,noreply@github.com,"05/24/2019, 21:43:46",2019,"05/24/2019, 21:43:46",2019,4,2,2,5.0,1.2,0
,"add audit mode to ci (#948)

* add audit mode to ci",,,,False,False,False,92,28,16,16,austdi@microsoft.com,noreply@github.com,"05/24/2019, 21:48:10",2019,"05/24/2019, 21:48:10",2019,4,0,2,3.8,3.0,0
,"Cleanup - termDispatch.hpp & adaptDispatch.hpp overrides (#1004)

* Fix for https://github.com/microsoft/terminal/issues/896

* Fixing spaces

* Base Class destructor is virtual, derived class destructor shouldn't be declared vitual or override

* Update src/terminal/adapter/termDispatch.hpp

nit: remove space

Co-Authored-By: Mike Griese <migrie@microsoft.com>",,,,True,True,False,149,148,3,3,subhasan@microsoft.com,austdi@microsoft.com,"05/24/2019, 22:29:12",2019,"05/24/2019, 22:29:12",2019,4,0,0,3.0,3.0,0
,Update Terminal.cpp (#1034),,,,False,False,False,1,1,1,1,nathan_castlehow@me.com,msftbot[bot]@users.noreply.github.com,"05/28/2019, 16:53:03",2019,"05/28/2019, 16:53:03",2019,3,0,0,2.5,1.0,0
,"Fix #936: misuse of uninitialized objects causes AppVerifier breaks on Windows Terminal startup (#1015)

* move the render thread init up; gets rid of verifier stops

* s/INVALID_HANDLE_VALUE/NULL/g since CreateEvent() and CreateThread() return a NULL HANDLE on failure; resolves another cause of AppVerifier breaks",,,,True,False,False,20,16,2,2,1039862+metathinker@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/28/2019, 16:56:36",2019,"05/28/2019, 16:56:36",2019,3,0,0,2.8,1.2,0
,Make sure cursor blinks after opening new tab (#1030),,,,False,False,False,3,0,1,1,cody880528@hotmail.com,duhowett@microsoft.com,"05/28/2019, 18:18:28",2019,"05/28/2019, 18:18:28",2019,4,0,0,5.0,1.0,0
,"Merged PR 3315789: Migrate GitHub changes up until cfc72cee

* cfc72cee (origin/dev/duhowett/ibxint, github/master) Make sure cursor blinks after opening new tab (1030)
* 9ad25440 Fix #936: misuse of uninitialized objects causes AppVerifier breaks on Windows Terminal startup (1015)
* 5f938a04 Update Terminal.cpp (1034)
* 4c47631b Cleanup - termDispatch.hpp & adaptDispatch.hpp overrides (1004)
* cc304759 add audit mode to ci (948)
* 80f10796 Fix the bell sound when Alt+key is pressed. (1006)
* 42e87ed3 fix build break from using `await` instead of `co_await` (1009)
* 40b557a4 Update manifest to correct 1903 version, unref param fix (1008)
* 0f62ec81 Eat all tap keypresses no matter what. (985)
* ce0eaab9 inbox: Merge accumulated build fixes from RS_ONECORE_DEP_ACIOSS (1002)
* 1c509683 add .editorconfig file (585)
* efd69990 Add support for OSC 10 and 11 to set the default colors (891)

Related work items: #21610659, #21838182",,,,True,False,False,777,264,45,45,duhowett@microsoft.com,duhowett@microsoft.com,"05/28/2019, 22:51:48",2019,"05/28/2019, 22:51:48",2019,4,0,0,4.0,5.0,0
,"Guard try_query calls with a null check on the pointer we're QI-ing from (#1044)

Even wil::com_ptr_nothrow can still inadvertantly throw an 'access violation exception' when null pointer deref-ing (WIL won't check if it's null before attempting, CComQIPtr apparently didn't care.",,,,False,False,False,37,23,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"05/28/2019, 23:03:22",2019,"05/28/2019, 23:03:22",2019,4,2,0,3.1,1.5,0
,"Merged PR 3315880: Guard try_query calls with a null check on the pointer we're QI-ing from

Even wil::com_ptr_nothrow can still inadvertantly throw an 'access violation exception' when null pointer deref-ing (WIL won't check if it's null before attempting, CComQIPtr apparently didn't care.

Related work items: #21776133, #21781836",,,,False,False,False,37,23,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"05/28/2019, 23:06:29",2019,"05/28/2019, 23:06:29",2019,4,0,0,3.1,1.5,0
,"Allow `tools\razzle & nuget restore` to work with NuGet 5 and later (#1046)

Since version 5.0.2, NuGet has used the PATH environment variable
to find MSBuild.exe before looking in other file paths.
See NuGet change
https://github.com/NuGet/NuGet.Client/commit/21f2b07f2c2e84afd6602c6743d356dae8880c0c
(https://github.com/NuGet/NuGet.Client/pull/2687 ).

Unfortunately, in PR
https://github.com/microsoft/terminal/pull/606 ,
`tools\razzle.cmd` was changed to add the MSBuild.exe folder path
in _quotes_ to the PATH environment variable.
Windows itself is fine with this (you can type `msbuild` and
MSBuild runs), but some tools are not, including NuGet itself,
so you would get errors like this:

```
D:\GitHub\metathinker\console> where nuget
C:\ProgramData\chocolatey\bin\nuget.exe
D:\GitHub\metathinker\console\dep\nuget\nuget.exe

D:\GitHub\metathinker\console> nuget restore OpenConsole.sln
Illegal characters in path.
```

`razzle.cmd` runs NuGet itself, but does so before adding
the MSBuild folder to the PATH, so it was not affected by this
problem.

This change fixes the issue by dequotifying the PATH,
so that if you already had a newer version of NuGet on your PATH
before running `tools\razzle.cmd`, that version will continue
to work should you need to run `nuget restore` again
(such as after a `git clean -dx`).",,,,True,True,False,1,1,1,1,1039862+metathinker@users.noreply.github.com,duhowett@microsoft.com,"05/29/2019, 17:02:48",2019,"05/29/2019, 17:02:48",2019,3,0,0,3.0,1.2,0
,"Background image support (#853)

* Initial code check in for background images

* Cleaning up whitespace

* Whitespace cleanup

* Added/fixed comments

* Fixing tabs

* Reverting erroneous file add

* Removing custom enum for image stretching mode and using Windows::UI::Xaml::Media::Stretch instead.

* Removing now-superfluous static_cast when setting stretch mode.

* Updating code to use wstring_view (per #925)

* One last set of wstring -> wstring_view changes

* Split off brush-intialization function from TermControl::_BackgroundColorChanged and added code to prevent flicker on resetting acrylic or image backgrounds.",,,,True,True,False,277,12,8,8,david.bingham.brown@gmail.com,migrie@microsoft.com,"05/29/2019, 18:35:46",2019,"05/29/2019, 18:35:46",2019,4,0,2,4.8,3.6,0
,"Some Typo-Fixes in Comments (#1049)

* Typo fixes",,,,True,True,False,38,38,13,13,florian.gutsche@fau.de,miniksa@microsoft.com,"05/29/2019, 21:27:30",2019,"05/29/2019, 21:27:30",2019,4,0,2,2.5,3.0,0
,"Turn on Text Buffer unit tests in Azure DevOps CI build (#1057)

* rename TextBuffer.UnitTests.dll -> TextBuffer.Unit.Tests.dll

* renamed the project file as well",,,,False,False,False,10,6,6,6,1039862+metathinker@users.noreply.github.com,duhowett@microsoft.com,"05/30/2019, 02:51:17",2019,"05/30/2019, 02:51:17",2019,1,0,0,3.1,1.5,0
,"Use a ComPtr to avoid leaking font. (#1063)

Fixes #768",,,,True,False,False,3,3,1,1,robo210@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"05/30/2019, 15:54:46",2019,"05/30/2019, 15:54:46",2019,3,0,0,2.5,1.2,0
,"Apply [[nodiscard]] to functions returning error codes (#953)

* Apply [[nodiscard]] to functions returning error codes

- applied [[nodiscard]] for all HRESULT, LRESULT, and NTSTATUS functions
- fixed IntelliSense declaration complaints leading to function not
  implemented warnings
- deleted declared but never implemented functions
- fixed unused parameter warnings

How verified:
- bcz dbg
- opencon
- testcon
- VS2019 debug build

* - use LOG_IF_FAILED where applicable
- remove use of goto
- make MakeAltRasterFont return void

* - add missing [[nodiscard]]
- remove vestigal function declarations
- fix inconsistent function declaration",,,,True,True,False,80,50,30,30,binarycrusader@binarycrusader.com,msftbot[bot]@users.noreply.github.com,"05/30/2019, 16:20:42",2019,"05/30/2019, 16:20:42",2019,3,0,0,3.1,4.2,0
,"Highlight the default profile in new-tab flyout (#888)

* Highlight the default profile in new-tab flyout

This commit makes the default profile in the new-tab flyout to show up
at the top and gives it bold text.",,,,False,False,False,9,0,2,2,fghzxm@outlook.com,miniksa@microsoft.com,"05/30/2019, 16:24:34",2019,"05/30/2019, 16:24:34",2019,3,0,2,5.0,1.2,0
,"Removed using namespace directive from header files (#955)

* Removed using namespace directive from header files and put these in cpp files where they are used

* Fixed tabbing issues by replacing them with spaces.
Also regrouped the using directives.

* Update src/host/exemain.cpp

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update src/interactivity/win32/find.cpp

Co-Authored-By: Mike Griese <migrie@microsoft.com>",,,,True,True,False,303,182,96,96,mellarmellah@gmail.com,austdi@microsoft.com,"05/30/2019, 18:14:21",2019,"05/30/2019, 18:14:21",2019,4,0,0,3.1,5.0,0
,"Improvements to TerminalInput (#690)

* Specified the destructor of TerminalInput as default

* Simplified GetKeymappingLength

* Simplified GetKeyMapping

* Removed a redundant assignment

* Added auto deduction to some variables

* Merged the public sections of TerminalInput

* Implied the destructor for TerminalInput

* Removed GetKeyMappingLength and GetKeyMapping from public interface

Rearranged public section to be above private.

* Deleted or defaulted all six special member functions.

* Removed extraneous newlines

* Deleted all move and copy operations.

The default constructor is also deleted.
The destructor is defaulted.

* Converted tabs to 4 spaces",,,,False,False,False,28,28,2,2,35079404+nicholas-baron@users.noreply.github.com,austdi@microsoft.com,"05/30/2019, 18:15:37",2019,"05/30/2019, 18:15:37",2019,4,0,0,3.0,1.8,0
,"""Color scheme"" is two words (#1054)

* Update ColorTool comments

* Update profile key

* Add ability to load settings from old key",,,,False,False,False,22,19,5,5,ianjfrosst@gmail.com,migrie@microsoft.com,"05/30/2019, 18:32:05",2019,"05/30/2019, 18:32:05",2019,4,0,2,2.7,1.0,0
,"Merged PR 3330629: [Git2Git] Merged PR 3330475: Synchronize the font between the WDDMCon Renderer and the SCREEN_INFORMATION

[Git2Git] Merged PR 3330475: Synchronize the font between the WDDMCon Renderer and the SCREEN_INFORMATION

Synchronize the font between the WDDMCon Renderer and the SCREEN_INFORMATION when the OneCore Interactivity library starts up. #21717424

Related work items: #21717424 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss ccca0315e7db34c09f5fcd9dfabae666ede1687b

Related work items: #21717424",,,,False,False,False,16,14,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"06/01/2019, 00:51:23",2019,"06/01/2019, 00:51:23",2019,1,2,0,2.7,1.0,0
,"inbox: Synchronize the font between the WDDMCon Renderer and the SCREEN_INFORMATION (#1089)

Synchronize the font between the WDDMCon Renderer and the SCREEN_INFORMATION when the OneCore Interactivity library starts up. #21717424

Retrieved from rs_onecore_dep_acioss ccca0315e7db34c09f5fcd9dfabae666ede1687b

Fixes #958.",,,,True,False,False,16,14,2,2,duhowett@microsoft.com,noreply@github.com,"06/01/2019, 00:59:07",2019,"06/01/2019, 00:59:07",2019,1,0,2,2.7,1.2,0
,"Provide workaround for _GetFocusedTabIndex (#1117)

Use tabview.SelectedIndex for setting focus tab

References
  Closes #1100, Closes #1039, Closes #1074",,,,False,False,False,10,1,1,1,cody880528@hotmail.com,miniksa@microsoft.com,"06/04/2019, 20:18:23",2019,"06/04/2019, 20:18:23",2019,4,0,2,4.5,1.0,0
,"Clean up some misuses of INVALID_HANDLE_VALUE (fixes #427) (#1105)

Almost all functions in the Windows API that open or create objects and return HANDLEs to them return null on failure; only a few (mostly to do with the file system) return INVALID_HANDLE_VALUE on failure. This PR scrubs the repo of a few, but not necessarily all, cases where INVALID_HANDLE_VALUE was mistakenly used or tested against instead of null. In particular, it fixes 2 cases reported in issue #427 where the return value of CreateThread() was compared against INVALID_HANDLE_VALUE against null, causing the error handling code to run at the wrong time.

There are a lot of other uses of INVALID_HANDLE_VALUE I found that looked questionable, but which I left alone. Most of these were used to initialize HANDLE-typed variables and as a sentinel to see if those variables remained unset to a ""real"" value.

Fixes #427",,,,True,False,False,18,24,8,7,1039862+metathinker@users.noreply.github.com,miniksa@microsoft.com,"06/04/2019, 20:23:42",2019,"06/04/2019, 20:23:42",2019,4,0,2,2.7,1.8,0
,"Fix acrylic brush flash/fade on new tab creation. (#1092)

Fixes #1082 -- #853's fix of the acrylic background's flash/fade on any settings change managed to cause a flash/fade on new tab creation. This change removed both flash/fades. #853 split background brush initialization from background color changes; due to the brush being constructed with a default color and then the color being initialized later, new tabs were getting the flash/fade that accompanies a re-focused fluent-style acrylic background. This PR initializes the acrylic color at brush initialization to avoid the problem.",,,,True,False,False,14,2,1,1,david.bingham.brown@gmail.com,miniksa@microsoft.com,"06/04/2019, 20:25:24",2019,"06/04/2019, 20:25:24",2019,4,0,2,4.4,1.2,0
,"Add explicit ""validation steps"" to PR template (#1140)",,,,False,False,False,3,0,1,1,miniksa@microsoft.com,msftbot[bot]@users.noreply.github.com,"06/04/2019, 21:19:32",2019,"06/04/2019, 21:19:32",2019,4,2,0,5.0,1.0,0
,"Switch to jsoncpp as our json library (#1005)


Switch to using jsoncpp as our json library. This lets us pretty-print the json file by default, and lets users place comments in the json file.

We will now only re-write the file when the actual logical structure of the json object changes, not only when the serialization changes.

Unfortunately, this will remove any existing ordering of profiles, and make the order random. We don't terribly care though, because when #754 lands, this will be less painful.

It also introduces a top-level globals object to hold all the global properties, including keybindings. Existing profiles should gracefully upgrade.",,,,False,False,False,8682,638,25,22,migrie@microsoft.com,noreply@github.com,"06/04/2019, 21:55:27",2019,"06/04/2019, 21:55:27",2019,4,2,2,4.7,4.8,0
,"Flush input queue before running test. #1137 (#1139)

Flushes the input queue on RawReadUnpacksCoalescedInputRecords test to ensure that other tests cannot cause failure by leaving extraneous input records behind after they run.

This only failed in the core operating system gate tests. This is because those tests run a subset of the complete test suite (subtracting the ones that do not make sense in a core environment). Apparently one of the tests that was skipped that normally runs prior to the UnpacksCoalesced test ensured that the input queue was clean enough for this test to succeed. But in the core environment, the test that ran prior left stuff behind.

To resolve this, I'm making the Coalesced test more resilient by cleaning out the queue prior to performing its operations.

(Also, bonus, I'm fixing the typo in the name Coalesced.)

This is less complicated/expensive than tracking down the tests that are leaving garbage behind, should prevent issues in the future related to ordering (since the tests run alphabetically, by default), and isn't as expensive as running the test in isolation (with its own conhost stood up for just the one test.)

Validated by running te.exe Microsoft.Console.Host.FeatureTests.dll /name:*InputTests* against a core operating system variant. Prior to change, this test failed. After the change, this test succeeded.

This will be automatically double-checked by the gates run after check-in.",,,,True,True,False,6,2,1,1,miniksa@microsoft.com,noreply@github.com,"06/04/2019, 22:16:09",2019,"06/04/2019, 22:16:09",2019,4,2,2,4.0,1.2,0
,"Change ParseNext function in UTF16 parser to never yield invalid data… (#1129)

…. It will return a replacement character at that point if it was given bad data. #788

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

This modifies the parser used while inserting text into the underlying data buffer to never return an empty sequence. The empty sequence is invalid as you can't insert a ""nothing"" into the buffer. The buffer asserted this with a fail fast crash. Now we will instead insert U+FFFD (the Unicode replacement character) � to symbolize that something was invalid and has been replaced.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #788 and internal MSFT: 20990158
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [x] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #788

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

The solution here isn't perfect and isn't going to solve all of our problems. I was basically trying to stop the crash while not getting in the way of the other things coming down the pipe for the input channels.

I considered the following:
1. Remove the fail fast assertion from the buffer
  - I didn't want to do this because it really is invalid to get all the way to placing the text down into the buffer and then request a string of 0 length get inserted. I feel the fail fast is a good indication that something is terribly wrong elsewhere that should be corrected.
2. Update the UTF16 parser in order to stop returning empty strings
  - This is what I ultimately did. If it would ever return just a lead, it returns �. If it would ever return just a trail, it returns �. Otherwise it will return them as a pair if they're both there, or it will return a single valid codepoint. I am now assuming that if the parse function is being called in an Output Iterator and doesn't contain a string with all pieces of the data that are needed, that someone at a higher level messed up the data, it is in valid, and it should be repaired into replacements.
  - This then will move the philosophy up out of the buffer layer to make folks inserting into the buffer identify half a sequence (if they're sitting on a stream where this circumstance could happen... one `wchar_t` at a time) and hold onto it until the next bit arrives. This is because there can be many different routes into the buffer from many different streams/channels. So buffering it low, right near the insertion point, is bad as it might pair loose `wchar_t` across stream entrypoints.
3. Update the iterator, on creating views, to disallow/transform empty strings. 
  - I considered this solution as well, but it would have required, under some circumstances, a second parsing of the string to identify lead/trail status from outside the `Utf16Parser` class to realize when to use the � character. So I avoided the double-parse.
4. Change the cooked read classes to identify that they pulled the lead `wchar_t` from a sequence then try to pull another one.
   - I was going to attempt this, but @adiviness said that he tried it and it made all sorts of other weirdness happen with the edit line.
   - Additionally, @adiviness has an outstanding series of effort to make cooked read significantly less horrible and disgusting. I didn't want to get in the way here.
5. Change the `GetChar` method off of the input buffer queue to return a `char32_t`, a `wstring_view`, transform a standalone lead/trail, etc.
    - The `GetChar` method is used by several different accessors and API calls to retrieve information off of the input queue, transforming the Key events into straight up characters. To change this at that level would change them all.  Long-term, it is probably warranted to do so as all of those consumers likely need to become aware of handling UTF-16 surrogates before we can declare victory. But two problems.
          1. This gets in the way of @adiviness work on cooked read data
          2. This goes WAY beyond the scope of what I want to accomplish here as the immediate goal is to stop the crash, not fix the world.


I've validated this by:
1. Writing some additional tests against the Utf16Parser to simulate some of the theoretical sequences that could arrive and need to be corrected into replacement characters per a verbal discussion and whiteboarding with @adiviness.
2. Manually triggered the emoji panel and inserted a bunch of emoji. Then seeked around left and right, deleted assorted points with the backspace key, pressed enter to commit, and used the up-arrow history to recommit them to see what happened. There were no crashes. The behavior is still weird and not great... but outside the scope of no crashy crashy.",,,,True,False,False,182,18,4,4,miniksa@microsoft.com,noreply@github.com,"06/04/2019, 22:22:18",2019,"06/04/2019, 22:22:18",2019,4,2,2,4.5,2.4,0
,"Merged PR 3344283: [Git2Git] Merged PR 3344233: Fix build warnings and namespace issues introduced by GitHub merge

[Git2Git] Merged PR 3344233: Fix build warnings and namespace issues introduced by GitHub merge

Related work items: #18974333 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss 76d61f82da64f58b615a9a7f1528f0e55443777e

Related work items: #18974333",,,,True,True,False,6,1,4,4,miniksa@microsoft.com,miniksa@microsoft.com,"06/04/2019, 22:56:17",2019,"06/04/2019, 22:56:17",2019,4,2,2,4.3,1.2,0
,"[inbox] Fix build warnings and namespace issues introduced by GitHub merge (#1144)

These were introduced by:

build warning with using wrong type in wil macro: #1105
namespace issues: #955
These showed up in the official Windows build. I fixed them on that side to restore the build and now I'm bringing them back out.",,,,True,True,False,6,1,4,4,miniksa@microsoft.com,noreply@github.com,"06/04/2019, 23:30:37",2019,"06/04/2019, 23:30:37",2019,4,2,2,4.3,1.2,0
,"Fix crash when window width and height are too high (#1134)

## Summary of the Pull Request

Currently, the program crashes with a window width or height greater than 32767 (accounting for window decorations). This can be caused when the `initialRows` and `initialColumns` settings are set too high (also depends on the font width and height). This fixes the issue by not allowing the window to expand beyond 32767x32767.

## References
#843 - relocated the ClampToShortMax helper for reuse elsewhere",,,,True,True,False,79,15,7,7,34610081+dkter@users.noreply.github.com,miniksa@microsoft.com,"06/04/2019, 23:31:36",2019,"06/04/2019, 23:31:36",2019,4,0,2,4.2,2.4,0
,"Docs: Contributor's guide and spec-template (#967)

Submitting first draft of spec template, and `contributing.md` outlining our guidance on how to engage with us, file issues, suggest features, submit changes, etc.",,,,False,False,False,214,0,4,3,richturn@microsoft.com,noreply@github.com,"06/05/2019, 20:54:21",2019,"06/05/2019, 20:54:21",2019,4,0,2,5.0,3.0,0
,Updated & linked-to Contributor's Guide,,,,False,False,False,1,1,1,1,richturn@microsoft.com,noreply@github.com,"06/06/2019, 21:08:15",2019,"06/06/2019, 21:08:15",2019,4,0,2,2.5,1.0,0
,"Fix OpenConsole.psm1 to use vswhere (#1113)

* Fix OpenConsole.psm1 to use vswhere

I'm not sure this is good, since I don't write a lot of powershell, and
I don't know the project very well, but hopefully it's good!

* Do as @DHowett-MSFT says and use VSSetup

whee!

* try to do what @heaths is recommending

* fix `Import-LocalModule`

* fix openconsole.psm1 for hopefully the last time",,,,True,True,False,75,6,2,2,mazzucan@outlook.com,msftbot[bot]@users.noreply.github.com,"06/07/2019, 20:20:26",2019,"06/07/2019, 20:20:26",2019,4,0,0,4.6,1.8,0
,added UTF8 torture test text file and a solution dependency graph diagram. (#1166),,,,False,False,False,212,0,2,1,oising@gmail.com,migrie@microsoft.com,"06/07/2019, 20:54:04",2019,"06/07/2019, 20:54:04",2019,4,1,2,5.0,2.5,0
,"Code to add WSLProfiles. (#1050)

* Code to add WSLProfiles.

* Updates recomended by miniksa

* Corrections from Mauve

* More updates from miniska (clarified WaitForSingleObject errors, and moved the try block to the calling function)

* Added THROW_LAST_ERROR for WAIT_FAILED instead of passing an unhandled exception.

* Migrate STL dependancies to LibraryIncludes.h

* Renamed function to provide more clarity

* Set WSL starting directory.

* Default Linux icon and brackets on new lines.

* Added system path so we don't rely on execution from the PATH environment variable.  Removed incorrect error useage.  Removed variable that was not required.

* Remove default directory setting.",,,,True,True,False,82,0,3,3,jbanks@users.noreply.github.com,migrie@microsoft.com,"06/07/2019, 21:12:32",2019,"06/07/2019, 21:12:32",2019,4,0,2,5.0,1.8,0
,"Add support for multiple panes in the same window (#825)

* Start working on adding support for panes

  See #1000 for the panes megathread on remaining work.

  The functionality will be there, but the keybinding won't be there, so people have to
  opt-in to it.",,,,False,False,False,1368,125,14,14,migrie@microsoft.com,noreply@github.com,"06/07/2019, 21:56:44",2019,"06/07/2019, 21:56:44",2019,4,2,2,4.6,4.0,0
,"Reintroduce the key binding for split panes (#1190)

It was lost in a merge.",,,,False,False,False,4,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"06/10/2019, 16:38:35",2019,"06/10/2019, 16:38:35",2019,3,2,0,5.0,1.0,0
,"Support any number of leading zeros in VT parameter values (#1191)

* Support any number of leading zeros in VT parameter values.

* Add unit tests for leading zeros in VT parameter values.",,,,False,False,False,67,6,2,2,j4_james@hotmail.com,migrie@microsoft.com,"06/10/2019, 16:59:30",2019,"06/10/2019, 16:59:30",2019,3,0,2,4.6,1.5,0
,"Remove carriage return and () from WSL distro names (#1169)

* Eliminate carriage return character
* Add WSLName ending identifiers.",,,,False,False,False,8,1,1,1,jbanks@users.noreply.github.com,duhowett@microsoft.com,"06/10/2019, 20:38:18",2019,"06/10/2019, 20:38:18",2019,4,0,0,4.4,1.0,0
,"Properly manage teardown state in TermControl (#1199)

* Properly manage teardown state in TermControl

This commit introduces a few automatic event revokers and implements
staged Close for TermControl's constituent components.

* Only read the focused control title if there is one

Fixes #1198
Fixes #1188",,,,True,False,False,51,33,3,3,duhowett@microsoft.com,noreply@github.com,"06/11/2019, 19:37:20",2019,"06/11/2019, 19:37:20",2019,4,0,2,3.0,1.8,0
,"add clang-format conf to the project, format the c++ code (#1141)",,,,False,False,False,11569,12674,523,507,austdi@microsoft.com,noreply@github.com,"06/11/2019, 20:27:09",2019,"06/11/2019, 20:27:09",2019,4,0,2,2.4,5.0,0
,"add audit build step for code formatting check (#1208)

* add audit build step for code formatting check",,,,False,False,False,20,0,3,2,austdi@microsoft.com,noreply@github.com,"06/11/2019, 23:23:21",2019,"06/11/2019, 23:23:21",2019,4,0,2,5.0,1.0,0
,"Merged PR 3367347: [Git2Git] Git Train: FI of official/rs_onecore_dep into official/rs_onecore_dep_acioss Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss 6fa4fbe485365ed72be2f557621fe58d4fc75197

[Git2Git] Git Train: FI of official/rs_onecore_dep into official/rs_onecore_dep_acioss Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss 6fa4fbe485365ed72be2f557621fe58d4fc75197

Related work items: #18974333",,,,False,False,False,37,34,16,16,miniksa@microsoft.com,duhowett@microsoft.com,"06/11/2019, 23:59:12",2019,"06/11/2019, 23:59:12",2019,4,2,0,2.6,2.5,0
,"inbox: merge refactoring payload from FI

`official/rs_onecore_dep_acioss 6fa4fbe485365ed72be2f557621fe58d4fc75197`",,,,False,False,True,37,34,16,16,duhowett@microsoft.com,noreply@github.com,"06/12/2019, 00:01:26",2019,"06/12/2019, 00:01:26",2019,1,0,2,3.1,2.5,0
,Account for padding when calculating the initial window size (#1152),,,,False,False,False,7,4,2,2,cody880528@hotmail.com,duhowett@microsoft.com,"06/12/2019, 01:47:27",2019,"06/12/2019, 01:47:27",2019,1,0,0,3.2,1.0,0
,"Re-enable serialization for OpenSettings (#1214)

* Adding vsconfig file for VS2019 help to prompt for missing components requried.

* Adding a keybinding for launching the settings.  Suggested fix for #683

* Modified to comma per PR feedback

* Implements 791 for profile and settings shortcuts (most frequent and have shortcuts)

* Quick change for consistency (missed in first checkin due to using ENUM) on using 'Ctrl' instead of 'Control'

* Fixes #1213 to re-enable OpenSettings keybinding and proper serialization.",,,,True,False,False,1,0,1,1,tim@timheuer.com,msftbot[bot]@users.noreply.github.com,"06/12/2019, 12:21:44",2019,"06/12/2019, 12:21:44",2019,3,0,0,5.0,1.2,0
,"tools: add support for the -Prerelease VS locations (#1202)

take advantage of the switch parameter on the Cmdlet Get-VSSetupInstance from the vssetup module.",,,,False,False,False,4,2,1,1,b_r_w_@yahoo.com,duhowett@microsoft.com,"06/12/2019, 18:56:09",2019,"06/12/2019, 18:56:09",2019,4,0,0,3.3,1.0,0
,"Add an about dialog with the version number (#1196)

* Add an about dialog with the version number",,,,False,False,False,99,21,4,4,migrie@microsoft.com,noreply@github.com,"06/12/2019, 20:32:09",2019,"06/12/2019, 20:32:09",2019,4,2,2,4.1,2.0,0
,"Minor fixes to ConhostConnection and VTPipeTerm (#1218)

* Cascadia/TerminalConnection: Close the output thread on exit.
It seems that TerminateThread() is available in the code...

* VtPipeTerm: Don't crash when closing the app.

- Gracefully handle ReadFile returning false (usually because of ERROR_BROKEN_PIPE on exit).
- Minor whitespace formatting.

* Cascadia/TerminalConnection: Finish to implement the ConhostConnection::Close() 'TODO' block.",,,,True,True,False,13,8,2,1,hermes.belusca-maito@reactos.org,duhowett@microsoft.com,"06/13/2019, 00:10:13",2019,"06/13/2019, 00:10:13",2019,1,0,0,3.4,1.2,0
,"Show name on startmenu tile (#1257)

* show name on tiles

* Use short name

* Put string to resource

* Update src/cascadia/CascadiaPackage/Resources/en-US/Resources.resw

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,22,2,3,3,cody880528@hotmail.com,migrie@microsoft.com,"06/14/2019, 12:02:30",2019,"06/14/2019, 12:02:30",2019,3,0,2,4.6,1.0,0
,"split code format check into its own job (#1270)

* split code format check into its own job

* Update build/pipelines/templates/check-formatting.yml

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* fix result check",,,,True,True,False,23,7,5,5,austdi@microsoft.com,migrie@microsoft.com,"06/14/2019, 19:26:42",2019,"06/14/2019, 19:26:42",2019,4,0,2,3.8,1.2,0
,Ignore UTF-8 BOM (#1266),,,,False,False,False,10,1,1,1,cody880528@hotmail.com,migrie@microsoft.com,"06/14/2019, 19:29:40",2019,"06/14/2019, 19:29:40",2019,4,0,2,4.5,1.0,0
,"The InputStateMachine should dispatch Intermediate characters (#1267)

The OutputStateMachine needs to collect ""Intermediate"" characters to be able to call [`Designate G0 Character Set`](https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Controls-beginning-with-ESC) (as well as other sequences we don't yet support).

However, the InputStateMachine used by conpty to process input should _not_ collect these characters. The input engine uses `\x1b` as an indicator that a key was pressed with `Alt`. For keys like `/`, we want to dispatch the key immediately, instead of collecting it and leaving us in the Escape state.",,,,False,False,False,102,2,8,8,migrie@microsoft.com,noreply@github.com,"06/14/2019, 19:48:12",2019,"06/14/2019, 19:48:12",2019,4,2,2,4.9,2.5,0
,"Don't always send an uppercase letter for Alt+key (#1259)

* Don't always send an uppercase letter for Alt+key

  Fix #637.
  Also add a test.

* runformat

* Use `towlower` instead of just subtracting 32.",,,,True,False,False,80,2,3,3,migrie@microsoft.com,austdi@microsoft.com,"06/14/2019, 22:00:46",2019,"06/14/2019, 22:00:46",2019,4,2,0,4.9,1.8,0
,"Move build prerequisites into 'Developer Guidance' (right before building the code) (#1296)

This makes more sense, as you'd install the prerequisites as part of the build process.",,,,False,False,False,14,13,1,1,mike@certsimple.com,msftbot[bot]@users.noreply.github.com,"06/17/2019, 23:39:55",2019,"06/17/2019, 23:39:55",2019,4,1,0,2.6,1.0,0
,"Code highlighting and capitalization fix for doc/EXCEPTIONS.md (#1283)

* Mark NTSTATUS, HRESULT, and wil::unique_ptr as inline code snippets

* Change encapsulate on line 14 to lower case to be consistent with the other rules",,,,True,True,False,3,3,1,1,36966801+azhuologist@users.noreply.github.com,msftbot[bot]@users.noreply.github.com,"06/17/2019, 23:41:27",2019,"06/17/2019, 23:41:27",2019,4,0,0,2.5,1.2,0
,"Captured pointer for SwapChainPanel and ScrollBar separately (#1248)

* Captured pointer for SwapChainPanel and ScrollBar separately
Renamed MouseClickHandler and MouseMovedHandler to more generic names (since they handle touch events too)

Fixes #950.",,,,True,False,False,59,14,2,2,carlos.zamora@microsoft.com,duhowett@microsoft.com,"06/18/2019, 00:27:17",2019,"06/18/2019, 00:27:17",2019,1,0,0,4.0,1.8,0
,"Add profiles.json documentation (#883)

Co-Authored-By: Summon528 <cody880528@hotmail.com>
Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>",,,,False,False,False,74,0,1,1,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"06/18/2019, 00:52:00",2019,"06/18/2019, 00:52:00",2019,1,0,0,5.0,1.5,0
,"Integrate the new icon; license assets under CC BY-ND 4.0 (#1303)

This commit also relicense the conhost icon and the TrueType font indicator under CC BY-ND 4.0",,,,False,False,False,612,46,121,6,duhowett@microsoft.com,noreply@github.com,"06/18/2019, 02:34:27",2019,"06/18/2019, 02:34:27",2019,1,0,2,4.7,5.0,0
,"Bugfix: crash on copying resized selection (#1254)

* Fix copy on resize crash bug",,,,True,True,False,11,7,1,1,carlos.zamora@microsoft.com,noreply@github.com,"06/18/2019, 16:59:11",2019,"06/18/2019, 16:59:11",2019,3,0,2,3.1,1.2,0
,"Switch away from Windows.Storage.ApplicationData (#1293)

This commit drops all of the special packaged app code in
CascadiaSettingsSerialization. It can all be replaced with passing
KF_FLAG_FORCE_APP_DATA_REDIRECTION to SHGetKnownFolderPath, which will
automatically handle the different paths used in packaged context.

We'll still store profiles.json under %APPDATA%\Microsoft\Windows
Terminal in an unpackaged context.

I've also taken the liberty of fixing a settings reload crash. Using the
Application storage APIs would cause us to throw an exception when
profiles.json was deleted, which it absolutely was for certain editors
that do an atomic replace.

Because we're not using W.S.A any more, this cuts down our load time
significantly and fixes all of our known STA/MTA-on-startup issues.

Fixes #1102, #1292.",,,,True,False,False,45,156,4,4,duhowett@microsoft.com,noreply@github.com,"06/18/2019, 18:52:34",2019,"06/18/2019, 18:52:34",2019,4,0,2,1.1,3.0,0
,Update the package base version to 0.2 (#1306),,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"06/18/2019, 20:02:21",2019,"06/18/2019, 20:02:21",2019,4,0,2,2.5,1.0,0
,Selection for wide glyphs (#905),,,,False,False,False,344,164,5,5,carlos.zamora@microsoft.com,noreply@github.com,"06/18/2019, 22:53:29",2019,"06/18/2019, 22:53:29",2019,4,0,2,3.4,3.0,0
,fix this bug (#1326),,,,True,True,False,2,2,1,1,migrie@microsoft.com,msftbot[bot]@users.noreply.github.com,"06/19/2019, 17:46:13",2019,"06/19/2019, 17:46:13",2019,3,2,0,2.5,1.2,0
,"Bugfix: vertical selection out of bounds (#1317)

* Fix crash bug and acknowledge that getting cell data can cause a crash",,,,True,True,False,18,14,2,2,carlos.zamora@microsoft.com,duhowett@microsoft.com,"06/19/2019, 17:49:57",2019,"06/19/2019, 17:49:57",2019,3,0,0,2.8,1.2,0
,"Allow file modifications to quiet down before reloading settings (#1330)

This commit introduces a 50ms debounce so that we stop flapping around while text editors are making directory changes.

Fixes #1329.",,,,True,False,False,19,1,2,2,duhowett@microsoft.com,noreply@github.com,"06/19/2019, 19:51:59",2019,"06/19/2019, 19:51:59",2019,4,0,2,4.8,1.2,0
,"Workaround C++/WinRT's multi-level composition class refcount issue (#1342)

* Workaround C++/WinRT's multi-level composition class refcount issue

Fixes #1339.",,,,True,False,False,5,0,1,1,duhowett@microsoft.com,noreply@github.com,"06/20/2019, 18:10:49",2019,"06/20/2019, 18:10:49",2019,4,0,2,5.0,1.2,0
,"If we failed to get a default profile, fail the settings load (#1343)

This stops the crash in #1318.",,,,True,True,False,5,0,1,1,duhowett@microsoft.com,noreply@github.com,"06/20/2019, 18:20:49",2019,"06/20/2019, 18:20:49",2019,4,0,2,5.0,1.2,0
,"Merged PR 3412993: [Git2Git] Git Train: FI of official/rs_onecore_dep into official/rs_onecore_dep_acioss Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss 9638166d8c8374081a2aa8b8f9ecabf2bae0df0a

[Git2Git] Git Train: FI of official/rs_onecore_dep into official/rs_onecore_dep_acioss Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_acioss 9638166d8c8374081a2aa8b8f9ecabf2bae0df0a

Related work items: #18974333",,,,False,False,False,13,2,8,8,miniksa@microsoft.com,duhowett@microsoft.com,"06/21/2019, 00:48:20",2019,"06/21/2019, 00:48:20",2019,1,2,0,4.3,1.5,0
,"inbox: reflect incoming changes from Windows (#1359)

official/rs_onecore_dep_acioss 9638166d8c8374081a2aa8b8f9ecabf2bae0df0a",,,,False,False,False,13,2,8,8,duhowett@microsoft.com,noreply@github.com,"06/21/2019, 00:51:04",2019,"06/21/2019, 00:51:04",2019,1,0,2,4.3,1.5,0
,Update the to link to the public preview (#1374),,,,False,False,False,2,4,1,1,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"06/22/2019, 02:02:48",2019,"06/22/2019, 02:02:48",2019,1,0,0,1.7,1.0,0
,doc: Add ColorTool link to profiles.json documentation (#1396),,,,False,False,False,1,1,1,1,o.oldorf@monday-consulting.com,duhowett@microsoft.com,"06/23/2019, 01:18:14",2019,"06/23/2019, 01:18:14",2019,1,0,0,2.5,1.0,0
,"doc: fix some punctuation in README.md (#1512)

Typo fixes",,,,True,True,False,5,5,1,1,balkripra.1996@gmail.com,duhowett@microsoft.com,"06/24/2019, 16:12:10",2019,"06/24/2019, 16:12:10",2019,3,0,0,2.5,1.2,0
,Make the about dialog's contents selectable (#1452),,,,False,False,False,5,1,1,1,cody880528@hotmail.com,duhowett@microsoft.com,"06/24/2019, 16:13:11",2019,"06/24/2019, 16:13:11",2019,3,0,0,4.2,1.0,0
,"Set the default startup project (#1314)

Visual Studio defaults the startup project to the first project listed in the solution. Set the default to CascadiaPackage, which launches the packaged terminal. This required moving both its solution folder and the project itself to the top of the solution.

The other moves in the file is ""VS"" fixing the ordering based on the move. This prevents the solution from being automatically changed by VS when other folks open it.",,,,True,True,False,32,32,1,1,davkean@microsoft.com,duhowett@microsoft.com,"06/24/2019, 16:47:00",2019,"06/24/2019, 16:47:00",2019,3,0,0,2.5,1.8,0
,"Add a fallback to software rendering (#1263)

This commit enables a software rendering fallback for the DX renderer in the case that hardware acceleration fails. This is primarily useful for Hyper-V environments where hardware acceleration is not guaranteed to exist.

This will be useful for future work to enable the DX renderer to run on windows 7 since win7 virtual machines do not/cannot have hardware acceleration unlike windows 10 machines

This commit does two things:
- Fallback to `D3D_DRIVER_TYPE_WARP` if `D3D_DRIVER_TYPE_HARDWARE` fails.
- pass `NULL` as the adapter instead of creating the default adapter ourselves.",,,,True,True,False,27,18,2,2,daniel@griffen.io,duhowett@microsoft.com,"06/25/2019, 00:02:26",2019,"06/25/2019, 00:02:26",2019,1,0,0,3.0,1.2,0
,"Connect clipboard functionality to their keybindings (#1093)

* Connects clipboard functionality to their keybindings.

* Cleaning up comments and whitespace.

* Added ""copyTextWithoutNewlines"" keybinding.

* Fixing tabs in idl file

* Fixing merge conflicts

* Adding default keybindings for copy and paste to ctrl-shift-c and ctrl-shift-v, respectively.

* Complying with refactoring

* Fixing formatting issues",,,,True,True,True,45,9,9,9,david.bingham.brown@gmail.com,48369326+cinnamon-msft@users.noreply.github.com,"06/25/2019, 19:17:02",2019,"06/25/2019, 19:17:02",2019,4,0,0,4.3,2.4,0
,"Apply a GDI region to the top level Island window to allow dragging with a single Island (#929)

* Use a region to cut off the dragable region
* Use proper measurements for the draggable area
* Working better, paint works most of the time
* Fix a bug where paint is incomplete when double clicking the dragbar
* Remove old fork on XamlApplication
* Upgrade to XamlApp preview6.2
* Add Microsoft.VCRTForwarders to make it easy to dogfood

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>
Co-Authored-By: Mike Griese <migrie@microsoft.com>",,,,True,True,False,479,634,33,24,2091582+ocalvo@users.noreply.github.com,duhowett@microsoft.com,"06/25/2019, 20:06:11",2019,"06/25/2019, 20:06:11",2019,4,0,0,2.4,5.0,0
,"Add feature to ColorTool to write color scheme as JSON for Windows Terminal (issue #986) (#1052)

* Add a new console target that writes the color scheme to stdout in JSON format for copying into a Windows Terminal profiles.json file.

* Update src/tools/ColorTool/ColorTool/ConsoleTargets/TerminalSchemeConsoleTarget.cs

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Create a base class for scheme parsers for common code and helpers.  Fix string formatting according to review comments.",,,,True,False,False,123,22,8,8,49529467+djackman123@users.noreply.github.com,austdi@microsoft.com,"06/25/2019, 20:36:00",2019,"06/25/2019, 20:36:00",2019,4,0,0,4.2,3.0,0
,"move version to vs2019, the 1903 sdk, and the 14.2 build tools. (#1012)

* move version to vs2019, the 1903 sdk, and the 14.2 build tools.",,,,False,False,False,157,171,8,8,miniksa@microsoft.com,noreply@github.com,"06/26/2019, 21:13:32",2019,"06/26/2019, 21:13:32",2019,4,2,2,2.4,3.0,0
,"Fix a bug where Terminal may crash or hang at shutdown (#1651)

* Fix a bug where Terminal may crash at shutdown",,,,True,True,False,18,6,6,6,2091582+ocalvo@users.noreply.github.com,miniksa@microsoft.com,"06/26/2019, 22:15:01",2019,"06/26/2019, 22:15:01",2019,4,0,2,3.7,1.8,0
,"Disable the AppContainer bit on our C++/WinRT binaries (#1653)

Having the AppContainer bit enabled makes us fail the Windows App
Certification Kit test required to submit to the store.",,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"06/26/2019, 23:54:13",2019,"06/26/2019, 23:54:13",2019,4,0,2,5.0,1.0,0
,Update bot doc for In-PR label rule (#1678),,,,False,False,False,6,0,1,1,miniksa@microsoft.com,noreply@github.com,"06/27/2019, 19:47:11",2019,"06/27/2019, 19:47:11",2019,4,2,2,5.0,1.0,0
,"Fixed #521 - AltGr combinations not working (#1436)

This commit changes how TerminalControl/TerminalCore handle key events to give it better knowledge about modifier states at the lower levels.",,,,True,False,False,66,42,7,7,leonard@hecker.io,duhowett@microsoft.com,"06/27/2019, 23:20:55",2019,"06/27/2019, 23:20:55",2019,4,0,0,3.1,3.0,0
,"Update bot tag system enforcement

I added the new rule that `Resolution-Duplicate` doesn't require the other tags. This documents the change.",,,,False,False,False,1,0,1,1,miniksa@microsoft.com,noreply@github.com,"06/28/2019, 16:40:28",2019,"06/28/2019, 16:40:28",2019,3,2,2,5.0,1.0,0
,"App now initializes the connection instead of term control. (#1676)

* App now initializes the connection instead of term control.",,,,False,False,False,17,18,5,5,pankaj.d.bhoj@gmail.com,noreply@github.com,"06/28/2019, 17:55:46",2019,"06/28/2019, 17:55:46",2019,3,0,2,2.4,1.0,0
,"Spec for #1235 Azure Cloud Shell connector (#1624)

* Azure connector spec",,,,False,False,False,78,0,3,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"06/28/2019, 22:48:19",2019,"06/28/2019, 22:48:19",2019,4,0,2,5.0,1.5,0
,"Move to Microsoft.UI.Xaml 2.2.109211001-prerelease (#1707)

Fixes #1265.",,,,True,False,False,13,13,7,6,duhowett@microsoft.com,noreply@github.com,"06/29/2019, 01:03:43",2019,"06/29/2019, 01:03:43",2019,1,0,2,2.5,1.8,0
,Revoke old event handlers correctly on pane close (#1279),,,,False,False,False,9,4,1,1,peter@peterdn.com,duhowett@microsoft.com,"06/29/2019, 01:17:31",2019,"06/29/2019, 01:17:31",2019,1,0,0,3.5,1.0,0
,"Change Campbell's default foreground color (#1629)

Changed the foreground color from #F2F2F2 to #CCCCCC so that ESC[1m _actually_ brightens it.",,,,False,False,False,1,1,1,1,ryanbee@microsoft.com,duhowett@microsoft.com,"06/29/2019, 01:19:41",2019,"06/29/2019, 01:19:41",2019,1,0,0,2.5,1.2,0
,Replace caption buttons with ones that look close to correct (#1627),,,,False,False,False,167,6,2,2,duhowett@microsoft.com,noreply@github.com,"07/01/2019, 21:38:56",2019,"07/01/2019, 21:38:56",2019,4,0,2,4.8,2.0,0
,Update the title of the bug report template (#1767),,,,True,True,False,1,1,1,1,migrie@microsoft.com,duhowett@microsoft.com,"07/02/2019, 00:11:06",2019,"07/02/2019, 00:11:06",2019,1,2,0,2.5,1.2,0
,"Add support for setting a profile's tab title (#1358)

tab renaming functionality",,,,False,False,False,59,6,4,4,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"07/02/2019, 17:09:22",2019,"07/02/2019, 17:09:22",2019,3,0,2,4.5,1.5,0
,"Enable DECCOLM support via a private mode escape sequence (#1709)

* Implement XTerm's private mode escape sequence for enabling DECCOLM support.
* Add output engine and screen buffer units test for the private mode 40 escape sequence.",,,,False,False,False,188,9,7,7,j4_james@hotmail.com,miniksa@microsoft.com,"07/02/2019, 17:24:11",2019,"07/02/2019, 17:24:11",2019,3,0,2,4.8,2.5,0
,"#1536 - Feature Request - Duplicate tab (#1685)

* Implemented method to duplicate a tab
* Added event definitions for duplicating a tab with keyboard shortcut(CTRL + SHIFT + D)",,,,False,False,False,29,1,7,7,dnagl.dev@gmail.com,miniksa@microsoft.com,"07/02/2019, 17:45:51",2019,"07/02/2019, 17:45:51",2019,3,0,2,4.8,1.5,0
,"Support VT100 DECOM Origin Mode (#1331)

* Add support for origin mode (DECOM).
* Added a state machine unit test for the origin mode.
* Prevent the cursor position moving below the bottom margin of the scrolling region if the origin mode is relative.
* Only adjust the relative cursor position for origin mode if the scrolling region is actually set.
* Add some screenbuffer unit tests for the origin mode.
* Enhance the soft reset screenbuffer tests to verify the origin mode is reset.
* Move the origin mode flag constructor assignments into the intializer list.",,,,False,False,False,4048,3866,7,7,j4_james@hotmail.com,miniksa@microsoft.com,"07/02/2019, 18:17:04",2019,"07/02/2019, 18:17:04",2019,4,0,2,2.6,3.5,0
,"Updated link to docs (#1779)

The link to docs was pointing to issues. Set it to point to the root of the repo.",,,,False,False,False,1,1,1,1,chrhar@microsoft.com,migrie@microsoft.com,"07/02/2019, 19:08:17",2019,"07/02/2019, 19:08:17",2019,4,0,2,2.5,1.2,0
,Fix inaccurate Solarized palette (#1720),,,,True,True,False,5,5,1,1,hello@acotten.com,duhowett@microsoft.com,"07/02/2019, 19:24:07",2019,"07/02/2019, 19:24:07",2019,4,0,0,2.5,1.2,0
,"Stop crash on window snap by preventing torn device resources state  (#1768)

* Stop crash on window snap by preventing torn device resources state when quick on-the-fly resizing operations happen. #1572",,,,False,False,False,15,1,1,1,miniksa@microsoft.com,noreply@github.com,"07/02/2019, 19:51:28",2019,"07/02/2019, 19:51:28",2019,4,2,2,4.7,1.2,0
,"Propose banner at top of templates (#1687)

* Propose banner at top of issue templates

Getting tired of obvious low quality issues and I want to provide the warning that we may start closing things without further explanation as our volume is too high to deal with junk issues.

* Add bot rule information too.",,,,False,False,False,32,0,3,3,miniksa@microsoft.com,noreply@github.com,"07/03/2019, 18:44:37",2019,"07/03/2019, 18:44:37",2019,4,2,2,5.0,1.2,0
,Make padding applied as swap chain panel's margin (#1778),,,,False,False,False,4,4,1,1,cody880528@hotmail.com,miniksa@microsoft.com,"07/05/2019, 17:03:51",2019,"07/05/2019, 17:03:51",2019,3,0,2,2.5,1.0,0
,added default values to global and profiles (#1784),,,,False,False,False,33,33,1,1,48369326+cinnamon-msft@users.noreply.github.com,miniksa@microsoft.com,"07/05/2019, 17:04:14",2019,"07/05/2019, 17:04:14",2019,3,0,2,2.5,1.8,0
,"Fixed #1186, incorrect path was calculted when module already installed locally. (#1839)",,,,True,False,False,1,1,1,1,martinsgill@users.noreply.github.com,carlos.zamora@microsoft.com,"07/06/2019, 01:58:14",2019,"07/06/2019, 01:58:14",2019,1,0,0,2.5,1.2,0
,"The start of some User docs (#1577)

* Start User docs

* Fix typos

* Addded some more TODO

* Update doc/user-docs/index.md

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Update doc/user-docs/index.md

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Update doc/user-docs/index.md

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Update doc/user-docs/index.md

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* Updated from suggestions in the PR

* Improve path to profiles.json

* Added some details about Json settings

* Example Json settings, and a #TODO

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* Update doc/user-docs/index.md

Co-Authored-By: Kayla Cinnamon <48369326+cinnamon-msft@users.noreply.github.com>

* After review and make colour US.

1. Merged in comments from PR
2. Made colour color :-(
3. Other tidy ups

* Added more detais about background images

* Remove some TODO comments and minot tidy up

* Get rid of TODO

1. Some notes abouet cut and paste -- needs more work
2. Get rid of TODO -- replace with links to issues
3. Add some extra notes about URI for background images",,,,True,True,False,216,0,2,2,alecthegeek@users.noreply.github.com,48369326+cinnamon-msft@users.noreply.github.com,"07/08/2019, 18:17:19",2019,"07/08/2019, 18:17:19",2019,4,0,0,5.0,3.0,0
,"Make opening the settings file more robust (#1841)

* Make opening the settings file more robust

This fixes two issues.

 * Opens the assigned default application regardless of its configuration.
   Gvim for example only reacts to the ""edit"" verb so when selected as default application won't open.
   Using nullptr results in using the first specified application.
   This fixes #1789
 * If no application is assigned for json files fall back to notepad

 See https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea for more details
 especially why the result code checking is so horrific.

* Fix c-style cast",,,,True,False,False,6,1,1,1,mike@it-loops.com,migrie@microsoft.com,"07/09/2019, 12:29:44",2019,"07/09/2019, 12:29:44",2019,3,0,2,4.3,1.2,0
,"Added fontSize and acrylicOpacity changing tip (#1889)

* Added fontSize and acrylicOpacity changing tip

Added Terminal tip about changing the font size and acrylic opacity using keyboard shortcuts.

* Update index.md",,,,False,False,False,3,1,1,1,gautamnaik1994@gmail.com,carlos.zamora@microsoft.com,"07/09/2019, 19:19:06",2019,"07/09/2019, 19:19:06",2019,4,0,0,3.7,1.0,0
,Move most of TerminalApp's runtime Xaml to a .xaml file and class (#1885),,,,False,False,False,198,124,12,12,duhowett@microsoft.com,noreply@github.com,"07/09/2019, 21:47:30",2019,"07/09/2019, 21:47:30",2019,4,0,2,3.0,3.5,0
,"Enable resizing the panes with the keyboard. (#1207)


Adds the ability to resize panes with the keyboard. 

This is accomplished by making the Column/RowDefinitions for a Pane use `GridLengthHelper::FromPixels` to set their size. We store a pair of floats that represents the relative amount that each pane takes out of the parent pane. When the window is resized, we use that percentage to figure out the new size of each child in pixels, and manually size each column. 

Then, when the user presses the keybindings for resizePane{Left/Right/Up/Down}, we'll adjust those percentages, and resize the rows/cols as appropriate.

Currently, each pane adjusts the width/height by 5% of the total size at a time. I am not in love with this, but it works for now. I think when we get support for keybindings with arbitrary arg blobs, then we could do either a percent movement, or a number of characters at a time. The number of characters one would be trickier, because we'd have to get the focused control, and get the number of pixels per character, as adjacent panes might not have the same font sizes.",,,,False,False,False,465,20,13,13,migrie@microsoft.com,noreply@github.com,"07/10/2019, 13:27:12",2019,"07/10/2019, 13:27:12",2019,3,2,2,4.8,3.5,0
,"Added ""Vintage"" color scheme to defaults; fixes #1781 (#1901)

Testing done: All manual tests:
- Deleted profiles.json, started Terminal.
- Verified that the output ""Vintage"" color scheme existed.
- Verified that ""Vintage"" diffed equal to the ""Classic"" scheme
  in the issue, apart from the name and the addition of
  ""background"" and ""foreground"" colors, which I made equal
  to the ""black"" and ""white"" ones respectively.
- Verified that I could set a profile to use Vintage
  and that the colors changed accordingly.",,,,True,False,False,30,0,1,1,1039862+metathinker@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"07/10/2019, 13:52:23",2019,"07/10/2019, 13:52:23",2019,3,0,0,5.0,1.2,0
,bugfix: crash on selection on wide glyphs in scrollback buffer (#1879),,,,False,False,False,2,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"07/10/2019, 16:18:20",2019,"07/10/2019, 16:18:20",2019,3,0,2,2.5,1.2,0
,"Fix margin boundary tests in the RI, DL, and IL escape sequences. (#1807)

* Fix margin boundary tests in the RI, DL, and IL sequences.
* Refactor the margin boundary tests into a reusable SCREEN_INFORMATION method.
* Add screen buffer unit tests for the RI, DL, and IL sequences.",,,,True,True,True,252,11,4,4,j4_james@hotmail.com,miniksa@microsoft.com,"07/10/2019, 16:42:13",2019,"07/10/2019, 16:42:13",2019,3,0,2,4.8,3.0,0
,"Fixed DirectX RTL text issue where it'd be over other text / offscreen (#1873)

This is a partial fix of #538 . This does *not* change the Console RTL behavior, it does however fix an issue in the rendering. Basically, DirectX expects the origin to be on the right if it is going to draw RTL text. This PR is a simple fix for that. Rather than draw with the left point and then move the origin rightwards, we check if it's RTL, if so, we move the origin rightwards immediately, and then draw. LTR rendering is unchanged.
This doesn't fix underlying questions of RTL handling in the console. It's just a render bugfix. However, this render bugfix should still be a big help and solve the low-hanging issues.

## Validation Steps Performed
Behavior was tested. No changes were made to underlying console.
Three sample cases:
1. RTL text input
Before:
![image](https://user-images.githubusercontent.com/16987694/60816422-6737e100-a1a2-11e9-9e14-c62323fd5b02.png)
After:
![image](https://user-images.githubusercontent.com/16987694/60816395-5ab38880-a1a2-11e9-9f0a-17b03f8268ce.png)
2. Hebrew Output
Before (the Hebrew text is all being drawn to the left of the screen, hence the phantom text):
![image](https://user-images.githubusercontent.com/16987694/60816527-93ebf880-a1a2-11e9-9ba3-d3ebb46cc404.png)
After:
![image](https://user-images.githubusercontent.com/16987694/60816456-77e85700-a1a2-11e9-9783-9e69849f026d.png)
3. Mixed Output
So, this is where this is partial. Due to inherent stuff with RTL behavior, it doesn't look perfect. But the rendering itself is no longer at fault.
Before:
![image](https://user-images.githubusercontent.com/16987694/60816593-b5e57b00-a1a2-11e9-82be-0fcabb80f7d4.png)
After:
![image](https://user-images.githubusercontent.com/16987694/60816607-bb42c580-a1a2-11e9-849a-12846ec4d5c0.png)",,,,True,False,False,17,4,1,1,mosheschorr@yahoo.com,duhowett@microsoft.com,"07/10/2019, 18:27:36",2019,"07/10/2019, 18:27:36",2019,4,0,0,4.0,1.2,0
,"Merged PR 3490896: [Git2Git] Merged PR 3487659: [Git2Git] Merged PR 3487638: inbox: merge github changes up to 122f0de3

[Git2Git] Merged PR 3487659: [Git2Git] Merged PR 3487638: inbox: merge github changes up to 122f0de3

[Git2Git] Merged PR 3487638: inbox: merge github changes up to 122f0de3

Related work items: #22702360, #22702370, #22702376 Retrieved from https://microsoft.visualstudio.com OpenConsole Dart inbox 311175250fedd9824b7a83e26c4e823c9b196c39

Related work items: #22702360, #22702370, #22702376 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp aa5182a2b1dceefb61e09aad392aac0a56970d80

Related work items: #22702360, #22702370, #22702376",,,,False,False,False,19,95,19,19,miniksa@microsoft.com,duhowett@microsoft.com,"07/10/2019, 19:38:26",2019,"07/10/2019, 19:38:26",2019,4,2,0,0.8,3.0,0
,inbox: reflect incoming changes up to uxp aa5182a2 (#1916),,,,False,False,False,19,95,19,19,duhowett@microsoft.com,noreply@github.com,"07/10/2019, 19:40:51",2019,"07/10/2019, 19:40:51",2019,4,0,2,0.8,3.0,0
,Implement background image over acrylic or solid color (#1107),,,,False,False,False,34,56,2,2,cody880528@hotmail.com,duhowett@microsoft.com,"07/10/2019, 19:54:56",2019,"07/10/2019, 19:54:56",2019,4,0,0,1.9,1.5,0
,"Fix interpretation of DECSTBM margin parameters (#1881)

* Fix DECSTBM parameter interpretation to ignore invalid ranges, and clear the margins on all full screen ranges.

* Add additional scroll margin adapter tests to verify the parameter configurations that were previously incorrect.

* Fix scroll margin adapter tests that weren't actually verifying the conditions that they claimed to be testing.",,,,True,True,False,57,30,2,2,j4_james@hotmail.com,miniksa@microsoft.com,"07/10/2019, 22:41:16",2019,"07/10/2019, 22:41:16",2019,4,0,2,3.3,1.8,0
,"Obstruct the user when they try to run WT under WOW (#1648)

* Obstruct the user when they try to run under WOW

* Move strings to resource file, add comments to methods, remove extraneous wil include.

* remove excess newline

* output of formatter.",,,,False,False,False,128,8,4,4,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"07/11/2019, 17:23:23",2019,"07/11/2019, 17:23:23",2019,3,0,0,4.7,2.0,0
,"Fix wrong maximized window offset on non primary monitors (#1921)

The overhang of a maximized window is currently calculated with this:
```cpp
auto offset = 0;
if (rcMaximum.left == 0)
{
    offset = windowPos->x;
}
else if (rcMaximum.top == 0)
{
    offset = windowPos->y;
}
```

This always works on the primary monitor but on a non primary monitor, it isn't always the case that `left` or `top` can be 0. Examples are when you offset a monitor. In those cases, `offset` will be 0 and the window will be cut off.

Instead I've changed the calculation to calculate the width of the windows frame which is how much it would overhang. Admittedly, the old calculation could be kept and take into consideration the current monitor.",,,,True,True,False,13,21,1,1,dsafa@users.noreply.github.com,duhowett@microsoft.com,"07/11/2019, 17:59:19",2019,"07/11/2019, 17:59:19",2019,3,0,0,1.9,1.2,0
,"Set utf-8 for the entire project (#1929)

* Set utf-8 for the entire project.",,,,False,False,False,1,7,3,2,miniksa@microsoft.com,noreply@github.com,"07/11/2019, 20:13:10",2019,"07/11/2019, 20:13:10",2019,4,2,2,0.9,1.0,0
,"Added links to user docs inside About popup (#1887)

* added links into about section

* added resources and aka.ms links

* moved links to resources

* Move the feedback URI into the resources too!",,,,False,False,False,101,32,3,3,48369326+cinnamon-msft@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"07/11/2019, 21:01:46",2019,"07/11/2019, 21:01:46",2019,4,0,0,3.8,2.0,0
,"Allow the DX rendering engine to run on Windows 7 (#1274)

Certain DirectX features are unavailable on windows 7. The important ones as they are used in the DX renderer are color font rendering and fallback font support. Color fonts did not exist at all on windows 7 so running basic glyphrun rendering should work just fine.

Fallback font support was not exposed to the user in windows 7, making dealing with them difficult. Rather than try to get some workarounds to properly enable it I have opted to just conditionally disable the support on windows 7.",,,,False,False,False,53,33,5,5,daniel@griffen.io,duhowett@microsoft.com,"07/11/2019, 22:20:15",2019,"07/11/2019, 22:20:15",2019,4,0,0,3.1,1.5,0
,Update the README to clear out references to VS2017 (#1932),,,,False,False,False,4,4,1,1,duhowett@microsoft.com,noreply@github.com,"07/11/2019, 22:34:18",2019,"07/11/2019, 22:34:18",2019,4,0,2,2.5,1.0,0
,Double and Triple Click Selection (#1197),,,,False,False,False,252,10,13,13,carlos.zamora@microsoft.com,noreply@github.com,"07/11/2019, 23:06:18",2019,"07/11/2019, 23:06:18",2019,4,0,2,4.8,3.5,0
,"Fix the conhost command line not being properly escaped (#1815)

This commit re-escapes the path to conhost's subprocess before it launches it.",,,,True,True,False,96,3,2,2,6904176+fcharlie@users.noreply.github.com,duhowett@microsoft.com,"07/12/2019, 02:38:56",2019,"07/12/2019, 02:38:56",2019,1,0,0,4.8,1.8,0
,"Don't NCPAINT our window, PAINT our window (#1898)

* This definitely works for getting shadow, pointy corners back

  Don't do anything in NCPAINT. If you do, you have to do everything. But the
  whole point of DwmExtendFrameIntoClientArea is to let you paint the NC area in
  your normal paint. So just do that dummy.

  * This doesn't transition across monitors.
  * This has a window style change I think is wrong.
  * I'm not sure the margins change is important.

* The window style was _not_ important

* Still getting a black xaml islands area (the HRGN) when we switch to high DPI

* I don't know if this affects anything.

* heyo this works.

  I'm not entirely sure why. But if we only update the titlebar drag region when
  that actually changes, it's a _lot_ smoother. I'm not super happy with the
  duplicated work in _UpdateDragRegion and OnSize, but checking this in in case
  I can't figure that out.

* Add more comments and cleanup

* Some PR nits, fix the titlebar painting on maximize",,,,True,True,False,85,21,3,3,migrie@microsoft.com,noreply@github.com,"07/12/2019, 19:46:27",2019,"07/12/2019, 19:46:27",2019,4,2,2,4.2,2.4,0
,"Style the button and tab view background to match the titlebar (#1934)

* styled title bar to be one color, shrunk + button",,,,False,False,False,14,6,2,2,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"07/12/2019, 22:07:04",2019,"07/12/2019, 22:07:03",2019,4,0,0,3.5,1.0,-1
,"Force the use of v2 (non-legacy) conhost when in ConPTY mode (#1935)

Fixes #1838.",,,,True,False,False,16,4,1,1,duhowett@microsoft.com,noreply@github.com,"07/12/2019, 22:20:45",2019,"07/12/2019, 22:20:45",2019,4,0,2,4.0,1.2,0
,"Fix the WAP packaging project (#1900)

* Fix the WAP packaging project

This commits fixes the centennial package by:
* Forcing XBF (XAML binary format) files to be embedded in project
  PRI files.
* Moving package content generation to before PRI generation
* Collecting all of the package's PRI files to merge into resources.pri
* Fixing the hardcoded resource paths to reflect the new reality.

It also includes a magic value that fixes the bug where the project is
autodetected as a Mixed (CLR + Native) project.

Fixes #1816.",,,,True,False,False,54,31,5,5,duhowett@microsoft.com,noreply@github.com,"07/12/2019, 22:21:45",2019,"07/12/2019, 22:21:45",2019,4,0,2,3.2,1.8,0
,"Host our own NuGet feed for packages that we need that aren't elsewhere yet (#1951)

* Stop hosting packages inside of here. Put them on a blob storage account instead.",,,,False,False,False,4,8,3,1,miniksa@microsoft.com,duhowett@microsoft.com,"07/12/2019, 22:22:03",2019,"07/12/2019, 22:22:03",2019,4,2,0,2.4,1.0,0
,user docs: Fix the capitalization on “Color Schemes” (#1953),,,,True,True,False,1,1,1,1,1175143532@qq.com,duhowett@microsoft.com,"07/13/2019, 18:17:11",2019,"07/13/2019, 18:17:11",2019,4,0,0,2.5,1.2,0
,"Refactor TerminalApp and Add Tests for Xaml Content (#1164)

* Refactors TerminalApp into two projects: 
  - TerminalAppLib, which builds a .lib, and includes all the code
  - TerminalApp, which builds a dll by linking the lib
* Adds a TerminalApp.Unit.Tests project
  - Includes the ability to test cppwinrt types we've authored using a SxS manifest for unpackaged winrt activation
  - includes the ability to test types with XAML content using an appxmanifest
* Adds a giant doc explaining how this was all done. Really, just go read that doc, it'll really help you understand what's going on in this PR.

-------------------------
These are some previous commit messages. They may be helpful to future readers.

* Start adding unittests for json parsing, end up creating a TerminalAppLib project to make a lib. See #1042

* VS automatically did this for me

* This is a dead end

  I tried including the idl-y things into the lib, but that way leads insanity

  If you want to make a StaticLibrary, then suddenly the winrt toolchain forgets
  that ProjectReferences can have winmd's in them, so it won't be able to
  compile any types from the referenced projects. If you instead try to manually
  reference the types, you'll get duplicate types up the wazoo, which of course
  is insane, since we're referencing them the _one_ time

* Yea just follow #1042 on github for status

  So current state:

  1. If you try to add a `Reference` to all of MUX.Markup, TerminalControl and
     TerminalSettings, then mdmerge will complain about all   the types from
     TerminalSettings being defined twice. In this magic scenario, the
     dependencies of TerminalControl are used directly   for some reason:

```
  12>    Load input metadata file ...OpenConsole\x64\Debug\TerminalSettings\Microsoft.Terminal.Settings.winmd.
  12>    Load input metadata file ...OpenConsole\x64\Debug\TerminalControl\Microsoft.Terminal.Settings.winmd.
  12>    Load input metadata file ...OpenConsole\x64\Debug\TerminalControl\Microsoft.Terminal.TerminalConnection.winmd.
  12>    Load input metadata file ...OpenConsole\x64\Debug\TerminalControl\Microsoft.Terminal.TerminalControl.winmd.
  12>    Load input metadata file ...OpenConsole\x64\Debug\Microsoft.UI.Xaml.Markup\Microsoft.UI.Xaml.Markup.winmd.
```

  2. If you don't add a `Reference` TerminalControl, then it'll complain about
     being unable to find the type TitleChangedEventArgs,   which is defined in
     TerminalControl.

  3. If you don't add a `Reference` TerminalSettings, then it'll complain about
     being unable to find the type KeyChord and other   types from
     TerminalSettings. In this scenario, it doesn't recurse on the other
     dependencies from TerminalControl for whatever   reason.

  4. If you instead try to add all 3 as a `ProjectReference`, then it'll
     complain about being unable to find TitleChangedEventArgs,   as in 2.
     Presumably, it;ll have troubles with the other types too, as none of the 3
     are actually included in the midlrt.rsp file.

  5. If you add all 3 as a `ProjectReference`, then also add TerminalControl as
     a `Reference`, you'll get a `MIDL2011: [msg]  unresolved type declaration
     Microsoft.UI.Xaml.Markup.XamlApplication`

  6. If you add all 3 as a `ProjectReference`, then also add TerminalControl AND
     MUX.Markup as a `Reference`, you'll get the same   result as 3.

* what if we just don't idl

  This seems to compile

* This compiles but I broke the MUX resources

  look at the App.xaml change. in this changelist. That's what's broken right now. Lets fix that!

* lets do this

    If I leave the MUX nuget out of the project, I'll get a compile error in
    App.xaml:

    ```
    ...OpenConsole\src\cascadia\TerminalApp\App.xaml(21,40): XamlCompiler error WMC0001: Unknown type 'XamlControlsResources' in XML namespace 'using:Microsoft.UI.Xaml.Controls'
    ```

    If I add it back to the project, it works

* Some cleanup from the previous commit

* This is busted again.

  Doing a clean build didn't work.

    A clean rebuild of the project, paired with some removal of dead code
    revealed a problem with what I have so far.

    TerminalAppLib depends on the generation of two headers,
    `AppKeyBindings.g.h` and `App.g.h`, as those define some of bits of the
    winrt types. They're needed to be able to compile the implementations.
    Presumably that's not getting generated by the lib project, because the dll
    project is the one to generate that file.

    So we need to move the idl's to the lib project. This created maddness,
    because of course the Duplicate Type thing. The solution to that is to
    actually mark the winrt DLLs that we're chaining up through us as

    ```
        <Private>false</Private>
        <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>
    ```

    This will prevent them from getting double-included.

    This still doesn't work however, since
    ```
    app.cpp(40): error C2039: 'XamlMetaDataProvider': is not a member of 'winrt::TerminalApp'
    error C3861: 'XamlMetaDataProvider': identifier not found
    ```

    So we need to figure that out. The dll project is still generating the right
    header, so lets look there.

* Move the xaml stuff to the lib

  This compiles, but when we launch, we fail to load the tabviewcontrol
  resources again. So that's not what you want. Why is it not included?

* It works again!

  * Use the pri, xbf files from TerminalAppLib, not TerminalApp
  * Manually make TerminalApp include a reference to TerminalAppLib's
    TerminalApp.winmd. This will force the build to copy TerminalApp.winmd to
    TerminalApp/, which WindowsTerminal needs to be able to ProjectReference the
    TerminalApp project (it's expecting it to have a winmd)
  * Remove the module.g.cpp from TerminalApp, and move to TerminalAppLib. The
    dll doesn't do any codegen anymore.

* Agressively clean up these files

* Clean up unnecessary includes in the dll pch.h

* This does NOT work.

  The WindowsxamlManager call crashes. I'm thinking it has to do with activation
  of winrt types from a dll.

  Email out to @Austin-Lamb to see if he can assist

* This gets our cppwinrt types working, but xaml islands is still broken

* Split the tests apart, so they aren't insane

* These are the magic words to make xaml islands work

* All this witchcraft is necessary to make XAML+MUX work right

* Clean this up a bit and add comments

* Create an enormous doc explaining this madness

* Unsure how this got changed.

* Trying to get the CI build to work again.

  This resolves the MUX issue. We need to manually include it, because their package's target doesn't mark it as CopyLocalSatelliteAssemblies=false, Private=false.

  However, the TerminalApp project is still able to magically reason that the TerminalAppLib project should be included in the MdMerge step, because it think's it's a `GetCppWinRTStaticProjectReferences` reference.

* Update cppwinrt to the latest version - this fixes the MSBuild

  * I still need to re-add the KeyModifiers checks from TermControl. I think
    this update broke `operator&` for that enum.
  * There needs to be some cleanup obviously
  * The doc should be updated as well

* Clean up changes from cppwinrt update

* Try doing this, even though it seems wrong

* Lets try this (press x to doubt)

* Clean up vcxproj file, and remove appxmanifest change from previous commit

* Update to the latest TAEF release, maybe that'll work

* Let's try a prerelease version, shall we?

* Add notes about TAEF package, comment out tests

* Format the code

* Hopefully fix the arm64 and x86 builds

  also a typo

* Fix PR nits

* Fix some bad merge conflicts

* Some cleanup from the merge

* Well I was close to getting the merge right

* I believe this will fix CI

* Apply suggestions from code review

Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>

* These definitely need to be fixed

* Try version detecting in the test

  IDK if this will build, I'm letting the CI try while I clean rebuild locally

* Try blindly updating to the newest nuget version

* Revert ""Try blindly updating to the newest nuget version""

This reverts commit b72bd9eb73cca9c3a9887e4d7a67ec2696dc6dba.

* We're just going to see if these work in CI with this change

* Comment the tests back out. Windows Server 2019 is 10.0.17763.557

* Remove the nuget package

  We don't need this package anymore now that we're hosting it

* Okay this _was_ important",,,,True,False,True,1939,345,38,33,migrie@microsoft.com,noreply@github.com,"07/15/2019, 19:27:56",2019,"07/15/2019, 19:27:56",2019,4,2,2,4.4,5.0,0
,"Add a ControlKeyStates wrapper class (#1718)

* Fixed a minor build warning
* Removed an unimplemented method declaration
* Added Microsoft::Terminal::Core::ControlKeyStates
// This class will act as a safe wrapper for the ControlKeyState enum,
// found in the NT console subsystem (<um/wincon.h>).",,,,True,True,False,162,45,9,9,leonard@hecker.io,miniksa@microsoft.com,"07/16/2019, 18:09:29",2019,"07/16/2019, 18:09:29",2019,4,0,2,3.9,3.6,0
,"Fix for UTF-8 partials in function `ConhostConnection::_OutputThread`. (#1850)

* Fix for UTF-8 partials in functions `ConhostConnection::_OutputThread` and `ApiRoutines::WriteConsoleOutputCharacterAImpl`

The implementation needs to check whether or not the buffer ends with a partial character. If so, only convert the code points which are complete, and save the partial code units in a cache that gets prepended to the next chunk of text.

* Utf8OutPipeReader class added
* Unit Test added
* use specific macros and WIL classes
* avoid possible deadlock caused by unclosed pipe handle",,,,True,True,False,325,18,7,4,46659645+german-one@users.noreply.github.com,miniksa@microsoft.com,"07/16/2019, 18:14:07",2019,"07/16/2019, 18:14:07",2019,4,0,2,4.8,3.6,0
,Mark ESC as handled so that it doesn't come back in CharacterHandler (#1974),,,,False,False,False,9,0,2,2,dustin@howett.net,duhowett@microsoft.com,"07/16/2019, 20:56:46",2019,"07/16/2019, 20:56:46",2019,4,0,0,5.0,1.0,0
,"Add support for moving focus between panes with the keyboard (#1910)

Enables the user to set keybindings to move focus between panes with the keyboard. 
This is highly based off the work done for resizing panes. Same logic applies - 
  moving focus will move up the panes tree until we find a pane to move the focus to.",,,,False,False,False,150,3,10,10,migrie@microsoft.com,noreply@github.com,"07/17/2019, 14:30:15",2019,"07/17/2019, 14:30:15",2019,3,2,2,4.9,2.5,0
,"Roll up WindowsTerminal's subprojects into packaging outputs (#2007)

This commit introduces a GetPackagingOutputs override to WindowsTerminal that
rolls up its child projects' outputs.

It also introduces an atrocity that fixes a new regression in VS 16.2/16.3.",,,,True,True,False,55,0,2,2,duhowett@microsoft.com,noreply@github.com,"07/17/2019, 21:02:20",2019,"07/17/2019, 21:02:20",2019,4,0,2,5.0,1.8,0
,"Fix the static UTF8OutPipeReader & tests (#1998)

This commit addresses some lingering issues in UTF8OutPipeReader and cleans up its termination logic. It also fixes some issues exposed in the test.

Fixes #1997.",,,,True,False,False,43,21,4,1,duhowett@microsoft.com,noreply@github.com,"07/17/2019, 23:27:09",2019,"07/17/2019, 23:27:09",2019,4,0,2,3.3,1.8,0
,"Fix test runner commands (runut.cmd and friends; Invoke-OpenConsoleTests) (#2020)

In commit 0905140955f5d431753739312982c1d6a42d9538 (PR #1164),
we updated the version of the Taef.Redist.Wlk NuGet package
for the TAEF test harness and framework. However, the helper commands
to run the various test cases hard-code the path to the TAEF executable,
which because of NuGet's design includes the TAEF NuGet package version.
These commands weren't updated to reflect the new TAEF version
and so have been broken since then.

This commit fixes the issue and makes running tests possible again.",,,,True,True,False,2,2,2,2,1039862+metathinker@users.noreply.github.com,carlos.zamora@microsoft.com,"07/18/2019, 16:31:25",2019,"07/18/2019, 16:31:25",2019,3,0,0,2.5,1.2,0
,"Roll up dependencies through TerminalApp so the package is right (#2018)

This commit includes a script and build step to make sure the MSIX doesn't continue to regress",,,,False,False,False,92,59,4,4,duhowett@microsoft.com,noreply@github.com,"07/18/2019, 18:23:34",2019,"07/18/2019, 18:23:34",2019,4,0,2,3.0,2.0,0
,"Enable dragging with the entire titlebar (#1948)

* This definitely works for getting shadow, pointy corners back

  Don't do anything in NCPAINT. If you do, you have to do everything. But the
  whole point of DwmExtendFrameIntoClientArea is to let you paint the NC area in
  your normal paint. So just do that dummy.

  * This doesn't transition across monitors.
  * This has a window style change I think is wrong.
  * I'm not sure the margins change is important.

* The window style was _not_ important

* Still getting a black xaml islands area (the HRGN) when we switch to high DPI

* I don't know if this affects anything.

* heyo this works.

  I'm not entirely sure why. But if we only update the titlebar drag region when
  that actually changes, it's a _lot_ smoother. I'm not super happy with the
  duplicated work in _UpdateDragRegion and OnSize, but checking this in in case
  I can't figure that out.

* Add more comments and cleanup

* Try making the button RightCustomContent

* * Make the MinMaxClose's drag bar's min size the same as a caption button
* Make the new tab button transparent, to see how that looks
* Make sure the TabView doesn't push the MMC off the window

* Create a TitlebarControl

  * The TitlebarControl is owned by the NCIW. It consists of a Content, DragBar,
    and MMCControl.
  * The App instatntiates a TabRowControl at runtime, and either places it in
    the UI (for tabs below titlebar) or hangs on to it, and gives it to the NCIW
    when the NCIW creates its UI.
  * When the NCIW is created, it creates a grid with two rows, one for the
    titlebar and one for the app content.
  * The MMCControl is only responsible for Min Max Close now, and is closer to
    the window implementation.
  * The drag bar takes up all the space from the right of the TabRow to the left
    of the MMC
  * Things that **DON'T** work:
    - When you add tabs, the drag bar doesn't update it's size. It only updates
      OnSize
    - The MMCControl's Min and Max buttons don't seem to work anymore.
      - They should probably just expose their OnMinimizeClick and
        OnMaximizeClick events for the Titlebar to handle minimizing and
        maximizing.
    - The drag bar is Magenta (#ff00ff) currently.
    - I'm not _sure_ we need a TabRowControl. We could probably get away with
      removing it from the UI tree, I was just being dumb before.

* Fix the MMC buttons not working

  I forgot to plumb the window handle through

* Make the titlebar less magenta

* Resize the drag region as we add/remove tabs

* Move the actual MMC handling to the TitlebarControl

* Some PR nits, fix the titlebar painting on maximize

* Put the TabRow in our XAML

* Remove dead code in preparation for review

* Horrifyingly try Gdi Plus as a solution, that is _wrong_ though

* Revert ""Horrifyingly try Gdi Plus as a solution, that is _wrong_ though""

This reverts commit e038b5d9216c6710c2a7f81840d76f8130cd73b8.

* This fixes the bottom border but breaks the titlebar painting

* Fix the NC bottom border

* A bunch of the more minor PR nits

* Add a MinimizeClick event to the MMCControl

  This works for Minimize. This is what I wanted to do originally.

* Add events for _all_ of the buttons, not just the Minimize btn

* Change hoe setting the titlebar content works

  Now the app triggers a callcack on the host to set the content, instead of the host querying the app.

* Move the tab row to the bottom of it's available space

* Fix the theme reloading

* PR nits from @miniksa

* Update src/cascadia/WindowsTerminal/NonClientIslandWindow.cpp

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* This needed to be fixed, was missed in other PR nits

* runformat

  wait _what_

* Does this fix the CI build?",,,,True,True,False,608,188,27,27,migrie@microsoft.com,noreply@github.com,"07/18/2019, 22:21:33",2019,"07/18/2019, 22:21:33",2019,4,2,2,3.8,5.0,0
,"Add a keybinding for ClosePane (#2012)

Closes #993
  When the last pane in a tab is closed, the tab will close.
  Bound to Ctrl+Shift+W by default. See #1417 for discussion on the default
  keybindings. The Ctrl+W->CloseTab keybinding is being removed in favor of
  ClosePane.",,,,False,False,False,55,2,11,11,migrie@microsoft.com,carlos.zamora@microsoft.com,"07/19/2019, 00:23:40",2019,"07/19/2019, 00:23:40",2019,1,2,0,4.8,3.0,0
,"Changes link to go to latest ColorTool release (#2027)

Since ColorTool shares the same Release page as Windows Terminal, it is more difficult to navigate to it. So whenever ColorTool is updated with a new release, we will update the link to the latest release. The link I changed to is the latest available from April 2019.",,,,False,False,False,1,1,1,1,33032910+wsluser@users.noreply.github.com,duhowett@microsoft.com,"07/19/2019, 19:11:58",2019,"07/19/2019, 19:11:58",2019,4,0,0,2.5,1.0,0
,"Fix conhost.exe detect os version (#2059)

* add openconsole.exe.manifest to fix detecting of os version",,,,True,True,False,48,1,2,2,6904176+fcharlie@users.noreply.github.com,miniksa@microsoft.com,"07/23/2019, 00:49:35",2019,"07/23/2019, 00:49:35",2019,1,0,2,4.9,1.2,0
,"Automatically generate an SxS manifest for WindowsTerminal's winmds (#2043)

Fixes #1987.",,,,True,False,False,43,118,3,3,duhowett@microsoft.com,miniksa@microsoft.com,"07/23/2019, 00:51:37",2019,"07/23/2019, 00:51:37",2019,1,0,2,1.3,2.4,0
,"Change some default keybindings (#2014)

Closes #1417.

  Changes New Tab to Ctrl+Shift+t (from Ctrl+t)
  Changes SwitchToTabN to Ctrl+Alt+<number> (from Alt+<number>)",,,,False,False,False,11,13,1,1,migrie@microsoft.com,miniksa@microsoft.com,"07/23/2019, 00:53:10",2019,"07/23/2019, 00:53:10",2019,1,2,2,2.3,1.2,0
,"Move TerminalApp's resources into the TerminalApp project (#1972)

* Move TerminalApp's resources into the TerminalApp project

This commit also introduces a scoped resource accessor, lightly taken
from microsoft-ui-xaml. It also moves all static UI strings out of
App.cpp and into localizable resources.

Fixes #792.",,,,True,False,False,251,65,8,7,duhowett@microsoft.com,noreply@github.com,"07/23/2019, 18:29:38",2019,"07/23/2019, 18:29:38",2019,4,0,2,3.5,3.6,0
,"Allow the mapping of OEM keys ({}|\<>/_-=+) in key bindings (#2067)

This commit introduces support for key bindings containing keys
traditionally classified as ""OEM"" keys. It uses VkKeyScanW and
MapVirtualKeyW, and translates the modifiers that come out of
VkKeyScanW to key chord modifiers.

The net result of this is that you can use bindings like ""ctrl+|"" in
your settings. That one in particular will be reserialized (and
displayed in any menus) as ""ctrl+shift+\"". Admittedly, this is not
clear, but it _is_ the truest representation of the key.

This commit also moves the Xaml key chord name override generator into
App as a static function, *AND* it forces its use for all modifier
names. This will present a localization issue, which will be helped in
part by #1972. This is required to work around
microsoft/microsoft-ui-xaml#708. I've kept the original code around
guarded by a puzzling ifdef, because it absolutely has value.

Fixes #1212.",,,,True,False,False,65,45,4,4,duhowett@microsoft.com,noreply@github.com,"07/23/2019, 21:05:07",2019,"07/23/2019, 21:05:07",2019,4,0,2,3.0,2.4,0
,"TAKE ME TO THE DOWNLOADS (#2070)

* TAKE ME TO THE DOWNLOADS
* Update README.md
Added store badge and reader and alternate release suggestion",,,,False,False,False,8,1,1,1,scott@hanselman.com,miniksa@microsoft.com,"07/24/2019, 16:31:56",2019,"07/24/2019, 16:31:56",2019,3,0,2,4.4,1.0,0
,"Scroll from selection dragging out of window (#1247) (#1523)

* Scroll from selection dragging out of window
* Review changes, dynamic dt measurement, function separation",,,,False,False,False,176,9,2,2,38111589+mcpiroman@users.noreply.github.com,miniksa@microsoft.com,"07/24/2019, 16:37:17",2019,"07/24/2019, 16:37:17",2019,3,0,2,4.8,2.0,0
,"Switch away from OS version detection for DirectWrite things (#2065)

* If IDWriteTextFormat1 does not exist, return directly
* We use DXGI_SCALING_NONE create SwapChain first, if failed switch to DXGI_SCALING_STRETCH

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>
Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,True,True,False,26,26,3,3,6904176+fcharlie@users.noreply.github.com,duhowett@microsoft.com,"07/24/2019, 16:57:13",2019,"07/24/2019, 16:57:13",2019,3,0,0,2.5,1.8,0
,"Doc of stuff I've explained. (#1942)

* Doc of stuff I've explained.

* add a few more

* archive fulltext of comments and link back to originals, attempt to make relative anchor links for jumping.",,,,False,False,False,147,0,1,1,miniksa@microsoft.com,noreply@github.com,"07/24/2019, 21:10:33",2019,"07/24/2019, 21:10:33",2019,4,2,2,5.0,2.0,0
,"Add support for background image alignment (as one setting) (#1959)

* Implement base background image alignment settings

TerminalSettings now has two new properties:
* BackgroundImageHorizontalAlignment
* BackgroundImageVerticalAlignment

These properties are used in TermControl::_InitializeBackgroundBrush to specify the alignment for TermControl::_bgImageLayer.

This is a base commit that will split into two possible branches:
* Use one setting in profiles.json: ""backgroundImageAlignment""
* Use two settings in profiles.json: ""backgroundImageHorizontal/VerticalAlignment""

* Implement background image alignment profile setting

Implement background image alignment as one profile setting.
* This has the benefit of acting as a single setting when the user would likely want to change both horizontal and vertical alignment.
* HorizontalAlignment and VerticalAlignment are still stored as a tuple in Profile because they are an optional field. And thus, it would not make sense for one of the alignments to be left unused while the other is not.
* Cons are that the tuple signature is quite long, but it is only used in a small number of locations. The Serialize method is also a little mishapen with the nested switch statements. Empty lines have been added between base-level cases to improve readability.

* Fix capitalization typo for BackgroundImageStretchModeKey

In Profiles.cpp, the key for the image stretch mode json property had a lowercase 'i' in ""Backgroundimage"", not following proper UpperCamelCase.
The ""i"" has been capitalized and the two usages of the constant have been updated as well.

* Document Background Image settings

* Adds entries SettingsSchema.md for the original 3 backgroundImage settings in addition to the new backgroundImageAlignment setting.

* Fix setting capitalization error in UsingJsonSettings.md

* The background image example in UsingJsonSettings.md listing a backgroundImageStretchMode of ""Fill"" has been corrected to ""fill"".


Fixes #1949.",,,,True,False,False,183,8,8,8,jrob800@gmail.com,duhowett@microsoft.com,"07/25/2019, 04:47:06",2019,"07/25/2019, 04:47:06",2019,1,0,0,4.8,3.0,0
,"Fix a couple of the DEC Special Graphics characters (#2081)

* Map the code point 0x5F to a blank glyph in the Special Graphics character set.

* Map code point 0x60 in the Special Graphics character set to the Unicode ""black diamond suite"", rather than the ""black diamond"", since the latter is currently rendered as a double width glyph.

* Correct a couple of the comments on the Special Graphics translation table to match the DEC documentation.

* Make hex values consistently lowercase for the Unicode characters in the Special Graphics translation table.",,,,True,True,False,14,14,1,1,j4_james@hotmail.com,duhowett@microsoft.com,"07/25/2019, 04:55:59",2019,"07/25/2019, 04:55:59",2019,1,0,0,2.5,1.2,0
,The spice must flow. (#2096),,,,False,False,False,5,3,1,1,miniksa@microsoft.com,noreply@github.com,"07/25/2019, 17:44:12",2019,"07/25/2019, 17:44:12",2019,3,2,2,3.1,1.0,0
,"Allow empty strings and env vars in profile ""icon"" settings - fixes #1468, #1867 (#2050)

First, I tried reusing the existing ExpandEnvironmentVariableStrings()
helper in TerminalApp/CascadiaSettings.cpp, but then I realized that
WIL already provides its own wrapper for ExpandEnvironmentStrings(),
so instead I deleted ExpandEnvironmentVariableStrings() and replaced
its usages with wil::ExpandEnvironmentStringsW().

I then used wil::ExpandEnvironmentStringsW() when resolving the
icon path as well. In addition, to allow empty strings,
I made changes to treat empty strings for ""icon"" the same
as JSON `null` or not setting the property at all.

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>",,,,True,False,False,7,144,6,6,1039862+metathinker@users.noreply.github.com,duhowett@microsoft.com,"07/25/2019, 17:44:58",2019,"07/25/2019, 17:44:58",2019,3,0,0,0.2,3.0,0
,"(GH-2044) Updated readme to include Chocolatey package (#2084)

* (GH-2044) Updated readme to include Chocolatey package
Co-Authored-By: Mike Griese <migrie@microsoft.com>",,,,False,False,False,17,0,1,1,maurice@kevenaar.name,miniksa@microsoft.com,"07/25/2019, 17:50:57",2019,"07/25/2019, 17:50:57",2019,3,0,2,5.0,1.0,0
,Fixes #2090 (#2094),,,,True,False,False,6,6,1,1,migrie@microsoft.com,miniksa@microsoft.com,"07/25/2019, 18:01:03",2019,"07/25/2019, 18:01:03",2019,4,2,2,2.5,1.2,0
,"Make sure to apply the theme on load of the application (#2107)

Fixes #1913.

  _AplyTheme raises an event for the IslandWindow to handle and actually apply
  the theme, so we don't _really_ need to worry about it, but we do need to
  worry for ContentDialogs.",,,,True,False,False,7,1,1,1,migrie@microsoft.com,miniksa@microsoft.com,"07/25/2019, 20:25:38",2019,"07/25/2019, 20:25:38",2019,4,2,2,4.4,1.2,0
,"The Azure cloud shell connector  (#1808)

* We can now connect to the Azure cloud shell #1235",,,,False,False,False,1189,32,24,20,t-pabhoj@microsoft.com,noreply@github.com,"07/25/2019, 20:31:41",2019,"07/25/2019, 20:31:41",2019,4,0,2,4.9,4.0,0
,"Initializes conhost's Campbell color scheme in conhost order instead of ANSI/VT order (#1237)

* Fix this

* Swap the elements instead of having two whole tables

* Add a unittest to make @miniksa happy",,,,True,True,False,92,27,4,4,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"07/25/2019, 22:03:00",2019,"07/25/2019, 22:03:00",2019,4,2,0,3.9,2.4,0
,shrunk + icon (#2109),,,,False,False,False,2,2,1,1,48369326+cinnamon-msft@users.noreply.github.com,migrie@microsoft.com,"07/26/2019, 12:06:28",2019,"07/26/2019, 12:06:28",2019,3,0,2,2.5,1.0,0
,Set Starting Directory for WSL profile (#2033),,,,False,False,False,1,0,1,1,sads@live.com,carlos.zamora@microsoft.com,"07/26/2019, 16:02:07",2019,"07/26/2019, 16:02:07",2019,3,0,0,5.0,1.0,0
,"If a profile did not have a GUID, generate one (#2117)

Fixes #2108
  Adds tests too!",,,,True,False,False,85,0,2,2,migrie@microsoft.com,noreply@github.com,"07/26/2019, 16:11:26",2019,"07/26/2019, 16:11:26",2019,3,2,2,5.0,1.8,0
,"Prevent a crash on resizing too small caused by the Titlebar (#2118)

Only set the MaxWidth of the TitlebarControl's Content when the value is
  positive. Any smaller will crash the app.",,,,False,False,False,8,2,1,1,migrie@microsoft.com,noreply@github.com,"07/26/2019, 16:16:13",2019,"07/26/2019, 16:16:13",2019,3,2,2,4.0,1.2,0
,"Change ""Summary""->""Description"" (#2115)",,,,False,False,False,1,1,1,1,migrie@microsoft.com,noreply@github.com,"07/26/2019, 16:16:53",2019,"07/26/2019, 16:16:53",2019,3,2,2,2.5,1.0,0
,"Update SettingsSchema.md to fix #2121 (#2123)

* Update SettingsSchema.md to fix #2121
Fixes #2121.
* Update doc/cascadia/SettingsSchema.md",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,miniksa@microsoft.com,"07/29/2019, 16:45:11",2019,"07/29/2019, 16:45:11",2019,3,0,2,2.5,1.2,0
,"Fix the About Dialog II: This Time it's Optional (#2122)

* Get rid of this unused variable
* This is the actual fix to the about dialog crashing: an unchecked optional variable",,,,True,True,False,15,16,1,1,migrie@microsoft.com,miniksa@microsoft.com,"07/29/2019, 16:46:32",2019,"07/29/2019, 16:46:32",2019,3,2,2,2.4,1.2,0
,"Accessibility: Set-up UIA Tree (#1691)

**The Basics of Accessibility**
- [What is a User Interaction Automation (UIA) Tree?](https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/ui-automation-tree-overview)
- Other projects (i.e.: Narrator) can take advantage of this UIA tree and are used to present information within it.
- Some things like XAML already have a UIA Tree. So some UIA tree navigation and features are already there. It's just a matter of getting them hooked up and looking right.

**Accessibility in our Project**
There's a few important classes...
regarding Accessibility...
- **WindowUiaProvider**: This sets up the UIA tree for a window. So this is the top-level for the UIA tree.
- **ScreenInfoUiaProvider**: This sets up the UIA tree for a terminal buffer.
- **UiaTextRange**: This is essential to interacting with the UIA tree for the terminal buffer. Actually gets portions of the buffer and presents them.

regarding the Windows Terminal window...
- **BaseWindow**: The foundation to a window. Deals with HWNDs and that kind of stuff.
- **IslandWindow**: This extends `BaseWindow` and is actually what holds our Windows Terminal
- **NonClientIslandWindow**: An extension of the `IslandWindow`

regarding ConHost...
- **IConsoleWindow**: This is an interface for the console window.
- **Window**: This is the actual window for ConHost. Extends `IConsoleWindow`

- `IConsoleWindow` changes:
  - move into `Microsoft::Console::Types` (a shared space)
  - Have `IslandWindow` extend it
- `WindowUiaProvider` changes:
  - move into `Microsoft::Console::Types` (a shared space)
- Hook up `WindowUiaProvider` to IslandWindow (yay! we now have a tree)

### Changes to the WindowUiaProvider
As mentioned earlier, the WindowUiaProvider is the top-level UIA provider for our projects. To reuse as much code as possible, I created `Microsoft::Console::Types::WindowUiaProviderBase`. Any existing functions that reference a `ScreenInfoUiaProvider` were virtual-ized.

In each project, a `WindowUiaProvider : WindowUiaProviderBase` was created to define those virtual functions. Note that that will be the main difference between ConHost and Windows Terminal moving forward: how many TextBuffers are on the screen.

So, ConHost should be the same as before, with only one `ScreenInfoUiaProvider`, whereas Windows Terminal needs to (1) update which one is on the screen and (2) may have multiple on the screen.

🚨 Windows Terminal doesn't have the `ScreenInfoUiaProvider` hooked up yet. We'll have all the XAML elements in the UIA tree. But, since `TermControl` is a custom XAML Control, I need to hook up the `ScreenInfoUiaProvider` to it. This work will be done in a new PR and resolve GitHub Issue #1352.


### Moved to `Microsoft::Console::Types`
These files got moved to a shared area so that they can be used by both ConHost and Windows Terminal.
This means that any references to the `ServiceLocator` had to be removed.

- `IConsoleWindow`
  - Windows Terminal: `IslandWindow : IConsoleWindow`
- `ScreenInfoUiaProvider`
  - all references to `ServiceLocator` and `SCREEN_INFORMATION` were removed. `IRenderData` was used to accomplish this. Refer to next section for more details.
- `UiaTextRange`
  - all references to `ServiceLocator` and `SCREEN_INFORMATION` were removed. `IRenderData` was used to accomplish this. Refer to next section for more details.
  - since most of the functions were `static`, that means that an `IRenderData` had to be added into most of them.


### Changes to IRenderData
Since `IRenderData` is now being used to abstract out `ServiceLocator` and `SCREEN_INFORMATION`, I had to add a few functions here:
- `bool IsAreaSelected()`
- `void ClearSelection()`
- `void SelectNewRegion(...)`
- `HRESULT SearchForText(...)`

`SearchForText()` is a problem here. The overall new design is great! But Windows Terminal doesn't have a way to search for text in the buffer yet, whereas ConHost does. So I'm punting on this issue for now. It looks nasty, but just look at all the other pretty things here. :)",,,,True,True,False,1732,1149,46,41,carlos.zamora@microsoft.com,noreply@github.com,"07/29/2019, 22:21:15",2019,"07/29/2019, 22:21:15",2019,4,0,2,2.8,5.0,0
,"Add some ETL around profile, control and connection creation (#2125)

This commit adds some tracelogging (and telemetry) to answer the following questions:
* Do people use padding? If so, what is the common range of values?
* Are people turning off showTabsInTitlebar?
* How many different profiles are in use, and how do they break down between custom and default?
* Are people manually launching specific profiles, or using ""default"" fairly often?
* Are people using the Azure Cloud Shell connection?
* Are people leveraging the feature added in #2108 (autogenerating GUIDs)?",,,,False,False,False,122,21,11,10,duhowett@microsoft.com,noreply@github.com,"07/30/2019, 00:24:20",2019,"07/30/2019, 00:24:20",2019,1,0,2,4.3,3.6,0
,"Fixes crash when specifying invalid font (#2153)

* Stop the crash with fonts by trying a few fallback/backup fonts if we can't find what was selected.
* Create fallback pattern for finding a font. Resolve and pass the locale name. Retrieve the font name while retrieving the font object. Use retrieved data in the _GetProposedFont methods instead of re-resolving it.
* Add details to schema about fallback. Finish comment explaining fallback pattern to doc comment on method.",,,,True,True,False,177,30,3,3,miniksa@microsoft.com,noreply@github.com,"07/30/2019, 21:32:23",2019,"07/30/2019, 21:32:23",2019,4,2,2,4.3,3.0,0
,Change our manifest from depending on Windows.Universal to Windows.Desktop (#2155),,,,False,False,False,2,2,2,2,duhowett@microsoft.com,miniksa@microsoft.com,"07/30/2019, 21:36:15",2019,"07/30/2019, 21:36:15",2019,4,0,2,2.5,1.0,0
,"Fix a crash on restore down (#2149)

* Don't trigger a frame due to circling when in the middle of a resize operation

  This fixes #1795, and shined quite a bit of light on the whole conpty resize process.

* Move the Begin/End to ResizeScreenBuffer, to catch more cases.",,,,True,False,False,96,4,7,7,migrie@microsoft.com,noreply@github.com,"07/30/2019, 22:01:27",2019,"07/30/2019, 22:01:27",2019,4,2,2,4.8,2.4,0
,"Fix the terminal snapping across DPI boundaries strangely

When we snap across a DPI boundary, we'll get the DPI changed message _after_ the resize message. So when we try to calculate the new terminal position, we'll use the _old_ DPI to calculate the size. When snapping to a lower DPI, this means the terminal will be smaller, with ""padding"" all around the actual app. 

Instead, when we get a new DPI, force us to update out UI layout for the new DPI.

Closes #2057",,,,True,False,False,6,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"07/30/2019, 22:04:48",2019,"07/30/2019, 22:04:48",2019,4,2,0,5.0,1.2,0
,"VT sequence support for EraseInLine, EraseInDisplay, DeleteCharacter and InsertCharacter (#2144)

* We now support EraseInLine, EraseInDisplay, DeleteCharacter and InsertCharacter",,,,False,False,False,316,11,7,7,t-pabhoj@microsoft.com,noreply@github.com,"07/30/2019, 23:28:28",2019,"07/30/2019, 23:28:28",2019,4,0,2,4.8,3.0,0
,"Update the package version to v0.3

Acked-by: Pankaj Bhojwani <t-pabhoj@microsoft.com>
Acked-by: Carlos Zamora <cazamor@microsoft.com>",,,,False,False,False,2,2,1,1,duhowett@microsoft.com,noreply@github.com,"07/30/2019, 23:35:08",2019,"07/30/2019, 23:35:08",2019,4,0,2,2.5,1.0,0
,"Accessibility: TermControl Automation Peer (#2083)

Builds on the work of #1691 and #1915 

Let's start with the easy change:
- `TermControl`'s `controlRoot` was removed. `TermControl` is a `UserControl`
  now.

Ok. Now we've got a story to tell here....

### TermControlAP - the Automation Peer
Here's an in-depth guide on custom automation peers:
https://docs.microsoft.com/en-us/windows/uwp/design/accessibility/custom-automation-peers

We have a custom XAML element (TermControl). So XAML can't really hold our
hands and determine an accessible behavior for us. So this automation peer is
responsible for enabling that interaction.

We made it a FrameworkElementAutomationPeer to get as much accessibility as
possible from it just being a XAML element (i.e.: where are we on the screen?
what are my dimensions?). This is recommended. Any functions with ""Core"" at the
end, are overwritten here to tweak this automation peer into what we really
need.

But what kind of interactions can a user expect from this XAML element?
Introducing ControlPatterns! There's a ton of interfaces that just define ""what
can I do"". Thankfully, we already know that we're supposed to be
`ScreenInfoUiaProvider` and that was an `ITextProvider`, so let's just make the
TermControlAP an `ITextProvider` too.

So now we have a way to define what accessible actions can be performed on us,
but what should those actions do? Well let's just use the automation providers
from ConHost that are now in a shared space! (Note: this is a great place to
stop and get some coffee. We're about to hop into the .cpp file in the next
section)


### Wrapping our shared Automation Providers

Unfortunately, we can't just use the automation providers from ConHost. Or, at
least not just hook them up as easily as we wish. ConHost's UIA Providers were
written using UIAutomationCore and ITextRangeProiuder. XAML's interfaces
ITextProvider and ITextRangeProvider are lined up to be exactly the same.

So we need to wrap our ConHost UIA Providers (UIAutomationCore) with the XAML
ones. We had two providers, so that means we have two wrappers.

#### TermControlAP (XAML) <----> ScreenInfoUiaProvider (UIAutomationCore)
Each of the functions in the pragma region `ITextProvider` for
TermControlAP.cpp is just wrapping what we do in `ScreenInfoUiaProvider`, and
returning an acceptable version of it.

Most of `ScreenInfoUiaProvider`'s functions return `UiaTextRange`s. So we need
to wrap that too. That's this next section...

#### XamlUiaTextRange (XAML) <----> UiaTextRange (UIAutomationCore)
Same idea.  We're wrapping everything that we could do with `UiaTextRange` and
putting it inside of `XamlUiaTextRange`.


### Additional changes to `UiaTextRange` and `ScreenInfoUiaProvider`
If you don't know what I just said, please read this background:
- #1691: how accessibility works and the general responsibility of these two
  classes
- #1915: how we pulled these Accessibility Providers into a shared area

TL;DR: `ScreenInfoUiaProvider` lets you interact with the displayed text.
`UiaTextRange` is specific ranges of text in the display and navigate the text.

Thankfully, we didn't do many changes here. I feel like some of it is hacked
together but now that we have a somewhat working system, making changes
shouldn't be too hard...I hope.

#### UiaTextRange
We don't have access to the window handle. We really only need it to draw the
bounding rects using WinUser's `ScreenToClient()` and `ClientToScreen()`. I
need to figure out how to get around this.

In the meantime, I made the window handle optional. And if we don't have
one....well, we need to figure that out. But other than that, we have a
`UiaTextRange`.

#### ScreenInfoUiaProvider
At some point, we need to hook up this automation provider to the
WindowUiaProvider. This should help with navigation of the UIA Tree and make
everything just look waaaay better. For now, let's just do the same approach
and make the pUiaParent optional.

This one's the one I'm not that proud of, but it works. We need the parent to
get a bounding rect of the terminal. While we figure out how to attach the
WindowUiaProvider, we should at the very least be able to get a bunch of info
from our xaml automation peer. So, I've added a _getBoundingRect optional
function. This is what's called when we don't have a WindowUiaProvider as our
parent.


## Validation Steps Performed
I've been using inspect.exe to see the UIA tree.
I was able to interact with the terminal mostly fine. A few known issues below.

Unfortunately, I tried running Narrator on this and it didn't seem to like it
(by that I mean WT crashed). Then again, I don't really know how to use
narrator other than ""click on object"" --> ""listen voice"". I feel like there's a
way to get the other interactions with narrator, but I'll be looking into more
of that soon. I bet if I fix the two issues below, Narrator will be happy.

## Miscellaneous Known Issues
- `GetSelection()` and `GetVisibleRanges()` crashes. I need to debug through
  these. I want to include them in this PR.

Fixes #1353.",,,,True,False,False,811,86,20,20,carlos.zamora@microsoft.com,duhowett@microsoft.com,"07/30/2019, 23:43:10",2019,"07/30/2019, 23:43:10",2019,4,0,0,4.5,4.8,0
,"Try to turn audit mode back on without building test/utilities (#2179)

* Attempt to remove all test and utility projects from audit mode (and turn it back on) to see if that keeps it within the disk space boundaries.
* drop x86 and arm configs for the test projects too.",,,,False,False,False,3,68,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"07/31/2019, 23:58:16",2019,"07/31/2019, 23:58:16",2019,4,2,0,0.2,1.5,0
,"First draft of a spec for VT52 escape sequences (#2017)

* First draft of a spec for splitting off the existing VT52 escape sequences, and extending the VT52 support.

* Make the issue ID visible on GitHub.

* Added suggested mappings for the Graphics Mode character set.

* Add escape sequences for all the commands and clarify the use of the ESC < sequence when switching back to ANSI mode.

* Add details about the differing boundary rules of the VT100 CUP command and the VT52 Direct Cursor Address command.

* Specify the identifying sequence that the Identify command should return.

* Add details of the print commands.

* Add a list of keyboard sequences that are different in the VT52 mode, and make the description of the Keypad Mode commands a little clearer.

* Add a section describing the testing needed to cover the new functionality.",,,,False,False,False,255,0,1,1,j4_james@hotmail.com,migrie@microsoft.com,"08/01/2019, 13:23:10",2019,"08/01/2019, 13:23:10",2019,3,0,2,5.0,3.0,0
,"Added information on WxH character (#2104)

* Add information on WxH character

* Add line and separate footnote",,,,False,False,False,6,2,1,1,tapaswenipathak@gmail.com,migrie@microsoft.com,"08/01/2019, 13:34:18",2019,"08/01/2019, 13:34:18",2019,3,0,2,3.7,1.0,0
,Use ROW.Reset in EraseInDisplay instead of printing millions of spaces per line #2197,,,,False,False,False,1,3,1,1,t-pabhoj@microsoft.com,noreply@github.com,"08/01/2019, 20:19:22",2019,"08/01/2019, 20:19:22",2019,4,0,2,1.2,1.0,0
,"Azure connector only shows up if available (#2195)

The default azure connector profile only shows up if a) its a release build and b) its non-ARM64

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,114,22,8,6,pankaj.d.bhoj@gmail.com,noreply@github.com,"08/02/2019, 21:41:46",2019,"08/02/2019, 21:41:46",2019,4,0,2,3.8,3.0,0
,"Update bug template with crash instructions (#2257)

It's a doc change and the x86 CI is cranky. We're looking into it.",,,,True,True,False,2,0,1,1,miniksa@microsoft.com,noreply@github.com,"08/05/2019, 17:09:56",2019,"08/05/2019, 17:09:56",2019,3,2,2,5.0,1.2,0
,"Update bot with new rules (#2259)

We added a few more rules. Update the bot doc description.",,,,False,False,False,15,0,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"08/05/2019, 18:28:05",2019,"08/05/2019, 18:28:05",2019,4,2,0,5.0,1.0,0
,"Fixed Ctrl+Alt shortcuts conflicting with AltGr (#2235)

This moves the detection of AltGr keypresses in front of the shortcut
handling. This allows one to have Ctrl+Alt shortcuts, while
simultaneously being able to use the AltGr key for special characters.",,,,True,True,False,64,29,3,3,leonard@hecker.io,migrie@microsoft.com,"08/05/2019, 21:58:48",2019,"08/05/2019, 21:58:48",2019,4,0,2,3.4,1.8,0
,"Merged PR 3594797: [Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/190804-1600 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 22945cd6ead96a82fc5c5d21015ed32fc6b77f4b

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/190804-1600 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 22945cd6ead96a82fc5c5d21015ed32fc6b77f4b

Related work items: #18974333",,,,False,False,False,18,18,3,3,miniksa@microsoft.com,duhowett@microsoft.com,"08/06/2019, 00:37:15",2019,"08/06/2019, 00:37:15",2019,1,2,0,2.5,1.0,0
,"Create bx.cmd (#2168)

* Try createing a script to only build the current working directory

  Inspired by #2078.

  I wanted to use this for WindowsTerminal, but I can't generate the
  resources.pri from just building WindowsTerminal. Maybe @dhowett-msft has
  some ideas.

* Cleanup for PR

* fix some bugs with building outside a project directory.

* PR nits",,,,True,False,False,126,12,5,5,migrie@microsoft.com,noreply@github.com,"08/06/2019, 01:18:40",2019,"08/06/2019, 01:18:40",2019,1,2,2,4.7,2.4,0
,"Attempt to clean up PCHs as we build to leave more Hosted Agent disk space (#2271)

* Cleanup PCHs as the build rolls along to leave enough space on CI agents.

* Attempt to restrict pch cleanup to only CI agents.

* Write message when objects are deleted.",,,,False,False,False,8,0,1,1,miniksa@microsoft.com,migrie@microsoft.com,"08/06/2019, 11:51:50",2019,"08/06/2019, 11:51:50",2019,2,2,2,5.0,1.0,0
,"add exclusion directories to PR builds, not just rolling builds. (#2272)",,,,False,False,False,5,0,1,1,miniksa@microsoft.com,noreply@github.com,"08/06/2019, 16:46:43",2019,"08/06/2019, 16:46:43",2019,3,2,2,5.0,1.0,0
,Don't log an error message when _DoGetConsoleInput returns CONSOLE_STATUS_WAIT. (#2244),,,,True,True,False,48,28,1,1,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"08/06/2019, 17:24:00",2019,"08/06/2019, 17:24:00",2019,3,0,0,3.2,1.8,0
,"use std::move() on a few more strings, other general code tidying (#1899)

* -  moving string parameter into data member instead of copying it.
-  removing noexcept from methods where an exception could be raised.
   If std::terminate() call is desired instead, I guess those should be
   left and std::move_if_noexcept() used to document the fact that it's
   on purpose.
- std::moving local variable into argument when possible.
- change maxversiontested XML element to maxVersionTested.
- used of gsl::narrow_cast where appropriate to prevent warnings.
- fixed bug in TerminalSettings::SetColorTableEntry()

Fixes #1844",,,,True,False,False,25,20,7,7,1760825+yves-dolce@users.noreply.github.com,duhowett@microsoft.com,"08/06/2019, 18:33:32",2019,"08/06/2019, 18:33:32",2019,4,0,0,2.8,1.8,0
,skip a few failing tests for x86 (#2262),,,,True,True,False,18,0,1,1,carlos.zamora@microsoft.com,duhowett@microsoft.com,"08/06/2019, 20:16:19",2019,"08/06/2019, 20:16:19",2019,4,0,0,5.0,1.2,0
,Add a note about the build required to the README (#2291),,,,False,False,False,2,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"08/06/2019, 20:25:43",2019,"08/06/2019, 20:25:43",2019,4,2,0,5.0,1.0,0
,inbox: reflect changes from 20h1 branch (#2310),,,,False,False,False,18,18,3,3,duhowett@microsoft.com,noreply@github.com,"08/07/2019, 17:58:53",2019,"08/07/2019, 17:58:53",2019,3,0,2,2.5,1.0,0
,"Update a number of our dependencies (#2301)

Microsoft.VCRTForwarders.140 1.0.0-rc -> 1.0.1-rc
Microsoft.Toolkit.Win32.UI.XamlApplication 6.0.0-preview6.* -> 6.0.0-preview7
Microsoft.Windows.CppWinRT 2.0.190605.7 -> 2.0.190730.2

wil fbcd1d2a -> e8c599bc
gsl b74b286d -> 1212beae

We're skipping the following update:
Microsoft.UI.Xaml 2.2.190611001-prerelease -> 2.2.190731001-prerelease",,,,False,False,False,23,24,12,11,duhowett@microsoft.com,noreply@github.com,"08/07/2019, 23:43:49",2019,"08/07/2019, 23:43:49",2019,4,0,2,2.4,2.0,0
,"Stop Roaming settings (#2298)

* Stop Roaming settings

  Also migrate existing settings from RoamingState to LocalState.

  Fixes #1770.

* * de-dupe these functions
* const a pair of things

* This should be in the previous commit

* use `unique_hfile`'s

* Make some of these wil things cleaner",,,,True,False,False,71,17,2,2,migrie@microsoft.com,noreply@github.com,"08/08/2019, 22:02:34",2019,"08/08/2019, 22:02:34",2019,4,2,2,4.2,1.8,0
,"Add list of keybindings to SettingsSchema.md (#2335)

* Add list of keybindings to

* Add missed copy bindings",,,,False,False,False,53,0,1,1,wolf99@users.noreply.github.com,48369326+cinnamon-msft@users.noreply.github.com,"08/09/2019, 16:33:01",2019,"08/09/2019, 16:33:01",2019,3,0,0,5.0,1.5,0
,"Fix the ut_app build for VS 16.2, 16.3 (#2347)

Move the hack from TerminalApp.vcxproj to a .targets file to be used by the ut_app project too.

Fixes #2143",,,,True,False,False,37,27,3,3,migrie@microsoft.com,duhowett@microsoft.com,"08/09/2019, 20:21:45",2019,"08/09/2019, 20:21:45",2019,4,2,0,2.9,1.8,0
,doc: fix typo reaons -> reasons (#2383),,,,True,True,False,1,1,1,1,paw.zubr@gmail.com,duhowett@microsoft.com,"08/11/2019, 03:55:17",2019,"08/11/2019, 03:55:17",2019,1,0,0,2.5,1.2,0
,"template: add Powershell command to get OS version (#2403)

As `ver` doesn't work.",,,,False,False,False,1,1,1,1,mike@certsimple.com,duhowett@microsoft.com,"08/12/2019, 18:03:04",2019,"08/12/2019, 18:03:04",2019,4,1,0,2.5,1.0,0
,"Add a Local Test binary, to enable local TerminalApp testing (#2294)


In #1164 we learned that our CI doesn't support WinRT testing. This made us all sad. Since that merged, we haven't really added any TerminalApp tests, because it's a little too hard. You'd have to uncomment the entire file, and if the list of types changed you'd have to manually update the sxs manifest and appxmanifest.

Since that was all insane, I created a new Terminal App unittesting project without those problems.
1. The project is not named *Unit*Test*, so the CI won't run it, but it will run locally.
2. The project will auto-generate its SxS manifest, using the work from #1987. 
3. We'll use the SxS manifest from step 2 to generate an AppxManifest for running packaged tests.


* This is the start of me trying to enable local unittesting again

  * We've got a new unittests project that isn't named *unit*test*

  * We're manually generating the SxS manifest for it. B/C we need to use it at runtime, we need to manually combine it into one manifest file

  * the runas:UAP thing still doesn't work. We'll investigate.

* This shockingly works

but I'm still stuck with:
```
Summary of Errors Outside of Tests:
Error: TAEF: [HRESULT: 0x80270254] Failed to create the test host process for
out of process test execution. (The
IApplicationActivationManager::ActivateApplication call failed while using a
default host. TAEF's ETW logs which are gathered with the /enableEtwLogging
switch should contain events from relevant providers that may help to diagnose
the failure.)
```

* Cleaning this all up for review.

  Frankly just pushing to see if it'll work in CI

* Couple things I noticed in the diff from master

* Apply @dhowett-msft's suggestions from code review",,,,True,True,False,568,177,16,14,migrie@microsoft.com,noreply@github.com,"08/13/2019, 13:23:28",2019,"08/13/2019, 13:23:28",2019,3,2,2,4.2,4.8,0
,"Add info about adding copy/paste keybindings (#2290)

* Add info about adding copy/paste keybindings

* Update doc/user-docs/UsingJsonSettings.md

* Apply suggestions from code review

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,44,0,1,1,migrie@microsoft.com,noreply@github.com,"08/13/2019, 13:28:04",2019,"08/13/2019, 13:28:04",2019,3,2,2,5.0,1.0,0
,"Only update the icon of a tab it the icon actually _changed_ (#2376)

Fixes #1333.
Fixes #2329.",,,,True,False,False,74,37,7,5,migrie@microsoft.com,duhowett@microsoft.com,"08/14/2019, 23:12:14",2019,"08/14/2019, 23:12:14",2019,4,2,0,3.1,3.0,0
,"A better fix for #tab-titles-are-too-long (#2373)

### User Stories:

1. A user wants to be able to use the executable path as their starting title
    - Does anyone want this?
2. A user wants to be able to set a custom starting title, but have that title be overridable
3. A user wants to be able to set an overridable starting title, different from the profile name
    - Presumably someone will want this
4. A user totally wants to ignore the VT title and use something else
    - This will make more sense in the post [#1320] ""Support runtime variables in the custom user title"" settings

### Solutions:

1. `name`, `startingTitle`, `tabTitle`
    * a. `name` is only ever used as the profile name.
    * b. If `startingTitle` isn't set, then the executable path is used
    * c. If `startingTitle` is set, it's used as the initial title
    * d. If `tabTitle` is set, it overrides the title from the terminal
    * e. Current users of `tabTitle` need to manually update to the new behavior.
2. `name` as starting title, `tabTitle` as a different starting title
    * a. `name` is used as the starting title and the profile name in the dropdown
    * b. If `tabTitle` is set, we'll use that as the overridable starting title instead.
    * c. In the future, `dynamicTabTitle` or `tabTitleOverride` could be added to support [#1320]
    * d. Current users of `tabTitle` automatically get the new (different!) behavior.
    * e. User Story 1 is impossible
        - Does anyone want the behavior _ever_? Perhaps making that scenario impossible is good?
3. `name` unchanged, `tabTitle` as the starting title
    * a. `name` is only ever used as the profile name.
    * b. If `tabTitle` is set, we'll use that as the overridable starting title.
    * c. In the future, `dynamicTabTitle` or `tabTitleOverride` could be added to support [#1320]
    * d. Current users of `tabTitle` automatically get the new (different!) behavior.
4. `name` as starting title, `tabTitle` as different starting title, `suppressApplicationTitle` Boolean to force it to override
    * a. `name`, `tabTitle` work as in Solution 2.
    * b. When someone wants to be able to statically totally override that title (story 4), they can use `suppressApplicationTitle`
    * c. `suppressApplicationTitle` name is WIP
    * d.  We'll add `suppressApplicationTitle` when someone complains
    * e. If you really want story 1, use `tabTitle: c:\path\to\foo.exe` and `suppressApplicationTitle`.

[#1320]: https://github.com/microsoft/terminal/issues/1320

We've decided to pursue path 4.",,,,True,False,False,65,51,12,8,migrie@microsoft.com,duhowett@microsoft.com,"08/14/2019, 23:16:38",2019,"08/14/2019, 23:16:38",2019,4,2,0,2.6,3.0,0
,"Chunk Selection Expansion for Double/Triple Click Selection (#2184)

Double/Triple click create a selection expanding beyond one cell. This PR makes it so that when you're dragging your mouse to expand the selection, you expand to the next delimiter defined by double/triple click.

So, double click expands by doubleClickDelimiter ranges. Triple click expands by line.

When you double/triple click, a word/line is selected. When you drag, that word/line will remain selected after the expansion occurs.

Closes #1933 

## Details
Rather than resizing the selection when the mouse event occurs, I figured I'd do what I did with wide glyph selection: expand at render time.

We needed an enum `multiClickSelectionMode` to keep track of which expansion mode we're in.

Minor modifications to `_ExpandDoubleClickSelection*(COORD)` had to be made so that we can re-use them. 

Actual expansion occurs in `_GetSelectionRects()`

## Validation Steps Performed
- generic double click test
  - `dir` or `ls`
  - double click a word
  - drag up
  - Works! ✔
- double click on delimiter test
  - `dir` or `ls`
  - double click a word delimiter (i.e.: space between words)
  - drag up
  - Works! ✔
- generic triple click test
  - `dir` or `ls`
  - triple click a line
  - drag up
  - Works! ✔
- ALT + double click test
  - `dir` or `ls`
  - hold ALT
  - double click a word
  - drag up
  - Works! ✔

repeat above tests in following scenarios:
- when at top of scrollback
- drag down instead of up",,,,False,False,False,320,85,6,6,carlos.zamora@microsoft.com,duhowett@microsoft.com,"08/14/2019, 23:41:43",2019,"08/14/2019, 23:41:43",2019,4,0,0,3.7,3.0,0
,"Add Dustin's comment from #632 to Niksa's Doc (#2346)

This seemed like it fit the style & depth of the other Niksa posts, so I'm proposing we add it here. We could always make a `Howett.md` if that seems more reasonable",,,,False,False,False,34,0,1,1,migrie@microsoft.com,miniksa@microsoft.com,"08/15/2019, 21:01:46",2019,"08/15/2019, 21:01:46",2019,4,2,2,5.0,1.0,0
,"Replace CodepointWidthDetector's runtime table with a static one (#2368)

This commit replaces CodepointWidthDetector's
dynamically-generated map with a static constexpr one that's compiled
into the binary.

It also almost totally removes the notion of an `Invalid` width. We
definitely had gaps in our character coverage where we'd report a
character as invalid, but we'd then flatten that down to `Narrow` when
asked. By combining the not-present state and the narrow state, we get
to save a significant chunk of data.

I've tested this by feeding it all 0x10FFFF codepoints (and then some)
and making sure they 100% match the old code's outputs.

|------------------------------|---------------|----------------|
| Metric                       | Then          | Now            |
|------------------------------|---------------|----------------|
| disk space                   | 56k (`.text`) | 3k (`.rdata`)  |
| runtime memory (allocations) | 1088          | 0              |
| runtime memory (bytes)       | 51k           | ~0             |
| memory behavior              | not shared    | fully shared   |
| lookup time                  | ~31ns         | ~9ns           |
| first hit penalty            | ~170000ns     | 0ns            |
| lines of code                | 1088          | 285            |
| clarity                      | extreme       | slightly worse |
|------------------------------|---------------|----------------|

I also took a moment and cleaned up a stray boolean that we didn't need.",,,,False,False,False,318,1207,3,3,duhowett@microsoft.com,noreply@github.com,"08/16/2019, 17:54:17",2019,"08/16/2019, 17:54:17",2019,3,0,2,1.8,3.0,0
,Reduce scope of audit mode build to just the projects that are currently ready to be audited to alleviate disk space problem. (#2457),,,,True,True,False,0,81,1,1,miniksa@microsoft.com,noreply@github.com,"08/16/2019, 20:31:21",2019,"08/16/2019, 20:31:21",2019,4,2,2,0.0,1.8,0
,"When the titlebar is clicked, dismiss the new tab flyout (#2438)

* When the titlebar is clicked, dismiss the new tab flyout

  Fixes #2028.

* Fix this for the base IslandWindow as well",,,,True,False,False,68,10,9,9,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"08/16/2019, 21:18:29",2019,"08/16/2019, 21:18:29",2019,4,2,0,4.4,2.4,0
,"Add Warnings during settings load (#2422)

* Warn the user when their settings are bad

  The start of work on #1348

* Display an error dialog for errors during validation

* Polish for PR

  * Add a ton of tests
  * Polish the _GetMessageText bits
  * Add code to check for duplicate profiles
  * Verify that many warnings work at the same time
  * comments y'all

* Apply fixes for dustin's thoughts from PR

* Add a proper exception type, use an array instead of a map

* PR Fixes

  * Fix x86 build break
  * Add a bit on ""using the defaults"" when we encountering an exception
  * remove a redundant variable

* guid->GUID

* Address Michael's PR comments

* Clean up this error text, and catch exceptions better

* Update src/cascadia/TerminalApp/Resources/en-US/Resources.resw",,,,True,False,False,803,52,11,11,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"08/16/2019, 21:21:43",2019,"08/16/2019, 21:21:43",2019,4,2,0,4.8,4.8,0
,"Add default keybinding for opening dropdown (#2365)

* added keybinding for opening dropdown

* fixed spacing issues

* tabs spaces sadness fix

* code formatting

* renamed references to openNewTabDropdown and updated documentation

* removed newline",,,,True,True,False,29,0,8,8,48369326+cinnamon-msft@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"08/16/2019, 21:29:13",2019,"08/16/2019, 21:29:12",2019,4,0,0,5.0,1.8,-1
,"Add a spec draft for Keybindings Arguments (#1349)

* Add a spec draft for Keybindings Arguments.

  Specs #1142.

  Just read the spec :)

* Apply suggestions from code review

Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>

* Include notes on reliability, security, and `Handle`ing Keybinding Args

* Add some extra details from review

  * Split up ActionArgs and ActionEventArgs
  * Clarify _not_ handling an action
  * Add some notes on parsing args
  * Add some future considerations on extensions

* Updating spec to remove the bulk of the `IActionArgs` and `IActionEventArgs` implementations, as they're redundant.",,,,False,False,False,362,0,1,1,migrie@microsoft.com,noreply@github.com,"08/16/2019, 21:33:45",2019,"08/16/2019, 21:33:45",2019,4,2,2,5.0,2.5,0
,"Don't copy text if there's no selection (#2446)

This commit also transitions our keybinding events and event handlers to a
TypedEventHandler model with an ""event args"" class, as specified in the
keybinding arguments specification (#1349). In short, every event can be marked
Handled independently, and a Handled event will stop bubbling out to the
terminal. An unhandled event will be passed off to the terminal as a standard
keypress.

This unifies our keybinding event model and provides a convenient place for
binding arguments to live.

Fixes #2285.
Related to #1349, #1142.",,,,True,False,False,773,237,14,14,migrie@microsoft.com,duhowett@microsoft.com,"08/16/2019, 22:43:51",2019,"08/16/2019, 22:43:51",2019,4,2,0,3.8,4.8,0
,"Accessibility: Refactor IRenderData with IUiaData (#2296)

* Refactor IRenderData with IUiaData
* remove duplicate tracking of active selection",,,,False,False,True,432,343,18,18,carlos.zamora@microsoft.com,noreply@github.com,"08/19/2019, 18:03:45",2019,"08/19/2019, 18:03:45",2019,4,0,2,3.2,4.0,0
,"sample: Fix static ""cmd.exe"" in miniterm (#2461)",,,,True,True,False,1,1,1,1,50767589+inventivejon@users.noreply.github.com,duhowett@microsoft.com,"08/19/2019, 18:20:06",2019,"08/19/2019, 18:20:06",2019,4,0,0,2.5,1.2,0
,"Add support for HTML copy (#1224)

* Move Clipboard::GenHTML to TextBuffer (add params)
Refactor RetrieveSelectedTextFromBuffer
Modify CopyToClipboardEventArgs to include HTML data

* minor code format fix

* PR Changes
NOTE: refactoring text buffer code is a separate task. New issue to be created.

* Refactor TextBuffer::GenHTML (#2038)

Fixes #1846.

* nit change

* x86 build fix

* nit changes",,,,True,False,True,247,271,11,11,carlos.zamora@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"08/19/2019, 22:59:01",2019,"08/19/2019, 22:59:01",2019,4,0,0,2.9,4.8,0
,"Draft Spec for Cascading Default + User Settings (#1258)

* Start working on drafting this spec

* Really add a LOT of notes

* More spec updates.

  * Remove `hiddenProfiles` in favor of `profile.hidden`
  * Add info on how layering will work
  * add more powershell core info

* Finish remaining TODO sections

* Apply suggestions from code review

Fix simple typos

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* Lots of feedback from PR

  * Try and make dynamic settings a bit clearer
  * more clearly call out serializing only what's different from a default-
    constructed `Profile`
  * Add more goals
  * add a blurb for user-default profile objects

* Add updates concerning dynamic profile generation (#1321)

* Add updates concerning dynamic profile generation

  This is based on discussion with @dhowett-msft we had o*line. We're trying to
  work through a way to prevent dynamic profiles from roaming to machines the
  dynamic profiles might not exist on.

  After writing this up, I'm not totally sure that it's a better design.

* Add some initial updates from discussion

* Pushing some updates here. I haven't given it a once over to ensure it's all consistent but it's worth reviewing @dhowett-msft

* Some minor updates from Dustin

* Fix a bunch of slightly more minor points in the spec

* Move ""Profile Ordering"" to ""Future considerations""

* Add some notes on migrating profiles, GUID generation, de-duping profiles, and O R A N G E

* Fix the indenting here

* Update powershell core to be a dynamic profile, don't even mention other options.

* Remaining PR feedback

* Apply suggestions from code review

Co-Authored-By: Michael Niksa <miniksa@microsoft.com>

* remove a dead comment",,,,True,True,False,717,0,1,1,migrie@microsoft.com,noreply@github.com,"08/20/2019, 13:53:30",2019,"08/20/2019, 13:53:30",2019,3,2,2,5.0,3.6,0
,"Added CopyOnSelect as a Global Setting (#2152)

* Added CopyOnSelect as a ControlSetting

* Updated doc

* Updated doc

* CopyOnSelect feature changes (like, overall)

* Made CopyOnSelect a CoreSetting
CopyOnSelect value accessible through Terminal's IsCopyOnSelectActive

* Refactor a bit.

* CopyOnSelect Tests

* PR nits",,,,False,False,True,185,28,12,12,carlos.zamora@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"08/20/2019, 16:42:17",2019,"08/20/2019, 16:42:17",2019,3,0,0,4.5,3.5,0
,"TURNS OUT CASE SENSITIVITY IS IMPORTANT (#2481)

* TURNS OUT CASE SENSITIVITY IS IMPORTANT

* Add a note that this is important",,,,False,False,False,3,1,2,2,migrie@microsoft.com,miniksa@microsoft.com,"08/20/2019, 18:16:06",2019,"08/20/2019, 18:16:06",2019,4,2,2,3.7,1.0,0
,"Prevent splitting panes into 0 width/height #2401 (#2450)

Fixes a crash that can occur when splitting pane that was so small that the target panes would have a width/height of 0, causing DxRenderer to fail when creating the device resources.

This PR prevents both the call to `App::AddHorizontal/VerticalSplit` and the creation of the `TermControl` if the split would fail.

Closes #2401

## Details

`App::_SplitPane` calls `focusedTab->CanAddHorizontalSplit/CanAddHorizontalSplit` before it initializes the `TermControl` to avoid having to deal with the cleanup. If a split cannot occur, it will simply return. 

**Question: Should we beep or something here?**

It then follows the same naming/flow style as the split operation, so: `Tab::CanAddHorizontalSplit -> Pane::CanSplitHorizontal ->Pane::_CanSplit`. The public pane methods will handle leaf/child the same as the current Split methods.

`_CanSplit` reuses existing logic like `_root.GetActualWidth/Height`, `Pane::_GetMinSize`, and the `Half` constant.

## Validation Steps Performed

1. Open a new tab
2. Attempt to split horizontally/vertically more than 6-8 times

Success: Pane will will eventually stop splitting rather than crashing the process.",,,,True,False,False,118,2,5,5,richard@richardszalay.com,duhowett@microsoft.com,"08/20/2019, 22:38:45",2019,"08/20/2019, 22:38:45",2019,4,0,0,4.9,2.4,0
,Bugfix: Copy data should persist after Windows Terminal Closes (#2486),,,,False,False,False,1,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"08/20/2019, 22:39:28",2019,"08/20/2019, 22:39:28",2019,4,0,2,5.0,1.2,0
,"Don't overwrite the settings file (#2475)

This is more trouble than it's worth. We had code before to re-serialize
  settings when they changed, to try and gracefully migrate settings from old
  schemas to new ones. This is good in theory, but with #754 coming soon, this
  is going to become a minefield. In the future we'll just always be providing a
  base schema that's reasonable, so this won't matter so much. Keys that users
  have that aren't understood will just be ignored, and that's _fine_.",,,,False,False,False,7,30,4,4,migrie@microsoft.com,carlos.zamora@microsoft.com,"08/20/2019, 22:46:42",2019,"08/20/2019, 22:46:42",2019,4,2,0,0.9,1.0,0
,"dx: Render all gridlines (and, bonus: the box cursor) properly (#2491)

Since we're rendering with antialiasing enabled, we need to make sure
we're stroking actual pixels; to do that, we need to adjust all of our
coordinates by the StrokeWidth / 2. We're always using a stroke width of
1, so that means 0.5.

While I was here, I took the opportunity to fix the color of the grid
lines. Fixes #543.",,,,True,False,False,31,12,2,2,duhowett@microsoft.com,noreply@github.com,"08/20/2019, 23:14:26",2019,"08/20/2019, 23:14:26",2019,4,0,2,3.6,1.2,0
,"Accessibility: Refactor Providers (#2414)

Refactors the accessibility providers (ScreenInfoUiaProvider and UiaTextRange) into a better separated model between ConHost and Windows Terminal.

ScreenInfoUiaProviderBase and UiaTextRangeBase are introduced. ConHost and Windows Terminal implement their own versions of ScreenInfoUiaProvider and UiaTextRange that inherit from their respective base classes.

WindowsTerminal's ScreenInfoUiaProvider --> TermControlUiaProvider",,,,False,False,True,1418,791,34,31,carlos.zamora@microsoft.com,noreply@github.com,"08/20/2019, 23:32:44",2019,"08/20/2019, 23:32:44",2019,4,0,2,3.6,4.5,0
,"doc: svg currently doesn't work; using .jpg instead (#2443)

Since the JPG won't stretch nicely we're also going to put it in the top-right corner without any scaling",,,,False,False,False,5,4,1,1,mike.panitz@gmail.com,duhowett@microsoft.com,"08/20/2019, 23:35:16",2019,"08/20/2019, 23:35:16",2019,4,0,0,2.8,1.0,0
,Accessibility: Add BoundingRects to UiaTextRanges (#2423),,,,False,False,False,70,9,9,9,carlos.zamora@microsoft.com,duhowett@microsoft.com,"08/21/2019, 00:50:34",2019,"08/21/2019, 00:50:34",2019,1,0,0,4.4,2.0,0
,doc: startingDirectory formatting note (#2415),,,,False,False,False,2,0,1,1,linuxfan724@gmail.com,duhowett@microsoft.com,"08/21/2019, 02:16:16",2019,"08/21/2019, 02:16:16",2019,1,0,0,5.0,1.0,0
,doc: More clear path instructions (#2497),,,,False,False,False,2,2,1,1,51178702+paul-00910@users.noreply.github.com,duhowett@microsoft.com,"08/21/2019, 16:14:55",2019,"08/21/2019, 16:14:55",2019,3,0,0,2.5,1.0,0
,"doc: Update bot.md (#2500)

minor spelling correction",,,,False,False,False,1,1,1,1,brightbluejay@users.noreply.github.com,duhowett@microsoft.com,"08/21/2019, 17:38:27",2019,"08/21/2019, 17:38:27",2019,3,0,0,2.5,1.0,0
,"doc: Update submitting_code.md (#2499)

Minor spelling corrections",,,,False,False,False,3,3,1,1,brightbluejay@users.noreply.github.com,duhowett@microsoft.com,"08/21/2019, 17:38:51",2019,"08/21/2019, 17:38:51",2019,3,0,0,2.5,1.0,0
,"az: Introduce a ""credential version"" to force old credentials to be deleted (#2492)

When we change the client ID, we're going to need to force people to log
in again.

We can do that either by:

1. Trying to log in and refresh the user's token and failing (displaying
   a cryptic message like ""you aren't on the internet, please get on the
   internet""), **OR** by...
2. Getting out ahead of it, detecting when we would have failed for client
   ID (and other) reasons, and _not trying at all._

This is option 2.",,,,True,True,False,34,5,2,1,duhowett@microsoft.com,noreply@github.com,"08/21/2019, 21:55:28",2019,"08/21/2019, 21:55:28",2019,4,0,2,4.4,1.2,0
,"az: Don't fail when a tenant doesn't have a knowable name (#2508)

On occasion, in certain delegated access scenarios, we'll fail to read
the name of one or more of the user's Azure tenants. We would summarily
explode (because we're being strict about our incoming JSON, and we
didn't know that this was possible.)

Now we'll substitute in an alternate name and present the ID.

Fixes #2249.

* Update src/cascadia/TerminalConnection/AzureConnection.cpp",,,,True,False,False,23,5,2,1,duhowett@microsoft.com,noreply@github.com,"08/22/2019, 19:05:18",2019,"08/22/2019, 19:05:18",2019,4,0,2,4.1,1.2,0
,Update package version to 0.4,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"08/22/2019, 22:38:30",2019,"08/22/2019, 22:38:30",2019,4,0,2,2.5,1.0,0
,"doc: Update Keybindings-Arguments.md (#2498)

Minor grammar and spelling changes",,,,False,False,False,7,7,1,1,brightbluejay@users.noreply.github.com,duhowett@microsoft.com,"08/23/2019, 17:55:28",2019,"08/23/2019, 17:55:28",2019,3,0,0,2.5,1.0,0
,"Don't treat the Windows keys as input (#2514)

Fixes #2506.",,,,True,False,False,5,2,2,2,marcel.freiberg@outlook.com,duhowett@microsoft.com,"08/23/2019, 17:56:26",2019,"08/23/2019, 17:56:26",2019,3,0,0,3.6,1.2,0
,"When we reload a profile, always use the same GUID for it (#2542)

This ensures that settings reload works for profiles w/o GUIDs",,,,False,False,False,8,1,2,2,migrie@microsoft.com,duhowett@microsoft.com,"08/26/2019, 17:21:30",2019,"08/26/2019, 17:21:30",2019,3,2,0,4.4,1.0,0
,"Make the RIS command clear the display and scrollback correctly (#2367)

When the scrollback buffer is empty, the RIS escape sequence (Reset to Initial
State) will fail to clear the screen, or reset any of the state. And when there
is something in the scrollback, it doesn't get cleared completely, and the
screen may get filled with the wrong background color (it should use the
default color, but it actually uses the previously active background color).
This commit attempts to fix those issues.

The initial failure is caused by the `SCREEN_INFORMATION::WriteRect` method
throwing an exception when passed an empty viewport. And the reason it's passed
an empty viewport is because that's what the `Viewport::Subtract` method
returns when the result of the subtraction is nothing.  The PR fixes the
problem by making the `Viewport::Subtract` method actually return nothing in
that situation. 

This is a change in the defined behavior that also required the associated
viewport tests to be updated. However, it does seem a sensible change, since
the `Subtract` method never returns empty viewports under any other
circumstances. And the only place the method seems to be used is in the
`ScrollRegion` implementation, where the previous behavior is guaranteed to
throw an exception.

The other issues are fixed simply by changing the order in which things are
reset in the `AdaptDispatch::HardReset` method. The call to `SoftReset` needed
to be made first, so that the SGR attributes would be reset before the screen
was cleared, thus making sure that the default background color would be used.
And the screen needed to be cleared before the scrollback was erased, otherwise
the last view of the screen would be retained in the scrollback buffer.

These changes also required existing adapter tests to be updated, but not
because of a change in the expected behaviour. It's just that certain tests
relied on the `SoftReset` happening later in the order, so weren't expecting it
to be called if say the scrollback erase had failed. It doesn't seem like the
tests were deliberately trying to verify that the SoftReset _hadn't_ been
called.

In addition to the updates to existing tests, this PR also add a new screen
buffer test which verifies the display and scrollback are correctly cleared
under the conditions that were previously failing.

Fixes #2307.",,,,True,False,False,123,67,5,5,j4_james@hotmail.com,duhowett@microsoft.com,"08/28/2019, 01:45:38",2019,"08/28/2019, 01:45:38",2019,1,0,0,3.2,2.4,0
,"Clean up Pane (#2494)

* Merge pane splitting methods

Having separate Horizontal/Vertical versions made it hard to manage, and App.cpp already made use of Pane::SplitState so it made sense to have that be the descriminator

* Rename Tab::(Can)AddSplit to (Can)SplitPane to align with Pane methods

Split was used as a noun in Tab but a verb in Pane, which felt odd

* Remove unused local variable in Pane::_CanSplit

* Remove redundant 'else' branches in Pane

Improves readibility for all 'low hanging fruit' cases where the 'if' was returning.",,,,False,False,False,79,162,5,5,richard@richardszalay.com,duhowett@microsoft.com,"08/28/2019, 14:40:16",2019,"08/28/2019, 14:40:16",2019,3,0,0,2.3,2.5,0
,"Fixed typo in user-docs (#2592)

Fixed typo ""the the"".",,,,True,True,False,1,1,1,1,54248166+martin389@users.noreply.github.com,duhowett@microsoft.com,"08/29/2019, 00:43:29",2019,"08/29/2019, 00:43:29",2019,1,0,0,2.5,1.2,0
,"Fix typo (#2538)

changed ""an file"" to ""a file""",,,,True,True,False,2,2,1,1,drebelsky@gmail.com,miniksa@microsoft.com,"08/29/2019, 16:41:10",2019,"08/29/2019, 16:41:10",2019,3,0,2,2.5,1.2,0
,"Added more bot rules (#2502)

* Added more bot rules

* Update bot.md",,,,False,False,False,14,0,1,1,miniksa@microsoft.com,noreply@github.com,"08/29/2019, 16:45:02",2019,"08/29/2019, 16:45:02",2019,3,2,2,5.0,1.0,0
,"Update building.md (#2501)

minor spelling corrections",,,,False,False,False,2,2,1,1,brightbluejay@users.noreply.github.com,miniksa@microsoft.com,"08/29/2019, 16:46:32",2019,"08/29/2019, 16:46:32",2019,3,0,2,2.5,1.0,0
,"Changed default padding to 8,8,8,8 and default font size to 11 (#2378)

* changed default padding to 5,5,5,5 and default font size to 11

* updated documentation

* changed padding to 8",,,,False,False,False,4,4,2,2,48369326+cinnamon-msft@users.noreply.github.com,miniksa@microsoft.com,"08/29/2019, 16:47:01",2019,"08/29/2019, 16:47:01",2019,3,0,2,2.5,1.2,0
,Make warnings errors for static analysis.,,,,False,False,False,1,6,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 17:27:29",2019,"08/29/2019, 17:27:29",2019,3,2,2,0.7,1.2,0
,"C26446, Use .at instead of array indices",,,,False,False,False,48,48,9,9,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 18:05:32",2019,"08/29/2019, 18:05:32",2019,4,2,2,2.5,2.0,0
,"[Complex] C26446, Use .at instead of array indices - Reword UTF8OutPipeReader to use std::array so we can use .at and move some pointers to iterators.",,,,False,False,False,15,13,2,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 18:09:44",2019,"08/29/2019, 18:09:44",2019,4,2,2,2.6,1.0,0
,"C26477, don't use 0 or NULL, use nullptr.",,,,False,False,False,9,9,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 18:12:55",2019,"08/29/2019, 18:12:55",2019,4,2,2,2.5,1.0,0
,"C26496, mark const if it's never written after creation",,,,False,False,False,70,71,15,13,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 18:27:39",2019,"08/29/2019, 18:27:39",2019,4,2,2,2.5,3.0,0
,"C26493, no C-style casts.",,,,False,False,False,19,19,4,4,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 19:45:16",2019,"08/29/2019, 19:45:16",2019,4,2,2,2.5,1.0,0
,"C26435, choose one of `virtual`, `override`, or `final`",,,,False,False,False,58,58,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 20:07:08",2019,"08/29/2019, 20:07:08",2019,4,2,2,2.5,2.0,0
,"C26472, no static_cast for arithmetic conversions. narrow or narrow_cast",,,,False,False,False,45,45,11,10,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 20:19:01",2019,"08/29/2019, 20:19:01",2019,4,2,2,2.5,2.5,0
,"C26433, overrides should be explicit.",,,,False,False,False,47,47,4,3,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 20:23:32",2019,"08/29/2019, 20:23:32",2019,4,2,2,2.5,1.5,0
,"C26451, promote before arithmetic if storing in larger result size (or use safe math)",,,,False,False,False,24,19,6,5,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 20:41:51",2019,"08/29/2019, 20:41:51",2019,4,2,2,2.7,1.5,0
,"C26481, don't use pointer arithemetic. use span.",,,,False,False,False,14,11,5,5,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 21:08:47",2019,"08/29/2019, 21:08:47",2019,4,2,2,2.8,1.0,0
,"C26447,C26440 - is noexcept but can throw or doesn't throw but not noexcept",,,,False,False,False,565,524,52,50,miniksa@microsoft.com,miniksa@microsoft.com,"08/29/2019, 22:23:07",2019,"08/29/2019, 22:23:07",2019,4,2,2,2.6,5.0,0
,catch failure to open clipboard (#2590),,,,True,True,False,6,2,1,1,carlos.zamora@microsoft.com,duhowett@microsoft.com,"08/30/2019, 00:31:53",2019,"08/30/2019, 00:31:53",2019,1,0,0,3.7,1.2,0
,doc: move cascadia specs and rename them to spec format (#2593),,,,False,False,False,3,1,3,3,duhowett@microsoft.com,noreply@github.com,"08/30/2019, 00:32:27",2019,"08/30/2019, 00:32:27",2019,1,0,2,3.7,1.0,0
,"C26429, symbols not tested for nullness.",,,,False,False,False,167,66,9,8,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 15:46:24",2019,"09/03/2019, 15:46:24",2019,3,2,2,3.6,3.0,0
,"C26474, don't use static_cast when an implicit cast is acceptable.",,,,False,False,False,26,47,3,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 15:53:54",2019,"09/03/2019, 15:53:54",2019,3,2,2,1.8,1.5,0
,"C26466, disable dynamic_cast rule because we're not RTTI due to OS policy. Also reinstitute C6001 and C6011 because they're not actually a part of the 'core checks' and they're goodness we had before I turned them off at the beginning of this series.",,,,False,False,False,9,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 16:15:49",2019,"09/03/2019, 16:15:49",2019,3,2,2,5.0,1.0,0
,"C26485, refactor to avoid array-to-pointer decay.",,,,False,False,True,23,22,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 16:40:31",2019,"09/03/2019, 16:40:31",2019,3,2,2,3.0,1.0,0
,"C26473, do not cast pointer back to the same type.",,,,False,False,False,8,4,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 16:44:19",2019,"09/03/2019, 16:44:19",2019,3,2,2,3.3,1.0,0
,"C26494, uninitalized local variables",,,,False,False,False,113,151,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 17:02:18",2019,"09/03/2019, 17:02:18",2019,3,2,2,2.1,2.5,0
,"C26462, const local variables that are unchanged.",,,,False,False,False,5,5,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 17:04:30",2019,"09/03/2019, 17:04:30",2019,3,2,2,2.5,1.0,0
,"C26445, wstring_view byref may indicate a lifetime issue",,,,False,False,False,3,1,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 17:19:59",2019,"09/03/2019, 17:19:59",2019,3,2,2,3.7,1.2,0
,"C26497, use constexpr for functions that could be evaluated at compile time.",,,,False,False,False,10,15,8,8,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 17:30:06",2019,"09/03/2019, 17:30:06",2019,3,2,2,2.0,1.5,0
,"C26429, mark gsl::not_null on places where we don't test for null (shouldn't need to, internal methods only.",,,,False,False,False,92,109,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 18:18:28",2019,"09/03/2019, 18:18:28",2019,4,2,2,2.3,2.5,0
,"C26430, not tested for nullness on all paths. I will just always check for null as a defense against a bad QI implementation.",,,,False,False,False,4,10,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 18:20:27",2019,"09/03/2019, 18:20:27",2019,4,2,2,1.4,1.0,0
,"C26414, don't use smart pointers for locals",,,,False,False,False,8,8,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 18:27:43",2019,"09/03/2019, 18:27:43",2019,4,2,2,2.5,1.0,0
,"C26460, use const on params that are unchanged (and remove some unnecessary span refs).",,,,False,False,False,19,14,4,4,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 20:02:09",2019,"09/03/2019, 20:02:09",2019,4,2,2,2.9,1.0,0
,forgot all return paths to _FillRectangle.,,,,False,False,False,2,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 20:30:03",2019,"09/03/2019, 20:30:03",2019,4,2,2,5.0,1.0,0
,"Reflect inbox changes in 8c63dff

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/190820-1847 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 73e964d4046c37df3030970cae1ae32e83103fb5

(cherry picked from commit 8c63dff982093db1af7e2bb46b49af884dfec0c5)",,,,False,False,False,2,1,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"08/28/2019, 01:49:56",2019,"09/03/2019, 20:32:31",2019,4,2,0,3.3,1.0,6
,"C26432, rule-of-five (if you define one of destruct/copy/move, then define them all)",,,,False,False,False,53,8,13,13,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 20:45:16",2019,"09/03/2019, 20:45:16",2019,4,2,2,4.3,2.5,0
,"C26443, overriding destructors shouldn't declare virtual nor override.",,,,False,False,False,2,2,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:14:07",2019,"09/03/2019, 21:14:07",2019,4,2,2,2.5,1.0,0
,"C26434, do not hide base class methods. Overriding this one because it's going to require design changes that need a future todo.",,,,False,False,False,2,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:22:02",2019,"09/03/2019, 21:22:02",2019,4,2,2,5.0,1.0,0
,"C26426, global initializers calling non-constexpr. Suppress for default settings as changing to wstring_view cascades through the entire codebase (non-trivial, string_views aren't guaranteed as Z terminated.)",,,,False,False,False,4,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:30:40",2019,"09/03/2019, 21:30:40",2019,4,2,2,5.0,1.2,0
,"C26426, global initializer calls non-constexpr. This needs further consideration. I brifely tried to turn GlyphWidth into a singleton class but it cascaded into interesting far corners of the code because IsGlyphFullWidth was liberally used everywhere for a long time. I'm punting here to a future work item.",,,,False,False,False,1,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:32:44",2019,"09/03/2019, 21:32:44",2019,4,2,2,5.0,1.0,0
,"C26426, global initializer calls non-constexpr. This is an easy move to wstring_view.",,,,False,False,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:33:00",2019,"09/03/2019, 21:33:00",2019,4,2,2,2.5,1.0,0
,"C26490, don't reinterpret_cast. It looks like the buffer can easily be char. Also use brace initialization per feedback.",,,,False,False,False,7,7,2,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:39:23",2019,"09/03/2019, 21:39:23",2019,4,2,2,2.5,1.0,0
,"C26455, default constructor may not throw. Mark `noexcept`. (Trivial cases.)",,,,False,False,False,8,8,7,7,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 21:57:14",2019,"09/03/2019, 21:57:14",2019,4,2,2,2.5,1.8,0
,Define actual constructor for CodepointWidthDetector as default isn't cutting it.,,,,False,False,False,10,1,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:03:54",2019,"09/03/2019, 22:03:54",2019,4,2,2,4.5,1.2,0
,"C26455, default constructor may not throw, mark as nothrow (another trivial one)",,,,False,False,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:04:42",2019,"09/03/2019, 22:04:42",2019,4,2,2,2.5,1.2,0
,"C26490, no reinterpret_cast. Suppress on OutputCellIterator because fixing it will make trouble in the Windows build if we're not careful thanks to non-differentiation of wchar_t and DWORD.",,,,True,True,False,5,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:08:48",2019,"09/03/2019, 22:08:48",2019,4,2,2,5.0,1.2,0
,"C26490, no reinterpret_cast. Just use the actual struct and copy instead of relying on the wink/nudge fact they're defined the same way.",,,,False,False,False,11,2,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:09:30",2019,"09/03/2019, 22:09:30",2019,4,2,2,4.2,1.0,0
,"C26440, default constructors should be noexcept.",,,,False,False,False,2,2,2,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:10:33",2019,"09/03/2019, 22:10:33",2019,4,2,2,2.5,1.2,0
,"C26429, test for nullness or mark as not_null (and a few cascading warnings.",,,,False,False,False,11,8,3,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:14:44",2019,"09/03/2019, 22:14:44",2019,4,2,2,2.5,1.0,0
,"C26497, you can mark this thing as constexpr.",,,,False,False,False,2,2,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:18:01",2019,"09/03/2019, 22:18:01",2019,4,2,2,2.5,1.0,0
,"C26429, mark as not_null if not testing for nullness.",,,,False,False,False,12,14,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:23:44",2019,"09/03/2019, 22:23:44",2019,4,2,2,2.3,1.0,0
,"C26429, C26481, don't use pointer arithmetic, test for nullness. Also eliminated completely unused GetTextRaw. Left todo behind for pointers as iterator boundaries in CharRowCellReference to fix later.",,,,True,True,False,6,28,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:41:37",2019,"09/03/2019, 22:41:37",2019,4,2,2,0.9,1.2,0
,"C26481, don't use pointer arithmetic. Convert to measuring string within known limit and using view.",,,,False,False,False,7,6,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 22:48:02",2019,"09/03/2019, 22:48:02",2019,4,2,2,2.7,1.0,0
,Suppress last two errors (C26455 default constructor throw in DxEngine because it's due for refactoring soon anyway & C26444 custom construction/destruction on OutputCellIterator because I can't see what's going on and it needs more investigation and shouldn't hold this up). Also run codeformat.,,,,False,False,True,48,43,19,18,miniksa@microsoft.com,miniksa@microsoft.com,"09/03/2019, 23:18:19",2019,"09/03/2019, 23:18:19",2019,4,2,2,3.1,3.0,0
,constexprs have to go into the headers or other usages can't find them. Imagine that.,,,,False,False,False,42,47,5,5,miniksa@microsoft.com,miniksa@microsoft.com,"09/04/2019, 17:59:18",2019,"09/04/2019, 17:59:18",2019,3,2,2,2.4,1.5,0
,"Fixes #1918 - Added docs for image/icon settings & paths (#2545)

* Fixes #1918 - Added docs for image/icon settings & paths

* Described URI Schemes & their use
* Added guidance re. background images
* Added notes re. icons (inc. sizing)
* Added example JSON & screenshot of background & icon",,,,True,False,False,46,1,2,1,richturn@microsoft.com,noreply@github.com,"09/04/2019, 18:21:39",2019,"09/04/2019, 18:21:39",2019,4,0,2,4.9,1.2,0
,"Add support for short hex color codes like #CCC (#2658)

This adds a few lines to support shorthand color hex codes like #ABC. They are treated as equivalent of #AABBCC.

Fixes #2639.",,,,True,False,False,19,6,2,2,konstantin.yakushev@evision-software.com,duhowett@microsoft.com,"09/04/2019, 18:45:35",2019,"09/04/2019, 18:45:35",2019,4,0,0,3.8,1.2,0
,"Open-source the PseudoConsole family of functions in a new DLL (#2611)

This pull request introduces a copy of the code from kernel32.dll that
implements CreatePseudoConsole, ClosePseudoConsole and
ResizePseudoConsole. Apart from some light modifications to fit into the
infrastructure in this project and support launching OpenConsole.exe, it
is intended to be 1:1 with the code that ships in Windows.

Any guideline violations in this code are likely intentional. Since this
was built into kernel32, it uses the STL only _very sparingly._

Consumers of this library must make sure that conpty.lib lives earlier
in the link line than onecoreuap_apiset, onecoreuap, onecore_apiset,
onecore or kernel32.

Refs #1130.",,,,False,False,False,577,1,10,9,duhowett@microsoft.com,noreply@github.com,"09/04/2019, 19:03:44",2019,"09/04/2019, 19:03:44",2019,4,0,2,5.0,3.5,0
,Fix redefinition of class name for constexpr method I moved from CPP to HPP.,,,,True,True,False,27,27,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/04/2019, 19:49:15",2019,"09/04/2019, 19:49:15",2019,4,2,2,2.5,1.8,0
,"code formatter, you're killing me.",,,,False,False,False,25,25,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"09/04/2019, 20:40:10",2019,"09/04/2019, 20:40:10",2019,4,2,2,2.5,1.0,0
,"Clean up boundary between terminal app and terminal page (#2208)

* change 1: add settings pointer and some member variables to page

* clean up the boundary between Page and App - First working version

* First CR review change

* Sync and remove declaration of TraceLogger provider

* Code review round 2 - apply missed new changes

* remove useless comment

* CR change round 3

* CR minor changes

* apply changes from Aug 6th to Aug 14th

* Code review changes round 4

* Apply changes on Aug 16

* Cr changes on 8/20

* CR changes on 8-26

* correct syncing mistakes and fix formatting issues

* CR changes on 8-29

* CR changes 9-4

* apply new changes of App

* Format fix",,,,True,True,False,1531,1351,9,9,kawa@microsoft.com,noreply@github.com,"09/04/2019, 21:34:06",2019,"09/04/2019, 21:34:06",2019,4,0,2,3.1,4.2,0
,fix remaining issues that appeared on merge.,,,,True,True,False,14,12,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/04/2019, 22:45:22",2019,"09/04/2019, 22:45:22",2019,4,2,2,2.7,1.2,0
,"warnings as errors for cppwinrt projects, then fix the warnings (#2660)

Fixes #1155.",,,,True,False,False,42,37,8,7,miniksa@microsoft.com,duhowett@microsoft.com,"09/04/2019, 23:43:45",2019,"09/04/2019, 23:43:45",2019,4,2,0,2.7,2.4,0
,Add GH issue IDs to all the suppress/disables that I left behind as they were a bit too challenging to solve with this giant PR,,,,False,False,False,5,2,5,5,miniksa@microsoft.com,miniksa@microsoft.com,"09/05/2019, 18:14:37",2019,"09/05/2019, 18:14:43",2019,4,2,2,3.6,1.2,0
,PR feedback.,,,,False,False,False,4,4,2,2,miniksa@microsoft.com,miniksa@microsoft.com,"09/05/2019, 18:17:13",2019,"09/05/2019, 18:17:13",2019,4,2,2,2.5,1.0,0
,"Don't crash when restore-down'ing the alt buffer (#2666)

## Summary of the Pull Request

When a user had ""Disable Scroll Forward"" enabled and switched to the alt buffer and maximized the console, then restored down, we'd crash. Now we don't.

## References

## PR Checklist
* [x] Closes #1206 
* [x] I work here
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments

The problem is that we'd previously try to ""anchor"" the viewport to the virtual bottom when resizing like this. This would also cause us to move the top of the viewport down, into the buffer. However, if the alt buffer is getting smaller, we don't want to do this - if we anchor to the old _virtualBottom, the bottom of the viewport will actually be outside the current buffer.

This could theoretically happen with the main buffer too, but it's much easier to repro with the alt buffer.",,,,True,True,False,71,2,2,2,migrie@microsoft.com,noreply@github.com,"09/05/2019, 20:37:27",2019,"09/05/2019, 20:37:27",2019,4,2,2,4.9,1.8,0
,"Add some logging around startup, connection start timing (#2544)


Adds a number of TL events we can use to track startup time better. Adds events for:
* Initial exe start
* Time the window is created
* time we start loading settings
* time we finish loading setings
* time when a connection recieves its first byte

Also updates our `ConnectionCreated` event to include the session GUID, so that we can correlate that with the connection's `RecievedFirstByte` event.",,,,False,False,False,117,6,10,8,migrie@microsoft.com,noreply@github.com,"09/05/2019, 20:38:42",2019,"09/05/2019, 20:38:42",2019,4,2,2,4.7,2.5,0
,Some of the PR feedback.,,,,False,False,False,29,33,8,8,miniksa@microsoft.com,miniksa@microsoft.com,"09/06/2019, 00:16:31",2019,"09/06/2019, 00:21:54",2019,1,2,2,2.3,2.0,0
,"Changed feedback hub request rule (#2680)

We were using a tag to trigger the bot for the verbose feedback hub response.

But...
1. We have run into several instances of the bot aggressively replying multiple times before the tag is removed.
2. We asked for a ""comment contains"" function in the bot and the Fabric Bot team obliged.

So I've changed it to `/duplicate` from the tag trigger and will remove the tag.",,,,False,False,False,3,4,1,1,miniksa@microsoft.com,migrie@microsoft.com,"09/06/2019, 13:55:13",2019,"09/06/2019, 13:55:13",2019,3,2,2,2.1,1.0,0
,"doc: amend docs procedure for `Running a Different Shell` (#2605)

* Amends user-docs procedure

Amends docs procedure for `Running a Different Shell`:
* Adds an overview sentence.
* Adds some light rephrasing.
* Proposes using the countersink arrow `⌵` to depict the `down` GUI element.

* Adds link to WSL installation guide",,,,False,False,False,6,4,1,1,54248166+martin389@users.noreply.github.com,duhowett@microsoft.com,"09/09/2019, 02:20:17",2019,"09/09/2019, 02:20:17",2019,1,0,0,3.0,1.0,0
,"Prevent ""Options"" propsheet from reverting cursor shape settings (#2663)

* this actually fixes #1219

* the terminal page should check the checkbox on the options page

* Discard these changes from #2651

* Add comments, pull function out to helper",,,,True,False,False,50,14,7,7,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"09/09/2019, 14:45:05",2019,"09/09/2019, 14:45:05",2019,3,2,0,3.9,2.4,0
,"When inserting/deleting lines, preserve RGB/256 attributes (#2668)

* This fixes #832 by not mucking with roundtripping attributes. Still needs a test

* Add a test

* Lets just make this test test everything

  @miniksa https://media0.giphy.com/media/d7mMzaGDYkz4ZBziP6/giphy.gif

* Remove dead code",,,,True,False,False,118,6,2,2,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"09/09/2019, 15:06:50",2019,"09/09/2019, 15:06:50",2019,3,2,0,4.8,2.4,0
,"A few PR comments. A constexpr here, a misleading comment there, and an extraneous local.",,,,False,False,False,4,6,3,3,miniksa@microsoft.com,miniksa@microsoft.com,"09/09/2019, 23:01:28",2019,"09/09/2019, 23:01:28",2019,4,2,2,2.0,1.0,0
,Stylus Selection Support (#2586),,,,False,False,False,3,3,1,1,carlos.zamora@microsoft.com,noreply@github.com,"09/10/2019, 16:29:31",2019,"09/10/2019, 16:29:31",2019,3,0,2,2.5,1.0,0
,"Add SECURITY.md to repo (#2720)

Open Source program office guidelines encourage us to add this information to our repository. So I'm doing it.

Sourced from https://github.com/microsoft/microsoft.github.io/blob/master/SECURITY.MD",,,,False,False,False,41,0,1,1,miniksa@microsoft.com,noreply@github.com,"09/10/2019, 22:56:50",2019,"09/10/2019, 22:56:50",2019,4,2,2,5.0,1.0,0
,"Fix json settings documentation (#2699)

* Fix json settings documentation

The ctrl+c issue was fixed in [#2446](https://github.com/microsoft/terminal/pull/2446)

* Update UsingJsonSettings.md",,,,True,True,False,1,1,1,1,fredisoft@gmail.com,miniksa@microsoft.com,"09/10/2019, 23:08:15",2019,"09/10/2019, 23:08:15",2019,4,0,2,2.5,1.2,0
,"Correct the boundaries of the scrolling commands (#2505)

There are a number of VT escape sequences that rely on the `ScrollRegion`
function to scroll the viewport (RI, DL, IL, SU, SD, ICH, and DCH) , and all of
them have got the clipping rect or scroll boundaries wrong in some way,
resulting in content being scrolled off the screen that should have been
clipped, revealed areas not being correctly filled, or parts of the screen not
being moved that should have been. This PR attempts to fix all of those issues.

The `ScrollRegion` function is what ultimately handles the scrolling, but it's
typically called via the `ApiRoutines::ScrollConsoleScreenBufferWImpl` method,
and it's the callers of that method that have needed correcting.

One ""mistake"" that many of these operations made, was in setting a clipping
rect that was different from the scrolling rect. This should never have been
necessary, since the area being scrolled is also the boundary into which the
content needs to be clipped, so the easiest thing to do is just use the same
rect for both parameters.

Another common mistake was in clipping the horizontal boundaries to the width
of the viewport. But it's really the buffer width that represents the active
width of the screen - the viewport width and offset are merely a window on that
active area. As such, the viewport should only be used to clip vertically - the
horizontal extent should typically be the full buffer width.

On that note, there is really no need to actually calculate the buffer width
when we want to set any of the scrolling parameters to that width. The
`ScrollRegion` function already takes care of clipping everything within the
buffer boundary, so we can simply set the `Left` of the rect to `0` and the
`Right` to `SHORT_MAX`.

More details on individual commands:

* RI (the `DoSrvPrivateReverseLineFeed` function)
  This now uses a single rect for both the scroll region and clipping boundary,
  and the width is set to `SHORT_MAX` to cover the full buffer width. Also the
  bottom of the scrolling region is now the bottom of the viewport (rather than
  bottom-1), otherwise it would be off by one.

* DL and IL (the `DoSrvPrivateModifyLinesImpl` function)
  Again this uses a single rect for both the scroll region and clipping
  boundary, and the width is set to `SHORT_MAX` to cover the full width. The
  most significant change, though, is that the bottom boundary is now the
  viewport bottom rather than the buffer bottom. Using the buffer bottom
  prevented it clipping the content that scrolled off screen when inserting,
  and failed to fill the revealed area when deleting.

* SU and SD (the `AdaptDispatch::_ScrollMovement` method)
  This was already using a single rect for both the scroll region and clipping
  boundary, but it was previously constrained to the width of the viewport
  rather than the buffer width, so some areas of the screen weren't correctly
  scrolled. Also, the bottom boundary was off by 1, because it was using an
  exclusive rect while the `ScrollRegion` function expects inclusive rects.

* ICH and DCH (the `AdaptDispatch::_InsertDeleteHelper` method)
  This method has been considerably simplified, because it was reimplementing a
  lot of functionality that was already provided by the `ScrollRegion`
  function. And like many of the other cases, it has been updated to use a
  single rect for both the scroll region and clipping boundary, and clip to the
  full buffer width rather than the viewport width.

I should add that if we were following the specs exactly, then the SU and SD
commands should technically be panning the viewport over the buffer instead of
moving the buffer contents within the viewport boundary. So SU would be the
equivalent of a newline at the bottom of the viewport (assuming no margins).
And SD would assumedly do the opposite, scrolling the back buffer back into
view (an RI at the top of the viewport should do the same).

This doesn't seem to be something that is consistently implemented, though.
Some terminals do implement SU as a viewport pan, but I haven't seen anyone
implement SD or RI as a pan. If we do want to do something about this, I think
it's best addressed as a separate issue.

## Validation Steps Performed

There were already existing tests for the SU, SD, ICH, and DCH commands, but
they were implemented as adapter tests, which weren't effectively testing
anything - the `ScrollConsoleScreenBufferW` method used in those tests was just
a mock (an incomplete reimplementation of the `ScrollRegion` function), so
confirming that the mock produced the correct result told you nothing about the
validity of the real code.

To address that, I've now reimplemented those adapter tests as screen buffer
tests. For the most part I've tried to duplicate the functionality of the
original tests, but there are significant differences to account for the fact
that scrolling region now covers the full width of the buffer rather than just
the viewport width.

I've also extended those tests with additional coverage for the RI, DL, and IL
commands, which are really just a variation of the SU and SD functionality.

Closes #2174",,,,True,False,False,525,827,4,4,j4_james@hotmail.com,duhowett@microsoft.com,"09/11/2019, 01:20:46",2019,"09/11/2019, 01:20:46",2019,1,0,0,1.9,3.6,0
,Update link to Background Images and Icons section (#2725),,,,False,False,False,1,1,1,1,kynapse@users.noreply.github.com,carlos.zamora@microsoft.com,"09/11/2019, 16:21:15",2019,"09/11/2019, 16:21:15",2019,3,0,0,2.5,1.0,0
,"Edits doc section `Configuring Windows Terminal` (#2719)

* Edits doc section `Configuring Windows Terminal`

* Converts into a procedure.
* Uses `⌵` character to replace the `down` UI element.

* Additional minor edit

Updates formatting, edits for brevity.

* Fixed json path

Added `8wekyb3d8bbwe` to file path.",,,,True,True,False,6,7,1,1,54248166+martin389@users.noreply.github.com,carlos.zamora@microsoft.com,"09/11/2019, 16:24:20",2019,"09/11/2019, 16:24:20",2019,3,0,0,2.3,1.2,0
,"Move cursor to left margin for IL and DL controls (#2731)

* Move cursor position to the left margin after execution of the IL and DL escape sequences.
* Update IL and DL screen buffer tests to account for the cursor moving to the left margin.",,,,False,False,False,23,6,2,2,j4_james@hotmail.com,miniksa@microsoft.com,"09/12/2019, 17:46:38",2019,"09/12/2019, 17:46:38",2019,3,0,2,4.0,1.0,0
,"wap: add some workaround to ensure that our package builds on 16.3 (#2730)

Fixes #2625.",,,,True,False,False,31,1,2,2,duhowett@microsoft.com,noreply@github.com,"09/13/2019, 21:34:41",2019,"09/13/2019, 21:34:41",2019,4,0,2,4.8,1.2,0
,"Bugfix: CLS should clear current active buffer (#2729)

CLS calls two functions: 
- `SetConsoleCursorPositionImpl()`
- `ScrollConsoleScreenBufferWImpl()`
Both of these were not checking which buffer to apply to (main vs active buffer).

Now we get the active buffer and apply the changes to that one.

Also, we forgot to switch out of the alt buffer in the previous test. Added that in.

Closes #1189.",,,,False,False,False,104,7,2,2,carlos.zamora@microsoft.com,duhowett@microsoft.com,"09/13/2019, 21:36:01",2019,"09/13/2019, 21:36:01",2019,4,0,0,4.7,2.4,0
,"Set Proper Background Color in HTML Copy (#2762)

* Set actual background color in HTML copy

* const

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* format",,,,False,False,False,11,7,4,4,38111589+mcpiroman@users.noreply.github.com,carlos.zamora@microsoft.com,"09/16/2019, 17:32:04",2019,"09/16/2019, 17:32:04",2019,3,0,0,3.1,1.0,0
,"Add Cascading User + Default Settings (#2515)

This PR represents the start of the work on Cascading User + default settings, #754.

Cascading settings will be done in two parts: 
* [ ] Layered Default+User settings (this PR)
* [ ] Dynamic Profile Generation (#2603).

Until _both_ are done, _neither are going in. The dynamic profiles PR will target this PR when it's ready, but will go in as a separate commit into master.

This PR covers adding one primary feature: the settings are now in two separate files:
* a static `defaults.json` that ships with the package (the ""default settings"")
* a `profiles.json` with the user's customizations (the ""user settings)

User settings are _layered_ upon the settings in the defaults settings.

## References

Other things that might be related here:
* #1378 - This seems like it's definitely fixed. The default keybindings are _much_ cleaner, and without the save-on-load behavior, the user's keybindings will be left in a good state 
* #1398 - This might have honestly been solved by #2475 

## PR Checklist
* [x] Closes #754
* [x] Closes #1378 
* [x] Closes #2566
* [x] I work here
* [x] Tests added/passed
* [x] Requires documentation to be updated - it **ABSOLUTELY DOES**


## Detailed Description of the Pull Request / Additional comments

1. We start by taking all of the `FromJson` functions in Profile, ColorScheme, Globals, etc, and converting them to `LayerJson` methods. These are effectively the same, with the change that instead of building a new object, they are simply layering the values on top of `this` object. 
2. Next, we add tests for layering properties like that.
3. Now, we add a `defaults.json` to the package. This is the file the users can refer to as our default settings.
4. We then take that `defaults.json` and stamp it into an auto generated `.h` file, so we can use it's data without having to worry about reading it from disk.
5. We then change the `LoadAll` function in `CascadiaSettings`. Now, the function does two loads - one from the defaults, and then a second load from the `profiles.json` file, layering the settings from each source upon the previous values.
6. If the `profiles.json` file doesn't exist, we'll create it from a hardcoded `userDefaults.json`, which is stamped in similar to how `defaults.json` is.
7. We also add support for _unbinding_ keybindings that might exist in the `defaults.json`, but the user doesn't want to be bound to anything.
8. We add support for _hiding_ a profile, which is useful if a user doesn't want one of the default profiles to appear in the list of profiles.

## TODO:
* [x] Still need to make Alt+Click work on the settings button
* [x] Need to write some user documentation on how the new settings model works
* [x] Fix the pair of tests I broke (re: Duplicate profiles)


<hr>

* Create profiles by layering them

* Update test to layer multiple times on the same profile

* Add support for layering an array of profiles, but break a couple tests

* Add a defaults.json to the package

* Layer colorschemes

  * Moves tests into individual classes
  * adds support for layering a colorscheme on top of another

* Layer an array of color schemes

* oh no, this was missed with #2481

  must have committed without staging this change, uh oh. Not like those tests actually work so nbd

* Layer keybindings

* Read settings from defaults.json + profiles.json, layer appropriately

  This is like 80% of #754. Needs tests.

* Add tests for keybindings

  * add support to unbind a key with `null` or `""unbound""` or `""garbage""`

* Layer or clear optional properties

* Add a helper to get an optional variable for a bunch of different types

  In the end, I think we need to ask _was this worth it_

* Do this with the stretch mode too

* Add back in the GUID check for profiles

* Add some tests for global settings layering

* M A D  W I T H  P O W E R

  Add a MsBuild target to auto-generate a header with the defaults.json as a
  string in the file. That way, we can _always_ load the defaults. Literally impossible to not.

* When the user's profile.json doesn't exist, create it from a template

* Re-order profiles to match the order set in the user's profiles.json

* Add tests for re-ordering profiles to match user ordering

* Add support for hiding profiles using `""hidden"": true`

* Use the hardcoded defaults.json for the exception->""use defaults"" case

* Somehow I messed up the git submodules?

* woo documentation

* Fix a Terminal.App.Unit.Tests failure

* signed/unsigned is hard

* Use Alt+Settings button to open the default settings

* Missed a signed/unsigned

* Some very preliminary PR feedback

* More PR feedback

  Use the wil helper for the exe path
  Move jsonutils into their own file
  kill some dead code

* Add templates to these bois

* remove some code for generating defaults, reorder defaults.json a tad

* Make guid a std::optional

* Large block of PR feedback

  * Remove some dead code
  * add some comments
  * tag some todos

* stl is love, stl is life

* add `-noprofile`

* Fix the crash that dustin found

* -Encoding ASCII

* Set a profile's default scheme to Campbell

* Fix the tests I regressed

* Update UsingJsonSetting.md to reflect that changes from these PRs

* Change how GenerateGuidForProfile works

* Make AppKeyBindings do its own serialization

* Remove leftover dead code from the previous commit

* Fix up an enormous number of PR nits

* Fix a typo; Update the defaults to match #2378

* Tiny nits

* Some typos, PR nits

* Fix this broken defaults case",,,,True,False,False,2783,699,36,33,migrie@microsoft.com,noreply@github.com,"09/16/2019, 19:57:10",2019,"09/16/2019, 19:57:10",2019,4,2,2,4.2,5.0,0
,"Add Dynamic Profile Generators (#2603)

_**This PR targets the #2515 PR**_. It does that for the sake of diffing. When this PR and #2515 are both ready, I'll merge #2515 first, then change the target of this branch, and merge this one.

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

This PR adds support for ""dynamic profiles"", in accordance with the [Cascading Settings Spec](https://github.com/microsoft/terminal/blob/master/doc/cascadia/Cascading-Default-Settings.md#dynamic-profiles). Currently, we have three types of default profiles that fit the category of dynamic profile generators. These are profiles that we want to create on behalf of the user, but require runtime information to be able to create correctly. Because they require runtime information, we can't ship a static version of these profiles as a part of `defaults.json`. These three profile generators are:
* The Powershell Core generator
* The WSL Distro generator
* The Azure Cloud Shell generator

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #754
* [x] I work here
* [x] look at all these **Tests**
* [x] Requires documentation to be updated - This is done as part of the parent PR

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

We want to be able to enable the user to edit dynamic profiles that are generated from DPGs. When dynamic profiles are added, we'll add entries for them to the user's `profiles.json`. We do this _without re-serializing_ the settings. Instead, we insert a partial serialization for the profile into the user's settings. 

### Remaining TODOs:
* Make sure that dynamic profiles appear in the right place in the order of profiles -> #2722
* [x] don't serialize the `colorTable` key for dynamic profiles.
* [x] re-parse the user settings string if we've changed it.
*  Handle changing the default profile to pwsh if it exists on first launch, or file a follow-up issue -> #2721

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed


<hr>

* Create profiles by layering them

* Update test to layer multiple times on the same profile

* Add support for layering an array of profiles, but break a couple tests

* Add a defaults.json to the package

* Layer colorschemes

  * Moves tests into individual classes
  * adds support for layering a colorscheme on top of another

* Layer an array of color schemes

* oh no, this was missed with #2481

  must have committed without staging this change, uh oh. Not like those tests actually work so nbd

* Layer keybindings

* Read settings from defaults.json + profiles.json, layer appropriately

  This is like 80% of #754. Needs tests.

* Add tests for keybindings

  * add support to unbind a key with `null` or `""unbound""` or `""garbage""`

* Layer or clear optional properties

* Add a helper to get an optional variable for a bunch of different types

  In the end, I think we need to ask _was this worth it_

* Do this with the stretch mode too

* Add back in the GUID check for profiles

* Add some tests for global settings layering

* M A D  W I T H  P O W E R

  Add a MsBuild target to auto-generate a header with the defaults.json as a
  string in the file. That way, we can _always_ load the defaults. Literally impossible to not.

* When the user's profile.json doesn't exist, create it from a template

* Re-order profiles to match the order set in the user's profiles.json

* Add tests for re-ordering profiles to match user ordering

* Add support for hiding profiles using `""hidden"": true`

* Use the hardcoded defaults.json for the exception->""use defaults"" case

* Somehow I messed up the git submodules?

* woo documentation

* Fix a Terminal.App.Unit.Tests failure

* signed/unsigned is hard

* Use Alt+Settings button to open the default settings

* Missed a signed/unsigned

* Start dynamically creating profiles

* Give the inbox generators a namespace

  and generally hack this a lot less

* Some very preliminary PR feedback

* More PR feedback

  Use the wil helper for the exe path
  Move jsonutils into their own file
  kill some dead code

* Add templates to these bois

* remove some code for generating defaults, reorder defaults.json a tad

* Make guid a std::optional

* Large block of PR feedback

  * Remove some dead code
  * add some comments
  * tag some todos

* stl is love, stl is life

* Serialize the source key

* Make the Azure cloud shell a dynamic profile

* Make the built-in namespaces public

* Add a mechanism for quick-diffing a profile

  This will be used to generate the json snippets for dynamically generated profiles.

* Generate partial serializations of dynamic profiles _not_ in the user settings

* Start writing tests for generating dyn profiles

  * dyn profiles generate GUIDs based on _source
  * we won't run DPGs when they'd disabled?

* Add more DPG tests - TestDontRunDisabledGenerators

* Don't layer profiles with a source that's also different

* Add another test, DoLayerUserProfilesOnDynamicsWhenSourceMatches

* Actually insert new dynamic profiles into the file

* Minor cleanup of `Profile::ShouldBeLayered`

* Migrate legacy profiles gracefully

* using namespace winrt::Windows::UI::Xaml;

* _Only_ layer dynamic profiles from user settings, never create

* Write a test for migrating dynamic profiles

* Comments for dayssssss

* add `-noprofile`

* Fix the crash that dustin found

* -Encoding ASCII

* Set a profile's default scheme to Campbell

* Fix the tests I regressed

* Update UsingJsonSetting.md to reflect that changes from these PRs

* Change how GenerateGuidForProfile works

* Make AppKeyBindings do its own serialization

* Remove leftover dead code from the previous commit

* Fix up an enormous number of PR nits

* Don't layer a profile if the json doesn't have a GUID

* Fix a test I unfixed

* get rid of extraneous bois{};

* Piles of PR feedback

* Collection of PR nits

* PR nits

* Fix a typo; Update the defaults to match #2378

* Tiny nits

* In-den-taition!

* Some typos, PR nits

* Fix this broken defaults case

* Apply suggestions from code review

Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>

* PR nits",,,,True,False,False,1788,338,23,23,migrie@microsoft.com,noreply@github.com,"09/16/2019, 20:34:27",2019,"09/16/2019, 20:34:27",2019,4,2,2,4.4,4.8,0
,utils: prevent the corruption of GUID strings (#2765),,,,False,False,False,17,1,2,2,duhowett@microsoft.com,migrie@microsoft.com,"09/16/2019, 22:01:47",2019,"09/16/2019, 22:01:47",2019,4,0,2,4.7,1.0,0
,"Enable Terminal closing with ALT + F4 and warning of multiple open tabs (#2526)

* ALT+F4 to close the terminal app window and warn user of multiple tabs

* Fix indent issue

* Indentation issue fix 2

* add some comments

* move close window warning texts to resources

* CR feedback changes - 8/28

* fix resource file space issue

* Fix resource file space issue 2

* Fix resource file space issue

* minor CR changes

* update comments

* Sync to the latest master branch

* CR changes round 2

* Format fix

* fix type conversion warning

* CR changes on 9-12

* CR feedback changes on 9-12

* add comments why we remove tabs in reverse order

* Fix warnings",,,,True,True,False,139,40,5,5,kawa@microsoft.com,noreply@github.com,"09/17/2019, 05:43:27",2019,"09/17/2019, 05:43:27",2019,1,0,2,3.9,2.4,0
,"Edits doc section `Installing Windows Terminal` (#2728)

* Edits doc section `Installing Windows Terminal`

* Adds some light edits throughout.
* Adds link to `winver` documentation.

* Adds link to Microsoft Store listing

Updates procedure to link to https://aka.ms/install-terminal",,,,False,False,False,5,5,1,1,54248166+martin389@users.noreply.github.com,migrie@microsoft.com,"09/17/2019, 15:47:17",2019,"09/17/2019, 15:47:17",2019,3,0,2,2.5,1.0,0
,"Don't explode name-only profiles (#2789)

* Add a test for #2782

* Attempt to do something weird with _GenerateStub

  I was thinking maybe we have the stubs have a GUID included. I like that less though I think. That would mean that DPGs would always have the GUID generated for them, even if the DPG doesn't specify a GUID. I guess that's fine though. No DPG's _aren't_ generating names now so this shouldn't change anything.

* Add some more notes on why this was a bad idea

* Actually fix the issue at hand

  If the profile doesn't have a guid, it's a name-only profile.
  During validation, we'll generate a GUID for the profile, but
  validation occurs after this. We should ignore these types of
  profiles.
  If a dynamic profile was generated _without_ a GUID, we also
  don't want it serialized here. The first check in
  Profile::ShouldBeLayered checks that the profile hasa guid. For a
  dynamic profile without a GUID, that'll _never_ be true, so it
  would be impossible to be layered.

* Revert ""Add some more notes on why this was a bad idea""

This reverts commit 85b8b8a53cbe05a7c1b37f15e425daf5bae02fb4.

* Revert ""Attempt to do something weird with _GenerateStub""

This reverts commit f204b981770a5630ad489dd81d50ec3ccca56682.

* Little test fixes

* Update src/cascadia/TerminalApp/CascadiaSettingsSerialization.cpp

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,True,False,False,187,0,4,4,migrie@microsoft.com,noreply@github.com,"09/17/2019, 17:20:52",2019,"09/17/2019, 17:20:52",2019,3,2,2,5.0,2.4,0
,"remove null check from glyph run drawing as it's truly optional (#2791)

Fixes #2724.",,,,True,False,False,6,7,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"09/17/2019, 17:25:22",2019,"09/17/2019, 17:25:22",2019,3,2,0,2.3,1.2,0
,"Selection Code Cleanup + Double Click Delimiter Runs (#2511)

* Test: out of bounds selection
* Clean up Selection code:
- selectionVerticalOffset
- proper return values (const)
- Break up GetSelectionRects()

* Fix Delimiter Text Runs (#2552)

* Added helper method and some log comments throughout tests

Closes #1327.
Closes #2261.
Closes #2206.",,,,True,False,False,442,210,4,4,carlos.zamora@microsoft.com,duhowett@microsoft.com,"09/17/2019, 17:39:39",2019,"09/17/2019, 17:39:39",2019,3,0,0,3.7,3.6,0
,"Don't let one bad Dynamic Profile Generator spoil the bunch (#2798)

Fixes #2796",,,,True,False,False,10,6,1,1,duhowett@microsoft.com,noreply@github.com,"09/17/2019, 22:34:28",2019,"09/17/2019, 22:34:28",2019,4,0,2,3.1,1.2,0
,Bugfix: Escape HTML entities (#2777),,,,False,False,False,19,3,1,1,38111589+mcpiroman@users.noreply.github.com,carlos.zamora@microsoft.com,"09/17/2019, 22:43:24",2019,"09/17/2019, 22:43:24",2019,4,0,0,4.3,1.2,0
,"Add `hidden` to the defaults, the userDefaults, and the autogenerated stubs (#2801)

Fixes #2795",,,,True,False,False,16,7,4,4,migrie@microsoft.com,duhowett@microsoft.com,"09/18/2019, 20:37:34",2019,"09/18/2019, 20:37:34",2019,4,2,0,3.5,1.2,0
,"Add a schema reference to the userDefaults and patch one into user data (#2803)

* Add a schema reference to the userDefaults and patch one into existing files
* Only add the , if there's another object in there.",,,,False,False,False,47,0,3,3,duhowett@microsoft.com,noreply@github.com,"09/19/2019, 01:37:23",2019,"09/19/2019, 01:37:23",2019,1,0,2,5.0,1.2,0
,"Updated `startingDirectory`  setting description (#2813)

This change add the note about the path for `startingDirectory` needing to be a Windows path.",,,,False,False,False,1,1,1,1,david.mhernandez97@outlook.com,migrie@microsoft.com,"09/19/2019, 16:24:24",2019,"09/19/2019, 16:24:24",2019,3,0,2,2.5,1.0,0
,Update SignConfig to use SHA2 variant per governance request. (#2802),,,,False,False,False,1,1,1,1,miniksa@microsoft.com,noreply@github.com,"09/19/2019, 16:27:42",2019,"09/19/2019, 16:27:42",2019,3,2,2,2.5,1.0,0
,"Add validation for hiding all the profiles (#2800)

fixes #2794",,,,True,False,False,85,3,5,5,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"09/19/2019, 16:54:36",2019,"09/19/2019, 16:54:36",2019,3,2,0,4.8,1.8,0
,"Initialize the VT tab stops when a buffer is created in VT mode (#2816)

* fixes #411

* update this comment to actually match

* run this test in isolation so it doesn't break other tests, @dhowett-msft

* This fixes the test that's broken?

  Kinda raises more questions tbh",,,,True,False,False,45,0,3,3,migrie@microsoft.com,noreply@github.com,"09/19/2019, 20:23:07",2019,"09/19/2019, 20:23:07",2019,4,2,2,5.0,1.2,0
,Update CascadiaPackage to v0.5,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"09/19/2019, 22:51:53",2019,"09/19/2019, 22:51:53",2019,4,0,2,2.5,1.0,0
,"Package Cascadia Code with the Terminal (release builds) (#2806)

TTF from microsoft/cascadia-code@5f91b87",,,,False,False,False,31,2,4,3,duhowett@microsoft.com,noreply@github.com,"09/19/2019, 23:35:33",2019,"09/19/2019, 23:35:33",2019,4,0,2,4.7,1.0,0
,"Fix display of the ""low ASCII"" glyphs in PC code pages (#1964)

In the legacy console, it used to be possible to write out characters
from the C0 range of a PC code page (e.g. CP437), and get the actual
glyphs defined for those code points (at least those that weren't
processed as control codes). In the v2 console this stopped working so
you'd get an FFFD replacement glyph (�) for those characters instead.
This PR fixes the issue so the correct glyphs are displayed again.

There was already code in place to achieve this in the
`WriteCharsLegacy` method. It used the `GetStringTypeW` method to
determine the character type of the value being output, and if it was a
`C1_CNTRL` character it performed the appropriate mapping. The problem
was that the test of the character type flag was done as a direct
comparision, when it should have been a bit test, so the condition was
never met.

With this condition fixed, the code also needed to be reordered slightly
to handle the null character. That had a special-case mapping to space,
which was previously performed after the control test, but since a null
character now successfully matches `C1_CNTRL`, it no longer falls
through to that special case. To address that, I've had to move the null
check above the control test.

I've tested this manually, by trying to output all the characters in the
affected range (ASCII values 0 to 31, and 127, excluding the actual
control codes 8,9,10 and 13). In all cases they now match the output
that the legacy console produced.

Note that this only applies to PC code pages that have glyphs defined
for the C0 range, so it won't work with the UTF-8 code page, but that
was to be expected - the legacy console behaved the same way.

Also, note that this only works when the `ENABLE_PROCESSED_OUTPUT`
console mode is set. That seems wrong to me (I'd expect the glyphs to
work in both cases), but that's the way the legacy console behaved as
well, so if that's a bug it's a separate issue.

I haven't added any unit tests, because I expect the behaviour of some
of these characters to change over time (as support is added for more
control codes), which could then cause the tests to fail. But if that's
not a concern, I could probably add something to the ScreenBufferTests
(perhaps with a comment warning that the tests might be expected to fail
in the future).

Closes #166.",,,,True,False,False,18,15,1,1,j4_james@hotmail.com,duhowett@microsoft.com,"09/20/2019, 20:42:36",2019,"09/20/2019, 20:42:36",2019,4,0,0,2.7,1.2,0
,"Rework locking and eventing during startup and shutdown to alleviate some VT issues (#2525)

Adjusts the startup and shutdown behavior of most threads in the console host to alleviate race conditions that are either exacerbated or introduced by the VT PTY threads.",,,,False,False,False,732,288,32,28,miniksa@microsoft.com,noreply@github.com,"09/20/2019, 22:43:11",2019,"09/20/2019, 22:43:11",2019,4,2,2,3.5,5.0,0
,Remember last-used string in the Find dialog in conhost (#2845),,,,False,False,False,5,1,1,1,asklar@microsoft.com,migrie@microsoft.com,"09/23/2019, 14:16:40",2019,"09/23/2019, 14:16:40",2019,3,0,2,4.2,1.0,0
,"Improve Accessibility Reliability (#2609)

* Remove WindowUiaProvider entry points
Make TerminalAutomationPeer not crash the app if creation failed.

* code format

* prefer universal initialization

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,True,True,False,30,3,3,3,carlos.zamora@microsoft.com,noreply@github.com,"09/23/2019, 15:59:03",2019,"09/23/2019, 15:59:03",2019,3,0,2,4.6,1.2,0
,"Update path to profiles.json in documentation (#2843)

The profiles.json file was moved from RoamingState to LocalState in
PR #2298. Update the documentation to reflect this change.",,,,False,False,False,4,4,2,2,gageames@users.noreply.github.com,carlos.zamora@microsoft.com,"09/23/2019, 16:15:47",2019,"09/23/2019, 16:15:47",2019,3,0,0,2.5,1.0,0
,"Bugfix: TextBuffer Line Wrapping from VTRenderer (#2797)

* Bugfix: line selection copy

* Revert clipboard change
Change VT renderer to do erase line instead of a ton of erase chars

* revert TerminalApi change",,,,False,False,False,9,1,1,1,carlos.zamora@microsoft.com,miniksa@microsoft.com,"09/23/2019, 16:39:24",2019,"09/23/2019, 16:39:24",2019,3,0,2,4.5,1.2,0
,"Add some retry support to Renderer::PaintFrame (#2830)

If _PaintFrameForEngine returns E_PENDING, we'll give it another two
tries to get itself straight. If it continues to fail, we'll take down
the application.

We observed that the DX renderer was failing to present the swap chain
and failfast'ing when it did so; however, there are some errors from
which DXGI guidance suggests we try to recover. We'll now return
E_PENDING (and destroy our device resources) when we hit those errors.

Fixes #2265.",,,,True,False,False,36,4,2,2,duhowett@microsoft.com,noreply@github.com,"09/23/2019, 22:06:47",2019,"09/23/2019, 22:06:47",2019,4,0,2,4.5,1.2,0
,"Enable VT processing by default for ConPTY (#2824)

This change enables VT processing by default for _all_ conpty clients. See #1965 for a discussion on why we believe this is a righteous change.

Also mentioned in the issue was the idea of only checking the `VirtualTerminalLevel` reg key in the conpty startup. I don't think this would be a more difficult change, looks like all we'd need is a simple `reg.LoadGlobalsFromRegistry();` call instead of this change.

# Validation Steps Performed
Manually launched a scratch app in both the terminal and the console. The console launch's output mode was 0x3, and the terminal's was 0x7. 0x4 is the ` ENABLE_VIRTUAL_TERMINAL_PROCESSING` flag, which the client now had by default in the Terminal.

Closes #1965",,,,False,False,False,11,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"09/23/2019, 22:07:47",2019,"09/23/2019, 22:07:47",2019,4,2,0,5.0,1.2,0
,"Remove unwanted DECSTBM clipping (#2764)

The `DECSTBM` margins are meant to define the range of lines within which
certain vertical scrolling operations take place. However, we were applying
these margin restrictions in the `ScrollRegion` function, which is also used in
a number of places that shouldn't be affected by `DECSTBM`.

This includes the `ICH` and `DCH` escape sequences (which are only affected by
the horizontal margins, which we don't yet support), the
`ScrollConsoleScreenBuffer` API (which is public Console API, not meant to be
affected by the VT terminal emulation), and the `CSI 3 J` erase scrollback
extension (which isn't really scrolling as such, but uses the `ScrollRegion`
function to manipulate the scrollback buffer).

This commit moves the margin clipping out of the `ScrollRegion` function, so it
can be applied exclusively in the places that need it.

With the margin clipping removed from the `ScrollRegion` function, it now had
to be applied manually in the places it was actually required. This included:

* The `DoSrvPrivateReverseLineFeed` function (for the `RI` control): This was
* just a matter of updating the bottom of the scroll rect to the bottom margin
* (at least when the margins were actually set), since the top of the scroll
* rect would always be the top of the viewport.  The
* `DoSrvPrivateModifyLinesImpl` function (for the `IL` and `DL` commands):
* Again this was just a matter of updating the bottom of the scroll rect, since
* the cursor position would always determine the top of the scroll rect.  The
* `AdaptDispatch::_ScrollMovement` method (for the `SU` and `SD` commands):
* This required updating both the top and bottom coordinates of the scroll
* rect, and also a simpler destination Y coordinate (the way the `ScrollRegion`
* function worked before, the caller was expected to take the margins into
* account when determining the destination).

On the plus side, there was now no longer a need to override the margins when
calling `ScrollRegion` in the `AdjustCursorPosition` function. In the first
case, the margins had needed to be cleared (_stream.cpp 143-145), but that is
now the default behaviour. In the second case, there had been a more
complicated adjustment of the margins (_stream.cpp 196-209), but that code was
never actually used so could be removed completely (to get to that point either
_fScrollUp_ was true, so _scrollDownAtTop_ couldn't also be true, or
_fScrollDown_ was true, but in that case there is a check to make sure
_scrollDownAtTop_ is false).

While testing, I also noticed that one of the `ScrollRegion` calls in the
`AdjustCursorPosition` function was not setting the horizontal range correctly
- the scrolling should always affect the full buffer width rather than just the
  viewport width - so I've fixed that now as well.

## Validation Steps Performed

For commands like `RI`, `IL`, `DL`, etc. where we've changed the implementation
but not the behaviour, there were already unit tests that could confirm that
the new implementation was still producing the correct results.

Where there has been a change in behaviour - namely for the `ICH` and `DCH`
commands, and the `ScrollConsoleScreenBuffer` API - I've extended the existing
unit tests to check that they still function correctly even when the `DECSTBM`
margins are set (which would previously have caused them to fail).

I've also tested manually with the test cases in issues #2543 and #2659, and
confirmed that they now work as expected.

Closes #2543
Closes #2659",,,,True,False,False,56,55,6,6,j4_james@hotmail.com,duhowett@microsoft.com,"09/23/2019, 23:16:54",2019,"09/23/2019, 23:16:54",2019,4,0,0,2.5,3.0,0
,defaults: bind alt+f4 to closeWindow (#2858),,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"09/24/2019, 00:12:00",2019,"09/24/2019, 00:12:00",2019,1,0,2,5.0,1.2,0
,"conhost: if we start with invalid terminal colors, reset them to sanity (#2855)

* conhost: if we start with invalid terminal colors, reset them to sanity

We've seen a number of cases where the user's settings can get corrupted
and their default foreground/background and cursor color get set to all
black (black on black). This results in a fairly unhappy user and
probably a great number of support incidents.

Let's declare that an invalid state.

* Add some comments to the comments",,,,False,False,False,18,0,1,1,duhowett@microsoft.com,miniksa@microsoft.com,"09/24/2019, 01:35:53",2019,"09/24/2019, 01:35:53",2019,1,0,2,5.0,1.2,0
,doc: minor typo fix (#2860),,,,True,True,False,2,2,2,2,paul-cheung@users.noreply.github.com,duhowett@microsoft.com,"09/24/2019, 02:58:02",2019,"09/24/2019, 02:58:02",2019,1,0,0,2.5,1.2,0
,"Writeup Terminal milestones & timeline doc (#2821)

First version, including all addressed feedback.",,,,False,False,False,100,3,2,2,richturn@microsoft.com,noreply@github.com,"09/24/2019, 13:49:34",2019,"09/24/2019, 13:49:34",2019,3,0,2,4.9,2.0,0
,Bugfix: EraseInLine off-by-one error (#2879),,,,True,True,False,2,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"09/24/2019, 20:05:39",2019,"09/24/2019, 20:05:39",2019,4,0,2,2.5,1.2,0
,"Improve debugging experience of key events (#2872)

... by adding natvis rules for display and by typifying the flags field so the debugger presents it as flags naturally.",,,,False,False,False,46,15,4,4,miniksa@microsoft.com,duhowett@microsoft.com,"09/24/2019, 20:50:53",2019,"09/24/2019, 20:50:53",2019,4,2,0,4.0,1.8,0
,doc: fix broken releases link in README.md (#2877),,,,True,True,False,1,1,1,1,jonaslomholdt@gmail.com,duhowett@microsoft.com,"09/24/2019, 20:51:33",2019,"09/24/2019, 20:51:33",2019,4,0,0,2.5,1.2,0
,minor typo fix (#2863),,,,True,True,False,13,13,5,5,paul-cheung@users.noreply.github.com,miniksa@microsoft.com,"09/24/2019, 22:34:26",2019,"09/24/2019, 22:34:26",2019,4,0,2,2.5,1.2,0
,"Roadmap doc update (#2882)

* Renamed timeline -> roadmap

* Minor doc update",,,,False,False,False,4,4,1,1,richturn@microsoft.com,migrie@microsoft.com,"09/25/2019, 12:30:33",2019,"09/25/2019, 12:30:33",2019,3,0,2,2.5,1.0,0
,Retarget VtPipeTerm & terminalcore-lib to 18362 (#2885),,,,False,False,False,2,2,2,2,skyline75489@outlook.com,miniksa@microsoft.com,"09/25/2019, 22:09:56",2019,"09/25/2019, 22:09:56",2019,4,0,2,2.5,1.0,0
,Fix the link to the Roadmap & improve the Readme (#2903),,,,True,True,False,54,43,1,1,richturn@microsoft.com,duhowett@microsoft.com,"09/26/2019, 05:00:06",2019,"09/26/2019, 05:00:06",2019,1,0,0,3.2,1.8,0
,"Add source linking information during the build (#2857)

Copies source linking scripts and processes from Microsoft/Microsoft-UI-XAML. This embeds source information inside the PDBs in two formats: One for WinDBG using a PowerShell script that runs during the build, and one for Visual Studio using the Microsoft.SourceLink.GitHub NuGet pacakge. Sources are automatically pulled from raw.githubusercontent.com when debugging a release build inside either of these utilities as of this change.",,,,False,False,False,301,49,22,15,miniksa@microsoft.com,noreply@github.com,"09/26/2019, 16:31:09",2019,"09/26/2019, 16:31:09",2019,3,2,2,4.2,4.2,0
,inbox: merge rs_onecore_dep_uxp b4fc3a535,,,,False,False,False,4,0,4,4,miniksa@microsoft.com,duhowett@microsoft.com,"09/26/2019, 18:43:02",2019,"09/26/2019, 18:44:54",2019,4,2,0,5.0,1.0,0
,Fix double width cursor for CJK characters (#2932),,,,True,True,False,4,1,2,2,skyline75489@outlook.com,migrie@microsoft.com,"09/27/2019, 12:54:31",2019,"09/27/2019, 12:54:31",2019,3,0,2,4.0,1.2,0
,"Fix snapping to the cursor in ""Terminal Scrolling"" mode (#2705)

fixes #1222

  PSReadline calls SetConsoleCursorPosition on each character they emit (go
  figure). When that function is called, and we set the cursor position, we'll
  try and ""snap"" the viewport to the location of the cursor, so that the cursor
  remains visible.

  However, we'd only ever do this with the visible viewport, the viewport
  defined by `SCREEN_INFORMATION::_viewport`. When there's a virtual viewport in
  Terminal Scrolling mode, we actually need to snap the virtual viewport, so
  that this behavior looks more regular.",,,,True,False,False,97,9,2,2,migrie@microsoft.com,noreply@github.com,"09/27/2019, 16:21:37",2019,"09/27/2019, 16:21:37",2019,3,2,2,4.6,2.4,0
,"Update Docs on ""Copy"" Operation (#2799)",,,,False,False,False,11,9,2,2,carlos.zamora@microsoft.com,noreply@github.com,"09/27/2019, 18:07:59",2019,"09/27/2019, 18:07:59",2019,4,0,2,2.8,1.0,0
,"inbox: console: consolidated build break fixes from vb_release_dep_dev1

- Merged PR 3815980: FIX BUILD BREAK - console: propagate input eventing changes to onecore interactivity
- Merged PR 3816007: FIX BUILD BREAK - console: api_ptytests must use SIZE_T for InitProcThreadAttrList

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp c06af1c985955b67b8b6824e264064a6244f8d34

(cherry picked from commit cc46a618ff27b8fb866be660fcad3b043681e5f8)",,,,True,True,False,7,4,3,2,miniksa@microsoft.com,duhowett@microsoft.com,"09/27/2019, 18:23:24",2019,"09/27/2019, 18:24:09",2019,4,2,0,3.6,1.2,0
,"Add profiles.json schema to doc folder (#2704)

* added profiles.json schema to doc folder

* addressed most comments

* addressed most comments

* fixed keybindings regex and color table

* updated schema and settings documentation

* Delete dlfk

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* Update doc/cascadia/profiles.schema.json

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* updated schema",,,,True,True,False,717,181,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"09/27/2019, 20:38:49",2019,"09/27/2019, 20:38:49",2019,4,0,2,4.0,3.6,0
,doc: add note on dynamic profile GUIDs (#2938),,,,False,False,False,5,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"09/27/2019, 21:50:03",2019,"09/27/2019, 21:50:02",2019,4,2,0,5.0,1.0,-1
,"Give powershell its own scheme (#2936)

Fixes #2883.",,,,True,False,False,22,2,1,1,migrie@microsoft.com,duhowett@microsoft.com,"09/28/2019, 01:20:03",2019,"09/28/2019, 01:20:03",2019,1,2,0,4.6,1.2,0
,"Add keyboard shortcuts to increase and decrease font size (#2700)

* Hook up font size key bindings and events

* Combine increase and decrease font size events

* Add zoom keybindings to defaults.json

* Fix whitespace",,,,True,True,False,58,6,13,13,dsafa@users.noreply.github.com,migrie@microsoft.com,"09/30/2019, 13:18:05",2019,"09/30/2019, 13:18:05",2019,3,0,2,4.5,3.0,0
,"Combined changes to make the build work again (see inside) (#2945)

* Revert ""Add source linking information during the build (#2857)""

This reverts commit 6b728cd6d027e2f9787e816c47e23ce0b62f7736.

* Need reference to renderer base inside UnitTests_TerminalCore
* add dependency for TerminalControl to Types project.
* Set build to single threaded as parallel build is broken by 16.3 build toolchain.
* Disable new rule C26814 as it's breaking builds
   Wrote a follow up task #2941 to roll it out later.
* Add noexcept to dx header.",,,,False,False,False,59,305,26,19,miniksa@microsoft.com,duhowett@microsoft.com,"09/30/2019, 17:39:55",2019,"09/30/2019, 17:39:55",2019,3,2,0,0.9,3.5,0
,"Passthrough BEL in conpty (#2990)

🔔
[insert Chorus of the Bells here -DHowett]

Fixes #2952.",,,,True,False,False,11,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"09/30/2019, 22:38:52",2019,"09/30/2019, 22:38:52",2019,4,2,0,5.0,1.2,0
,"doc: update outdated FAQ regarding 1903 (#2995)

Since version 1903 has been released for long time, let's change ""wait for 1903 release"" to ""version 1903 or later"".

[skip ci]",,,,False,False,False,1,1,1,1,xiaoyinl@users.noreply.github.com,duhowett@microsoft.com,"09/30/2019, 22:49:06",2019,"09/30/2019, 22:49:06",2019,4,0,0,2.5,1.0,0
,"teach wil about c++/winrt exceptions by including cppwinrt.h (#2927)

It turns out that if you CATCH_LOG without including this file, and you
end up catching a C++/WinRT hresult_exception, IT TURNS IT INTO A
FAILFAST.

Fixes #2591.
Fixes #2881.
Fixes #2807.",,,,True,False,False,10,0,5,3,duhowett@microsoft.com,noreply@github.com,"09/30/2019, 22:52:27",2019,"09/30/2019, 22:52:27",2019,4,0,2,5.0,1.2,0
,"make filling chars (and, thus, erase line/char) unset wrap (#2831)

EraseInLine calls `FillConsoleOutputCharacterW()`. In filling the row with
chars, we were setting the wrap flag. We need to specifically not do this on
ANY _FILL_ operation. Now a fill operation UNSETS the wrap flag if we fill to
the end of the line.

Originally, we had a boolean `setWrap` that would mean...
- **true**: if writing to the end of the row, SET the wrap value to true
- **false**: if writing to the end of the row, DON'T CHANGE the wrap value

Now we're making this bool a std::optional to allow for a ternary state. This
allows for us to handle the following cases completely. Refer to the table
below:

,- current wrap value
|     ,- are we filling the last cell in the row?
|     |     ,- new wrap value
|     |     |     ,- comments
|--   |--   |--   |
| 0   | 0   | 0   |
| 0   | 1   | 0   |
| 0   | 1   | 1   | THIS CASE WAS HANDLED CORRECTLY
| 1   | 0   | 0   | THIS CASE WAS UNHANDLED
| 1   | 0   | 1   |
| 1   | 1   | 1   |

To handle that special case (1-0-0), we need to UNSET the wrap. So now, we have
~setWrap~ `wrap` mean the following:
- **true**: if writing to the end of the row, SET the wrap value to TRUE
- **false**: if writing to the end of the row, SET the wrap value to FALSE
- **nullopt**: leave the wrap value as it is

Closes #1126",,,,False,False,False,228,17,9,9,carlos.zamora@microsoft.com,duhowett@microsoft.com,"10/01/2019, 01:16:31",2019,"10/01/2019, 01:16:31",2019,1,0,0,4.7,3.0,0
,"Patch fix for #1360 until WriteStream (#780) can be implemented. (#2924)

* Patch fix for #1360 until WriteStream (#780) can be implemented.

* Add a test that hangs in the broken state and passes in the success stat. Writes a bisecting character to the right most cell in the window.

* Code format! *shakes fist at sky*

* Update src/cascadia/TerminalCore/Terminal.cpp",,,,True,False,False,105,0,3,2,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"10/01/2019, 01:45:09",2019,"10/01/2019, 01:45:09",2019,1,2,0,5.0,2.4,0
,Fix Typo in README.md (#2972),,,,True,True,False,1,1,1,1,33924421+newbieworks@users.noreply.github.com,carlos.zamora@microsoft.com,"10/01/2019, 15:15:18",2019,"10/01/2019, 15:15:18",2019,3,0,0,2.5,1.2,0
,"When reverse indexing, preserve RGB/256 attributes (#2987)",,,,False,False,False,47,14,2,2,migrie@microsoft.com,noreply@github.com,"10/01/2019, 15:56:06",2019,"10/01/2019, 15:56:06",2019,3,2,2,3.9,1.5,0
,Partially fix mapping of virtual keys to characters (#2836),,,,True,True,False,71,57,6,6,leonard@hecker.io,migrie@microsoft.com,"10/01/2019, 16:15:30",2019,"10/01/2019, 16:15:30",2019,3,0,2,2.8,3.0,0
,"do not allow CUU and CUD to move ""across"" margins. (#2996)

If we're moving the cursor up, its vertical movement should be stopped
at the top margin. It should not magically jump up to the bottom margin.
Similarly, this applies to moving down and the bottom margin.
Furthermore, this constraint should always apply, not just when the
start position is within BOTH margins

Fixes #2929.",,,,True,False,False,206,9,2,2,migrie@microsoft.com,duhowett@microsoft.com,"10/01/2019, 17:42:33",2019,"10/01/2019, 17:42:33",2019,3,2,0,4.8,3.0,0
,"doc: Remove default issue titles (#2999)

* Removes default issue titles as per today's discussion.
* Removed Guidance issue template

[skip ci]",,,,False,False,False,39,48,4,3,richturn@microsoft.com,duhowett@microsoft.com,"10/01/2019, 23:49:30",2019,"10/01/2019, 23:49:30",2019,4,0,0,2.3,1.8,0
,"Remove a stray inclusion of an old Windows.ImplementationLibrary package (#3026)

Fixes a build error.",,,,True,True,False,0,2,1,1,duhowett@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 17:15:12",2019,"10/02/2019, 17:15:12",2019,3,0,0,0.0,1.2,0
,"Update cmd's default profile to disable acrylic (#3020)

As per prior agreement with WinUI team, disabling acrylic for Cmd (and Windows PowerShell, already complete) by default. 

PowerShell Core/7 and WSL distros allowed to have Acrylic enabled by default.",,,,False,False,False,1,2,1,1,richturn@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 17:23:44",2019,"10/02/2019, 17:23:44",2019,3,0,0,1.7,1.2,0
,"Simplify non-client hit testing in NCIslandWindow to fix doubleclick (#3024)

It turns out that our WM_LBUTTONDOWN handler wasn't even necessary, as
our NCHITTEST tells win32 that all of the titlebar is actually
non-client area. This brings the code in line with
NonNonClientIslandWindow.

Fixes #2513",,,,True,False,False,15,27,2,2,duhowett@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 17:25:10",2019,"10/02/2019, 17:25:10",2019,3,0,0,2.4,1.2,0
,"Propagate window style changes to the titlebar and minmax (#3025)

Fixes #1780",,,,True,False,False,45,19,7,7,duhowett@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 17:27:07",2019,"10/02/2019, 17:27:07",2019,3,0,0,3.5,2.4,0
,"Prevent the v1 propsheet from zeroing colors, causing black text on black background. (#2651)

* This fixes the registry path

  What's happening is the console is writing the Forcev2 setting, then the v1
  console is ignoring those settings, then when you check the checkbox to save
  the v2 settings, we'll write the zeros out. That's obviously bad. So we'll
  only write the v2 settings back to the registry if the propsheet was launched
  from a v2 console.

  This does not fix the shortcut path. That'll be the next commit.

* Fix the shortcut loading too

  fixes #2319

* remove the redundant property I added

* add some notes to the bx.ps1 change",,,,True,False,False,106,60,9,9,migrie@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 23:04:59",2019,"10/02/2019, 23:04:59",2019,4,2,0,3.2,3.0,0
,"Render the cursor state to VT (#2829)

* Render the cursor state to VT
* Remove TestPaintXterm entirely, as it's unused now",,,,False,False,False,192,70,4,4,migrie@microsoft.com,carlos.zamora@microsoft.com,"10/02/2019, 23:11:27",2019,"10/02/2019, 23:11:27",2019,4,2,0,3.7,2.5,0
,"Don't put NUL in the buffer in VT mode (#3015)

* Potentially fixes #1825

  I haven't had a chance to test this fix on my machine with a CentOS VM quite yet, but this _should_ work

  Also adds a test

* add a comment

* woah hey this test was wrong

* Revert bx.ps1",,,,True,False,False,52,3,2,2,migrie@microsoft.com,noreply@github.com,"10/03/2019, 21:04:48",2019,"10/03/2019, 21:04:48",2019,4,2,2,4.7,1.8,0
,"Update Cascadia Code to v1910.04 (#3048)

Updates the font to microsoft/cascadia-code@d3b1adacf2691dfadf8ebd8a08936d3ad8a062d0",,,,False,False,False,1,1,2,1,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"10/03/2019, 22:46:07",2019,"10/03/2019, 22:46:07",2019,4,0,0,2.5,1.0,0
,"doc: update section Starting Windows Terminal (#2998)

* Edits doc section: Starting Windows Terminal
* Proposes using the search function to locate the app.
* Restructures as a procedure.
* Adds misc edits.
* Made step 1 more generic, rather than prescribing the search method.
* Added tip about shortcut for elevated app

[skip ci]",,,,False,False,True,3,5,1,1,54248166+martin389@users.noreply.github.com,duhowett@microsoft.com,"10/03/2019, 23:33:02",2019,"10/03/2019, 23:33:02",2019,4,0,0,2.5,1.0,0
,"[contributing.md] add how to report security bugs (#3005)

* [contributing.md] add how to report security bugs

I think it's a good idea mentioning how to report vulnerabilities in contributing.md, by pointing them to SECURITY.md. This is useful in case people only read contributing.md but not security.md, and incorrectly believe that your team prefers discussing security issues on GitHub.

* Use full name of MSRC

As suggested by miniksa, change ""MSRC"" to ""Microsoft Security Response Center (MSRC)""",,,,True,True,False,3,0,1,1,xiaoyinl@users.noreply.github.com,migrie@microsoft.com,"10/04/2019, 13:35:55",2019,"10/04/2019, 13:35:55",2019,3,0,2,5.0,1.2,0
,"Return to ground when we flush the last char (#2823)

## Summary of the Pull Request
The InputStateMachineEngine was incorrectly not returning to the ground state after flushing the last sequence. That means that something like alt+backspace would leave us in the Escape state, not the ground state. This makes sure we return to ground.

Additionally removes the ""Parser.UnitTests-common.vcxproj"" file, which was originally used for a theoretical time when we only open-sourced the parser. It's unnecessary now, and we can get rid of it.

Also includes a small patch to bcz.cmd, to make sure bx works with projects with a space in their name.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #2746
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated


<hr>

* Return to ground when we flush the last char

  The InputStateMachineEngine was incorrectly not returning to the ground state
  after flushing the last sequence. That means that something like alt+backspace
  would leave us in the Escape state, not the ground state. This makes sure we
  return to ground.

  Fixes #2746.

  Additionally removes the ""Parser.UnitTests-common.vcxproj"" file, which was
  originally used for a theoretical time when we only open-sourced the parser.
  It's unnecessary now, and we can get rid of it.

  Also includes a small patch to bcz.cmd, to make sure bx works with projects
  with a space in their name.

* Update src/terminal/parser/stateMachine.cpp

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* add the comment @miniksa wanted",,,,True,False,False,99,28,5,4,migrie@microsoft.com,noreply@github.com,"10/04/2019, 15:47:39",2019,"10/04/2019, 15:47:39",2019,3,2,2,4.1,2.4,0
,"Add support for passing through extended text attributes, like… (#2917)

## Summary of the Pull Request
Adds support for Italics, Blinking, Invisible, CrossedOut text, THROUGH CONPTY. This does **NOT** add support for those styles to conhost or the terminal.

We will store these ""Extended Text Attributes"" in a `TextAttribute`. When we go to render a line, we'll see if the state has changed from our previous state, and if so, we'll appropriately toggle that state with VT. Boldness has been moved from a `bool` to a single bit in these flags.

Technically, now that these are stored in the buffer, we only need to make changes to the renderers to be able to support them. That's not being done as a part of this PR however.

## References
See also #2915 and #2916, which are some follow-up tasks from this fix. I thought them too risky for 20H1.

## PR Checklist
* [x] Closes #2554
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated


<hr>

* store text with extended attributes too

* Plumb attributes through all the renderers

* parse extended attrs, though we're not renderering them right

* Render these states correctly

* Add a very extensive test

* Cleanup for PR

* a block of PR feedback

* add 512 test cases

* Fix the build

* Fix @carlos-zamora's suggestions

* @miniksa's PR feedback",,,,True,False,False,937,111,35,33,migrie@microsoft.com,noreply@github.com,"10/04/2019, 20:53:54",2019,"10/04/2019, 20:53:54",2019,4,2,2,4.6,5.0,0
,"doc: fix a small issue for #hacktoberfest (#3057)

[skip ci]",,,,True,True,False,1,1,1,1,moritzgloeckl@users.noreply.github.com,duhowett@microsoft.com,"10/04/2019, 20:54:13",2019,"10/04/2019, 20:54:13",2019,4,0,0,2.5,1.2,0
,"Layer the globals globals on top of the root globals (#3031)

## Summary of the Pull Request

Layer the `globals` globals on top of the root globals.

## PR Checklist
* [x] Closes #2906
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
We added the ability for the root to be used as the globals object in #2515. However, if you have a globals object, then the settings in the root will get ignored. That's bad. We should layer them.",,,,False,False,False,117,7,2,2,migrie@microsoft.com,noreply@github.com,"10/04/2019, 21:13:26",2019,"10/04/2019, 21:13:26",2019,4,2,2,4.7,2.0,0
,"doc: update the path to profiles.json (#3087)

This path is consistently `WindowsTerminal_8wekyb3d8bbwe`.",,,,False,False,False,1,1,1,1,54248166+martin389@users.noreply.github.com,duhowett@microsoft.com,"10/08/2019, 17:36:53",2019,"10/08/2019, 17:36:53",2019,3,0,0,2.5,1.0,0
,"Get rid of our hand-rolled sprintf->wstring helpers, prefer WIL (#3106)",,,,False,False,False,7,27,4,4,duhowett@microsoft.com,noreply@github.com,"10/08/2019, 19:04:18",2019,"10/08/2019, 19:04:18",2019,4,0,2,1.0,1.0,0
,"Move the VT parser's parse state into instanced storage (#3110)

The VT parser used to be keeping a boolean used to determine whether it
was in bulk or single-character parse mode in a function-level static.
That turned out to not be great.

Fixes #3108; fixes #3073.",,,,True,False,False,134,12,6,6,duhowett@microsoft.com,noreply@github.com,"10/09/2019, 18:01:15",2019,"10/09/2019, 18:01:15",2019,4,0,2,4.6,3.0,0
,Turn source linking back on for WinDBG style,,,,False,False,False,93,0,2,2,miniksa@microsoft.com,noreply@github.com,"10/09/2019, 19:27:39",2019,"10/09/2019, 19:27:39",2019,4,2,2,5.0,1.5,0
,"Provide the CloseWindow warning experience for the 'X' button (#3049)

Related to #1589.",,,,False,False,False,39,5,10,10,kawa@microsoft.com,duhowett@microsoft.com,"10/11/2019, 00:09:07",2019,"10/11/2019, 00:09:07",2019,1,0,0,4.4,1.5,0
,"Address #2369: Add & update install instructions , inc. VC14 redist (#3122)

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,20,26,2,1,richturn@microsoft.com,noreply@github.com,"10/11/2019, 19:45:05",2019,"10/11/2019, 19:45:05",2019,4,0,2,2.2,1.0,0
,"add wpf control (#2004)

This adds the WPF control to our project, courtesy of the Visual Studio team.
It re-hosts the Terminal Control components inside a reusable WPF adapter so it can be composed onto C# type surfaces like Visual Studio requires.",,,,False,False,False,1832,63,29,29,zoey@dos.cafe,miniksa@microsoft.com,"10/11/2019, 21:02:09",2019,"10/11/2019, 21:02:09",2019,4,0,2,4.8,4.5,0
,"Allow FontInfo{,Base,Desired} to store a font name > 32 wch (#3107)

We now truncate the font name as it goes out to GDI APIs, in console API
servicing, and in the propsheet.

I attempted to defer truncating the font to as far up the stack as
possible, so as to make FontInfo usable for the broadest set of cases.

There were a couple questions that came up: I know that `Settings` gets
memset (memsat?) by the registry deserializer, and perhaps that's
another place for us to tackle. Right now, this pull request enables
fonts whose names are >= 32 characters _in Windows Terminal only_, but
the underpinnings are there for conhost as well. We'd need to explicitly
break at the API, or perhaps return a failure or log something to
telemetry.

* Should we log truncation at the API boundary to telemetry?
-> Later; followup filed (#3123)

* Should we fix Settings here, or later?
-> Later; followup filed (#3123)

* `TrueTypeFontList` is built out of things in winconp, the private
console header. Concern about interop structures.
-> Not used for interop, followup filed to clean it up (#3123)

* Is `unsigned int` right for codepage? For width?
-> Yes: codepage became UINT (from WORD) when we moved from Win16 to
Win32

This commit also includes a workaround for #3170. Growing
CONSOLE_INFORMATION made us lose the struct layout lottery during
release builds, and this was an expedient fix.

Closes #602.
Related to #3123.",,,,True,False,False,154,158,24,24,dustin@howett.net,duhowett@microsoft.com,"10/15/2019, 04:23:45",2019,"10/15/2019, 04:23:45",2019,1,0,0,3.0,4.2,0
,Defer cursor redrawing when writing the buffer (#2960),,,,False,False,False,6,0,1,1,skyline75489@outlook.com,duhowett@microsoft.com,"10/15/2019, 04:44:52",2019,"10/15/2019, 04:44:52",2019,1,0,0,5.0,1.0,0
,doc: Improve the Readme (#3035),,,,False,False,False,72,61,1,1,richturn@microsoft.com,duhowett@microsoft.com,"10/15/2019, 04:46:34",2019,"10/15/2019, 04:46:34",2019,1,0,0,3.2,2.0,0
,"Add a warning when a profile has an unknown color scheme (#3033)

Add a warning when the user sets their colorScheme to a scheme that doesn't exist. When that occurs, we'll set their color table to the campbell scheme, to prevent it from being just entirely black.

This commit also switches scheme storage to a map keyed on name.

Closes #2547",,,,False,False,False,249,158,13,13,migrie@microsoft.com,duhowett@microsoft.com,"10/15/2019, 05:02:52",2019,"10/15/2019, 05:02:52",2019,1,2,0,3.1,3.5,0
,"Upgrade to Microsoft.UI.Xaml 2.2 (#3027)

* We had to move to the final API:
   * Items -> TabItems
   * Items.VectorChanged -> TabItemsChanged
   * TabClose -> TabCloseRequested
   * TabViewItem.Icon -> TabViewItem.IconSource
* TabRowControl has been converted to a ContentPresenter, which
  simplifies its logic a little bit.
* TerminalPage now differentiates MUX and WUX a little better
* Because of the change from Icon to IconSource in TabViewItem,
  Utils::GetColoredIcon needed to be augmented to support MUX IconSources.
  It was still necessary to use for WUX, so it's been templatized.
* I moved us from WUX SplitButton to MUX SplitButton and brought the
  style in line with the one typically provided by TabView.
* Some of our local controls have had their backgrounds removed so
  they're more amenable to being placed on other surfaces.
* I'm suppressing the TabView's padding.
* I removed a number of apparently dead methods from App.
* I've simplified the dragbar's sizing logic and eventing.
* The winmd harvester needed to be taught to not try to copy winmds for
  framework packages.
* We now only initialize the terminal once we know the size

Closes #1896.
Closes #444.
Closes #857.
Closes #771.
Closes #760.",,,,False,False,False,238,172,27,25,duhowett@microsoft.com,noreply@github.com,"10/15/2019, 05:41:43",2019,"10/15/2019, 05:41:43",2019,1,0,2,2.9,4.0,0
,"Replace ExpandEnvironmentStrings double calling with wil helper (#3198)

Closes #2097",,,,False,False,False,9,42,5,5,skyline75489@outlook.com,duhowett@microsoft.com,"10/15/2019, 21:51:33",2019,"10/15/2019, 21:51:33",2019,4,0,0,0.9,1.5,0
,"TermControl: force all ambiguous glyphs to be narrow (#2928)

From Egmont Koblinger:
> In terminal emulation, apps have to be able to print something and
keep track of the cursor, whereas they by design have no idea of the
font being used. In many terminals the font can also be changed runtime
and it's absolutely not feasible to then rearrange the cells. In some
other cases there is no font at all (e.g. the libvterm headless terminal
emulation library, or a detached screen/tmux), or there are multiple
fonts at once (a screen/tmux attached from multiple graphical
emulators).

> The only way to do that is via some external agreement on the number
of cells, which is typically the Unicode EastAsianWidth, often accessed
via wcwidth(). It's not perfect (changes through Unicode versions, has
ambiguous characters, etc.) but is still the best we have.

> glibc's wcwidth() reports 1 for ambiguous width characters, so the de
facto standard is that in terminals they are narrow.

> If the glyph is wider then the terminal has to figure out what to do.
It could crop it (newer versions of Konsole, as far as I know), overflow
to the right (VTE), shrink it (Kitty I believe does this), etc.

See Also:
https://bugzilla.gnome.org/show_bug.cgi?id=767529
https://gitlab.freedesktop.org/terminal-wg/specifications/issues/9
https://www.unicode.org/reports/tr11/tr11-34.html

Salient point from proposed update to Unicode Standard Annex 11:
> Note: The East_Asian_Width property is not intended for use by modern
terminal emulators without appropriate tailoring on a case-by-case
basis.

Fixes #2066
Fixes #2375 

Related to #900",,,,True,False,False,20,5,1,1,duhowett@microsoft.com,noreply@github.com,"10/15/2019, 21:54:57",2019,"10/15/2019, 21:54:57",2019,4,0,2,4.0,1.2,0
,"Revert ""Patch fix for #1360 (#2924)"" (#3212)

This reverts commit 5d906d9f3e78a467c1914a1b8b6fde92e7d86090.",,,,True,False,False,0,105,3,2,duhowett@microsoft.com,noreply@github.com,"10/16/2019, 00:33:32",2019,"10/16/2019, 00:33:32",2019,1,0,2,0.0,2.4,0
,correctly inform connection of resize events (#3228),,,,False,False,False,13,0,1,1,zoey@dos.cafe,noreply@github.com,"10/16/2019, 21:16:26",2019,"10/16/2019, 21:16:26",2019,4,0,2,5.0,1.0,0
,"Enable setting an initial position and maximized launch (#2817)

This PR includes the code changes that enable users to set an initial position
(top left corner) and launch maximized. There are some corner cases:

1. Multiple monitors. The user should be able to set the initial position to
any monitors attached. For the monitors on the left side of the major monitor,
the initial position values are negative.

2. If the initial position is larger than the screen resolution and the window
is off-screen, the current solution is to check if the top left corner of the
window intersect with any monitors. If it is not, we set the initial position
to the top left corner of the nearest monitor.

3. If the user wants to launch maximized and provides an initial position, we
launch the maximized window on the monitor where the position is located.

# Testing

To test:
1. Check-out this branch and build on VS2019
2. Launch Terminal, and open Settings. Then close the terminal.
3. Add the following setting into Json settings file as part of ""globals"", just
after ""initialRows"":
  ""initialPosition"": ""1000, 1000"",
  ""launchMode"": ""default""

My test data:
I have already tested with the following variables:
  1. showTabsInTitlebar true or false
  2. The initial position of the top left corner of the window
  3. Whether to launch maximized
  4. The DPI of the monitor

Test data combination:

Non-client island window (showTabsInTitlebar true)

1. Three monitors with the same DPI (100%), left, middle and right, with the
middle one as the primary, resolution: 1980 * 1200, 1920 * 1200, 1920 * 1080
    launchMode: default
      In-Screen test: (0, 0), (1000, 500), (2000, 300), (-1000, 400),
        (-100, 200), (-2000, 100), (0, 1119)
      out-of-screen:
        (200, -200): initialize to (0, 0)
        (200, 1500): initialize to (0, 0)
        (2000, -200): initialize to (1920, 0)
        (2500, 2000): initialize to (1920, 0)
        (4000 100): initialize to (1920, 0)
        (-1000, -100): initialize to (-1920, 0)
        (-3000, 100): initialize to (-1920, 0)
        (10000, -10000): initialize to (1920, 0)
        (-10000, 10000): initialize to (-1920, 0)
        (0, -10000): initialize to (0, 0)
        (0, -1):  initialize to (0, 0)
        (0, 1200):  initialize to (0, 0)
    launch mode: maximize
        (100, 100)
        (-1000, 100): On the left monitor
        (0, -2000): On the primary monitor
        (10000, 10000): On the primary monitor


2. Left monitor 200% DPI, primary monitor 100% DPI
    In screen: (-1900, 100), (-3000, 100), (-1000, 100)
    our-of-screen: (-8000, 100): initialize at (-1920, 0)
    launch Maximized:  (-100, 100): launch maximized on the left monitor
      correctly

3. Left monitor 100% DPI, primary monitor 200% DPI
    In-screen: (-1900, 100), (300, 100), (-800, 100), (-200, 100)
    out-of-screen: (-3000, 100): initialize at (-1920, 0)
    launch maximized: (100, 100), (-1000, 100)

For client island window, the test data is the same as above.

Issues:

1. If we set the initial position on the monitor with a different DPI as the
primary monitor, and the window ""lays"" across two monitors, then the window
still renders as it is on the primary monitor. The size of the window is
correct.

Closes #1043",,,,False,False,False,380,64,12,12,kawa@microsoft.com,duhowett@microsoft.com,"10/17/2019, 04:51:50",2019,"10/17/2019, 04:51:50",2019,1,0,0,4.3,4.2,0
,"Reduce text layout CPU usage when DWrite analysis is not needed (#2959)

References #806.",,,,False,False,False,14,7,1,1,skyline75489@outlook.com,duhowett@microsoft.com,"10/17/2019, 18:06:14",2019,"10/17/2019, 18:06:14",2019,4,0,0,3.3,1.0,0
,"Make sure we resize the region even when the drag bar didn't ch… (#3214)

Fixes #3207.",,,,True,False,False,1,0,1,1,duhowett@microsoft.com,miniksa@microsoft.com,"10/17/2019, 21:56:04",2019,"10/17/2019, 21:56:04",2019,4,0,2,5.0,1.2,0
,"html: make sure we allocate enough space for the \0, always clo… (#3215)

conhost has been leaving the clipboard open for all HTML copies because
StringCchCopyA needs an extra byte for the null terminator and we
haven't been giving it one. We should also make sure that we always
close the clipboard (always).",,,,False,False,False,37,32,1,1,duhowett@microsoft.com,miniksa@microsoft.com,"10/17/2019, 21:56:59",2019,"10/17/2019, 21:56:59",2019,4,0,2,2.7,1.5,0
,"Always use a VK in MapVirtualKeyW(..., MAPVK_VK_TO_VSC) (#3199)

Fixes #2873.",,,,True,False,False,6,5,2,2,duhowett@microsoft.com,miniksa@microsoft.com,"10/17/2019, 21:58:41",2019,"10/17/2019, 21:58:41",2019,4,0,2,2.7,1.2,0
,"Sync with latest inbox changes

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/191011-1234 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp b80345479891d1e7a9f7e38b6b5f40083c6a564a

sources changes from 21H1

Merged PR 3896217: [Git2Git] Changes from vb_release_dep_dev1

server init changes from 20H1 (onecore headless mode)",,,,False,False,False,17,16,15,15,gittrain@microsoft.com,duhowett@microsoft.com,"10/12/2019, 09:14:13",2019,"10/17/2019, 22:11:07",2019,4,0,0,2.6,2.0,5
,"Switch all of the UIA providers to WRL::RuntimeClass (#3213)

* Switch all of the UIA providers to WRL::RuntimeClass
Fixes #3209.
References #3051.

Co-authored-by: Carlos Zamora <cazamor@microsoft.com>
Co-authored-by: Dustin Howett <duhowett@microsoft.com>",,,,True,False,False,63,232,16,12,duhowett@microsoft.com,miniksa@microsoft.com,"10/17/2019, 22:32:30",2019,"10/17/2019, 22:32:30",2019,4,0,2,1.1,4.2,0
,Fixes issue with text copied to clipboard not having proper line endings. (#3239),,,,True,True,False,3,1,1,1,bingham@cs.wisc.edu,carlos.zamora@microsoft.com,"10/18/2019, 00:13:53",2019,"10/18/2019, 00:13:53",2019,1,0,0,3.7,1.2,0
,"Fix cursor redrawing crash (#2965)

* Added read lock and fix various cursor pos issue",,,,True,True,False,19,0,1,1,skyline75489@outlook.com,carlos.zamora@microsoft.com,"10/18/2019, 21:03:32",2019,"10/18/2019, 21:03:32",2019,4,0,0,5.0,1.2,0
,Add more early exits in InsertAttrRuns (#2937),,,,False,False,False,54,21,1,1,skyline75489@outlook.com,carlos.zamora@microsoft.com,"10/18/2019, 21:04:37",2019,"10/18/2019, 21:04:37",2019,4,0,0,3.6,1.5,0
,bump minor ver to .6 to prep release.,,,,False,False,False,1,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"10/18/2019, 21:29:31",2019,"10/18/2019, 21:29:31",2019,4,2,2,2.5,1.0,0
,"html copy: fix null character in font face name (#3255)

Fixes #3252.",,,,True,False,False,6,11,1,1,38111589+mcpiroman@users.noreply.github.com,duhowett@microsoft.com,"10/21/2019, 20:42:53",2019,"10/21/2019, 20:42:53",2019,4,0,0,1.8,1.2,0
,"Switch to a non-release build of MUXc to fix elevated launch (#3278)

Due to a platform issue, elevated application packages occasionally fail
to find all of their dependencies. The real fix for this is going to
take a lot of time and probably a new build of Windows.

The fix we have here switches us to a non-""release"" build of
Microsoft.UI.Xaml. The critical thing about their non-release builds is
that they prefer to embed their DLLs into the hosting package instead of
expressing a platform dependency.

This build of Microsoft.UI.Xaml was produced from the same commit as
the original and official build; the only difference is that it will
embed into our package.

Fixes #3275.",,,,True,False,False,17,11,7,7,duhowett@microsoft.com,noreply@github.com,"10/22/2019, 18:48:09",2019,"10/22/2019, 18:48:09",2019,4,0,2,3.0,1.8,0
,"Revert two cursor changes that cause crashing and rendering art… (#3292)

Revert ""Fix cursor redrawing crash (#2965)""
This reverts commit 926a2e3d800a18a23139f8c6e9f97f3ccf63650c.

Revert ""Fix double width cursor for CJK characters (#2932)""
This reverts commit eafa884fc40e566c4df4a4521850b14130a7ff24.

Fixes #3277.
Fully reverts #2965, #2932.",,,,True,False,False,1,23,3,3,duhowett@microsoft.com,miniksa@microsoft.com,"10/22/2019, 21:42:57",2019,"10/22/2019, 21:42:57",2019,4,0,2,0.2,1.2,0
,Update README.md (#3284),,,,False,False,False,2,2,1,1,52167316+spicasl@users.noreply.github.com,48369326+cinnamon-msft@users.noreply.github.com,"10/24/2019, 17:41:21",2019,"10/24/2019, 17:41:21",2019,3,0,0,2.5,1.0,0
,"Manipulate Xterm256Engine's extended attr state properly (#3282)

We should be clearing the bits when they're different, not just always
setting them.
This commit also adds a test for extended attributes.

Fixes #3281.",,,,True,False,False,104,1,2,2,duhowett@microsoft.com,noreply@github.com,"10/24/2019, 18:52:36",2019,"10/24/2019, 18:52:36",2019,4,0,2,5.0,2.4,0
,prevent double handling of tab in wpf control (#3316),,,,False,False,False,5,0,1,1,zoey@dos.cafe,miniksa@microsoft.com,"10/24/2019, 22:45:04",2019,"10/24/2019, 22:45:04",2019,4,0,2,5.0,1.0,0
,"fix latent DPI issues with the WPF control (#3301)

* fix latent DPI issues with the WPF control",,,,True,True,False,14,24,2,2,zoey@dos.cafe,miniksa@microsoft.com,"10/24/2019, 22:45:17",2019,"10/24/2019, 22:45:17",2019,4,0,2,1.8,1.2,0
,"Introduce UiaRenderer project (#2930)

As a part of setting up UIA Events, we need to be able to identify WHEN to notify the client. We'll be adopting the RendererEngine model that the VTRenderer and DxRenderer follow to identify when something on the screen is changing and what to alert the automation clients about.

This PR just introduces the UiaRenderer. There's a lot of E_NOTIMPLs and S_FALSEs and a few comments throughout as to my thoughts. This'll make diffing future PRs easier and can make this process more iterative. The code does run with the PR so I plan on merging this into master as normal.",,,,False,False,False,547,0,6,6,carlos.zamora@microsoft.com,noreply@github.com,"10/28/2019, 16:42:54",2019,"10/28/2019, 16:42:54",2019,3,0,2,5.0,3.5,0
,Added link to Changelog for 1910 (#3357),,,,False,False,False,1,1,1,1,gabriel.dugny@gmail.com,migrie@microsoft.com,"10/31/2019, 15:08:22",2019,"10/31/2019, 15:08:22",2019,3,0,2,2.5,1.0,0
,"CascadiaSettings: Use map to find matching color scheme (#3288)

The _FindMatchingColorScheme currently iterates through all pairs in the
map to find the matching color scheme for a given JSON.

Improved this by using the name from the JSON to lookup the color scheme
in the map.",,,,False,False,False,27,6,3,3,anirudh.rayabharam@gmail.com,migrie@microsoft.com,"10/31/2019, 15:11:54",2019,"10/31/2019, 15:11:54",2019,3,0,2,4.3,1.0,0
,"Add support for the HPA escape sequence (#3368)

* Add support for the HPA escape sequence as an alias for CHA.

* Extend the output engine tests for cursor movement to confirm that HPA is dispatched in the same way as CHA.",,,,False,False,False,7,0,3,3,j4_james@hotmail.com,migrie@microsoft.com,"10/31/2019, 15:12:32",2019,"10/31/2019, 15:12:32",2019,3,0,2,5.0,1.0,0
,Get rid of the SCREEN_INFORMATION::LineChar array (#3371),,,,False,False,False,8,23,3,3,j4_james@hotmail.com,migrie@microsoft.com,"10/31/2019, 15:12:41",2019,"10/31/2019, 15:12:41",2019,3,0,2,1.3,1.0,0
,"Added <kbd> notations for keyboard keys. (#2975)

* Added <kbd> notations for keyboard keys.",,,,False,False,False,4,4,1,1,16685565+bantya@users.noreply.github.com,miniksa@microsoft.com,"10/31/2019, 16:53:38",2019,"10/31/2019, 16:53:38",2019,3,0,2,2.5,1.0,0
,"Compensate for non-minimal UTF-8 encodings (#3380)

* Allow Mb2Wc to substitute U+FFFD (unicode replacement) for non-minimal forms of characters that get past our initial invalid-sequence screening.",,,,False,False,False,57,1,2,2,miniksa@microsoft.com,noreply@github.com,"10/31/2019, 17:50:34",2019,"10/31/2019, 17:50:34",2019,3,2,2,4.9,1.5,0
,"wpf: Change scrollbar buttons to one line per click (#3397)

Fix scrolling in the WPF control so that clicking the arrow buttons scrolls one line at a time.",,,,True,True,False,1,1,1,1,zoey@dos.cafe,duhowett@microsoft.com,"11/01/2019, 00:17:14",2019,"11/01/2019, 00:17:14",2019,1,0,0,2.5,1.2,0
,Fix scrollbar update after terminal close (#3256),,,,True,True,False,14,0,1,1,38111589+mcpiroman@users.noreply.github.com,miniksa@microsoft.com,"11/01/2019, 16:40:29",2019,"11/01/2019, 16:40:29",2019,3,0,2,5.0,1.2,0
,Replace some macros with constexpr (#3362),,,,False,False,False,11,13,10,10,skyline75489@outlook.com,miniksa@microsoft.com,"11/01/2019, 17:33:09",2019,"11/01/2019, 17:33:09",2019,3,0,2,2.3,1.5,0
,"Indicate which pane is focused with the Accent color on the pan… (#3060)

## Summary of the Pull Request

Adds a small border with the accent color to indicate a pane is focused

<img src=""https://user-images.githubusercontent.com/18356694/66218711-560e4b80-e68f-11e9-85b0-1f387d35bb92.png"" width=""480"">
<img src=""https://user-images.githubusercontent.com/18356694/66218757-6f16fc80-e68f-11e9-8d39-db9ab748c4de.png"" width=""480"">
<img src=""https://user-images.githubusercontent.com/18356694/66219194-55c28000-e690-11e9-9835-8b5212e70e8a.png"" width=""480"">

## PR Checklist
* [x] Closes #994
* [x] I work here
* [😢] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I've removed the simple Grid we were using as the pane separator, and replaced it with a Border that might appear on any side of a pane.

When we add a split, we'll create each child with one of the `Border` flags set (each child with one of a pair of flags). E.g. creating a horizontal split creates one child with the `Top` border, and another with the `Bottom`. 

Then, if one of those panes is split, it will pass it's border flag to is new children, with the additional flag set. So adding another Vertical split to the above scenario would create a set of panes with either (`Top|Left`, `Top|Right`) or (`Bottom|Left`, `Bottom|Right`) borders set, depending on which pane was split.

<hr>

* start work on this by tracking border state

* Colorize the border

* Use the accent color for highlighting

* Cleanup the accent color code

* Don't buy any rural real estate when closing a pane

* Closing panes works well now too

* Cleanup for review

* Update src/cascadia/TerminalApp/Pane.cpp

* try some things that don't work to fix the resizing crash

* Revert ""try some things that don't work to fix the resizing crash""

This reverts commit 3fc14da1130318add37a98d8de8d7ff440bbed59.

* this _does_ work, but I think it's not semantically correct

* This doesn't seem to work either.

  I tried adding the pane seperators to the Pane::_GetMinWidth calculation. That
  works for prevent the crash, but the resizing is wonky now. If you add a
  Vertical split, then a second, then resize the middle pane really small,
  you'll see that the _last_ resize doesn't work properly. The text seems to
  overhand into the border.

  Additionally, there's really weird behavior resizing panes to be small. They
  don't always seem to be resizable to the smallest size.

* Revert ""This doesn't seem to work either.""

This reverts commit 2fd8323e7ba84527963f051a4e70751e846be87a.

* Merge the changes from the ""this is the one"" branch

  Again, no idea what I really did that worked, but it does

* Cleanup from my mess of a commit

  This makes so much more sense now

* Other PR feedback from @carlos-zamora

* Fix a typo",,,,True,False,False,163,54,2,2,migrie@microsoft.com,noreply@github.com,"11/01/2019, 20:06:11",2019,"11/01/2019, 20:06:11",2019,4,2,2,4.0,3.0,0
,"Fix our parallel (and repeating) builds (#3412)

The WAP packaging project in VS <= 16.3.7 produces a couple global
properties as part of its normal operation that cause MSBuild to flag
our projects as out-of-date and requiring a rebuild. By forcing those
properties to match the WAP values, we can get consistent builds.

One of those properties, however, is ""GenerateAppxPackageOnBuild"", and
WAP sets it to *false*. When we set that, of course, we don't get an
MSIX out of our build pipeline. Therefore, we have to break our build
into two phases -- build, then package.

This required us to change our approach to PCH deletion. A project
without a PCH is *also* considered out-of-date. Now, we keep all PCH
files but truncate them to 0 bytes.

TerminalApp, however, is re-linked during packaging because the Xaml
compiler emits a new generated C++ file on every build. We have to keep
those PCHs around.

* Remove WpfTerminalControl AnyCPU from Arch-specific builds

This removes another source of build nondeterminism: that WpfTerminalControl was propagating TargetFramework into architecture-specific C++ builds. Its ""Any CPU"" platform has been removed from architecture builds at the solution level.

This also cleans up some new projects that were added and build for ""Any
CPU"".",,,,True,True,False,47,28,4,4,duhowett@microsoft.com,noreply@github.com,"11/01/2019, 21:38:13",2019,"11/01/2019, 21:38:13",2019,4,0,2,3.5,1.8,0
,"Introduce a WinRT utils library and ""checked resources"" (#3350)

This commit introduces a C++/WinRT utility library and moves
ScopedResourceLoader into it. I decided to get uppity and introduce
something I like to call ""checked resources."" The idea is that every
resource reference from a library is knowable at compile time, and we
should be able to statically ensure that all resources exist.

This is a system that lets us immediately failfast (on launch) when a
library makes a static reference to a resource that doesn't exist at
runtime.

It exposes two new (preprocessor) APIs:
* `RS_(wchar_t)`: loads a localizable string resource by name.
* `USES_RESOURCE(wchar_t)`: marks a resource key as used, but is intended
  for loading images or passing static resource keys as parameters to
  functions that will look them up later.

Resource checking relies on diligent use of `USES_RESOURCE()` and `RS_()`
(which uses `USES_RESOURCE`), but can make sure we don't ship something
that'll blow up at runtime.

It works like this:

**IN DEBUG MODE**
- All resource names referenced through `USES_RESOURCE()` are emitted
  alongside their referencing filenames and line numbers into a static
  section of the binary.
  That section is named `.util$res$m`.

- We emit two sentinel values into two different sections, `.util$res$a`
  and `.util$res$z`.

- The linker sorts all sections alphabetically before crushing them
  together into the final binary.

- When we first construct a library's scoped resource loader, we
  iterate over every resource reference between `$a` and `$z` and check
  residency.

**IN RELEASE MODE**
- All checked resource code is compiled out.

Fixes #2146.

Macros are the only way to do something this cool, incidentally.

## Validation Steps Performed
Made references to a bunch of bad resources, tried to break it a lot.

It looks like this when it fails:

### App.cpp
```
36  static const std::array<std::wstring_view, 2> settingsLoadErrorsLabels {
37      USES_RESOURCE(L""NoProfilesText""),
38      USES_RESOURCE(L""AllProfilesHiddenText_HA_JUST_KIDDING"")
39  };
```

```
WinRTUtils\LibraryResources.cpp(68)\TerminalApp.dll:
    FailFast(1) tid(1034) 8000FFFF Catastrophic failure
    Msg:[Resource AllProfilesHiddenText_HA_JUST_KIDDING not found in
      scope TerminalApp/Resources (App.cpp:38)] [EnsureAllResourcesArePresent]
```",,,,True,False,False,362,67,17,16,duhowett@microsoft.com,noreply@github.com,"11/01/2019, 22:47:05",2019,"11/01/2019, 22:47:05",2019,4,0,2,4.1,4.2,0
,Replace macros with constexpr part 2 (#3416),,,,False,False,False,18,18,8,8,skyline75489@outlook.com,migrie@microsoft.com,"11/04/2019, 13:37:48",2019,"11/04/2019, 13:37:47",2019,3,0,2,2.5,1.5,-1
,Break if an early exit can not be found in InsertAttrRuns (#3262),,,,False,False,False,7,0,1,1,skyline75489@outlook.com,miniksa@microsoft.com,"11/04/2019, 17:42:30",2019,"11/04/2019, 17:42:30",2019,3,0,2,5.0,1.0,0
,wpf: make the cursor blink (#3415),,,,False,False,False,78,1,4,4,zoey@dos.cafe,duhowett@microsoft.com,"11/04/2019, 21:41:02",2019,"11/04/2019, 21:41:02",2019,4,0,0,4.9,1.5,0
,"Use standard 1px window borders on NC Island Window (#3394)

We take the standard window frame except that we remove the top part
(see `NonClientIslandWindow::_OnNcCalcSize`), then we put little 1 pixel
wide top border back in the client area using
`DwmExtendFrameIntoClientArea` and then we put the XAML island and the
drag bar on top.

Most of this PR is comments to explain how the code works and also
removing complex code that was needed to handle the weird cases when the
borders were custom.

I've also refactored a little bit the `NonClientIslandWindow` class.

* Fix DwmExtendFrameIntoClientArea values
* Fix WM_NCHITTEST handling
* Position the XAML island window correctly
* Fix weird colors in drag bar and hide old title bar buttons
* Fix the window's position when maximized
* Add support for dark theme on the frame
* DRY shared code between conhost and new terminal
* Fix drag bar and remove dead code
* Remove dead code and use cached DPI
* Refactor code
* Remove impossible TODO
* Use system metrics instead of hardcoding resize border height
* Use theme from app settings instead of system theme. Improve comments. Remove unused DWM frame on maximize.
* Fix initial position DPI handling bug and apply review changes
* Fix thick borders with DPI > 96

Closes #3064.
Closes #1307.
Closes #3136.
Closes #1897.
Closes #3222.
Closes #1859.",,,,True,False,True,438,650,15,15,56923875+greg904@users.noreply.github.com,duhowett@microsoft.com,"11/04/2019, 23:45:40",2019,"11/04/2019, 23:45:40",2019,4,0,0,2.6,4.8,0
,"Fix a problem with `bcz.cmd` (#3436)

Closes #3400.",,,,True,False,False,1,1,1,1,migrie@microsoft.com,duhowett@microsoft.com,"11/05/2019, 00:35:52",2019,"11/05/2019, 00:35:52",2019,1,2,0,2.5,1.2,0
,"Enable fullscreen mode (#3408)

## Summary of the Pull Request

Enables the `toggleFullscreen` action to be able to enter fullscreen mode, bound by default to <kbd>alt+enter</kbd>.

The action is bubbled up to the WindowsTerminal (Win32) layer, where the window resizes itself to take the entire size of the monitor.

This largely reuses code from conhost. Conhost already had a fullscreen mode, so I figured I might as well re-use that.

## References

Unfortunately there are still very thin borders around the window when the NonClientIslandWindow is fullscreened. I think I know where the problem is. However, that area of code is about to get a massive overhaul with #3064, so I didn't want to necessarily make it worse right now.  

A follow up should be filed to add support for ""Always show / reveal / never show tabs in fullscreen mode"". Currently, the only mode is ""never show tabs"".

Additionally, some of this code (particularily re:drawing the nonclient area) could be re-used for #2238.

## PR Checklist
* [x] Closes #531, #3411
* [x] I work here
* [n/a] Tests added/passed 😭
* [x] Requires documentation to be updated


## Validation Steps Performed
* Manually tested both the NonClientIslandWindow and the IslandWindow.

* Cherry-pick commit 8e56bfe

* Don't draw the tab strip when maximized

(cherry picked from commit bac4be7c0f3ed1cdcd4f9ae8980fc98103538613)

* Fix the vista window flash for the NCIW

(cherry picked from commit 7d3a18a893c02bd2ed75026f2aac52e20321a1cf)

* Some code cleanup for review

(cherry picked from commit 9e22b7730bba426adcbfd9e7025f192dbf8efb32)

* A tad bit more notes and cleanup

* Update schema, docs

* Most of the PR comments

* I'm not sure this actually works, so I'm committing it to revert it and check

* Update some comments that were lost.

* Fix a build break?

* oh no",,,,True,False,False,335,66,21,21,migrie@microsoft.com,noreply@github.com,"11/05/2019, 19:40:29",2019,"11/05/2019, 19:40:29",2019,4,2,2,4.3,4.2,0
,"Improve the DECSC/DECRC implementation (#3160)

The current DECSC implementation only saves the cursor position and
origin mode. This PR improves that functionality with additional support
for saving the SGR attributes, as well as the active character set.

It also fixes the way the saved state interacts with the alt buffer
(private mode 1049), triggering a save when switching to the alt buffer,
and a restore when switching back, and tracking the alt buffer state
independently from the main state.

In order to properly save and restore the SGR attributes, we first
needed to add a pair of APIs in the `ConGetSet` interface which could
round-trip the attributes with full 32-bit colors (the existing methods
only work with legacy attributes).

I then added a struct in the `AdaptDispatch` implementation to make it
easier to manage all of the parameters that needed to be saved. This
includes the cursor position and origin mode that we were already
tracking, and now also the SGR text attributes and the active character
set (via the `TermOutput` class).

Two instances of this structure are required, since changes made to the
saved state in the alt buffer need to be tracked separately from changes
in the main buffer. I've added a boolean property that specifies whether
we're in the alt buffer or not, and use that to decide which of the two
instances we're working with.

I also needed to explicitly trigger a save when switching to the alt
buffer, and a restore when switching back, since we weren't already
doing that (the existing implementation gave the impression that the
state was saved, because each buffer has its own cursor position, but
that doesn't properly match the XTerm behaviour).

For the state tracking itself, we've now got two additional properties -
the SGR attributes, which we obtain via the new private API, and the
active character set, which we get from a local `AdaptDispatch` field.
I'm saving the whole `TermOutput` class for the character set, since I'm
hoping that will make it automatically supports future enhancements. 

When restoring the cursor position, there is also now a fix to handle
the relative origin mode correctly. If the margins are changed between
the position being saved and restored, it's possible for the cursor to
end up outside of the new margins, which would be illegal. So there is
now an additional step that clamps the Y coordinate within the margin
boundaries if the origin mode is relative.

# Validation

I've added a couple of screen buffer tests which check that the various
parameters are saved and restored as expected, as well as checking that
the Y coordinate is clamped appropriately when the relative origin mode
is set.

I've also tested manually with vttest and confirmed that the
_SAVE/RESTORE CURSOR_ test (the last page of the _Test of screen
features_)) is now working a lot better than it used to.

Closes #148.",,,,True,False,False,258,39,11,11,j4_james@hotmail.com,duhowett@microsoft.com,"11/05/2019, 21:35:50",2019,"11/05/2019, 21:35:50",2019,4,0,0,4.5,4.2,0
,"Prevent cleanup of object given to handle that failed access check (#3414)

* Ensure rights check and increments pass before assigning an object to a handle (since deallocation of handles will automatically attempt to cleanup).",,,,True,True,False,217,23,12,12,miniksa@microsoft.com,noreply@github.com,"11/05/2019, 22:22:55",2019,"11/05/2019, 22:22:55",2019,4,2,2,4.6,4.2,0
,"Unify and clean up the common build properties (#3429)

This commit cleans up and deduplicates all of the common build
preamble/postamble across exe, dll, lib and c++/winrt projects.

The following specific changes have been made:
* All projects now define their ConfigurationType
* All projects now set all their properties *before* including a common
  build file (or any other build files)
* cppwinrt.pre and cppwinrt.post now delegate most of their
  configuration to common.pre and common.post
* (becuase of the above,) all build options are conserved between
  console and c++/winrt components, including specific warnings and
  preprocessor definitions.
* More properties that are configurable per-project are now
  conditioned so the common props don't override them.
* The exe, dll, exe.or.dll, and lib postincludes have been merged into
  pre or post and switched based on condition as required
* Shared items (-shared, -common) are now explicitly vcxitems instead of
  vcxproj files.
* The link line is now manipulated after Microsoft.Cpp sets it, so the
  libraries we specify ""win"". All console things link first against
  onecore_apiset.lib.
* Fix all compilation errors caused by build unification
* Move CascadiaPackage's resources into a separate item file

Fixes #922.",,,,True,False,False,897,984,76,68,duhowett@microsoft.com,noreply@github.com,"11/05/2019, 22:29:11",2019,"11/05/2019, 22:29:11",2019,4,0,2,2.8,5.0,0
,"Replacing \r\n line endings with \r line endings (#3449)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

#1091 
#1094 
#2390 
#3314

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #1091
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

Combination of the PRs #1094, #2390, and #3314, especially as discussed in #3314.

In short, this changes line endings from Windows-space \r\n to the more universal \r.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Copied and pasted text into the terminal without the patch, line endings were doubled.
With the patch, line endings weren't doubled.


--------------------

* Replacing \r\n line endings with \r line endings

* Fixing Formatting",,,,True,False,False,31,1,2,2,bingham@cs.wisc.edu,migrie@microsoft.com,"11/06/2019, 14:02:55",2019,"11/06/2019, 14:02:55",2019,3,0,2,4.8,1.2,0
,"Prevents DWM crashing from also crashing us (#3460)

It's apparently perfectly possible that DWM will just crash or close, and when
  it does, `DwmExtendFrameIntoClientArea` will return a failure. If we
  THROW_IF_FAILED that call, then we'll also crash when DWM does.

  This converts that THROW_IF_FAILED to a LOG_IF_FAILED. When DWM comes back,
  we'll hit this codepath again, and all will be right again in the world.",,,,True,True,False,9,6,2,2,migrie@microsoft.com,miniksa@microsoft.com,"11/06/2019, 18:56:54",2019,"11/06/2019, 18:56:54",2019,4,2,2,3.0,1.2,0
,"Add a note on using WSL paths to user docs (#3405)

* Add a note on using WSL paths to documentation

Co-Authored-By: greg904 <56923875+greg904@users.noreply.github.com>
Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>",,,,False,False,False,25,0,1,1,migrie@microsoft.com,miniksa@microsoft.com,"11/06/2019, 19:19:43",2019,"11/06/2019, 19:19:43",2019,4,2,2,5.0,1.0,0
,"Create a doc for adding common third-party tools (#3353)

* Create a doc for adding common third-party tools

Maybe it would be helpful to have a comprehensive guide on adding some common third-party tools as profiles.

* add some additional tools from PR",,,,False,False,False,67,0,1,1,migrie@microsoft.com,noreply@github.com,"11/06/2019, 21:14:43",2019,"11/06/2019, 21:14:43",2019,4,2,2,5.0,1.5,0
,"Replace ConhostConnection with ConptyConnection (#3461)

This commit deletes ConhostConnection and replaces it with
ConptyConnection. The ConptyConnection uses CreatePseudoConsole and
depends on winconpty to override the one from kernel32.

* winconpty must be packageable, so I've added GetPackagingOutputs.
   * To validate this, I added conpty.dll to the MSIX regression script.
* I moved the code from conpty-universal that deals with environment
  strings into the types library.

This puts us in a way better place to implement #2563, as we can now
separately detect a failure to launch a pseudoconsole, a failure to
CreateProcess, and an unexpected termination of the launched process.

Fixes #1131.",,,,True,False,False,523,889,17,12,duhowett@microsoft.com,noreply@github.com,"11/06/2019, 23:09:01",2019,"11/06/2019, 23:09:01",2019,4,0,2,2.3,4.8,0
,"Move AzureConnection's strings into localizable resources (#3463)

This also sets up TerminalConnection to _have_ resources, which will be useful for the messages in #3461.",,,,False,False,False,296,90,7,6,duhowett@microsoft.com,noreply@github.com,"11/07/2019, 20:26:45",2019,"11/07/2019, 20:26:45",2019,4,0,2,3.9,3.0,0
,"Break everything out of App except Xaml platform init (#3465)

This commit breaks everything out of App except the base initialization for XAML.
AppLogic is the new home for all terminal-specific singleton magic.",,,,False,False,False,880,780,10,10,miniksa@microsoft.com,duhowett@microsoft.com,"11/07/2019, 21:10:58",2019,"11/07/2019, 21:10:58",2019,4,2,0,2.0,3.5,0
,"Add support for tab drag and drop (#3478)

* Add support for tag drag and drop

Co-authored-by: James Clarke (WDG) <jeclarke@ntdev.microsoft.com>",,,,False,False,False,65,22,3,3,james@clarkezone.net,miniksa@microsoft.com,"11/08/2019, 17:27:20",2019,"11/08/2019, 17:27:20",2019,3,0,2,3.7,1.5,0
,"Revert locking changes (#3488)

This reverts commit 56c35945b97ff59621959f621fa9ab5d0ec7e158.

Also patches up some build fixes made after it and corrects a VtRendererTest that was dependent on the locks.",,,,True,True,False,290,480,33,31,miniksa@microsoft.com,noreply@github.com,"11/08/2019, 21:44:52",2019,"11/08/2019, 21:44:52",2019,4,2,2,1.9,5.0,0
,"Move project to app CRTs in preparation to run Universal (#3474)

* Change to use App CRT in preparation for universal.
* Try to make project build again by setting winconpty to static lib so it'll use the CRT inside TerminalConnection (or its other consumers) instead of linking its own.
* Remove test for conpty dll, it's a lib now. Add additional commentary on how CRT linking works for future reference. I'm sure this will come up again.
* use the _apiset variant until proven otherwise to match the existing one.
* Clarification in the comments for linking.",,,,False,False,False,16,263,6,4,miniksa@microsoft.com,noreply@github.com,"11/08/2019, 22:09:39",2019,"11/08/2019, 22:09:39",2019,4,2,2,1.0,2.5,0
,dx: don't check the OS version multiple times (#3480),,,,False,False,False,2,1,1,1,skyline75489@outlook.com,duhowett@microsoft.com,"11/08/2019, 22:14:46",2019,"11/08/2019, 22:14:46",2019,4,0,0,3.3,1.0,0
,"replace vcpkg-cpprestsdk with a +ARM64 -ssl/boost +UWP version (#3489)

This new cpprestsdk package, 2.10.14, switches us to the app CRT.
cpprestsdk turns fof a bunch of boost and openssl dependencies when it's
built for the Windows Store subplatform, so we got a bunch of stuff for
free.

Incidentally, I fixed #2338 the real/correct way -- the build rules in
the package now make sure they're not using the system vcpkg root.",,,,True,False,False,9,106,6,4,duhowett@microsoft.com,noreply@github.com,"11/08/2019, 22:17:11",2019,"11/08/2019, 22:17:11",2019,4,0,2,0.7,2.4,0
,wpf: Add .NET Core target to WPF control (#3470),,,,False,False,False,3,23,1,1,huoyaoyuan@hotmail.com,duhowett@microsoft.com,"11/08/2019, 22:21:17",2019,"11/08/2019, 22:21:17",2019,4,0,0,0.6,1.0,0
,"Don't ever try to pass """" as a starting directory, no way (#3506)

Fixes #3504.",,,,True,False,False,3,1,1,1,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"11/11/2019, 18:44:49",2019,"11/11/2019, 18:44:49",2019,4,0,0,3.7,1.2,0
,"Move Contributing.md file to root (#3514)

moved contributing.md from doc\ to root",,,,False,False,False,0,0,1,1,38057565+shakeel30@users.noreply.github.com,carlos.zamora@microsoft.com,"11/12/2019, 00:02:33",2019,"11/12/2019, 00:02:33",2019,1,0,0,0.0,1.0,0
,"doc: allow null for foreground/background in schema (#3527)

Closes #2963.",,,,False,False,False,4,2,1,1,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"11/12/2019, 19:18:22",2019,"11/12/2019, 19:18:22",2019,4,0,0,3.3,1.0,0
,"Increase left padding around tabs (#3513)

Closes #3370.",,,,False,False,False,2,2,1,1,48369326+cinnamon-msft@users.noreply.github.com,duhowett@microsoft.com,"11/12/2019, 19:19:37",2019,"11/12/2019, 19:19:37",2019,4,0,0,2.5,1.0,0
,"Expand environment variables in ConptyConnection (#3549)

Fixes #3548.",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"11/13/2019, 00:47:57",2019,"11/13/2019, 00:47:57",2019,1,0,2,2.5,1.2,0
,Fixes #3518 (#3521),,,,True,False,False,24,6,4,4,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"11/13/2019, 02:12:43",2019,"11/13/2019, 02:12:43",2019,1,2,0,4.0,1.2,0
,"Throttle scroll position update (#3531)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Another tiny performance fix.

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

Correct me if I'm wrong, It doesn't really make sense to update scroll status faster than frame rate limit.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

<hr>

* Throttle scroll position update

* Review",,,,True,True,False,21,0,2,2,skyline75489@outlook.com,migrie@microsoft.com,"11/13/2019, 13:23:31",2019,"11/13/2019, 13:23:31",2019,3,0,2,5.0,1.2,0
,"Fixed #3101: Alt+Arrow-Keys print extra characters (#3117)

## Summary of the Pull Request

This PR potentially fixes #3101.

## PR Checklist
* [x] Closes #3101.
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

This PR fixes #3101 by setting flag 0 in `ToUnicodeEx()` even though the documentation says ""If bit 0 is set, a menu is active."". I'm not 100% sure why it works, but it definitely does in this case.
I thought that bit 2, which claims that ""keyboard state is not changed"" would be sufficient to prevent this from happening, but it seems that's not the case.

I believe this PR should be verified by a developer at Microsoft who's familiar with the internal workings of `ToUnicodeEx()`.
We need this function (or something similar) to translate Alt+Key combinations to proper unicode.
But at the same time it should not send us any additional IBM-style Alt Codes to our character handler if that translation fails (and `ToUnicodeEx()` returns 0).

## Validation Steps Performed

See #3101 for more information. I ensured that Alt+Arrow-Key combinations do not print ◘☻♠♦ anymore.",,,,True,False,False,8,2,1,1,leonard@hecker.io,migrie@microsoft.com,"11/13/2019, 16:59:28",2019,"11/13/2019, 16:59:28",2019,3,0,2,4.0,1.2,0
,"Add Selection Background Color as a setting to Profiles and Col… (#3471)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This introduces a setting to both Profiles and ColorSchemes called <code>selectionBackground</code> that allows you to change the selection background color to what's specified. If <code>selectionBackground</code> isn't set in either the profile or color scheme, it'll default to what it was before - white.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3326
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [x] Requires documentation to be updated

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
- Added selectionBackground to existing profile and colorscheme tests.
- Verified that the color does change to what I expect it to be when I add ""selectionBackground"" to either/both a profile and a color scheme.


<hr>

* adding selectionBackground to ColorScheme and TerminalSettings

* Changing PaintSelection inside the renderers to take a SelectionBackground COLORREF

* changes to conhost and terminal renderdata, and to terminal settings and core

* IT WORKS

* modification of unit tests, json schemas, reordering of functions

* more movement

* changed a couple of unit tests to add selectionBackground, added the setting to schemas, also added the optional setting to profiles

* default selection background should be slightly offwhite like the default foreground is

* reverting changes to .sln

* cleaning up

* adding comment

* oops

* added clangformat to my vs hehe

* moving selectionBackground to IControlSettings and removing from ICoreSettings

* trying to figure out why the WHOLE FILE LOOKS LIKE ITS CHANGED

* here it goes again

* pls

* adding default foreground as the default for selection background in dx",,,,True,False,False,117,10,16,16,57155886+leonmsft@users.noreply.github.com,migrie@microsoft.com,"11/13/2019, 18:17:39",2019,"11/13/2019, 18:17:39",2019,4,0,2,4.7,3.6,0
,"Copy RTF data to the clipboard (#3535)

## Summary of the Pull Request
RTF data is now copied to the clipboard. Tested by copy pasting text from terminal to WordPad.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #2487
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #2487

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Mostly similar to PR #1224. Added a new static method `GenRTF` in `TextBuffer` that is responsible
for generating the RTF representation of a given text. The generated RTF is added to the `DataPackage` that is ultimately passed to the clipboard.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Validated by copy pasting text from the terminal to WordPad. Validated with different colors to make sure that is working. (MS Word seems to prefer HTML data from the clipboard instead of RTF.)

<hr>

* Copy RTF data to the clipboard

* Added comment explaining various parts of the header

* Fixed static code analysis issues and added noexcept to GenRTF()

* Removed noexcept",,,,True,False,False,210,4,6,6,anirudh.rayabharam@gmail.com,migrie@microsoft.com,"11/13/2019, 20:13:22",2019,"11/13/2019, 20:13:22",2019,4,0,2,4.9,3.6,0
,"Make ConPTY build as both LIB and DLL. (#3565)

* Make ConPTY build as both LIB and DLL.
* Update TerminalConnection reference to LIB version (because Terminal builds both UWP and Centennial, requiring different CRTs each).
* DLL is now available (and against desktop CRT) to be PInvokable from C# for WPF terminal.

Note, DLL MUST BUILD PRECOMP to get the magic pragma linking information to the Desktop CRT.

* don't audit PTY lib. I can't do safe things because the safe things we use don't fit back inside kernelbase.dll.

Closes #3563.",,,,False,False,False,150,68,5,5,miniksa@microsoft.com,duhowett@microsoft.com,"11/14/2019, 19:22:00",2019,"11/14/2019, 19:22:00",2019,4,2,0,3.7,2.5,0
,"Add support for arbitrary args in keybindings (#3391)

## Summary of the Pull Request

Enables the user to provide arbitrary argument values to shortcut actions through a new `args` member of keybindings. For some keybindings, like `NewTabWithProfile<N>`, we previously needed 9 different `ShortcutAction`s, one for each value of `Index`. If a user wanted to have a `NewTabWithProfile11` keybinding, that was simply impossible. Now that the args are in their own separate json object, each binding can accept any number of arbitrary argument values.

So instead of:
```json
        { ""command"": ""newTab"", ""keys"": [""ctrl+shift+t""] },
        { ""command"": ""newTabProfile0"", ""keys"": [""ctrl+shift+1""] },
        { ""command"": ""newTabProfile1"", ""keys"": [""ctrl+shift+2""] },
        { ""command"": ""newTabProfile2"", ""keys"": [""ctrl+shift+3""] },
        { ""command"": ""newTabProfile3"", ""keys"": [""ctrl+shift+4""] },
```

We can now use:

```json
        { ""command"": ""newTab"", ""keys"": [""ctrl+shift+t""] },
        { ""command"": { ""action"": ""newTab"", ""index"": 0 }, ""keys"": [""ctrl+shift+1""] },
        { ""command"": { ""action"": ""newTab"", ""index"": 1 }, ""keys"": [""ctrl+shift+2""] },
        { ""command"": { ""action"": ""newTab"", ""index"": 2 }, ""keys"": [""ctrl+shift+3""] },
```

Initially, this does seem more verbose. However, for cases where there are multiple args, or there's a large range of values for the args, this will quickly become a more powerful system of expressing keybindings.

The ""legacy"" keybindings are _left in_ in this PR. They have helper methods to generate appropriate `IActionArgs` values. Prior to releasing 1.0, I think we should remove them, if only to remove some code bloat.

## References

See [the spec](https://github.com/microsoft/terminal/blob/master/doc/specs/%231142%20-%20Keybinding%20Arguments.md) for more details.

This is part two of the implementation, part one was #2446

## PR Checklist
* [x] Closes #1142
* [x] I work here
* [x] Tests added/passed
* [x] Schema updated

## Validation Steps Performed

* Ran Tests
* Removed the legacy keybindings from the `defaults.json`, everything still works
* Tried leaving the legacy keybingings in my `profiles.json`, everything still works.

-------------------------------------------------
* this is a start, but there's a weird linker bug if I take the SetKeybinding(ShortcutAction, KeyChord) implementation out, which I don't totally understand

* a good old-fashioned clean will fix that right up

* all these things work

* hey this actually _functionally_ works

* Mostly cleanup and completion of implementation

* Hey I bet we could just make NewTab the handler for NewTabWithProfile

* Start writing tests for Keybinding args

* Add tests

* Revert a bad sln change, and clean out dead code

* Change to include ""command"" as a single object

  This is a change to make @dhowett-msft happy. Changes the args to be a part
  of the ""command"" object, as opposed to an object on their own.

  EX:

  ```jsonc

    // Old style
    { ""command"": ""switchToTab0"", ""keys"": [""ctrl+1""] },
    { ""command"": { ""action"": ""switchToTab"", ""index"": 0 }, ""keys"": [""ctrl+alt+1""] },

    // new style
    { ""command"": ""switchToTab0"", ""keys"": [""ctrl+1""] },
    { ""command"": ""switchToTab"", ""args"": { ""index"": 0 } ""keys"": [""ctrl+alt+1""] },

  ```

* schemas are hard yo

* Fix the build?

* wonder why my -Wall settings are different than CI...

* this makes me hate things

* Comments from PR

  * Add a `Direction::None`
  * LOAD BEARING
  * add some GH ids to TODOs

* add a comment

* PR nits from carlos",,,,True,False,False,899,402,18,18,migrie@microsoft.com,noreply@github.com,"11/14/2019, 22:23:40",2019,"11/14/2019, 22:23:40",2019,4,2,2,3.8,4.8,0
,"Migrate Search module as a shared component for Terminal Search (#3279)

* Make search a shared component for conhost and terminal

* Remove inclusion of deprecated interface file

* Code review changes, remove text buffer modification in Terminal

* remove unreferenced objects to fix build errors

* Fix test failure, guarantee uiaData object is correctly initialized in Search

* minor comment typo fix and format fix

* minor PR comments change

* ColorSeclection directly throw and return

* remove coordAnchor initialization

* minor method signature change",,,,True,True,False,124,74,16,16,kawa@microsoft.com,noreply@github.com,"11/14/2019, 22:36:41",2019,"11/14/2019, 22:36:41",2019,4,0,2,3.1,3.6,0
,"Expand env. vars in backgroundImage (#3204)

* Adds HasBackgroundImage() and GetExpandedBackgroundImagePath() to
Profiles.cpp/h
* Fills Terminal Settings with expanded path, rather than path value
from profiles.json
* Adds simple regression tests to detect and fail if this fix is
circumvented in the future

Fixes #2922",,,,True,False,False,76,2,4,4,richturn@microsoft.com,duhowett@microsoft.com,"11/16/2019, 00:58:25",2019,"11/16/2019, 00:58:25",2019,1,0,0,4.9,1.8,0
,"Force the use of the static pseudoconsole functions in TConn (#3582)

This commit renames the functions in conpty.lib to Conpty* so that they
can be explicitly linked and introduces a header so they can be located.

It also updates the DEF for conpty.dll to reexport them with their
original names.

The crux of the issue here is that TerminalConnection is consuming the
_import_ symbols for the *PseudoConsole family of APIs, which simply
cannot be supplanted by a static library.

Avenues explored: * Exporting __imp_x from the static library to get all
up in kernel32's business.  * Using /ALTERNATENAME:__imp_X=StaticX. It
turns out ALTERNATENAME is only consulted when the symbol isn't found
through traditional means.

This, renaming them, is the straightest path forward.

Fixes #3553.",,,,True,False,False,55,27,6,6,duhowett@microsoft.com,noreply@github.com,"11/16/2019, 01:02:38",2019,"11/16/2019, 01:02:38",2019,1,0,2,3.4,2.4,0
,"Decouple ""Active Terminal"" and ""Focused Control"" (#3540)

## Summary of the Pull Request

Unties the concept of ""focused control"" from ""active control"".

Previously, we were exclusively using the ""Focused"" state of `TermControl`s to determine which one was active. This was fraught with gotchas - if anything else became focused, then suddenly there was _no_ pane focused in the Tab. This happened especially frequently if the user clicked on a tab to focus the window. Furthermore, in experimental branches with more UI added to the Terminal (such as [dev/migrie/f/2046-command-palette](https://github.com/microsoft/terminal/tree/dev/migrie/f/2046-command-palette)), when these UIs were added to the Terminal, they'd take focus, which again meant that there was no focused pane.

This fixes these issue by having each Tab manually track which Pane is active in that tab. The Tab is now the arbiter of who in the tree is ""active"". Panes still track this state, for them to be able to MoveFocus appropriately. 

It also contains a related fix to prevent the tab separator from stealing focus from the TermControl. This required us to set the color of the un-focused Pane border to some color other that Transparent, so I went with the TabViewBackground. Panes now look like the following:

![image](https://user-images.githubusercontent.com/18356694/68697343-41ea2380-0544-11ea-8218-601b57fdd835.png)


## References

See also: #2046

## PR Checklist
* [x] Closes #1205
* [x] Closes #522
* [x] Closes #999
* [x] I work here
* [😢] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Tested manually opening panes, closing panes, clicking around panes, the whole dance.

---------------------------------------------------

* this is janky but is close for some reason?

* This is _almost_ right to solve #1205

  If I want to double up and also fix #522 (which I do), then I need to also
  * when a tab GetsFocus, send the focus instead to the Pane
  * When the border is clicked on, focus that pane's control

  And like a lot of cleanup, because this is horrifying

* hey this autorevoker is really nice

* Encapsulate Pane::pfnGotFocus

* Propogate the events back up on close

* Encapsulate Tab::pfnFocusChanged, and clean up TerminalPage a bit

* Mostly just code cleanup, commenting

* This works to hittest on the borders

  If the border is `Transparent`, then it can't hittest for Tapped events, and it'll fall through (to someone)

  THis at least works, but looks garish

* Match the pane border to the TabViewHeader

* Fix a bit of dead code and a bad copy-pasta

* This _works_ to use a winrt event, but it's dirty

* Clean up everything from the winrt::event debacle.

* This is dead code that shouldn't have been there

* Turn Tab's callback into a winrt::event as well",,,,True,False,False,313,183,8,8,migrie@microsoft.com,noreply@github.com,"11/18/2019, 21:41:25",2019,"11/18/2019, 21:41:25",2019,4,2,2,3.5,3.6,0
,"Updated README.md (#3598)

Added the Ignite 2019 session and fixed the broken Contributor's Guide link",,,,True,True,False,2,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"11/18/2019, 21:41:49",2019,"11/18/2019, 21:41:49",2019,4,0,2,3.3,1.2,0
,"Added default keybindings for panes (#3585)

* added default keybindings for panes

* fixed formatting and alphabetized

* tab fix

* added back keybinding args for master keybindings",,,,True,True,False,28,18,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"11/19/2019, 18:00:47",2019,"11/19/2019, 18:00:47",2019,4,0,2,3.0,1.2,0
,"Fixing increase + decrease font size (#3629)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Fixes #3604 where Increase/Decrease font size bindings were not working.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3604
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Increase and decrease font size works once again!
-------------------------------------

* adding FromJson to AdjustFontSizeArgs

* made a legacy function that just allows you to do 1/-1 delta for adjusting font size

* adding test case

* removing extra quotes

* comments lmao

* FORMATTING WHY",,,,True,False,False,64,2,3,3,57155886+leonmsft@users.noreply.github.com,migrie@microsoft.com,"11/20/2019, 15:45:43",2019,"11/20/2019, 15:45:43",2019,3,0,2,4.8,1.8,0
,"Tree-shake the library link list (#3631)

Fixes #3477.",,,,True,False,False,1,14,1,1,duhowett@microsoft.com,miniksa@microsoft.com,"11/20/2019, 17:44:23",2019,"11/20/2019, 17:44:23",2019,3,0,2,0.3,1.2,0
,LCR: remove OpenConsolePackage as we've never used it (#3632),,,,False,False,False,0,148,14,1,duhowett@microsoft.com,miniksa@microsoft.com,"11/20/2019, 17:44:38",2019,"11/20/2019, 17:44:38",2019,3,0,2,0.0,2.5,0
,Update Cascadia Code to 1911.200 (#3643),,,,False,False,False,1,1,2,1,duhowett@microsoft.com,noreply@github.com,"11/20/2019, 22:24:26",2019,"11/20/2019, 22:24:26",2019,4,0,2,2.5,1.0,0
,"Add ""format : color"" to Schema color items (#3530)

Enables VS Code to recognize color-typed settings and show a color decorator in the editor.",,,,False,False,False,2,1,1,1,tonofpudding@gmail.com,carlos.zamora@microsoft.com,"11/20/2019, 22:55:36",2019,"11/20/2019, 22:55:36",2019,4,0,0,3.3,1.0,0
,spec: propose an evolution of closeOnExit (#2039),,,,False,False,False,107,0,1,1,duhowett@microsoft.com,noreply@github.com,"11/20/2019, 23:48:48",2019,"11/20/2019, 23:48:48",2019,4,0,2,5.0,2.0,0
,"Re-add keybindings to new tab dropdown (#3618)

## Summary of the Pull Request

With #3391, I almost certainly regressed the ability for the new tab dropdown to display the keybindings for each profile. This adds them back.

## PR Checklist
* [x] Closes #3603
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Now, we can lookup keybindings not only for `ShortcutAction`s, but also `ActionAndArgs`s, so we can look up the binding for an action with a particular set of arguments.
---------------------------------------------
* fixes #3603 by searching for ActionAndArgs too

* Apply suggestions from code review

Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>",,,,True,False,False,104,9,7,7,migrie@microsoft.com,noreply@github.com,"11/21/2019, 23:09:50",2019,"11/21/2019, 23:09:50",2019,4,2,2,4.6,3.0,0
,Upgrade UiaProviders to WRL::ComPtr (#3051),,,,False,False,False,519,779,27,23,carlos.zamora@microsoft.com,noreply@github.com,"11/22/2019, 00:08:37",2019,"11/22/2019, 00:08:37",2019,1,0,2,2.0,4.0,0
,"Add suppressApplicationTitle as boolean (#2814)

* first take at suppressApplicationTitle rewrite

* Rebased tab title fixes

* updated settings doc

* incomplete - not suppressing where application title is changing

* added original startingTitle functionality back

* moved suppressApplicationTitle to ICoreSettings

* suppression is working, but tab navigation overrides it

* suppression works, but not with panes

* it works!

* code cleanup

* added suppressApplicationTitle to JSON schema

* more code cleanup

* changed starting title from wstring_view to wstring

* Formatting fix",,,,True,True,False,82,3,12,12,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"11/22/2019, 00:18:24",2019,"11/22/2019, 00:18:24",2019,1,0,2,4.9,3.0,0
,"Add a Windows.UI.Text.Core IME overlay to TerminalControl (#1919)

TerminalControl doesn't use any of the built in text input and edit
controls provided by XAML for text input, which means TermianlControl
needs to communicate with the Text Services Framework (TSF) in order to
provide Input Method Editor (IME) support.  Just like the rest of
Terminal we get to take advantage of newer APIs (Windows.UI.Text.Core)
namespace to provide support vs. the old TSF 1.0.

Windows.UI.Text.Core handles communication between a text edit control
and the text services primarily through a CoreTextEditContext object.

This change introduces a new UserControl TSFInputControl which is a
custom EditControl similar to the CustomEditControl sample[1].

TSFInputControl is similar (overlay with IME text) to how old console
(conimeinfo) handled IME. 

# Details
TSFInputControl is a Windows.UI.Xaml.Controls.UserControl

TSFInputControl contains a Canvas control for absolution positioning a
TextBlock control within its containing control (TerminalControl).

The TextBlock control is used for displaying candidate text from the
IME.  When the user makes a choice in the IME the TextBlock is cleared
and the text is written to the Terminal buffer like normal text.

TSFInputControl creates an instance of the CoreTextEditContext and
attaches appropriate event handlers to CoreTextEditContext in order to
interact with the IME.

A good write-up on how to interact with CoreTextEditContext can be found
here[2].

## Text Updates
Text updates from the IME come in on the TextUpdating event handler,
text updates are stored in an internal buffer (_inputBuffer).

## Completed Text
Once a user selects a text in the IME, the CompositionCompleted handler
is invoked.  The input buffer (_inputBuffer) is written to the Terminal
buffer, _inputBuffer is cleared and Canvas and TextBlock controls are
hidden until the user starts a composition session again.

## Positioning
Telling the IME where to properly position itself was the hardest part
of this change.  The IME expects to know it's location in screen
coordinates as supposed to client coordinates.  This is pretty easy if
you are a pure UWP, but since we are hosted inside a XAMLIsland the
client to screen coordinate translation is a little harder.  

### Calculating Screen Coordinates
1. Obtaining the Window position in Screen coordinates.
2. Determining the Client coordinate of the cursor.
3. Converting the Client coordinate of the cursor to Screen coordinates.
4. Offsetting the X and Y coordinate of the cursor by the position of
   the TerminalControl within the window (tabs if present, margins, etc..).
5. Applying any scale factor of the display.

Once we have the right position in screen coordinates, this is supplied
in the LayoutBounds of the CoreTextLayoutRequestedEventArgs which lets
the IME know where to position itself on the Screen.

## Font Information/Cursor/Writing to Terminal
3 events were added to the TSFInputControl to create a loosely-coupled
implementation between the TerminalControl and the TSFInputControl.
These events are used for obtaining Font information from the
TerminalControl, getting the Cursor position and writing to the terminal
buffer.

## Known Issues

- Width of TextBlock is hardcoded to 200 pixels and most likely should
  adjust to the available width of the current input line on the console
  (#3640)
- Entering text in the middle of an existing set of text has TextBlock
  render under existing text. Current Console behavior here isn't good
  experience either (writes over text)
- Text input at edges of window is clipped versus wrapping around to
  next line.  This isn't any worse than the original command line, but
  Terminal should be better (#3657)

## Future Considerations
Ideally, we'd be able to interact with the console buffer directly and
replace characters as the user types. 

## Validation
General steps to try functionality
- Open Console
- Switch to Simplified Chinese (Shortcut: Windows+Spacebar)
- Switch to Chinese mode on language bar

Scenarios validated:
- As user types unformatted candidates appear on command line and IME
  renders in correct position under unformatted characters.
- User can dismiss IME and text doesn't appear on command line 
- Switch back to English mode, functions like normal
- New tab has proper behavior
- Switching between tabs has proper behavior
- Switching away from Terminal Window with IME present causes IME to
  disappear

[1]: https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/CustomEditControl
[2]: https://docs.microsoft.com/en-us/windows/uwp/design/input/custom-text-input

Closes #459
Closes #2213
Closes #3641",,,,False,False,False,583,16,9,9,philnach@microsoft.com,duhowett@microsoft.com,"11/22/2019, 00:25:50",2019,"11/22/2019, 00:25:50",2019,1,0,0,4.9,4.2,0
,"Revert ""Throttle scroll position update"" (#3660)

This reverts commit 1177815f81ab90a802bc8e05fbebc432d96cdb2d.",,,,False,False,False,0,21,2,2,duhowett@microsoft.com,noreply@github.com,"11/22/2019, 00:26:21",2019,"11/22/2019, 00:26:21",2019,1,0,2,0.0,1.0,0
,Bump the font to 1911.21 (#3662),,,,False,False,False,1,1,2,1,duhowett@microsoft.com,noreply@github.com,"11/22/2019, 01:10:57",2019,"11/22/2019, 01:10:57",2019,1,0,2,2.5,1.0,0
,update version number to 0.7,,,,False,False,False,1,1,1,1,cinnamon@microsoft.com,cinnamon@microsoft.com,"11/22/2019, 03:16:03",2019,"11/22/2019, 03:16:03",2019,1,0,0,2.5,1.0,0
,"Make sure to set an alpha channel during ColorRefToColor (#3669)

Fixes #3664.",,,,True,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"11/22/2019, 17:10:12",2019,"11/22/2019, 17:10:12",2019,3,0,2,5.0,1.2,0
,"OK (#3675)

[OK](https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/o/ok-okay)!

OK?",,,,False,False,False,1,1,1,1,jtippet@users.noreply.github.com,migrie@microsoft.com,"11/25/2019, 14:01:33",2019,"11/25/2019, 14:01:33",2019,3,0,2,2.5,1.0,0
,"Reset font size key bindings (#3505)

## Summary of the Pull Request
This PR implements resetFontSize keybindings, with default keybindings `ctrl+0`.

## PR Checklist
* [x] Closes #3319
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated

## Validation Steps Performed
Tested manually.
-----------------------------------------
* Add resetFontSize keybindings (#3319)

* update doc files

* Refactor AdjustFontSize & ResetFontSize to use _SetFontSize (#3319)

* Ran clang-format on TermControl

* Fix function usage change",,,,True,False,True,64,18,13,13,daniel599@users.noreply.github.com,migrie@microsoft.com,"11/25/2019, 17:35:10",2019,"11/25/2019, 17:35:10",2019,3,0,2,4.1,3.0,0
,"consolidate PackageES versioning in /custom.props (#3672)

This location and name is practically mandated by PackageES. Sorry ☹️.

This will ensure that all artifacts that we produce are versioned
properly:

| thing   | version (ex.)   |
|---------|-----------------|
| dll/exe | 0.7.1911.22009  |
| nupkg   | 0.7.191122009   |
| appx    | 0.7.3269.0      |

For reference, here's the version format:

### EXE, DLL, .NET Assembly

0.7.1911.22009
^ ^  ^ ^  ^  ^
| |  | |  |  `-Build # on that date
| |  | |  `-Day
| |  | `-Month
| |  `-Year
| `-Minor
`-Major

### NuGet Package

0.7.191122009
^ ^  ^ ^ ^  ^
| |  | | |  `-Build # on that date
| |  | | `-Day
| |  | `-Month
| |  `-Year
| `-Minor
`-Major

### AppX Package

0.7.03269.0
^ ^ ^  ^^ ^
| | |  || `-Contractually always zero (a waste)
| | |  |`-Build # on that date
| | |  `-Number of days in [base year]
| | `-Number of years since [base year]
| `-Minor
`-Major

[base year] = $(XesBaseYearForStoreVersion)

It is expected that the base year is changed every time the version
number is changed.",,,,False,False,False,12,6,3,3,duhowett@microsoft.com,noreply@github.com,"11/25/2019, 19:29:40",2019,"11/25/2019, 19:29:40",2019,4,0,2,3.7,1.0,0
,Restore ability to set window title from commandline (#3695),,,,False,False,False,16,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"11/25/2019, 20:23:08",2019,"11/25/2019, 20:23:08",2019,4,2,0,5.0,1.0,0
,"Implement ConnectionState and closeOnExit=graceful/always/never (#3623)

This pull request implements the new
`ITerminalConnection::ConnectionState` interface (enum, event) and
connects it through TerminalControl to Pane, Tab and App as specified in
#2039. It does so to implement `closeOnExit` = `graceful` in addition to
the other two normal CoE types.

It also:

* exposes the singleton `CascadiaSettings` through a function that
  looks it up by using the current Xaml application's `AppLogic`.
  * In so doing, we've broken up the weird runaround where App tells
    TerminalSettings to CloseOnExit and then later another part of App
    _asks TerminalControl_ to tell it what TerminalSettings said App
    told it earlier. `:crazy_eyes:`
* wires up a bunch of connection state points to `AzureConnection`.
  This required moving the Azure connection's state machine to use another
  enum name (oops).
* ships a helper class for managing connection state transitions.
* contains a bunch of template magic.
* introduces `WINRT_CALLBACK`, a oneshot callback like `TYPED_EVENT`.
* replaces a bunch of disparate `_connecting` and `_closing` members
  with just one uberstate.
* updates the JSON schema and defaults to prefer closeOnExit: graceful
* updates all relevant documentation

Specified in #2039
Fixes #2563

Co-authored-by: mcpiroman <38111589+mcpiroman@users.noreply.github.com>",,,,True,False,False,551,280,32,32,duhowett@microsoft.com,noreply@github.com,"11/25/2019, 22:22:29",2019,"11/25/2019, 22:22:29",2019,4,0,2,3.3,5.0,0
,"Introduce a Universal package for Windows Terminal (#3236)

This PR creates a Universal entrypoint for the Windows Terminal solution
in search of our goals to run everywhere, on all Windows platforms.

The Universal entrypoint is relatively straightforward and mostly just
invokes the App without any of the other islands and win32 boilerplate
required for the centennial route. The Universal project is also its own
packaging project all in one and will emit a relevant APPX.

A few things were required to make this work correctly:
* Vcxitems reuse of resources (and link instructions on all of them
  for proper pkg layout)
* Move all Terminal project CRT usages to the app ones (and ensure
  forwarders are only Nugetted to the Centennial package to not pollute
  the Universal one)
* Fix/delay dependencies in `TerminalApp` that are not available in
  the core platform (or don't have an appropriate existing platform
  forwarder... do a loader snaps check)
* vcpkg needs updating for the Azure connection parser
* font fallbacks because Consolas isn't necessarily there
* fallbacks because there are environments without a window handle

Some of those happened in other small PRs in the past week or two. They
were relevant to this.

Note, this isn't *useful* as such yet. You can run the Terminal in this
context and even get some of the shells to work. But they don't do a
whole lot yet. Scoping which shells appear in the profiles list and only
offering those that contextually make sense is future work.

* Break everything out of App except the base initialization for XAML. AppLogic is the new home.
* deduplicate logics by always using the app one (since it has to be there to support universal launch).
* apparently that was too many cross-boundary calls and we can cache it because winrt objects are magic.
* Put UWP project into solution.
* tabs in titlebar needs disabling from uwp context as the non-client is way different. This adds a method to signal that to logic and apply the setting override.
* Change to use App CRT in preparation for universal.
* Try to make project build again by setting winconpty to static lib so it'll use the CRT inside TerminalConnection (or its other consumers) instead of linking its own.
* Remove test for conpty dll, it's a lib now. Add additional commentary on how CRT linking works for future reference. I'm sure this will come up again.
* This fixes the build error.
* use the _apiset variant until proven otherwise to match the existing one.
* Merge branch 'master' into dev/miniksa/uwp3
* recorrect spacing in cppwinrt.build.pre.props
* Add multiple additional fonts to fallback to. Also, guard for invalid window handle on title update.
* Remove ARMs from solution.
* Share items resources between centennial and universal project.
* cleanup resources and split manifest for dev/release builds.
* Rev entire solution to latest Toolkit (6.0.0 stable release).
* shorten the items file using include patterns
* cleanup this filters file a bit.
* Fix C26445 by using string_view as value, not ref. Don't build Universal in Audit because we're not auditing app yet.
* some PR feedback. document losing the pointer. get rid of 16.3.9 workarounds. improve consistency of variable decl in applogic.h
* Make dev phone product ID not match prod phone ID. Fix universal package identity to match proposed license information.",,,,True,True,False,579,269,26,25,miniksa@microsoft.com,duhowett@microsoft.com,"11/26/2019, 00:30:45",2019,"11/26/2019, 00:30:45",2019,1,2,0,3.7,5.0,0
,Enable signing and ARM64 for Universal Terminal (#3716),,,,False,False,False,8,5,3,2,miniksa@microsoft.com,duhowett@microsoft.com,"11/26/2019, 22:25:54",2019,"11/26/2019, 22:25:54",2019,4,2,0,3.0,1.0,0
,"Encapsulate dispatching `ShortcutActions` in it's own class (#3658)

## Summary of the Pull Request

Moves all the code responsible for dispatching an `ActionAndArgs` to it's own class, `ShortcutActionDispatch`. Now, the `AppKeyBindings` just uses the single instance of a `ShortcutActionDispatch` that the `TerminalPage` owns to dispatch events, without the need to re-attach the event handlers every time we reload the settings.

## References

This is something I originally did as a part of #2046.

I need this now for #607.

It's also a part of work for #3475

## PR Checklist
* [x] This is a bullet point within #3475
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

With this change, we'll be able to have other things dispatch `ShortcutAction`s easily, by constructing an `ActionAndArgs` and just passing it straight to the `ShortcutActionDispatch`.

## Validation Steps Performed

Ran the Terminal, tried out some keybindings, namely <kbd>Ctrl+c</kbd> for copy when there is a selection, or send `^C` when there isn't. That still works. 

Reloading settings also still works. 

-----------------------------------------------
* Move action handling to it's own class separate from AKB. This is the first checkbox in #3475

(cherry picked from commit 696726b571d3d1fdf1d59844c76e182fc72cb2ea)

* clean up doc comments",,,,False,False,False,427,327,9,9,migrie@microsoft.com,noreply@github.com,"11/27/2019, 21:51:38",2019,"11/27/2019, 21:51:38",2019,4,2,2,2.8,3.5,0
,"Add a 'splitPane' ShortcutAction (#3722)

## Summary of the Pull Request

We already have ""splitHorizontal"" and ""splitVertical"", but those will both be deprecated in favor of ""splitPane"" with arguments. 

Currently, there's one argument: ""style"", which is one of ""vertical"" or ""horizontal.""

## References
This is being done in pursuit of supporting #607 and #998. I don't really want to lob #998 in with this one, since both that and this are hefty enough PRs even as they are. (I have a branch for #998, but it needs this first)

This will probably conflict with #3658
## PR Checklist
* [ ] Doesn't actually close anything, only enables #998
* [x] I work here
* [ ] Tests added/passed - yea okay no excuses here
* [x] Requires documentation to be updated

## Validation Steps Performed
Added new keybindings with the args - works
Tried the old keybindings without the args - still works
---------------------------------------
* Add a 'splitPane' keybinding that can be used for splitting a pane either vertically or horizontally

* Update documentation too

* Good lord this is important

* Add a test too, though I have no idea if it works

* ""style"" -> ""split""

* pr comments from carlos",,,,False,False,False,246,80,17,17,migrie@microsoft.com,noreply@github.com,"11/28/2019, 13:42:15",2019,"11/28/2019, 13:42:15",2019,3,2,2,3.8,3.5,0
,schema: adding missing comma to line 212 (#3772),,,,False,False,False,1,1,1,1,45046758+jdevens@users.noreply.github.com,duhowett@microsoft.com,"11/28/2019, 22:15:16",2019,"11/28/2019, 22:15:16",2019,4,0,0,2.5,1.0,0
,"FindGuid helper function (#3762)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Adds a simple helper function to look up the GUID associated with a profile name.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3680
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed. Yes, new test group in `SettingsTests`!
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3680

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Very simple function, for-each through profiles checking for a match. Returns the associated GUID if found, else returns the null GUID.

This function is marked as `noexcept` to comply with assumption made by other `CascadiaSettings` functions that [`Profiles::GetGuid`](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalApp/Profile.cpp#L141) does not throw, despite it throwing.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
The new function is simple and can be visually validated, but added tests regardless. A new test group was added in `SettingsTests` called `TestHelperFunctions` to validate the new function `FindGuid` and older function `FindProfile`. This test group could be used to validate more helper functions in `CascadiaSettings` as they're added. The new test group passes after running `te.exe TerminalApp.LocalTests.dll`. 


--------------------------------------------

* Added FindGuid helper function

* Style change

* Tests for FindGuid and FindProfile

* Fixed code format?

* Code format guess

No feedback from the Azure pipeline

* optional<GUID> fix

* Updated function desc",,,,True,False,False,86,0,3,3,mkitzan45@gmail.com,migrie@microsoft.com,"12/02/2019, 14:24:21",2019,"12/02/2019, 14:24:21",2019,3,0,2,5.0,1.8,0
,"Updated TitleBar Buttons to be consistent with other Windows ap… (#3777)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

This PR updates the TitleBar buttons to be more consistent with other Windows apps.
Current buttons are a tiny bit smaller as compared to Chrome/Credge/Settings:
![Screenshot (269)~2](https://user-images.githubusercontent.com/36439704/69860506-6f60fc00-12bc-11ea-9b39-5b4a21584e67.png)


<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 


<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] CLA signed
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already.

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

This PR changes the PointerHover Background of the close button on the TitleBar to match other Windows apps, from ""#ff0000"" to ""#e81123"". Also, the button width has been changed to 46 to be the same as other windows apps.
<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->

------------------------------------------
* Fix Close Button Color

Changed the color of the Close Button on mouse hover from Red to ""#e81123"" which is the color used by other uwp apps.

* Updated Button Width

Changed the button width to be consistent with other uwp apps.",,,,True,True,False,5,5,1,1,anuthadev@gmail.com,migrie@microsoft.com,"12/02/2019, 14:25:49",2019,"12/02/2019, 14:25:49",2019,3,0,2,2.5,1.2,0
,"Fixed throwing floating point cast (#3784)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Replaced a `gsl::narrow` call to `gsl::narrow_cast` call. The `gsl::narrow` call used to throw when the user had custom display scaling due to a bad comparison between floating point values.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
Possible other [startup crashes](https://github.com/microsoft/terminal/issues/3749#issuecomment-559900267). I'll update this as they're found.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3749, likely #3747
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3749

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
It's a one line fix. If you want more context, here's the [full description](https://github.com/microsoft/terminal/issues/3749#issuecomment-559911062) of the problem.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Set my machine to a custom scaling  and opened a fixed build of the WT. My WT started up without crashing and continued to operate without issues (including maximizing, minimizing, and fullscreen toggle).",,,,True,False,False,1,1,1,1,mkitzan45@gmail.com,migrie@microsoft.com,"12/02/2019, 14:27:45",2019,"12/02/2019, 14:27:45",2019,3,0,2,2.5,1.2,0
,"Integrate inbox changes up to 68d3b53286dd

sources files and testmd changes

(cherry picked from commit 41b3b2a49d2d4510cd046101616f8a561bd28ceb)",,,,False,False,False,50,49,8,8,miniksa@microsoft.com,duhowett@microsoft.com,"12/03/2019, 01:23:55",2019,"12/03/2019, 01:24:26",2019,1,2,0,2.5,2.0,0
,"GetGuid noexcept Fix (#3806)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Fixed the noexcept specifier on `GetGuid`, and corrected `FindProfile` and `FindGuid` so they don't throw. Also, adjusted `SettingsTests` to reflect these changes.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3763
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed updated a test group in `SettingsTests`
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3763

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
The `noexcept` specifier on `GetGuid` was not removed when `Profile` was [updated](https://github.com/microsoft/terminal/issues/3763#issuecomment-559497094) to `std::optional<GUID>`. This PR fixes that and modifies two helper functions `FindProfile` and `FindGuid` in `CascadiaSettings` to work correctly if `GetGuid` does throw. 

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Updated the `TestHelperFunctions` test group in `SettingsTests` and made sure the tests pass.",,,,True,False,False,23,15,4,4,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/03/2019, 19:05:41",2019,"12/03/2019, 19:05:41",2019,4,0,0,3.0,1.2,0
,"Fix LocalTests that were working before (#3807)

## Summary of the Pull Request

Fixes the LocalTests that should work. This does _not_ fix the TabTests.


## PR Checklist
* [x] Closes #3536
* [x] I work here
* [x] This is literally making the tests work
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

In a previous PR, we broke unpackaged activation. This had the unintended side-effect of breaking these tests. The solution here is to run these unittests _packaged_.

This also makes things a little bit better for the TabTests, but doesn't fix them (inexplicably). A mail thread internally is tracking the progress of fixing those tests.",,,,True,False,False,92,101,6,6,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/03/2019, 19:29:48",2019,"12/03/2019, 19:29:48",2019,4,2,0,2.4,3.0,0
,"ColorTool: Proofread the helper text, update Build.bat (#2644)

First, my changes to `build.bat`:

1. `Build.bat` now looks for Visual Studio 2019 too.
2. `Build.bat` now ensures that the linker places ColorTool.exe into
   `\debug` or `\release` folders, not `\debug\net471` or
   `\release\net471`.
3. `Build.bat` is now smarter in its search. It determines the operating
   system's CPU architecture before deciding whether to search in ""Program
   Files (x86)"" or ""Program Files"".

Second, my changes to the help text displayed to the user:

1. The help text now makes it clear that some switches cannot be used
   with certain others.
2. Some typos are fixed. e.g. ""ct"" to ""ColorTool"" (it took me two hours
   to figure this one out!) and ""schemename"" to ""scheme name"".

I've made a minor change to the order of `switch (arg)` in Program.cs
too, to ensure that the terminating switches are analyzed first. This
way, there will be fewer surprises if the user supplies malformed input.
But feel free to reject this one.

# Unresolved issues

`Build.bat` is inherently faulty. On a pristine computer, a user cannot
just install the latest version of Microsoft Build Tool and run
`build.bat` to build ColorTool. The reason is the absence of certain
NuGet packages. Either NuGet or Visual Studio must download the
dependencies first.

# Validation Steps Performed

Since the changes to the code are minor, I don't know what test I can
possibly devise, other than compiling it and seeing that it works.",,,,True,True,False,297,266,4,4,jadangerbrooks@hotmail.com,duhowett@microsoft.com,"12/03/2019, 20:44:23",2019,"12/03/2019, 20:44:23",2019,4,0,0,2.6,3.6,0
,Correct Copy Keybinding Arg Default Behavior (#3823),,,,False,False,False,10,10,4,4,carlos.zamora@microsoft.com,duhowett@microsoft.com,"12/04/2019, 00:27:56",2019,"12/04/2019, 00:27:56",2019,1,0,0,2.5,1.2,0
,"doc: Disambiguate ""Keybindings"" reference; add example keys (#3681)

Add more examples to terminal settings keybindings documentation.

Co-Authored-By: Mike Griese <migrie@microsoft.com>",,,,False,False,False,11,2,1,1,ragerdl@gmail.com,duhowett@microsoft.com,"12/04/2019, 02:16:06",2019,"12/04/2019, 02:16:06",2019,1,0,0,4.2,1.0,0
,"Update to the latest MUX prerelease (#3832)

## Summary of the Pull Request

Updates MUX to the latest pre-release version. This prerelease has a fix for a certain `E_LAYOUTCYCLE` bug in the TabView that was causing an untold number of crashes for us.

Thanks again @teaP!

## PR Checklist
* [x] Closes #3303
* [x] Closes #2277
* [x] I work here
* [n/a] Tests added/passed
* [n/a] Requires documentation to be updated",,,,True,False,False,13,13,7,7,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/04/2019, 18:27:01",2019,"12/04/2019, 18:27:01",2019,4,2,0,2.5,1.8,0
,"Prevent the horizontal tab character wrapping at the end of a line (#3197)

# Summary of the Pull Request
When a horizontal tab ('\t') is output on the last column of the screen, the current implementation moves the cursor position to the start of the next line. However, the DEC STD 070 manual specifies that a horizontal tab shouldn't move past the last column of the active line (or the right margin, if we supported horizontal margins). This PR updates the forward tab implementation, to prevent it wrapping onto a new line when it reaches the end of a line.

# Detailed Description of the Pull Request / Additional comments
Originally the SCREEN_INFORMATION::GetForwardTab method had a condition which handled a tab at the end of the line as a special case, moving the cursor to the start of the next line. I've simply removed that condition, so an end-of-line tab is handled the same way as any other position (in this case it will just leaves the cursor where it is).

While testing, though, I found that there were circumstances where you could have tab stops greater than the width of the screen, and when that happens, a tab can still end up wrapping onto the next line. To fix that I had to add an additional check to make sure the tab position was always clamped to the width of the buffer.

With these fixes in place, a tab control should now never move off the active line, so I realised that the DoPrivateTabHelper function could be optimized to calculate all of the tab movements in advance, and then only make a single call to AdjustCursorPosition with the final coordinates. This change is not strictly necessary, though, so it can easily be reverted if there are any objections.

Regarding backwards compatibility, note that the GetForwardTab method is only used in two places:

when handling a tab character in the WriteCharsLegacy function, but this only applies in VT mode (see here).
when handling the CHT escape sequence in the DoPrivateTabHelper function, and obviously an escape sequence would also only be applicable in VT mode.
So this change should have no effect on legacy console applications, which wouldn't have VT mode activated.

# Validation Steps Performed
I've added another step to the TestGetForwardTab test which makes sure that a horizontal tab won't wrap at the end of a line.

I've also confirmed that this fixes the last remaining issue in the Test of autowrap in Vttest (pages 3 and 4 of the Test of cursor movements). Although I should note that this only works in conhost.",,,,True,True,False,21,17,4,4,j4_james@hotmail.com,carlos.zamora@microsoft.com,"12/04/2019, 18:48:09",2019,"12/04/2019, 18:48:09",2019,4,0,0,3.2,1.2,0
,"suppressApplicationTitle suppresses initial application title (#3837)

Fixed bug where suppressApplicationTitle didn't suppress initial title from application
Also fixes the Azure Cloud Shell issue.",,,,True,True,False,7,18,2,2,48369326+cinnamon-msft@users.noreply.github.com,carlos.zamora@microsoft.com,"12/04/2019, 22:57:44",2019,"12/04/2019, 22:57:44",2019,4,0,0,1.4,1.2,0
,"Conhost: copy RTF to clipboard (#3595)

RTF data is now copied to the clipboard. The clipboard format name
used for RTF data is `Rich Text Format`.

Refactored some code in `Clipboard.cpp` so that the code for setting
data to the clipboard is re-used. Also, renamed parameter
`fAlsoCopyHtml` to `fAlsoCopyFormatting` to make it more generic.

Tested by copying text from console to WordPad. Also verified that
HTML copy is not regressed by copying to Word.

Closes #3560.",,,,False,False,True,56,41,3,3,anirudh.rayabharam@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/05/2019, 22:29:08",2019,"12/05/2019, 22:29:08",2019,4,0,0,3.3,1.5,0
,"Fixed self reference capture in Tab and TerminalPage (#3835)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Every lambda capture in `Tab` and `TerminalPage` has been changed from capturing raw `this` to `std::weak_ptr<Tab>` or `winrt::weak_ref<TerminalPage>`. Lambda bodies have been changed to check the weak reference before use. 

Capturing raw `this` in `Tab`'s [title change event handler](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalApp/Tab.cpp#L299) was the root cause of #3776, and is fixed in this PR among other instance of raw `this` capture.

The lambda fixes to `TerminalPage` are unrelated to the core issue addressed in the PR checklist. Because I was already editing `TerminalPage`, figured I'd do a [weak_ref pass](https://github.com/microsoft/terminal/issues/3776#issuecomment-560575575).

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3776, potentially #2248, likely closes others
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3776

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
`Tab` now inherits from `enable_shared_from_this`, which enable accessing `Tab` objects as `std::weak_ptr<Tab>` objects. All instances of lambdas capturing `this` now capture `std::weak_ptr<Tab>` instead. `TerminalPage` is a WinRT type which supports `winrt::weak_ref<TerminalPage>`. All previous instance of `TerminalPage` lambdas capturing `this` has been replaced to capture `winrt::weak_ref<TerminalPage>`. These weak pointers/references can only be created after object construction necessitating for `Tab` a new function called after construction to bind lambdas.

Any anomalous crash related to the following functionality during closing a tab or WT may be fixed by this PR:
- Tab icon updating
- Tab text updating
- Tab dragging
- Clicking new tab button
- Changing active pane
- Closing an active tab
- Clicking on a tab
- Creating the new tab flyout menu

Sorry about all the commits. Will fix my fork after this PR! 😅 

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Attempted to repro the steps indicated in issue #3776 with the new changes and failed. When before the changes, the issue could consistently be reproed.",,,,True,False,False,139,67,3,3,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/05/2019, 23:18:22",2019,"12/05/2019, 23:18:22",2019,4,0,0,3.4,3.0,0
,Fix suppressApplicationTitle PR #3837 (#3859),,,,True,True,False,5,4,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"12/06/2019, 17:50:27",2019,"12/06/2019, 17:50:27",2019,3,0,2,2.8,1.2,0
,"Organize AppLib into folders in Visual Studio (#3852)

* Organize AppLib into folders in Visual Studio

* add tab folder",,,,False,False,False,166,0,1,1,38111589+mcpiroman@users.noreply.github.com,miniksa@microsoft.com,"12/06/2019, 17:58:25",2019,"12/06/2019, 17:58:25",2019,3,0,2,5.0,2.0,0
,"I think this fixes this but I honestly don't know how to test the WPF control (#3872)

## Summary of the Pull Request

I believe this fixes #3861 but I honestly don't know how to test that part of the code. Just from reading the issue description that @dhowett-msft provided.

## References

## PR Checklist
* [x] Closes #3861
* [x] I work here
* [ ] Are there tests for this?
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Really none, I just built it and :fingers_crossed:",,,,True,False,False,5,1,1,1,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/06/2019, 18:37:55",2019,"12/06/2019, 18:37:55",2019,4,2,0,4.2,1.2,0
,"Fix the TabTests! (#3833)

## Summary of the Pull Request

Fix the `TabTests`, and enable testing of types with XAML content. The `TabTests` were written many, many moons ago. they were intended to be our tests of XAML-like content within the Terminal app, so we could have unittests of Tabs, Panes, etc. Between their initial authoring and the day they were checked in, we had a bunch of build changes come in and break them irreperably. 

We've gotten them fixed now with _one weird trick_ <sup>doctors hate me</sup>. As long as there isn't an `App.xbf` in the test's output directory, then the tests will deploy just fine.

We also needed a bit of magic, cribbed straight from TAEF, to enable running test code synchronously on the UI thread. Hence, `CppwinrtTailored.h`.

## References

## PR Checklist
* [x] Closes #2472
* [x] I work here
* [x] Tests added/passed - you better believe it
* [n/a] Requires documentation to be updated

## Validation Steps Performed

![image](https://user-images.githubusercontent.com/18356694/70185192-ef1d0b00-16ae-11ea-8799-b77061e3cdb0.png)",,,,True,False,False,210,68,16,15,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/06/2019, 20:45:08",2019,"12/06/2019, 20:45:08",2019,4,2,0,3.8,4.2,0
,"Add support for new panes with specifc profiles and other settings overrides (#3825)

## Summary of the Pull Request


This enables the user to set a number of extra settings in the `NewTab` and `SplitPane` `ShortcutAction`s, that enable customizing how a new terminal is created at runtime. The following four properties were added:
* `profile`
* `commandline`
* `tabTitle`
* `startingDirectory`

`profile` can be used with either a GUID or the name of a profile, and the action will launch that profile instead of the default.

`commandline`, `tabTitle`, and `startingDirectory` can all be used to override the profile's values of those settings. This will be more useful for #607.

With this PR, you can make bindings like the following:

```json

{ ""keys"": [""ctrl+a""], ""command"": { ""action"": ""splitPane"", ""split"": ""vertical"" } },
{ ""keys"": [""ctrl+b""], ""command"": { ""action"": ""splitPane"", ""split"": ""vertical"", ""profile"": ""{6239a42c-1111-49a3-80bd-e8fdd045185c}"" } },
{ ""keys"": [""ctrl+c""], ""command"": { ""action"": ""splitPane"", ""split"": ""vertical"", ""profile"": ""profile1"" } },
{ ""keys"": [""ctrl+d""], ""command"": { ""action"": ""splitPane"", ""split"": ""vertical"", ""profile"": ""profile2"" } },
{ ""keys"": [""ctrl+e""], ""command"": { ""action"": ""splitPane"", ""split"": ""horizontal"", ""commandline"": ""foo.exe"" } },
{ ""keys"": [""ctrl+f""], ""command"": { ""action"": ""splitPane"", ""split"": ""horizontal"", ""profile"": ""profile1"", ""commandline"": ""foo.exe"" } },
{ ""keys"": [""ctrl+g""], ""command"": { ""action"": ""newTab"" } },
{ ""keys"": [""ctrl+h""], ""command"": { ""action"": ""newTab"", ""startingDirectory"": ""c:\\foo"" } },
{ ""keys"": [""ctrl+i""], ""command"": { ""action"": ""newTab"", ""profile"": ""profile2"", ""startingDirectory"": ""c:\\foo"" } },
{ ""keys"": [""ctrl+j""], ""command"": { ""action"": ""newTab"", ""tabTitle"": ""bar"" } },
{ ""keys"": [""ctrl+k""], ""command"": { ""action"": ""newTab"", ""profile"": ""profile2"", ""tabTitle"": ""bar"" } },
{ ""keys"": [""ctrl+l""], ""command"": { ""action"": ""newTab"", ""profile"": ""profile1"", ""tabTitle"": ""bar"", ""startingDirectory"": ""c:\\foo"", ""commandline"":""foo.exe"" } }
```

## References

This is a lot of work that was largely started in pursuit of #607. We want people to be able to override these properties straight from the commandline. While they may not make as much sense as keybindings like this, they'll make more sense as commandline arguments.

## PR Checklist
* [x] Closes #998
* [x] I work here
* [x] Tests added/passed
* [x] Requires documentation to be updated

## Validation Steps Performed
There are tests 🎉

Manually added some bindings, they opened the correct profiles in panes/tabs",,,,False,False,False,718,171,15,15,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/09/2019, 13:02:29",2019,"12/09/2019, 13:02:29",2019,3,2,0,4.0,4.8,0
,"Create Telnet connection type and default loopback profile for… (#3858)

For our Universal terminal for development purposes, we will use telnet to escape the universal application container and empower developers to debug/diagnose issues with their own machine on loopback to the already-elevated telnet context.",,,,False,False,False,716,91,27,21,miniksa@microsoft.com,noreply@github.com,"12/09/2019, 19:07:08",2019,"12/09/2019, 19:07:08",2019,4,2,2,4.3,4.8,0
,Fix Reverse Walking in AttrRowIterator (#3566),,,,True,True,False,167,18,5,5,carlos.zamora@microsoft.com,noreply@github.com,"12/10/2019, 22:46:08",2019,"12/10/2019, 22:46:08",2019,4,0,2,4.5,2.4,0
,"Correct fill attributes when scrolling and erasing (#3100)

## Summary of the Pull Request

Operations that erase areas of the screen are typically meant to do so using the current color attributes, but with the rendition attributes reset (what we refer to as meta attributes). This also includes scroll operations that have to clear the area of the screen that has scrolled into view. The only exception is the _Erase Scrollback_ operation, which needs to reset the buffer with the default attributes. This PR updates all of these cases to apply the correct attributes when scrolling and erasing.

## PR Checklist
* [x] Closes #2553
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've not really discussed this with core contributors. I'm ready to accept this work might be rejected in favor of a different grand plan. 

## Detailed Description of the Pull Request / Additional comments

My initial plan was to use a special case legacy attribute value to indicate the ""standard erase attribute"" which could safely be passed through the legacy APIs. But this wouldn't cover the cases that required default attributes to be used. And then with the changes in PR #2668 and #2987, it became clear that our requirements could be better achieved with a couple of new private APIs that wouldn't have to depend on legacy attribute hacks at all.

To that end, I've added the `PrivateFillRegion` and `PrivateScrollRegion` APIs to the `ConGetSet` interface. These are just thin wrappers around the existing `SCREEN_INFORMATION::Write` method and the `ScrollRegion` function respectively, but with a simple boolean parameter to choose between filling with default attributes or the standard erase attributes (i.e the current colors but with meta attributes reset).

With those new APIs in place, I could then update most scroll operations to use `PrivateScrollRegion`, and most erase operations to use `PrivateFillRegion`.

The functions affected by scrolling included:
* `DoSrvPrivateReverseLineFeed` (the RI command)
* `DoSrvPrivateModifyLinesImpl` (the IL and DL commands)
* `AdaptDispatch::_InsertDeleteHelper` (the ICH and DCH commands)
* `AdaptDispatch::_ScrollMovement` (the SU and SD commands)

The functions affected by erasing included:
* `AdaptDispatch::_EraseSingleLineHelper` (the EL command, and most ED variants)
* `AdaptDispatch::EraseCharacters` (the ECH command)

While updating these erase methods, I noticed that both of them also required boundary fixes similar to those in PR #2505 (i.e. the horizontal extent of the erase operation should apply to the full width of the buffer, and not just the current viewport width), so I've addressed that at the same time.

In addition to the changes above, there were also a few special cases, the first being the line feed handling, which required updating in a number of places to use the correct erase attributes:

* `SCREEN_INFORMATION::InitializeCursorRowAttributes` - this is used to initialise the rows that pan into view when the viewport is moved down the buffer.
* `TextBuffer::IncrementCircularBuffer` - this occurs when we scroll passed the very end of the buffer, and a recycled row now needs to be reinitialised.
* `AdjustCursorPosition` - when within margin boundaries, this relies on a couple of direct calls to `ScrollRegion` which needed to be passed the correct fill attributes.

The second special case was the full screen erase sequence (`ESC 2 J`), which is handled separately from the other ED sequences. This required updating the `SCREEN_INFORMATION::VtEraseAll` method to use the standard erase attributes, and also required changes to the horizontal extent of the filled area, since it should have been clearing the full buffer width (the same issue as the other erase operations mentioned above).

Finally, there was the `AdaptDispatch::_EraseScrollback` method, which uses both scroll and fill operations, which could now be handled by the new `PrivateScrollRegion` and `PrivateFillRegion` APIs. But in this case we needed to fill with the default attributes rather than the standard erase attributes. And again this implementation needed some changes to make sure the full width of the active area was retained after the erase, similar to the horizontal boundary issues with the other erase operations.

Once all these changes were made, there were a few areas of the code that could then be simplified quite a bit. The `FillConsoleOutputCharacterW`, `FillConsoleOutputAttribute`, and `ScrollConsoleScreenBufferW` were no longer needed in the `ConGetSet` interface, so all of that code could now be removed. The `_EraseSingleLineDistanceHelper` and `_EraseAreaHelper` methods in the `AdaptDispatch` class were also no longer required and could be removed.

Then there were the hacks to handle legacy default colors in the `FillConsoleOutputAttributeImpl` and `ScrollConsoleScreenBufferWImpl` implementations. Since those hacks were only needed for VT operations, and the VT code no longer calls those methods, there was no longer a need to retain that behaviour (in fact there are probably some edge cases where that behaviour might have been considered a bug when reached via the public console APIs). 

## Validation Steps Performed

For most of the scrolling operations there were already existing tests in place, and those could easily be extended to check that the meta attributes were correctly reset when filling the revealed lines of the scrolling region.

In the screen buffer tests, I made updates of that sort to  the `ScrollOperations` method (handling SU, SD, IL, DL, and RI), the `InsertChars` and `DeleteChars` methods (ICH and DCH), and the `VtNewlinePastViewport` method (LF). I also added a new `VtNewlinePastEndOfBuffer` test to check the case where the line feed causes the viewport to pan past the end of the buffer.

The erase operations, however, were being covered by adapter tests, and those aren't really suited for this kind of functionality (the same sort of issue came up in PR #2505). As a result I've had to reimplement those tests as screen buffer tests.

Most of the erase operations are covered by the `EraseTests` method, except the for the scrollback erase which has a dedicated `EraseScrollbackTests` method. I've also had to replace the `HardReset` adapter test, but that was already mostly covered by the `HardResetBuffer` screen buffer test, which I've now extended slightly (it could do with some more checks, but I think that can wait for a future PR when we're fixing other RIS issues).",,,,True,False,False,637,859,17,17,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/10/2019, 23:14:40",2019,"12/10/2019, 23:14:40",2019,4,0,0,2.1,4.8,0
,"Add support for ""User Default"" settings II (#3892)

## Summary of the Pull Request

_This is attempt 2 at this feature_. The original PR can be found at #3369. 

These are settings that apply to _every_ profile, before user customizations. 

If the user wants to add ""default profile settings"", they can make the `""profiles""` property an _object_, instead of a list, and add `""defaults""` key underneath that object. The users list of profiles should then be under the `list` property of the `profiles` object.

## References
#2515, #2603, #3369, #3569

## PR Checklist
* [x] Closes #2325
* [x] I work here
* [x] Tests added/passed
* [x] schema, docs updated

## Detailed Description of the Pull Request / Additional comments
~~Discussion in #2325 itself serves as the ""spec"" for this task. I thought we'd need more discussion on the topic, but it ended up being pretty straightforward.~~

I should not have said that in the original PR. We've had a better spec review now that I think we're happier with.

## Validation Steps Performed
_ran the tests_",,,,False,False,False,714,275,5,5,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/11/2019, 00:39:29",2019,"12/11/2019, 00:39:29",2019,1,2,0,3.6,3.6,0
,"This is the bugfix for #3897 (#3901)

## Summary of the Pull Request

I accidentally did the wrong check here to see if the value exists. For an `IReference`, you need to do `variable != nullptr`. I did `variable.Value()`. 

## References
Introduced in #3825

## PR Checklist
* [x] Closes #3897
* [x] I work here
* [ ] Tests added/passed - wow this was a lot harder than I expected
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

This includes a maybe unrelated fix to make `TerminalPage`'s `ShortcutActionDispatch` a `com_ptr`. While I was messing with the tests for this, I caught that we're not supposed to direct allocate winrt types like that. Ofc, the `TerminalAppLib` project doesn't catch this.

## Validation Steps Performed
Ran the terminal manually, instead of just running the tests",,,,True,False,False,27,25,2,2,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/11/2019, 02:04:33",2019,"12/11/2019, 02:04:33",2019,1,2,0,2.6,1.8,0
,"Re-add the keychords to the new tab flyout (#3903)

## Summary of the Pull Request

On this month's episode of ""Mike accidentally breaks this"": 
  Mike forgets that `==` is defined on a pair of winrt objects as ""do these point to the _SAME_ object"", not ""do they have the same values"". 

This just slipped right through code review.

## References

Broken in #3825

## PR Checklist
* [x] Closes #3896
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed

Manually checked that these are still there",,,,False,False,False,8,12,2,2,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/11/2019, 04:23:24",2019,"12/11/2019, 04:23:24",2019,1,2,0,2.0,1.0,0
,"Spec for Default Profile Settings (#3569)

Refer to the original issue: **Default Profile for Common Profile Settings** #2325

So this is my summary of everything we discussed regarding ""default profile settings"". The original PR was #3369, but we were _not_ in agreement on the UX, so this PR is for discussion about that. 

I put forth 4 proposals that were mentioned in the discussion.

In the discussion that followed, we decided the 3rd proposal was the best. The doc reflects that choice.",,,,False,False,False,346,0,1,1,migrie@microsoft.com,noreply@github.com,"12/11/2019, 17:45:56",2019,"12/11/2019, 17:45:56",2019,3,2,2,5.0,3.0,0
,"Attach UiaRenderer and Fire Selection Changed Events (#2989)

This PR makes use of the UiaRenderer by attaching it to the TerminalControl and setting up selectionChanged events for accessibility.

Part 1: attaching the UiaRenderer
The uiaRenderer is treated very similarly to the dxRenderer. We have a unique_ptr ref to it in the TermControl. This gets populated when the TermControlAutomationPeer is created (thus enabling accessibility).

To prevent every TermControl from sending signals simultaneously, we specifically only enable whichever one is in an active pane.

The UiaRenderer needs to send encoded events to the automation provider (in this case, TermControlAutomationPeer). We needed our own automation events so that we can reuse this model for ConHost. This is the purpose of IUiaEventDispatcher.

We need a dispatcher for the UiaRenderer. Otherwise, we would do a lot of work to find out when to fire an event, but we wouldn't have a way of doing that.

Part 2: hooking up selection events
This provides a little bit of polish to hooking it up before. Primarily to actually make it work. This includes returning S_FALSE instead of E_NOTIMPL.

The main thing here really is just how to detect if a selection has changed. This also shows how clean adding more events will be in the future!",,,,False,False,False,204,56,11,11,carlos.zamora@microsoft.com,noreply@github.com,"12/11/2019, 21:52:49",2019,"12/11/2019, 21:52:49",2019,4,0,2,4.1,3.5,0
,ci: return to the original oneshot build config (#3918),,,,False,False,False,3,20,2,2,duhowett@microsoft.com,noreply@github.com,"12/11/2019, 21:53:11",2019,"12/11/2019, 21:53:11",2019,4,0,2,0.7,1.0,0
,"Don't allow a linefeed to scroll when outside DECSTBM margins (#3704)

## Summary of the Pull Request

When the `DECSTBM` margins are set, scrolling should only allowed within
those margins. So if the cursor is below the bottom margin, it should
just be clamped when it tries to move down from the bottom line of the
viewport, instead of scrolling the screen up. This PR implements that
restriction, i.e. it prevents scrolling taking place outside the
`DECSTBM` margins, which was previously allowed.

## PR Checklist
* [x] Closes #2657
* [x] CLA signed.
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments

This simply adds a condition in the `AdjustCursorPosition` function to
check if the cursor is moving below the bottom of the viewport when the
margins are set. If so, it clamps the y coordinate to the bottom line of
the viewport.

The only time it's acceptable for scrolling to happen when margins are
set, is if the scrolling is taking place within those margins. But those
cases would already have been handled earlier in the function (in the
`fScrollDown` or `scrollDownAtTop` conditions), and thus the y
coordinate would have already been prevented from moving out of the
viewport.

## Validation Steps Performed

I've added some screen buffer tests to confirm this new behaviour, and
I've also checked the test case from the initial bug report (#2657) and
made sure it now matches the results in XTerm.",,,,True,True,False,41,0,2,2,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/11/2019, 22:59:27",2019,"12/11/2019, 22:59:27",2019,4,0,0,5.0,1.2,0
,"Updating the readme with my Socials Media (#3921)

Just adding my twitter link to join the party.",,,,False,False,False,1,0,1,1,57155886+leonmsft@users.noreply.github.com,48369326+cinnamon-msft@users.noreply.github.com,"12/11/2019, 23:50:24",2019,"12/11/2019, 23:50:24",2019,4,0,0,5.0,1.0,0
,"Enable Audit Mode for WinRTUtils (#3923)

## Summary of the Pull Request
Turns on Audit for WinRTUtils, fixes audit failures.

## PR Checklist
* [x] I work here
* [x] Still builds
* [x] Am core contributor.

## Validation Steps Performed
Built it.",,,,True,True,False,12,8,6,6,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/12/2019, 13:28:32",2019,"12/12/2019, 13:28:32",2019,3,2,0,3.0,1.8,0
,"Add experimental retro terminal effects (#3468)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Cool retro terminal effects
- glow
- scan lines
- cool
- will make terminal competitive with iterm2

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
![image](https://user-images.githubusercontent.com/502496/68365644-20bda900-00e6-11ea-8a9d-0a4482e48c5a.png)",,,,True,True,False,441,13,20,20,ironyman@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"12/12/2019, 13:44:01",2019,"12/12/2019, 13:44:01",2019,3,0,0,4.8,4.2,0
,"add `src/cascadia/` to `ORGANIZATION.md` (#3932)

## Summary of the Pull Request

Pretty much the title here.

## References

## PR Checklist
* [x] Closes #3780
* [x] I work here
* [x] documentation updated",,,,False,False,False,12,2,1,1,migrie@microsoft.com,noreply@github.com,"12/12/2019, 18:27:05",2019,"12/12/2019, 18:27:05",2019,4,2,2,4.3,1.0,0
,"Add some issue numbers for TODOs from #3468 (#3931)

## Summary of the Pull Request

The original PR had a few TODOs in it without issue numbers. IMO, this wasn't important enough to block the PR over. _Also I'm impatient and wanted that setting_. 

After I merged the PR I created the issues and added the numbers myself.

## References

## PR Checklist
* [x] Closes nothing, this just adds a couple TODOs
* [x] I work here
* [x] this _really_ doesn't need tests
* [x] This _is_ a docs update",,,,False,False,False,11,9,5,5,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/12/2019, 18:55:26",2019,"12/12/2019, 18:55:26",2019,4,2,0,2.8,1.2,0
,"Update the version in master to 0.8 (#3933)

Since we're producing servicing releases from the release-0.7 branch,
this will let us produce preview releases that are on a separate version train.",,,,False,False,False,1,1,1,1,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/12/2019, 19:53:47",2019,"12/12/2019, 19:53:47",2019,4,0,0,2.5,1.0,0
,"Enable Word Navigation in UiaTextRange (#3659)

Enables support for word navigation when using an automation client (i.e.: Narrator, etc...). Specifically, adds this functionality to the UiaTextRange class. The only delimiter used is whitespace because that's how words are separated in English.

# General ""Word Movement"" Expectations
The resulting text range should include any word break characters that are present at the end of the word, but before the start of the next word. (Source)

If you already are on a word, getting the ""next word"" means you skip the word you are on, and highlight the upcoming word appropriately. (similar idea when moving backwards)


# Word Expansion
Since word selection is supposed to detect word delimiters already, I figured I'd reuse that code. I moved it from TerminalCore to the TextBuffer.

Then I built on top of it by adding an optional additional parameter that decides if you want to include...
- the delimiter run when moving forward
- the character run when moving backwards
It defaults to false so that we don't have to care when using it in selection. But we change it to true when using it in our UiaTextRange

# UiaTextRange
The code is based on character movement. This allows us to actually work with boundary conditions.

The main thing to remember here is that each text range is recorded as a MoveState. The text range is most easily defined when you think about the start Endpoint and the end Endpoint. An Endpoint is just a linear 1-dimensional indexing of the text buffer. Examples:
- Endpoint 0 --> (0,0)
- Endpoint 79 --> (79,0) (when the buffer width is 80)
- Endpoint 80 -->(0,1) (when the buffer width is 80)
- When moving forward, the strategy is to focus on moving the end Endpoint. That way, we properly get the indexing for the ""next"" word (this also fixes a wrapping issue). Then, we update the start Endpoint. (This is reversed for moving backwards).
- When moving a specific Endpoint, we just have a few extra if statements to properly adjust for moving start vs end.

# Hooking it up
All we really had to do is add an enum. This part was super easy :)

I originally wanted the delimiters to be able to be defined. I'm not so sure about that anymore. Either way, I hardcoded our delimiter into a variable so if we ever want to expand on it or make that customizable, we just modify that variable.

# Defining your own word delimiters

- Import a word delimiter into the constructor of the ScreenInfoUiaProvider (SIUP)
  - This defines a word delimiter for all the UiaTextRanges (UTR) created by in this context
- import a word delimiter into the UTR directly
  - this provides more control over what a ""word"" is
  - this can be useful if you have an idea of what text a particular UTR will encounter and you want to customize the word navigation for it (i.e consider adding / or \\ for file paths)

The default param of "" "" is scattered throughout because this is the word delimiter used in the English language.",,,,True,True,False,1310,158,17,17,carlos.zamora@microsoft.com,noreply@github.com,"12/12/2019, 23:22:12",2019,"12/12/2019, 23:22:12",2019,4,0,2,4.5,4.8,0
,"Fix ResizePseudoConsole accepting negative values (#3936)

Closes #3447.",,,,True,False,False,1,1,1,1,mkitzan45@gmail.com,duhowett@microsoft.com,"12/13/2019, 01:48:06",2019,"12/13/2019, 01:48:06",2019,1,0,0,2.5,1.2,0
,"Fixed self capture in TermControl (#3908)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
An asynchronous event handler capturing raw `this` in `TermControl` was causing an exception to be thrown when a scroll update event occurred after closing the active tab. This PR replaces all non-auto_revoke lambda captures in `TermControl` to capture (and validate) a `winrt::weak_ref` instead of using raw `this`.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #2947
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #2947

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
`TermControl` is already a WinRT type so no changes were required to enable the `winrt::weak_ref` functionality. There was only one strange change I had to make. In the destructor's helper function `Close`, I had to remove two calls to [`Stop`](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.dispatchertimer.stop#Windows_UI_Xaml_DispatcherTimer_Stop) which were throwing under [some circumstances](https://github.com/microsoft/terminal/issues/2947#issuecomment-562914135). Fortunately, these calls don't appear to be critical, but definitely a spot to look into when reviewing this PR.

Beyond scrolling, any anomalous crash related to the following functionality while closing a tab or WT may be fixed by this PR:
- Settings updating
- Changing background color

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Before these changes I was able to consistently repro the issue in #2947. Now, I can no longer repro the issue.",,,,True,False,False,89,81,2,2,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/13/2019, 13:28:35",2019,"12/13/2019, 13:28:35",2019,3,0,0,2.6,2.4,0
,"Fix SetColorTableEntry off-by-one error (#3938)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Uses the verification in `at` to ensure the index is correct (as @j4james suggests). If `at` throws, then returns false.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3720
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] ~~I've~~ discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3720

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Can no longer repro the issue after the fix.",,,,True,False,False,53,10,3,3,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/14/2019, 00:41:04",2019,"12/14/2019, 00:41:04",2019,1,0,0,4.2,1.8,0
,"Add a spec for search, #605 (#3299)",,,,False,False,False,126,0,4,1,kawa@microsoft.com,duhowett@microsoft.com,"12/14/2019, 00:41:42",2019,"12/14/2019, 00:41:42",2019,1,0,0,5.0,2.0,0
,"Use WS_POPUP for NonClientIslandWindow instead of overriding WM_NCCALCSIZE to remove borders (#3721)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Fixes the sides disappearing when entering full screen mode when the window is maximized.
However, now, a Vista-style frame briefly appears when entering/exiting full screen.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3709
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [x] Requires documentation to be updated (no)
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

When the non-client island window is maximized and has the WS_OVERLAPPEDWINDOW style, SetWindowPos is ""lying"": the position ends up being offset compared to the one we gave it (found by debugging). So I changed it to use WS_POPUP like the client island window was already doing. But now it has the Vista frame that appears briefly when entering/exiting full screen like the client island window.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,45,62,4,4,56923875+greg904@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"12/16/2019, 20:58:38",2019,"12/16/2019, 20:58:38",2019,4,0,0,2.1,2.4,0
,"Fix move focus between grouped panes (#3045) (#3958)

This PR fixes the ability to move between already-split panes
## Summary of the Pull Request

## PR Checklist
* [x] Closes #3045
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed
Tested manually.",,,,True,False,False,1,1,1,1,daniel599@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"12/16/2019, 23:17:06",2019,"12/16/2019, 23:17:06",2019,4,0,0,2.5,1.2,0
,"Search - add search box control and implement search experience (#3590)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
This is the PR for feature Search: #605 
This PR includes the newly introduced SearchBoxControl in TermControl dir, which is the search bar for the search experience. And the codes that enable Search in Windows Terminal. 

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
The PR that migrates the Conhost search module: https://github.com/microsoft/terminal/pull/3279
Spec (still actively updating): https://github.com/microsoft/terminal/pull/3299
<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #605 
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
These functionalities are included in the search experience. 
1. Search in Terminal text buffer. 
2. Automatic wrap-around. 
3. Search up or down switch by clicking different buttons.
4. Search case sensitively/insensitively by clicking a button.                                                                                                                                                S. Move the search box to the top/bottom by clicking a button. 
6. Close by clicking 'X'. 
7. Open search by ctrl + F.

When the searchbox is open, the user could still interact with the terminal by clicking the terminal input area. 

While I already have the search functionalities, currently there are still some known to-do works and I will keep updating my PR:

1. Optimize the search box UI, this includes:
                                                  1) Theme adaptation. The search box background and font color 
                                                       should change according to the theme, 
                                                  2) Add background. Currently the elements in search box are all
                                                      transparent. However, we need a background. 
                                                  3) Move button should be highlighted once clicked. 
2. Accessibility: search process should be able to performed without mouse. Once the search box is focused, the user should be able to navigate between all interactive elements on the searchbox using keyboard. 

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->

To test:
1. checkout this branch.
2. Build the project. 
3. Start Windows Terminal and press Ctrl+F
4. The search box should appear on the top right corner.",,,,True,False,False,757,29,28,28,kawa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/17/2019, 15:52:37",2019,"12/17/2019, 15:52:37",2019,3,0,0,4.9,5.0,0
,"Add support for the DECALN escape sequence (#3968)

## Summary of the Pull Request

This adds support for the [`DECALN`](https://vt100.net/docs/vt510-rm/DECALN.html) escape sequence, which produces a kind of test pattern, originally used on VT terminals to adjust the screen alignment. It's needed to pass several of the tests in the [Vttest](https://invisible-island.net/vttest/) suite.

## PR Checklist
* [x] Closes #3671
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

To start with, the `ActionEscDispatch` method in the `OutputStateMachineEngine` needed to be extended to check for a new intermediate type (`#`). Then when that intermediate is followed by an `8`, it dispatches to a new `ScreenAlignmentPattern` method in the `ITermDispatch` interface.

The implementation of the `ScreenAlignmentPattern` itself is fairly simple. It uses the recently added `PrivateFillRegion` API to fill the screen with the character `E` using default attributes. Then in addition to that, a bunch of VT properties are reset:

* The meta/extended attributes are reset (although the active colors must be left unchanged).
* The origin mode is set to absolute positioning.
* The scrolling margins are cleared.
* The cursor position is moved to home.

## Validation Steps Performed

I've added a screen buffer test that makes sure the `DECALN` sequence fills the screen with the correct character and attributes, and that the above mentioned properties are all updated appropriately.

I've also tested in Vttest, and confirmed that the first two pages of the _Test of cursor movements_ are now showing the frame of E's that are expected there.",,,,False,False,False,118,1,9,9,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/17/2019, 18:11:52",2019,"12/17/2019, 18:11:52",2019,4,0,0,5.0,3.0,0
,"doc: fix a typo in the default settings discussion (#3980)

This change fixed a typo with the grammatical construct in the sentence.",,,,True,True,False,1,1,1,1,naatogma@gmail.com,duhowett@microsoft.com,"12/17/2019, 18:13:28",2019,"12/17/2019, 18:13:28",2019,4,0,0,2.5,1.2,0
,"Hey look the TermControl needs to depend on the UIA renderer (#3983)

We unintentionally broke the build in #2930. If you're building the entire solution,
then you won't have any problems, because the `UiaRenderer` project will get built
before the `TerminalControl`. However, if you're like me and you only really build the
solution one project at a time, you'll find that building `TerminalControl` won't
build `UiaRenderer` automagically.

This fixes that.

s/o to @Rrogntudju for catching this",,,,True,True,False,1,0,1,1,migrie@microsoft.com,duhowett@microsoft.com,"12/17/2019, 18:16:26",2019,"12/17/2019, 18:16:26",2019,4,2,0,5.0,1.2,0
,"Merged PR 4130317: [Git2Git] Merged PR 4127538: [Git2Git] Migrate github changes up to dccb2979

This pull request also includes build break fixes for things that do not build in the OSS repo
and disables the retro terminal effect in conhost.

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp f10445678e59197c1ae2ee29d8f009c9607c4e5d

Related work items: #24387718",,,,True,True,False,12,11,12,11,miniksa@microsoft.com,duhowett@microsoft.com,"12/17/2019, 18:17:26",2019,"12/17/2019, 18:17:26",2019,4,2,0,2.7,2.4,0
,"Fix columns in SettingsSchema.md Profiles section (#4004)

- The `Description` for `selectionBackground` in the Profiles section was in the `Default` column, add an empty default column to fix this.",,,,True,True,False,193,193,1,1,douglaswth@gmail.com,migrie@microsoft.com,"12/17/2019, 22:45:23",2019,"12/17/2019, 22:45:23",2019,4,0,2,2.5,3.0,0
,Fix the WPR profile (#4007),,,,True,True,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"12/18/2019, 01:14:15",2019,"12/18/2019, 01:14:15",2019,1,0,2,2.5,1.2,0
,"Add Int, Dev and IntDev assets; switch to them (#4006)",,,,False,False,False,15,1,275,3,duhowett@microsoft.com,noreply@github.com,"12/18/2019, 03:57:51",2019,"12/18/2019, 03:57:51",2019,1,0,2,4.7,3.0,0
,"Add internal branding corner to Universal terminal... (#4017)

... to convey that it's not ready for production.",,,,False,False,False,12,4,4,3,miniksa@microsoft.com,duhowett@microsoft.com,"12/19/2019, 00:51:06",2019,"12/19/2019, 00:51:06",2019,1,2,0,3.7,1.0,0
,"update to the latest MUX prerelease (#4024)

## Summary of the Pull Request

This latest MUX prerelease fixes the issue where the tab row wouldn't expand to fill the width of the window after shrinking the window size.

## PR Checklist
* [x] Closes #3300
* [x] I work here
* [n/a] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Thanks again @teaP for help fixing this

## Validation Steps Performed

Launched the terminal, played with it a bit",,,,True,False,False,12,12,7,7,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/19/2019, 18:16:07",2019,"12/19/2019, 18:16:07",2019,4,2,0,2.5,1.8,0
,"Add support for ""Automatic"" splits (#4025)

## Summary of the Pull Request

Adds support for `auto` as a potential value for a `splitPane` keybinding's `split` argument. For example:

```json
        { ""keys"": [ ""ctrl+shift+z"" ], ""command"": { ""action"": ""splitPane"", ""profile"": ""matrix"", ""commandline"": ""cmd.exe"", ""split"":""auto"" } },
```

When set to `auto`, Panes will decide which direction to split based on the available space within the terminal. If the pane is wider than it is tall, the pane will introduce a new vertical split (and vice-versa).

## References

## PR Checklist
* [x] Closes #3960
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Ran tests, played with it.",,,,False,False,False,71,5,5,5,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"12/19/2019, 21:47:19",2019,"12/19/2019, 21:47:19",2019,4,2,0,4.7,1.5,0
,"Make the terminal parser/adapter and related classes use modern… (#3956)

## Summary of the Pull Request
Refactors parsing/adapting libraries and consumers to use safer and/or more consistent mechanisms for passing information.

## PR Checklist
* [x] I work here
* [x] Tests still pass
* [x] Am a core contributor.

## Detailed Description of the Pull Request / Additional comments
This is in support of hopefully turning audit mode on to more projects. If I turned it on, it would immediately complain about certain classes of issues like pointer and size, pointer math, etc. The changes in this refactoring will eliminate those off the top.

Additionally, this has caught a bunch of comments all over the VT classes that weren't updated to match the parameters lists.

Additionally, this has caught a handful of member variables on classes that were completely unused (and now gone).

Additionally, I'm killing almost all hungarian and shortening variable names. I'm only really leaving 'p' for pointers.

Additionally, this is vaguely in support of a future where we can have ""infinite scrollback"" in that I'm moving things to size_t across the board. I know it's a bit of a memory cost, but all the casting and moving between types is error prone and unfun to save a couple bytes.

## Validation Steps Performed
- [x] build it
- [x] run all the tests
- [x] everyone looked real hard at it",,,,True,True,True,4145,4508,52,50,miniksa@microsoft.com,noreply@github.com,"12/19/2019, 22:12:53",2019,"12/19/2019, 22:12:53",2019,4,2,2,2.9,5.0,0
,"Fix Search non-blocking follow-ups (#4028)

* search box text localization and search parameters refactoring

* format fix

* remvove unecessary spaces

* Tooltips text localization, CR chanegs

* Move ESC handling to SearchBoxControl

* format check

* mark Esc key input as handled in SearchBoxControl",,,,True,True,True,215,78,9,9,kawa@microsoft.com,noreply@github.com,"12/21/2019, 01:35:31",2019,"12/21/2019, 01:35:31",2019,1,0,2,3.9,3.6,0
,"Remove the VT52 movement ops for now, to avoid conflicting with the VT100 IND control. (#4044)

## Summary of the Pull Request

This removes support for the the VT52 cursor movement operations, in preparation for PR #3271, since the cursor back operation conflicts with the VT100 [`IND`](https://vt100.net/docs/vt510-rm/IND.html) sequence, which we're planning to add. Eventually these ops will be brought back as part of a proper VT52 implementation, when appropriately activated by the [`DECANM`](https://vt100.net/docs/vt510-rm/DECANM.html) mode.

## References

#976 #3271

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3271

## Detailed Description of the Pull Request / Additional comments

The operations were removed from the `OutputStateMachineEngine`, and their associated test cases were removed from `StateMachineExternalTest`. There is no real loss of functionality here, since these sequences were never valid as implemented.

## Validation Steps Performed

I've just tested manually to confirm that the sequences no longer work.",,,,False,False,False,0,40,2,2,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"12/24/2019, 23:37:52",2019,"12/24/2019, 23:37:52",2019,4,0,0,0.0,1.2,0
,"Fix matches of multiple schemas on ""profiles"" (#4045)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Adds proper `type` for `ProfilesObject` definition to avoid warnings about matches of multiple schemas.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
Original issue: #3909
Related PR: #3892
Relates VSCode issue: https://github.com/microsoft/vscode/issues/86738

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #3909
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] No new tests ~Tests added/passed~
* [ ] No docs update needed ~Requires documentation to be updated~
* [X] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3909 (marked as help wanted)

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
1. Download `doc/cascadia/profiles.schema.json` locally
1. Open `profiles.json` from WT in VSCode
1. Replace `$schema` value with path to local copy (verified that all errors are still in place and validations works as before)
1. Update it with `type` on `ProfilesObject`
1. Check that `Matches multiple schemas when only one must validate` warning is fixed",,,,True,False,False,2,1,1,1,illusionmh@gmail.com,migrie@microsoft.com,"12/30/2019, 14:15:50",2019,"12/30/2019, 14:15:50",2019,3,0,2,3.3,1.2,0
,"Immediately show the cursor on terminal focus (#4032)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Before, when a terminal window was focused, the blinking cursor would initially be hidden. This PR will immediately show the cursor when the window is focused, making it easier to keep track of the cursor.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

#3761

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3761
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

I guess I'm the cursor guy now

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

* Switched rapidly between different panes, different tabs and focused and unfocused the main window repeatedly.",,,,True,False,False,2,0,1,1,34610081+dkter@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"12/30/2019, 14:28:54",2019,"12/30/2019, 14:28:54",2019,3,0,0,5.0,1.2,0
,doc: Add notes re:Application must be run from VS (#4085),,,,False,False,False,3,5,1,1,migrie@microsoft.com,duhowett@microsoft.com,"12/30/2019, 17:41:08",2019,"12/30/2019, 17:41:08",2019,3,2,0,1.9,1.0,0
,Add a note regarding unbinding keys (#4084),,,,False,False,False,18,0,1,1,migrie@microsoft.com,miniksa@microsoft.com,"12/30/2019, 18:08:30",2019,"12/30/2019, 18:08:30",2019,4,2,2,5.0,1.0,0
,Fix a crash when calling SetConsoleScreenBufferSize in conpty (#4021),,,,True,True,False,6,6,1,1,migrie@microsoft.com,miniksa@microsoft.com,"12/31/2019, 18:29:27",2019,"12/31/2019, 18:29:27",2019,4,2,2,2.5,1.2,0
,"Replace bitwise flipping with WI_ flag helpers (#4083)

## PR Checklist
* [X] Closes #4026

I didn't found much to do in `InputStateMachineEngine.cpp`, though.",,,,False,False,False,38,43,1,1,skyline75489@outlook.com,48340428+msftbot[bot]@users.noreply.github.com,"01/01/2020, 02:51:08",2020,"01/01/2020, 02:51:08",2020,1,1,1,2.3,1.5,0
,"Fix a crash when dragging a debug conhost across a DPI boundary (#4022)

## Summary of the Pull Request

When dragging _DEBUG_ conhost across a DPI boundary, we'd crash. This doesn't repro for some reason on Release builds. Maybe @miniksa can share some light why that is.

## PR Checklist
* [x] Closes #4012
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Dragged it across the boundary again, doesn't crash anymore 🙏",,,,True,False,False,1,1,1,1,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/02/2020, 17:52:17",2020,"01/02/2020, 17:52:17",2020,3,3,1,2.5,1.2,0
,"Apply audit mode to TerminalInput/Adapter/Parser libraries (#4005)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
- Enables auditing of Virtual Terminal libraries (input, adapter, parser)

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Rolls audit out to more things
* [x] I work here
* [x] Tests should still pass
* [x] Am core contributor
* [x] Closes #3957

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
This is turning on the auditing of these projects (as enabled by the heavier lifting in the other refactor) and then cleaning up the remaining warnings.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
- [x] Built it
- [x] Ran the tests",,,,True,False,True,1162,1271,36,35,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/03/2020, 14:25:21",2020,"01/03/2020, 14:25:21",2020,3,3,1,2.9,5.0,0
,"Apply audit mode to TerminalConnection/Core/Settings and WinCon… (#4016)

## Summary of the Pull Request
- Enables auditing of some Terminal libraries (Connection, Core, Settings)
- Also audit WinConPTY.LIB since Connection depends on it

## PR Checklist
* [x] Rolls audit out to more things
* [x] I work here
* [x] Tests should still pass
* [x] Am core contributor

## Detailed Description of the Pull Request / Additional comments
This is turning on the auditing of these projects (as enabled by the heavier lifting in the other refactor) and then cleaning up the remaining warnings.

## Validation Steps Performed
- [x] Built it
- [x] Ran the tests",,,,False,False,True,553,392,37,36,miniksa@microsoft.com,noreply@github.com,"01/03/2020, 18:44:27",2020,"01/03/2020, 18:44:27",2020,4,3,3,3.3,4.5,0
,"Terminal uses system default for number of rows scrolled at a t… (#3575)

The terminal will use the system setting to determine the number of lines to scroll at a time.
This can be overridden by adding rowsToScroll to app global settings file.
terminal will use the system setting if the app setting is 0, or not specified. No restart is needed to reflect setting changes in system or the settings file.

The default was hardcoded to 4 in the code with a todo comment. 1 works better on precision touchpads, where 4 scrolls too fast.

Co-authored-by: Hannes Nel <hannesne@microsoft.com>",,,,False,False,False,68,6,12,12,hannes.nel@microsoft.com,miniksa@microsoft.com,"01/06/2020, 17:39:02",2020,"01/06/2020, 17:39:02",2020,3,0,3,4.6,3.0,0
,"Fix flipped sense in TerminalDispatch::CursorPosition (#4113)

Fixes #4107.",,,,True,False,False,4,4,1,1,duhowett@microsoft.com,noreply@github.com,"01/06/2020, 22:45:20",2020,"01/06/2020, 22:45:20",2020,4,1,3,2.5,1.2,0
,add a spec for initial position and launch mode (#2654),,,,False,False,False,100,0,1,1,kawa@microsoft.com,duhowett@microsoft.com,"01/07/2020, 18:50:48",2020,"01/07/2020, 18:50:48",2020,4,1,1,5.0,1.5,0
,"Correct improper usage of THROW_IF_NULL_ALLOC (#4128)

Closes #4099",,,,False,False,False,12,12,10,10,skyline75489@outlook.com,duhowett@microsoft.com,"01/07/2020, 21:27:18",2020,"01/07/2020, 21:27:18",2020,4,1,1,2.5,1.5,0
,Fix a test that regressed during #3575 (#4143),,,,True,True,False,2,2,1,1,migrie@microsoft.com,duhowett@microsoft.com,"01/07/2020, 23:18:04",2020,"01/07/2020, 23:18:04",2020,4,3,1,2.5,1.2,0
,"Fix IME/CoreTextEditContext not being reset properly (#4140)

The first argument to `NotifyTextChanged` incorrectly was `[0,0]`
instead of the length of the text to be removed from the
`CoreTextEditContext`.

Best source of documentation for `NotifyTextChanged`:
https://docs.microsoft.com/en-us/windows/uwp/design/input/custom-text-input#overriding-text-updates

FYI @DHowett-MSFT (just in case): C++/WinRT uses `winrt::param::hstring`
for string parameters which intelligently borrows strings. As such you
can simply pass a `std::wstring` to most WinRT methods without the need
of having to allocate an intermediate `hstring`. 🙂

## Validation Steps Performed

I followed the reproduction instructions of #3706 and #3745 and ensured
the issue doesn't happen anymore.

Closes #3645
Closes #3706
Closes #3745",,,,True,False,False,4,11,1,1,leonard@hecker.io,48340428+msftbot[bot]@users.noreply.github.com,"01/08/2020, 17:45:25",2020,"01/08/2020, 17:45:25",2020,3,1,1,1.3,1.2,0
,"Correct passthrough sequences after refactor (#4125)

## Summary of the Pull Request
When refactoring the `StateMachine::ProcessString` algorithm to use safer structures, I made an off-by-one error when attempting to simplify the loop. 

## References
- Introduced in #3956 

## PR Checklist
* [x] Closes #4116
* [x] I work here.
* [x] Tests added/passed
* [x] No documentation
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
The algorithm in use exploited holding onto some pointers and sizes as it rotated around the loop to call back as member variables in the pass-through function `FlushToTerminal`. 

As a part of the refactor, I adjusted to persisting a `std::wstring_view` of the currently processing string instead of pointer/size. I also attempted to simplify the loop at the same time as both the individual and group branches were performing some redundant operations in respect to updating the ""run"" length. 

Turns out, I made a mistake here. I wrote it so it worked correctly for the bottom half where we transition from bulk printing to an escape but then I messed up the top case.

## Validation Steps Performed
- [x] Manual validation of the exact command given in the bug report.
- [x] Wrote automated tests to validate both paths through the `ProcessString` loop that work with the `_run` variable.",,,,True,True,True,98,7,2,2,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/08/2020, 19:16:49",2020,"01/08/2020, 19:16:49",2020,4,3,1,4.7,2.4,0
,"Snap to character grid when resizing window (#3181)

When user resizes window, snap the size to align with the character grid
(like e.g. putty, mintty and most unix terminals). Properly resolves
arbitrary pane configuration (even with different font sizes and
padding) trying to align each pane as close as possible.

It also fixes terminal minimum size enforcement which was not quite well
handled, especially with multiple panes.

This PR does not however try to keep the terminals aligned at other user
actions (e.g. font change or pane split). That is to be tracked by some
other activity.

Snapping is resolved in the pane tree, recursively, so it (hopefully)
works for any possible layout.

Along the way I had to clean up some things as so to make the resulting
code not so cumbersome:
1. Pane.cpp: Replaced _firstPercent and _secondPercent with single
   _desiredSplitPosition to reduce invariants - these had to be kept in
   sync so their sum always gives 1 (and were not really a percent). The
   desired part refers to fact that since panes are aligned, there is
   usually some deviation from that ratio.
2. Pane.cpp: Fixed _GetMinSize() - it was improperly accounting for
   split direction
3. TerminalControl: Made dedicated member for padding instead of
   reading it from a control itself. This is because the winrt property
   functions turned out to be slow and this algorithm needs to access it
   many times. I also cached scrollbar width for the same reason.
4. AppHost: Moved window to client size resolution to virtual method,
   where IslandWindow and NonClientIslandWindow have their own
   implementations (as opposite to pointer casting).

One problem with current implementation is I had to make a long call
chain from the window that requests snapping to the (root) pane that
implements it: IslandWindow -> AppHost's callback -> App ->
TerminalPage -> Tab -> Pane. I don't know if this can be done better.

## Validation Steps Performed
Spam split pane buttons, randomly change font sizes with ctrl+mouse
wheel and drag the window back and forth.

Closes #2834
Closes #2277",,,,True,False,False,765,81,20,20,38111589+mcpiroman@users.noreply.github.com,duhowett@microsoft.com,"01/08/2020, 21:19:23",2020,"01/08/2020, 21:19:23",2020,4,1,1,4.6,4.8,0
,"Merged PR 4177605: [Git2Git] Merged PR 4177564: Use CopyTo when returning WindowUiaProvider child to ensure proper ref count

[Git2Git] Merged PR 4177564: Use CopyTo when returning WindowUiaProvider child to ensure proper ref count

`WindowUiaProvider` was giving up copies of the pointer to its child `ScreenInfoUiaProvider` without `AddRef`ing them. This means that the receiver of those pointers was `Release`ing them at some later time, causing the internal count to decrement, sometimes all the way to zero.

The crash occurs when a `Signal` comes in and `WindowUiaProvider` attempts to resolve it through `ScreenInfoUiaProvider` but it is already gone because it has been `Release`d all the way to 0 (despite the pointer still being held by `WindowUiaProvider`). The crash then manifests in a bunch of different stacks depending on what part of `ScreenInfoUiaProvider` gets the most unlucky at executing through the now uninitialized memory.

I searched the codebase for more instances of `*ppProvider` and assignments of bare pointers. @<Carlos Zamora> appears to have already got nearly all of them in a previous refactoring operation to prepare our classes to use `WRL` more broadly. These were the only two I could find remaining.

Related work items: #24409562 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp b6008a49c9ce109869ed43ca4e68ceddbad98bc6

Related work items: #24409562",,,,False,False,True,3,2,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"01/08/2020, 23:55:08",2020,"01/08/2020, 23:55:08",2020,4,3,1,3.4,1.2,0
,"Introduce til::some (#4123)

## Summary of the Pull Request
Introduces a type that is basically an array (stack allocated, fixed size) that reports size based on how many elements are actually filled (from the front), iterates only the filled ones, and has some basic vector push/pop semantics.

## PR Checklist
* [x] I work here
* [x] I work here
* [x] I work here
* [ ] I'd love to roll this out to SomeViewports.... maybe in this commit or a follow on one.
* [ ] We need a TIL tests library and I should test this there. 

## Detailed Description of the Pull Request / Additional comments
The original gist of this was used for `SomeViewports` which was a struct to hold between 0 and 4 viewports, based on how many were left after subtraction (since rectangle subtraction functions in Windows code simply fail for resultants that yield >=2 rectangle regions.)

I figured now that we're TIL-ifying useful common utility things that this would be best suited to a template because I'm certain there are other circumstances where we would like to iterate a partially filled array and want it to not auto-resize-up like a vector would.

## Validation Steps Performed
* [ ] TIL tests added",,,,True,True,False,603,1,15,15,miniksa@microsoft.com,noreply@github.com,"01/09/2020, 17:07:52",2020,"01/09/2020, 17:07:52",2020,3,3,3,5.0,4.8,0
,"Add a setting to disable pane snapping (#4154)

## Summary of the Pull Request

Adds a setting `snapToGridOnResize` to disable snapping the window on resize, and defaults it to `false`.

## References
Introduced by pr #3181

## PR Checklist
* [x] Closes #3995
* [x] I work here
* [ ] Tests added/passed
* [ ] Requires documentation to be updated",,,,False,False,False,29,2,6,6,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/09/2020, 17:19:21",2020,"01/09/2020, 17:19:21",2020,3,3,1,4.7,1.8,0
,"wsl: actually close the pipe handle for wsl.exe, but only once (#4158)

We were eating an exception on exit in debug mode because we were using
wil to clean up half of a named pipe we'd already handed ownership of
over to the CRT. The CRT likes to tie up all its loose ends when it gets
unloaded, so it was coming along at exit and closing the handle again.
Big no-no.",,,,False,False,False,12,3,1,1,duhowett@microsoft.com,noreply@github.com,"01/09/2020, 19:09:42",2020,"01/09/2020, 19:09:42",2020,4,1,3,4.2,1.2,0
,"Add WT_SESSION to WSLENV so it propagates into WSL (#4157)

This makes sure that things running inside WSL can see `WT_SESSION`.

Closes #3948.",,,,False,False,False,19,12,1,1,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/09/2020, 19:23:48",2020,"01/09/2020, 19:23:48",2020,4,1,1,3.1,1.0,0
,"Don't generate WSL distributions for docker-desktop* (#4156)

These utility distributions are used by Docker for Windows' WSL2
integration. They are not intended for user consumption.

* [x] Closes #3556
* [x] CLA signed.
* [x] Tests added/passed
* [x] Requires documentation to be updated
* [x] I've discussed this with core contributors already.

There is a minimal chance that a user _has_ a distribution named `docker-desktop` or some superstring thereof, but this is taken as an acceptable level of risk.",,,,False,False,False,10,0,1,1,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/09/2020, 20:26:04",2020,"01/09/2020, 20:26:04",2020,4,1,1,5.0,1.0,0
,"Add tab width modes: equal and titleLength (#3876)

* tab sizing functionality

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Carlos Zamora <carlos.zamora@microsoft.com>

* updated variable names to match spec

* added to defaults.json

* fixed merge conflict

Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>",,,,True,True,False,282,197,8,8,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"01/10/2020, 00:16:54",2020,"01/10/2020, 00:16:54",2020,1,1,3,2.9,3.6,0
,master: bump version to v0.9,,,,False,False,False,2,2,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"01/10/2020, 01:44:36",2020,"01/10/2020, 01:44:36",2020,1,1,1,2.5,1.0,0
,"doc: Add debugging notes on DebugBreak (#4163)

Provide notes on how to use Postmortem debugging to get into a specific context in both WinDBG and Visual Studio",,,,False,False,False,28,1,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"01/10/2020, 01:56:05",2020,"01/10/2020, 01:56:05",2020,1,3,1,4.8,1.2,0
,"Converts Dispatcher().RunAsync to WinRT Coroutines (#4051)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This PR turns all* instances of `Dispatcher().RunAsync` to WinRT coroutines 👌. 
This was good coding fodder to fill my plane ride ✈️. Enjoy your holidays everyone!

*With the exception of three functions whose signatures cannot be changed due to inheritance and function overriding in `TermControlAutomationPeer` [`L44`](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalControl/TermControlAutomationPeer.cpp#L44), [`L58`](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalControl/TermControlAutomationPeer.cpp#L58),  [`L72`](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalControl/TermControlAutomationPeer.cpp#L72). 

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3919
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3919

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
My thought pattern here was to minimally disturb the existing code where possible. So where I could, I converted existing functions into coroutine using functions (like in the [core example](https://github.com/microsoft/terminal/issues/3919#issue-536598706)). For ~the most part~ all instances, I used the format where [`this` is accessed safely within a locked scope](https://github.com/microsoft/terminal/issues/3919#issuecomment-564730620). Some function signatures were changed to take objects by value instead of reference, so the coroutines don't crash when the objects are accessed past their original lifetime. The [copy](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalApp/TerminalPage.cpp#L1132) and [paste](https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalApp/TerminalPage.cpp#L1170) event handler entry points were originally set to a high priority; however, the WinRT coroutines don't appear to support a priority scheme so this priority setting was not preserved in the translation.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Compiles and runs, and for every event with a clear trigger repro, I triggered it to ensure crashes weren't introduced.",,,,True,False,False,253,214,11,11,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/10/2020, 03:29:49",2020,"01/10/2020, 03:29:49",2020,1,1,1,2.7,4.2,0
,"Remove global namespaced min/max and replace it with STL min/max (#4173)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

It's 2020 now. It's *about* time that we move on from 1990's macros.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #4152 
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

Remove global namespaced min/max and replace it with STL min/max.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Run it.",,,,True,False,False,34,30,10,10,skyline75489@outlook.com,48340428+msftbot[bot]@users.noreply.github.com,"01/10/2020, 13:27:05",2020,"01/10/2020, 13:27:05",2020,3,1,1,2.7,2.4,0
,"Fix unittesting our `.xaml` classes (#4105)

## Summary of the Pull Request

New year, new unittests.

This PR introduces a new project, `TestHostApp`. This project is largely taken from the TAEF samples, and allows us to easily construct a helper executable and `resources.pri` for running TerminalApp unittests.

## References

## PR Checklist
* [x] Closes #3986
* [x] I work here
* [x] is Tests
* [n/a] Requires documentation to be updated
* [x] **Waiting for an updated version of TAEF to be available**

## Detailed Description of the Pull Request / Additional comments

Unittesting for the TerminalApp project has been a horrifying process to try getting everything pieced together just right. Dependencies need to get added to manifests, binplaced correctly, and XAML resources need to get compiled together as well. In addition, using a MUX `Application` (as opposed to the Windows.UI.Xaml `Application`) has led to additional problems. 

This was always a horrifying house of cards for us. Turns out, the reason this was so horrible is that the test infrastructure for doing what we're doing _literally didn't exist_ when I started doing all that work last year.

So, with help from the TAEF team, I was able to get rid of our entire house of cards, and use a much simpler project to build and run the tests.

Unfortunately, the latest TAEF release has a minor bug in it's build rules, and only publishes the x86 version of a dll we need from them. But, the rest of this PR works for x86, and I'll bump this when that updated version is available. We should be able to review this even in the state it's in.

## Validation Steps Performed
ran the tests yo",,,,True,False,False,412,108,25,25,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/10/2020, 18:55:31",2020,"01/10/2020, 18:55:31",2020,4,3,1,4.0,4.8,0
,"when spawning a pty, be sure to provide & escape conhost's path (#4172)

Fixes #4061.

Co-authored-by: Michael Niksa <miniksa@microsoft.com>",,,,True,False,False,4,3,1,1,duhowett@microsoft.com,noreply@github.com,"01/11/2020, 01:48:05",2020,"01/11/2020, 01:48:05",2020,1,1,3,2.9,1.2,0
,"Add Ctrl+Backspace support (#3935)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Changes the <kbd>Ctrl+Backspace</kbd> input sequence and how it is processed by `InputStateMachineEngine`. Now <kbd>Ctrl+Backspace</kbd> deletes a whole word at a time (tested on WSL, CMD, and PS).

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #755
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed -> made minor edits to tests
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #755

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Changed the input sequence for <kbd>Ctrl+Backspace</kbd> to `\x1b\x8` so the sequence would pass through `_DoControlCharacter`. Changed `_DoControlCharacter` to process `\b` in a way which forms the correct `INPUT_RECORD`s to delete whole words.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
<kbd>Ctrl+Backspace</kbd> works 🎉",,,,True,False,False,8,2,2,2,mkitzan45@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/13/2020, 23:45:36",2020,"01/13/2020, 23:45:36",2020,4,1,1,4.0,1.2,0
,"stab in the dark to fix x86 tests. (#4202)

## Summary of the Pull Request
Perform checking on `std::basic_string_view<T>.substr()` calls to
prevent running out of bounds and sporadic Privileged Instruction throws
during x86 tests.

## PR Checklist
* [x] Closes the x86 tests failing all over the place since #4125 for no
  apparent reason
* [x] I work here
* [x] Tests pass 

## Detailed Description of the Pull Request / Additional comments
It appears that not all `std::basic_string_view<T>.substr()` calls are
created equally. I rooted around for other versions of the code in our
source tree and found several versions that were less careful about
checking the start position and the size than the one that appears when
building locally on dev machines. 

My theory is that one of these older versions is deployed somewhere in
the CI. Instead of clamping down the size parameter appropriately or
throwing correctly when the position is out of bounds, I believe that
it's just creating a substring with a bad range over an
invalid/uninitialized memory region. Then when the test operates on
that, sometimes it turns out to trigger the privileged instruction
NTSTATUS error we are seeing in CI.

## Test Procedure
1. Fixed the thing
2. Ran the CI and it worked
3. Reverted everything and turned off all of the CI build except just
   the parser tests (and supporting libraries)
4. Ran CI and it failed
5. Put the fix back on top (cherry-pick)
6. It worked.
7. Ran it again.
8. It worked.
9. Turn all the rest of the CI build back on",,,,True,True,False,11,9,1,1,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/14/2020, 00:46:07",2020,"01/14/2020, 00:46:07",2020,1,3,1,2.8,1.2,0
,"Reverse the behavior of the IS_GLYPH_CHAR macro so its function now matches its name. (#4209)

## Summary of the Pull Request

This PR reverses the behaviour of the `IS_GLYPH_CHAR` macro, so it now actually returns true if the given char is a glyph, and false if it isn't. Previously it returned the opposite of that, which meant it had to be called as `!IS_GLYPH_CHAR` to get the correct result.

## PR Checklist
* [x] Closes #4185
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #4185

## Detailed Description of the Pull Request / Additional comments

The original implementation returned true if the given character was a C0 control, or a DEL:

    #define IS_GLYPH_CHAR(wch) (((wch) < L' ') || ((wch) == 0x007F))

It's now the exact opposite, so returns true for characters that are _not_ C0 controls, and are not the DEL character either: 

    #define IS_GLYPH_CHAR(wch) (((wch) >= L' ') && ((wch) != 0x007F))

The macro was only used in one place, where is was being called as `!IS_GLYPH_CHAR` when the intent was actually to test whether the char _was_ a glyph. That code could now be updated to remove the `!`, so it makes more sense.

## Validation Steps Performed

I've just tested manually and confirmed that basic output of text and control chars still worked as expected in a conhost shell.",,,,False,False,False,2,2,1,1,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/14/2020, 16:43:38",2020,"01/14/2020, 16:43:38",2020,3,1,1,2.5,1.2,0
,"Fix redundant CR in formatted text copy (#4190)

## Summary of the Pull Request

When `GenHTML` or `GenRTF` encountered an empty line, they assumed that `CR` is the last character of the row and wrote it, even though in general `CR` and `LF` just break the line and instead of them either `<BR>` in HTML or `\line` in RTF is written. Don't know how I missed that in #2038.

Another question is whether the `TextAndColor` structure which these methods receive and which is generated by `TextBuffer::GetTextForClipboard` should really contain `\r\n` at the end of each row. I think it'd be cleaner if it didn't esp. that afaik these last 2 characters don't have associated valid color information.

## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #4187
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed - there aren't any related tests, right?
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #4147 

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Copied various terminal states and verified the generated HTML.",,,,True,False,False,46,42,1,1,38111589+mcpiroman@users.noreply.github.com,48340428+msftbot[bot]@users.noreply.github.com,"01/14/2020, 17:07:06",2020,"01/14/2020, 17:07:06",2020,3,1,1,3.1,1.8,0
,Add find action to keybinding commands in Settings Profile Schema (#4219),,,,False,False,False,2,1,1,1,harmon758@gmail.com,carlos.zamora@microsoft.com,"01/14/2020, 20:26:30",2020,"01/14/2020, 20:26:30",2020,4,0,1,3.3,1.0,0
,"Move reflowing the buffer to `TextBuffer` (#4197)

## Summary of the Pull Request

In pursuit of reflowing the terminal buffer on resize, move the reflow algorithm to the TextBuffer. This does _not_ yet add support for reflowing in the Windows Terminal.

## References

## PR Checklist
* [ ] There's not really an issue for this yet, I'm just breaking this work up into as many PRs as possible to help the inevitable bisect.
* [x] I work here
* [x] Ideally, all the existing tests will pass
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

In `SCREEN_INFORMATION::ResizeScreenBuffer`, the screenbuffer needs to create a new buffer, and copy the contents of the old buffer into the new one. I'm moving that ""copy contents from the old buffer to the new one"" step to it's own helper, as a static function on `TextBuffer`. That way, when the time comes to implement this for the Terminal, the hard part of the code will already be there.

## Validation Steps Performed

Ideally, all the tests will still pass.",,,,False,False,False,228,207,3,3,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/14/2020, 21:34:43",2020,"01/14/2020, 21:34:43",2020,4,3,1,2.6,3.0,0
,"Fixed a deadlock when printing surrogate pairs (#4150)

## Summary of the Pull Request

See [my code comment](https://github.com/microsoft/terminal/pull/4150#discussion_r364392640) below for technical details of the issue that caused #4145.

## PR Checklist
* [x] Closes #1360, Closes #4145.
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

TBH I kinda hope this project could migrate to an internal use of UTF-8 in the future. 😶

## Validation Steps Performed

Followed the ""Steps to reproduce"" in #4145 and ensured the ""Expected behavior"" happens.",,,,True,False,False,94,9,2,2,leonard@hecker.io,48340428+msftbot[bot]@users.noreply.github.com,"01/15/2020, 13:36:23",2020,"01/15/2020, 13:36:23",2020,3,1,1,4.6,2.4,0
,"Add support for all the line feed control sequences (#3271)

## Summary of the Pull Request

This adds support for the `FF` (form feed) and `VT` (vertical tab) [control characters](https://vt100.net/docs/vt510-rm/chapter4.html#T4-1), as well as the [`NEL` (Next Line)](https://vt100.net/docs/vt510-rm/NEL.html) and [`IND` (Index)](https://vt100.net/docs/vt510-rm/IND.html) escape sequences.

## References

#976 discusses the conflict between VT100 Index sequence and the VT52 cursor back sequence.

## PR Checklist
* [x] Closes #3189
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3189

## Detailed Description of the Pull Request / Additional comments

I've added a `LineFeed` method to the `ITermDispatch` interface, with an enum parameter specifying the required line feed type (i.e. with carriage return, without carriage return, or dependent on the [`LNM` mode](https://vt100.net/docs/vt510-rm/LNM.html)). The output state machine can then call that method to handle the various line feed control characters (parsed in the `ActionExecute` method), as well the `NEL` and `IND` escape sequences (parsed in the `ActionEscDispatch` method).

The `AdaptDispatch` implementation of `LineFeed` then forwards the call to a new `PrivateLineFeed` method in the `ConGetSet` interface, which simply takes a bool parameter specifying whether a carriage return is required or not. In the case of mode-dependent line feeds, the `AdaptDispatch` implementation determines whether the return is necessary or not, based on the existing _AutoReturnOnNewLine_ setting (which I'm obtaining via another new `PrivateGetLineFeedMode` method).

Ultimately we'll want to support changing the mode via the [`LNM` escape sequence](https://vt100.net/docs/vt510-rm/LNM.html), but there's no urgent need for that now. And using the existing _AutoReturnOnNewLine_ setting as a substitute for the mode gives us backwards compatible behaviour, since that will be true for the Windows shells (which expect a linefeed to also generate a carriage return), and false in a WSL bash shell (which won't want the carriage return by default).

As for the actual `PrivateLineFeed` implementation, that is just a simplified version of how the line feed would previously have been executed in the `WriteCharsLegacy` function. This includes setting the cursor to ""On"" (with `Cursor::SetIsOn`), potentially clearing the wrap property of the line being left (with `CharRow::SetWrapForced` false), and then setting the new position using `AdjustCursorPosition` with the _fKeepCursorVisible_ parameter set to false.

I'm unsure whether the `SetIsOn` call is really necessary, and I think the way the forced wrap is handled needs a rethink in general, but for now this should at least be compatible with the existing behaviour.

Finally, in order to make this all work in the _Windows Terminal_ app, I also had to add a basic implementation of the `ITermDispatch::LineFeed` method in the `TerminalDispatch` class. There is currently no need to support mode-specific line feeds here, so this simply forwards a `\n` or `\r\n` to the `Execute` method, which is ultimately handled by the `Terminal::_WriteBuffer` implementation.

## Validation Steps Performed

I've added output engine tests which confirm that the various control characters and escape sequences trigger the dispatch method correctly. Then I've added adapter tests which confirm the various dispatch options trigger the `PrivateLineFeed` API correctly. And finally I added some screen buffer tests that check the actual results of the `NEL` and `IND` sequences, which covers both forms of the `PrivateLineFeed` API (i.e. with and without a carriage return).

I've also run the _Test of cursor movements_ in the [Vttest](https://invisible-island.net/vttest/) utility, and confirmed that screens 1, 2, and 5 are now working correctly. The first two depend on `NEL` and `IND` being supported, and screen 5 requires the `VT` control character.",,,,False,False,False,340,6,19,19,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/15/2020, 13:41:55",2020,"01/15/2020, 13:41:55",2020,3,1,1,4.9,4.2,0
,"Add spec for adding commandline arguments to `wt.exe` (#3495)

## Summary of the Pull Request

This is the spec for adding commandline arguments to the Windows Terminal. This includes design work for a powerful future version of the commandline args for the Terminal, as well as a way that system could be implemented during 1.0 to provide basic functionality, while creating commandlines that will work without modification in (a future Windows Terminal version).   

## References

Referenced in the course of this spec:

* #607  Feature Request: wt.exe supports command line arguments (profile, command, directory, etc.) 
* #1060 Add ""open Windows terminal here"" into right-click context menu 
* #576  Feature Request: Task Bar jumplist should show items from profile 
* #1357 Draft spec for adding profiles to the Windows jumplist 
* #2080 Spec for tab tear off and default app 
* #632  [Question] Configuring Windows Terminal profile to always launch elevated 
* #2068 New window key binding not working 

## PR Checklist
* [x] Specs #607
* [x] I work here
* [x] _it's a spec_

## Detailed Description of the Pull Request / Additional comments

Read the spec.

-----------------------------------------------------
* Let's commit this bewfore I go hog-wild on new-window

* new-window vs new-tab discussion

* Well, this is ready for a review

* -P -> -% for --percent

* Big note on powershell

  of course, powershell has to use `;` as the command seperator

* Minor typos

* This is a lot of feedback from PR

  bigly, it's focus-pane and focus-tab

* Add notes on implementation, based on investigation

* Apply suggestions from @miniksa

* some updates after actually implementing the thing

* some minor things from PR

* Apply suggestions from code review

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* comments from dustin's latest review

* more comments from dustin

* mostly just typos

Co-authored-by: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,False,False,False,739,0,1,1,migrie@microsoft.com,noreply@github.com,"01/15/2020, 16:19:56",2020,"01/15/2020, 16:19:56",2020,3,3,3,5.0,3.6,0
,"schema: add support for ""auto"" split value (#4249)",,,,False,False,False,4,3,1,1,mkitzan45@gmail.com,duhowett@microsoft.com,"01/15/2020, 19:55:13",2020,"01/15/2020, 19:55:13",2020,4,1,1,2.9,1.0,0
,doc: include FAR in ThirdPartyToolProfiles.md (#4242),,,,False,False,False,13,0,1,1,vtabota@gmail.com,duhowett@microsoft.com,"01/15/2020, 23:35:18",2020,"01/15/2020, 23:35:18",2020,4,0,1,5.0,1.0,0
,"Introduce chromium safe math (#4144)

## Summary of the Pull Request

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4013 
* [x] I work here.
* [x] Existing tests should be OK. Real changes, just adding a lib to use.
* [x] Couldn't find any existing docs about intsafe.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
* [x] Can we remove min/max completely or rename it in the two projects where it had to be reintroduced? This is now moved into #4152 
* [x] How many usages of the old safe math are there? **79**
* [x] If not a ton, can we migrate them here or in a follow on PR? This is now moved into #4153

Files with old safe math:
- TerminalControl: TSFInputControl.cpp
- TerminalCore: TerminalDispatch.cpp
- TerminalCore: TerminalSelection.cpp
- Host: directio.cpp
- RendererGdi: invalidate.cpp
- RendererGdi: math.cpp
- RendererGdi: paint.cpp
- RendererVt: paint.cpp
- TerminalAdapter: adaptDispatch.cpp
- Types: viewport.cpp
- Types: WindowUiaProviderBase.cpp

## Validation Steps Performed",,,,False,False,False,3961,2,30,30,miniksa@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/16/2020, 18:51:06",2020,"01/16/2020, 18:51:06",2020,4,3,1,5.0,4.5,0
,"Improve the VT cursor movement implementation (#3628)

## Summary of the Pull Request

Originally there were 3 different methods for implementing VT cursor movement, and between them they still couldn't handle some of the operations correctly. This PR unifies those operations into a single method that can handle every type of cursor movement, and which fixes some of the issues with the existing implementations. In particular it fixes the `CNL` and `CPL` operations, so they're now correctly constrained by the `DECSTBM` margins.

## References

If this PR is accepted, the method added here should make it trivial to implement the `VPR` and `HPR` commands in issue #3428.

## PR Checklist
* [x] Closes #2926
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

The new [`AdaptDispatch::_CursorMovePosition`](https://github.com/microsoft/terminal/blob/d6c4f35cf60a239cb1b8b7b7cc5796b06f78a884/src/terminal/adapter/adaptDispatch.cpp#L169) method is based on the proposal I made in issue #3428 for the `VPR` and `HPR` comands. It takes three arguments: a row offset (which can be absolute or relative), a column offset (ditto), and a flag specifying whether the position should be constrained by the `DECSTBM` margins.

To make the code more readable, I've implemented the offsets using [a `struct` with some `constexpr` helper functions for the construction](https://github.com/microsoft/terminal/blob/d6c4f35cf60a239cb1b8b7b7cc5796b06f78a884/src/terminal/adapter/adaptDispatch.hpp#L116-L125). This lets you specify the parameters with expressions like `Offset::Absolute(col)` or `Offset::Forward(distance)` which I think makes the calling code a little easier to understand.

While implementing this new method, I noticed a couple of issues in the existing movement implementations which I thought would be good to fix at the same time.

1. When cursor movement is constrained horizontally, it should be constrained by the buffer width, and not the horizontal viewport boundaries. This is an issue I've previously corrected in other parts of the codebase, and I think the cursor movement was one of the last areas where it was still a problem.

2. A number of the commands had range and overflow checks for their parameters that were either unnecessary (testing for a condition that could never occur) or incorrect (if an operation overflows, the correct behavior is to clamp it, and not just fail). The new implementation handles legitimate overflows correctly, but doesn't check for impossible ranges.

Because of the change of behavior in point 1, I also had to update the implementations of [the `DECSC` and `CPR` commands](https://github.com/microsoft/terminal/pull/3628/commits/9cf7a9b577ed7831908bb9353d4f8e0a6e6fcc5e) to account for the column offset now being relative to the buffer and not the viewport, otherwise those operations would no longer work correctly.

## Validation Steps Performed

Because of the two changes in behavior mentioned above, there were a number of adapter tests that stopped working and needed to be updated. First off there were those that expected the column offset to be relative to the left viewport position and constrained by the viewport width. These now had to be updated to [use the full buffer width](https://github.com/microsoft/terminal/pull/3628/commits/49887a3589169b2724f4046c1773836384543c10) as the allowed horizontal extent.

Then there were all the overflow and out-of-range tests that were testing conditions that could never occur in practice, or where the expected behavior that was tested was actually incorrect. I did spend some time trying to see if there was value in updating these tests somehow, but in the end I decided it was best to just [drop them](https://github.com/microsoft/terminal/pull/3628/commits/6e80d0de19cb3313cfdd4fea555f6be41cc9fcd8) altogether.

For the `CNL` and `CPL` operations, there didn't appear to be any existing tests, so I added some [new screen buffer tests](https://github.com/microsoft/terminal/pull/3628/commits/d6c4f35cf60a239cb1b8b7b7cc5796b06f78a884) to check that those operations now work correctly, both with and without margins.",,,,True,False,False,189,489,9,9,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/16/2020, 22:33:35",2020,"01/16/2020, 22:33:35",2020,4,1,1,2.1,4.2,0
,"Dispatch more C0 control characters from the VT state machine (#4171)

This commit moves the handling of the `BEL`, `BS`, `TAB`, and `CR`
controls characters into the state machine (when in VT mode), instead of
forwarding them on to the default string writer, which would otherwise
have to parse them out all over again.

This doesn't cover all the control characters, but `ESC`, `SUB`, and
`CAN` are already an integral part of the `StateMachine` itself; `NUL`
is filtered out by the `OutputStateMachineEngine`; and `LF`, `FF`, and
`VT`  are due to be implemented as part of PR #3271.

Once all of these controls are handled at the state machine level, we
can strip out all the VT-specific code from the `WriteCharsLegacy`
function, which should simplify it considerably. This would also let us
simplify the `Terminal::_WriteBuffer` implementation, and the planned
replacement stream writer for issue #780.

On the conhost side, the implementation is handled as follows:

* The `BS` control is dispatched to the existing `CursorBackward`
  method, with a distance of 1.
* The `TAB` control is dispatched to the existing `ForwardTab` method,
  with a tab count of 1.
* The `CR` control required a new dispatch method, but the
  implementation was a simple call to the new `_CursorMovePosition` method
  from PR #3628.
* The `BEL` control also required a new dispatch method, as well as an
  additional private API in the `ConGetSet` interface. But that's mostly
  boilerplate code - ultimately it just calls the `SendNotifyBeep` method.

On the Windows Terminal side, not all dispatch methods are implemented.

* There is an existing `CursorBackward` implementation, so `BS` works
  OK.
* There isn't a `ForwardTab` implementation, but `TAB` isn't currently
  required by the conpty protocol.
* I had to implement the `CarriageReturn` dispatch method, but that was
  a simple call to `Terminal::SetCursorPosition`.
* The `WarningBell` method I've left unimplemented, because that
  functionality wasn't previously supported anyway, and there's an
  existing issue for that (#4046).

## Validation Steps Performed

I've added a state machine test to confirm that the updated control
characters are now forwarded to the appropriate dispatch handlers. But
since the actual implementation is mostly relying on existing
functionality, I'm assuming that code is already adequately tested
elsewhere. That said, I have also run various manual tests of my own,
and confirmed that everything still worked as well as before.

References #3271
References #780
References #3628
References #4046",,,,False,False,False,141,10,12,12,j4_james@hotmail.com,duhowett@microsoft.com,"01/17/2020, 01:43:21",2020,"01/17/2020, 01:43:21",2020,1,1,1,4.7,3.6,0
,"Fix crash related to unparseable/invalid media resource paths (#4194)

WT crashes when an unparseable/invalid `backgroundImage` or `icon`
resource path is provided in `profiles.json`. This PR averts the crash
by the validating and correcting resource paths as a part of the
`_ValidateSettings()` function in `CascadiaSettings`.
`_ValidateSettings()` is run on start up and any time `profiles.json` is
changed, so a user can not change a file path and avoid the validation
step. 

When a bad `backgroundImage` or `icon` resource path is detected, a
warning screen will be presented.

References #4002, which identified a consistent repro for the crash.

To validate the resource, a `Windows::Foundation::Uri` object is
constructed with the path. The ctor will throw if the resource path is
invalid. Whether or not this validation method is robust enough is a
subject worth review. The correction method for when a bad resource path
is detected is to reset the `std::optional<winrt::hstring>` holding the
file path. 

The text in the warning display was cribbed from the text used when an
invalid `colorScheme` is used. Whether or not the case of a bad
background image file path warrants a warning display is a subject worth
review.

Ensured the repro steps in #4002 did not trigger a crash. Additionally,
some potential backdoor paths to a crash were tested: 

- Deleting the file of a validated background image file path
- Changing the actual file name of a validated background image file
  path
- Replacing the file of a validated background image file path with a
  non-image file (of the same name)
- Using a non-image file as a background image

In all the above cases WT does not crash, and instead defaults to the
background color specified in the profile's `colorScheme`. This PR does
not implement this recovery behavior (existing error catching code
does).

Closes #2329",,,,True,False,False,94,3,7,7,mkitzan45@gmail.com,duhowett@microsoft.com,"01/17/2020, 01:48:37",2020,"01/17/2020, 01:48:37",2020,1,1,1,4.8,2.4,0
,"Create tests that roundtrip output through a conpty to a Terminal (#4213)

## Summary of the Pull Request

This PR adds two tests:
* First, I started by writing a test where I could write output to the console  host and inspect what output came out of conpty. This is the `ConptyOutputTests` in the host unit tests.
* Then I got crazy and thought _""what if I could take that output and dump it straight into the `Terminal`""_? Hence, the `ConptyRoundtripTests` were born, into the TerminalCore unit tests.

## References

Done in pursuit of #4200, but I felt this warranted it's own atomic PR

## PR Checklist
* [x] Doesn't close anything on it's own.
* [x] I work here
* [x] you better believe this adds tests
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

From the comment in `ConptyRoundtripTests`:
> This test class creates an in-proc conpty host as well as a Terminal, to
> validate that strings written to the conpty create the same resopnse on the
> terminal end. Tests can be written that validate both the contents of the
> host buffer as well as the terminal buffer. Everytime that
> `renderer.PaintFrame()` is called, the tests will validate the expected
> output, and then flush the output of the VtEngine straight to th

Also, some other bits had to be updated:
* The renderer needed to be able to survive without a thread, so I hadded a simple check that it actually had a thread before calling `pThread->NotifyPaint`
* Bits in `CommonState` used `NTSTATUS_FROM_HRESULT` which did _not_ work outside the host project. Since the `NTSTATUS` didn't seem that important, I replaced that with a `HRESULT`
* `CommonState` likes to initialize the console to some _weird_ defaults. I added an optional param to let us just use the defaults.",,,,False,False,False,788,19,16,16,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/17/2020, 16:40:12",2020,"01/17/2020, 16:40:12",2020,3,3,1,4.9,4.8,0
,"Use til::some<T,N> to replace the SomeViewports class (#4174)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Let's give it a test drive.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4162 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Build and run it.",,,,True,False,False,37,44,5,5,skyline75489@outlook.com,48340428+msftbot[bot]@users.noreply.github.com,"01/20/2020, 20:53:24",2020,"01/20/2020, 20:53:24",2020,4,1,1,1.9,1.8,0
,"Fix column count issues with certain ligature. (#4081)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This change tries to fix column size calculation when shaping return glyphs that represents multiple characters (e.g. ligature).

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

This should fix #696.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

Currently, it seems like CustomTextLayout::_CorrectGlyphRun generally assumes that glyphs and characters have a 1:1 mapping relationship - which holds true for most trivial scenarios with basic western scripts, and also many, but unfortunately not all, monospace ""programming"" fonts with programming ligatures.

This change makes terminal correctly processes glyphs that represents multiple characters, by properly accumulating the column counts of all these characters together (which I believe is more close to what this code originally intended to do).

There are still many issues existing in both CustomTextLayout as well as the TextBuffer, and the correct solution to them will likely demand large-scale changes, at least at the scale of #3578. I wish small changes like this can serve as a stop gap solution while we take our time to work on the long-term right thing.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Builds and runs. Manual testing confirmed that it solves #696 with both LigConsalata and Fixedsys Excelsior.",,,,True,False,False,24,2,1,1,milizhang@gmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/21/2020, 16:28:37",2020,"01/21/2020, 16:28:37",2020,3,0,1,4.6,1.2,0
,"Add support for the HPR and VPR escape sequences (#4297)

## Summary of the Pull Request

This PR adds support for the `HPR` and `VPR`  escape sequences from the VT510 terminal. `HPR` moves the cursor position forward by a given number of columns, and `VPR` moves the cursor position downward by a given number of rows. They're similar in function to the `CUF` and `CUD` escape sequences, except that they're not constrained by the scrolling margins.

## References

#3628 provided the new `_CursorMovePosition` method that made these operations possible

## PR Checklist
* [x] Closes #3428
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

Most of the implementation is in the new `_CursorMovePosition` method that was created in PR #3628, so all we're really doing here is hooking up the escape sequences to call that method with the appropriate parameters.

## Validation Steps Performed

I've extended the existing state machine tests for CSI cursor movement to confirm that the `HPR` and `VPR` sequences are dispatched correctly, and also added screen buffer tests to make sure the movement is clamped by the screen boundaries and not the scrolling margins (we don't yet support horizontal margins, but the test is at least in place for when we do eventually add that support).

I've also checked the `HPR` and `VPR` tests in Vttest (under _Test non-VT100 / ISO-6429 cursor-movement_) and confirmed that they are now working as expected.",,,,False,False,False,147,0,10,10,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/21/2020, 22:39:15",2020,"01/21/2020, 22:39:15",2020,4,1,1,5.0,3.0,0
,"Fix the `UnitTests_TerminalCore`'s dependency on `RendererGdi` (#4319)

## Summary of the Pull Request

In #4213 I added a dependency to the `UnitTests_TerminalCore` project on basically all of conhost. This _worked on my machine_, but it's consistently not working on other machines. This should fix those issues.

## References

## PR Checklist
* [x] Closes #4285 
* [x] I work here
* [n/a] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Made a fresh clone and built it.",,,,True,False,False,6,0,2,2,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/22/2020, 21:30:53",2020,"01/22/2020, 21:30:53",2020,4,3,1,5.0,1.2,0
,"Add support for the DECSCNM screen mode (#3817)

## Summary of the Pull Request

This adds support for the [`DECSCNM`](https://vt100.net/docs/vt510-rm/DECSCNM.html) private mode escape sequence, which toggles the display between normal and reverse screen modes. When reversed, the background and foreground colors are switched. Tested manually, with [Vttest](https://invisible-island.net/vttest/), and with some new unit tests.

## References

This also fixes issue #72 for the most part, although if you toggle the mode too fast, there is no discernible flash.

## PR Checklist
* [x] Closes #3773
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

I've implemented this as a new flag in the `Settings` class, along with updates to the `LookupForegroundColor` and `LookupBackgroundColor` methods, to switch the returned foreground and background colors when that flag is set. 

It also required a new private API in the `ConGetSet` interface to toggle the setting. And that API is then called from the `AdaptDispatch` class when the screen mode escape sequence is received.

The last thing needed was to add a step to the `HardReset` method, to reset the mode back to normal, which is one of the `RIS` requirements.

Note that this does currently work in the Windows Terminal, but once #2661 is implemented that may no longer be the case. It might become necessary to let the mode change sequences pass through conpty, and handle the color reversing on the client side.
 
## Validation Steps Performed

I've added a state machine test to make sure the escape sequence is dispatched correctly, and a screen buffer test to confirm that the mode change does alter the interpretation of colors as expected.

I've also confirmed that the various ""light background"" tests in Vttest now display correctly, and that the `tput flash` command (in a bash shell) does actually cause the screen to flash.",,,,True,False,False,169,2,15,15,j4_james@hotmail.com,48340428+msftbot[bot]@users.noreply.github.com,"01/22/2020, 22:29:50",2020,"01/22/2020, 22:29:50",2020,4,1,1,4.9,3.6,0
,"Merged PR 4182306: [Git2Git] Merged PR 4182266: conhost: don't use D3DCompiler on inside-windows builds (and delete the shaders)

[Git2Git] Merged PR 4182266: conhost: don't use D3DCompiler on inside-windows builds (and delete the shaders)

Related work items: #24424432, #24424534, #24543695 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp b5d1859452a94e446a3be3f97eb638e13e26496e

Related work items: #24424432, #24424534, #24543695",,,,False,False,False,15,1,5,5,miniksa@microsoft.com,duhowett@microsoft.com,"01/23/2020, 00:42:56",2020,"01/23/2020, 00:42:56",2020,1,3,1,4.7,1.0,0
,"Shut down all controls under a tab before we remove it from the list (#4337)

This commit introduces a new recursive pane shutdown that will give all
controls under a tab a chance to clean up their state before beign
detached from the UI. It also reorders the call to LastTabClosed() so
that the application does not exit before the final connections are
terminated.

It also teaches TSFInputControl how to shut down to avoid a dramatic
platform bug.

Fixes #4159.
Fixes #4336.

## PR Checklist
* [x] CLA signed
* [x] I've discussed this with core contributors already.

## Validation Steps Performed
Validated through manual terminal teardown within and without the debugger, given a crazy number of panes and tabs.",,,,True,False,False,71,14,9,9,duhowett@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/23/2020, 22:12:20",2020,"01/23/2020, 22:12:20",2020,4,1,1,4.3,2.4,0
,"Allow string values (like ""system"") in the `rowsToScroll` schema (#4342)",,,,False,False,False,1,1,1,1,iamakulov@outlook.com,duhowett@microsoft.com,"01/24/2020, 19:46:52",2020,"01/24/2020, 19:46:52",2020,4,0,1,2.5,1.0,0
,"Add support for commandline args to `wt.exe` (#4023)

## Summary of the Pull Request

Adds support for commandline arguments to the Windows Terminal, in accordance with the spec in #3495

## References

* Original issue: #607
* Original spec: #3495

## PR Checklist
* [x] Closes #607
* [x] I work here
* [x] Tests added/passed
* [ ] We should probably add some docs on these commands
* [x] The spec (#3495) needs to be merged first!

## Detailed Description of the Pull Request / Additional comments

🛑 **STOP** 🛑 - have you read #3495 yet? If you haven't, go do that now.

This PR adds support for three initial sub-commands to the `wt.exe` application:
* `new-tab`: Used to create a new tab.
* `split-pane`: Used to create a new split.
* `focus-tab`: Moves focus to another tab.

These commands are largely POC to prove that the commandlines work. They're not totally finished, but they work well enough. Follow up work items will be filed to track adding support for additional parameters and subcommands

Important scenarios added:
* `wt -d .`: Open a new wt instance in the current working directory #878
* `wt -p <profile name>`: Create a wt instance running the given profile, to unblock  #576, #1357, #2339
* `wt ; new-tab ; split-pane -V`: Launch the terminal with multiple tabs, splits, to unblock #756 

## Validation Steps Performed

* Ran tests
* Played with it a bunch",,,,False,False,False,10089,53,30,29,migrie@microsoft.com,48340428+msftbot[bot]@users.noreply.github.com,"01/27/2020, 15:34:12",2020,"01/27/2020, 15:34:12",2020,3,3,1,5.0,5.0,0
,"Remove unneeded c_str() conversions (#4358)

* Remove unneeded c_str() calls when converting an hstring to a wstring_view.

* Remove unneeded c_str() calls when constructing a FontInfo class with a wstring face name.

* Remove unneeded winrt::to_hstring calls when passing a wstring to a method that expects an hstring.

* Remove unneeded c_str() calls when passing an hstring to a method that already accepts hstrings without conversion.

* Remove unneeded c_str() and data() calls when explicitly constructing an hstring from a wstring.",,,,False,False,False,17,17,7,7,j4_james@hotmail.com,carlos.zamora@microsoft.com,"01/27/2020, 18:23:13",2020,"01/27/2020, 18:23:13",2020,4,1,1,2.5,1.5,0
,"Added initialPosition and launchMode to settings schema (#4222)

* added initialPosition and launchMode to schema

* regex works

* fixed regex bug

* remove lookaround

* Update doc/cascadia/profiles.schema.json

Co-Authored-By: Dustin L. Howett (MSFT) <duhowett@microsoft.com>

* update description in settingsschema.md

* edit descriptions to have code markings

* remove code backticks from schema

Co-authored-by: Dustin L. Howett (MSFT) <duhowett@microsoft.com>",,,,True,True,False,21,2,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"01/28/2020, 19:44:47",2020,"01/28/2020, 19:44:47",2020,4,1,3,4.6,1.2,0
,"Disable auto-injected codesign validation task on CI (#4387)

Sets flag in CI YML that will turn off the auto-injected codesign validation
task since CI is a non-production pipeline.",,,,False,False,False,4,0,1,1,miniksa@microsoft.com,noreply@github.com,"01/28/2020, 23:54:08",2020,"01/28/2020, 23:54:08",2020,4,3,3,5.0,1.0,0
,"Add just the test infrastructure bits from #4354 (#4382)

## Summary of the Pull Request

#4354 is a pretty complicated PR. It's got a bunch of conpty changes, but what it also has was some critical improvements to the roundtrip test suite. I'm working on some other bugfixes in the same area currently, and need these tests enhancements in those branches _now_. The rest of #4354 is complex enough that I don't trust it will get merged soon (if ever). However, these fixes _should_ be in regardless.

## PR Checklist
* [x] Taken directly from #4354
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

This is four main changes:
* Enable conpty to be fully enabled in unittests. Just setting up a VT renderer isn't enough to trick the host into being in conpty mode - it also needs to have some other flags set.
* Some minor changes to `CommonState` to better configure the common test state for conpty
* Move some of the verify helpers from `ConptyRoundtripTests` into their own helper class, to be shared in multiple tests
* Add a `TerminalBufferTests` class, for testing the Terminal buffer directly (without conpty).

This change is really easier than 
![image](https://user-images.githubusercontent.com/18356694/73278427-2d1b4480-41b1-11ea-9bbe-70671c557f49.png)
would suggest, I promise.",,,,True,True,False,365,99,15,15,migrie@microsoft.com,noreply@github.com,"01/29/2020, 16:33:06",2020,"01/29/2020, 16:33:06",2020,3,3,3,4.1,4.2,0
,"Remove unneeded VT-specific control character handling (#4289)

## Summary of the Pull Request

This PR removes all of the VT-specific functionality from the `WriteCharsLegacy` function that dealt with control characters, since those controls are now handled in the state machine when in VT mode. It also removes most of the control character handling from the `Terminal::_WriteBuffer` method for the same reason.

## References

This is a followup to PR #4171

## PR Checklist
* [x] Closes #3971
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: https://github.com/microsoft/terminal/issues/780#issuecomment-570287435

## Detailed Description of the Pull Request / Additional comments

There are four changes to the `WriteCharsLegacy` implementation:

1. The `TAB` character had special case handling in VT mode which is now no longer required. This fixes a bug in the Python REPL editor (when run from a cmd shell in Windows Terminal), which would prevent you tabbing past the end of the line. It also fixes #3971.

2. Following on from point 1, the `WC_NONDESTRUCTIVE_TAB` flag could also now be removed. It only ever applied in VT mode, in which case the `TAB` character isn't handled in `WriteCharsLegacy`, so there isn't a need for a non-destructive version.

3. There used to be special case handling for a `BS` character at the beginning of the line when in VT mode, and that is also no longer required. This fixes an edge-case bug which would prevent a glyph being output for code point 8 when `ENABLE_PROCESSED_OUTPUT` was disabled. 

4. There was quite a lot of special case handling for control characters in the ""end-of-line wrap"" implementation, which is no longer required. This fixes a bug which would prevent ""low ASCII"" characters from wrapping when output at the end of a line.

Then in the `Terminal::_WriteBuffer` implementation, I've simply removed all control character handling, except for `LF`. The Terminal is always in VT mode, so the control characters are always handled by the state machine. The exception for the `LF` character is simply because it doesn't have a proper implementation yet, so it still passes the character through to `_WriteBuffer`. That will get cleaned up eventually, but I thought that could wait for a later PR.

Finally, with the removal of the VT mode handling in `WriteCharsLegacy`, there was no longer a need for the `SCREEN_INFORMATION::InVTMode` method to be publicly accessible. That has now been made private.

## Validation Steps Performed

I've only tested manually, making sure the conhost and Windows Terminal still basically work, and confirming that the above-mentioned bugs are fixed by these changes.",,,,True,False,False,145,208,10,10,j4_james@hotmail.com,noreply@github.com,"01/29/2020, 19:18:46",2020,"01/29/2020, 19:18:46",2020,4,1,3,2.6,3.6,0
,"Configure CLI11 to stuff all unknown positionals into the cmdli… (#4388)

This commit fixes an issue where ""wt -d C: wsl -d Alpine"" would be
parsed as ""wt -d C: -d Alpine wsl"" and rejected as invalid due to the
repeated -d. It also fixes support for the option parsing terminator,
--, in all command lines.

Fixes #4277.",,,,True,False,False,87,102,4,4,duhowett@microsoft.com,noreply@github.com,"01/29/2020, 21:01:05",2020,"01/29/2020, 21:01:05",2020,4,1,3,2.3,2.4,0
,"Add privacy policy to about dialog (#4400)

Closes #4281",,,,False,False,False,19,2,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"01/29/2020, 21:10:02",2020,"01/29/2020, 21:10:02",2020,4,1,3,4.5,1.0,0
,"Implement til::u8u16 and til::u16u8 conversion functions (#4093)

This commit also switches ConptyConnection to consume til::u8u16 and removes the UTF8OutPipeReader.

Closes #4092.",,,,False,False,False,2245,312,24,20,neffets720126@web.de,noreply@github.com,"01/30/2020, 00:55:48",2020,"01/30/2020, 00:55:48",2020,1,0,3,4.5,4.0,0
,"Add support for dragging and dropping paths onto the Terminal (#4323)

## Summary of the Pull Request

I took the code from conhost that handles this and just copy-pasted it into the terminal codebase.

## References

Original conhost code:
https://github.com/microsoft/terminal/blob/027f1228cb92746de102f04c491ac02b98708bf2/src/interactivity/win32/windowproc.cpp#L854-L889


## PR Checklist
* [x] Closes #904
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Okay it was a little more complicated than that. I had `IslandWindow` handle the drop, which then raises a generic event for `AppHost` to handle. `AppHost` handles this by writing the path as input to the terminal, traversing `AppLogic`, `TerminalPage` and finally landing in `TermControl`

## Validation Steps Performed
Tested manually with both paths with and without spaces.",,,,False,False,False,137,28,4,4,migrie@microsoft.com,noreply@github.com,"01/30/2020, 20:13:57",2020,"01/30/2020, 20:13:57",2020,4,3,3,4.2,2.0,0
,"A pair of fixes related to cursor movement in conpty (#4372)

## Summary of the Pull Request

This is a pair of related fixes to conpty. For both of these bugs, the root cause was that the cursor was getting set to Off in conpty. Without the `CursorBlinkerTimer`, the cursor would remain off, and frames that only had cursor movements would not update the cursor position in the terminal.

## References

## PR Checklist
* [x] Closes #4102 
* [x] Closes #2642
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Recall that there's a bunch of cursor state that's hard to parse without looking up:
* `Visibility` This controls whether the cursor is visible _at all_, regardless if it's been blinked on or off
* `Blinking` controls whether the blinker timer should do something, or leave the cursor alone.
* `IsOn`: When the cursor is blinking, this alternates between true and false. 

The trick here is that we only `TriggerCursorMoved` when the cursor is `On`, and there are some scenarios where the cursor is manually set to off. 

Fundamentally, these two bugs are similar cases, but they are triggered by different things:
* #2642 was caused by `DoSrvPrivateAllowCursorBlinking(false)` (`^[[?12l`) also manually turning the cursor off.
* #4102 was caused by the client calling `SetConsoleScreenBuffer` to change the active buffer. `win-curses` actually uses that API instead of the alt buffer.",,,,True,False,False,75,3,3,3,migrie@microsoft.com,noreply@github.com,"01/30/2020, 20:14:16",2020,"01/30/2020, 20:14:16",2020,4,3,3,4.8,1.8,0
,"Fix the search box in High Contrast by using the right theme resources (#4406)

We were overriding the button foreground and the placeholder foreground using our
own custom resource names. They didn't exist in HC.

Instead of making them exist in HC, I made us use and override the real resource
names. Those ones have HC colors defined by the platform!

Fixes #4393.",,,,True,False,False,5,6,1,1,duhowett@microsoft.com,noreply@github.com,"01/30/2020, 20:15:19",2020,"01/30/2020, 20:15:19",2020,4,1,3,2.3,1.2,0
,"Round and style buttons on close all tabs dialog (#4401)

This commit also fixes default buttons and default button styling
in all other dialogs and properly hooks up ESC and Enter for the
Close dialog.

Closes #4307.
Closes #3379.",,,,True,False,False,7,16,3,3,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"01/30/2020, 23:51:43",2020,"01/30/2020, 23:51:43",2020,4,1,3,1.5,1.2,0
,"spec/doc: replace split pane -h, -V with -H, -V (#4420)

This fixes a coherence issue with the commandline args spec.",,,,True,True,False,9,9,1,1,tedhudek@users.noreply.github.com,noreply@github.com,"01/30/2020, 23:55:15",2020,"01/30/2020, 23:55:15",2020,4,0,3,2.5,1.2,0
,"No more are you sure boxes (#4101)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
So this PR adds a profile setting called ""confirmCloseAllTabs"", that allows one to enable or disable the ""Do you want close all tabs?"" dialog that appears when you close a window with multiple open tabs. It current defaults to ""true"". Also adds a checkbox to that dialog that also sets ""confirmCloseAllTabs""

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3883 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
I added a checkbox to the close dialog to set this setting, but I'm not sure how to best go about actually changing the setting from code; am open to suggestions, as to how it should be done, or if I should also just remove it and stick with the profile setting.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
1. Set ""confirmCloseAllTabs"" to false in my profile.json file.
2. Opened a 2nd tab.
3. Closed the window
4. Observed that there was no confirmation before the window closed.
5. Set ""confirmCloseAllTabs"" to true
6. Repeat steps 2 and 3
7. Observe that there was a confirmation before the window closed.",,,,True,False,False,28,1,6,6,rstat1@gmail.com,noreply@github.com,"01/31/2020, 01:09:39",2020,"01/31/2020, 01:09:39",2020,1,0,3,4.8,1.8,0
,"Kill NEEDS_LOC and move cmdline descriptions into resources (#4402)

Fixes #4155.

## Validation steps

```
Summary: Total=23, Passed=22, Failed=1, Blocked=0, Not Run=0, Skipped=0
```

The failing test is the same one as before. It is not germane to this pull request.",,,,True,False,False,49,18,4,3,duhowett@microsoft.com,noreply@github.com,"01/31/2020, 01:13:38",2020,"01/31/2020, 01:13:38",2020,1,1,3,3.8,1.8,0
,"shift click selection end works, clear selection and discard key press for esc works (#4404)

This PR addresses the following two issues:

#4203: If a selection is active, a <kbd>shift</kbd>-LeftClick will set the SelectionEnd to where the pointer is.  
#3911: Currently, any keypress will clear selection, and will pass through to the terminal. This PR will make it so that if a selection is active, _any_ keypress will clear the selection and then any keypress _except_ <kbd>esc</kbd> will pass through to the terminal.

## PR Checklist
* [x] Closes #4203; Closes #3911
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Played around a whole bunch with shift-clicking selections and regular clicking selections.
Also played around with selections and dismissing with all sorts of keypresses and keychords.
Tests all pass still!",,,,False,False,False,21,3,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"01/31/2020, 01:15:35",2020,"01/31/2020, 01:15:35",2020,1,1,3,4.4,1.2,0
,"Collect all known PowerShell Core installations for dynamic profiles (#4273)

This pull request teaches the PowerShell Core generator about a bunch of different locations in which it might find a PowerShell.

These instances will be sorted, a leader will be elected, and that leader will be promoted and given the vaunted title of ""PowerShell"".

Names will be generated for the rest.

The sort order is documented in the comments, but that comment will be replicated here:

```
// <-- Less Valued .................................... More Valued -->
// |                 All instances of PS 6                 | All PS7  |
// |          Preview          |          Stable           | ~~~      |
// |  Non-Native | Native      |  Non-Native | Native      | ~~~      |
// | Trd  | Pack | Trd  | Pack | Trd  | Pack | Trd  | Pack | ~~~      |
// (where Pack is a stand-in for store, scoop, dotnet, though they have their own orders,
// and Trd is a stand-in for ""Traditional"" (Program Files))
```

Closes #2300",,,,False,False,False,291,55,11,3,duhowett@microsoft.com,noreply@github.com,"01/31/2020, 04:17:21",2020,"01/31/2020, 04:17:21",2020,1,1,3,4.2,3.0,0
,"Refactor UiaTextRange For Improved Navigation and Reliability (#4018)

## Summary of the Pull Request
This pull request is intended to achieve the following goals...
1) reduce duplicate code
2) remove static functions
3) improve readability
4) improve reliability
5) improve code-coverage for testing
6) establish functioning text buffer navigation in Narrator and NVDA

This also required a change to the wrapper class `XamlUiaTextRange` that has been causing issues with Narrator and NVDA.

See below for additional context.

## References
#3976 - I believe this might have been a result of improperly handling degenerate ranges. Fixed here.
#3895 - reduced the duplicate code. No need to separate into different files
#2160 - same as #3976 above
#1993 - I think just about everything is no longer static

## PR Checklist
* [x] Closes #3895, Closes #1993, Closes #3976, Closes #2160 
* [x] CLA signed
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments

### UiaTextRange
- converted endpoints into the COORD system in the TextBuffer coordinate space
- `start` is inclusive, `end` is exclusive. A degenerate range is when start == end.
- all functions are no longer static
- `MoveByUnit()` functions now rely on `MoveEndpointByUnit()` functions
- removed unnecessary typedefs like `Endpoint`, `ScreenInfoRow`, etc..
- relied more heavily on existing functionality from `TextBuffer` and `Viewport`

### XamlUiaTextRange
- `GetAttributeValue()` must return a special HRESULT that signifies that the requested attribute is not supported. This was the cause of a number of inconsistencies between Narrator and NVDA.
- `FindText()` should return `nullptr` if nothing was found. #4373 properly fixes this functionality now that Search is a shared module

### TextBuffer
- Word navigation functionality is entirely in `TextBuffer` for proper abstraction
- a total of 6 functions are now dedicated to word navigation to get a good understanding of the differences between a ""word"" in Accessibility and a ""word"" in selection

As an example, consider a buffer with this text in it:
""  word   other  ""
In selection, a ""word"" is defined as the range between two delimiters, so the words in the example include [""  "", ""word"", ""   "", ""other"", ""  ""].
In accessibility , a ""word"" includes the delimiters after a range of readable characters, so the words in the example include [""word   "", ""other  ""].

Additionally, accessibility word navigation must be able to detect if it is on the first or last word. This resulted in a slight variant of word navigation functions that return a boolean instead of a COORD.

Ideally, these functions can be consolidated, but that is too risky for a PR of this size as it can have an effect on selection.

### Viewport
- the concept of `EndExclusive` is added. This is used by UiaTextRange's `end` anchor as it is exclusive. To signify that the last character in the buffer is included in this buffer, `end` must be one past the end of the buffer. This is `EndExclusive`
- Since many functions check if the given `COORD` is in bounds, a flag must be set to allow `EndExclusive` as a valid `COORD` that is in bounds.

### Testing
- word navigation testing relies more heavily on TextBuffer tests
- additional testing was created for non-movement focused functions of UiaTextRange
- The results have been compared to Microsoft Word and some have been verified by UiAutomation/Narrator contacts as expected results.

## Validation Steps Performed
Tests pass
Narrator works
NVDA works",,,,True,False,True,1815,3466,21,21,carlos.zamora@microsoft.com,noreply@github.com,"01/31/2020, 20:59:39",2020,"01/31/2020, 20:59:39",2020,4,1,3,2.4,4.8,0
,"Merged PR 4235821: [Git2Git] Reflect some sources.dep changes from OS

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 824b3437553bebaf00a4af6275ca3e035e3cf2ca

Related work items: #18974333",,,,False,False,False,0,29,12,5,miniksa@microsoft.com,duhowett@microsoft.com,"01/31/2020, 21:27:33",2020,"01/31/2020, 21:27:33",2020,4,3,1,0.0,1.5,0
,"Fix a crash when dragging a debug conhost across a DPI boundary (#4022)

## Summary of the Pull Request

When dragging _DEBUG_ conhost across a DPI boundary, we'd crash. This doesn't repro for some reason on Release builds. Maybe @miniksa can share some light why that is.

## PR Checklist
* [x] Closes #4012
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Dragged it across the boundary again, doesn't crash anymore 🙏",,,,True,False,False,1,1,1,1,migrie@microsoft.com,duhowett@microsoft.com,"01/02/2020, 17:52:17",2020,"01/31/2020, 21:27:59",2020,4,3,1,2.5,1.2,29
,"Introduce UiaTextRangeBase::FindText() for Accessibility (#4373)

Moved `FindText` to `UiaTextRangeBase`. Now that Search is a shared component (thanks #3279), I can just reuse it basically as-is.

#3279 - Make Search a shared component
#4018 - UiaTextRange Refactor

I removed it from the two different kinds of UiaTextRange and put it in the base class.

I needed a very minor change to ensure we convert from an inclusive end (from Search) to an exclusive end (in UTR).

Worked with `FindText` was globally messed with in windows.h. So we had to do a few weird things there (thanks Michael).

No need for additional tests because it _literally_ just sets up a Searcher and calls it.",,,,False,False,True,79,87,11,10,carlos.zamora@microsoft.com,noreply@github.com,"01/31/2020, 23:26:19",2020,"01/31/2020, 23:26:19",2020,4,1,3,2.9,3.0,0
,"Merged PR 4270393: [Git2Git] Merged PR 4264676: Guards the exceptions from PaintFrameForEngine to head off the Watsons

[Git2Git] Merged PR 4264676: Guards the exceptions from PaintFrameForEngine to head off the Watsons

Guards the exceptions from PaintFrameForEngine to head off the Watsons.
This will just enable it to retry again later. There's no real reason for it to crash and exceptions should never have left this function, so I made it noexcept as well.

Related work items: #21270995 Retrieved from official/rs_onecore_dep_uxp 08f8855377bde6d05fade032335fedf4d1387de2

Related work items: #21270995",,,,False,False,False,4,2,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"02/03/2020, 19:03:08",2020,"02/03/2020, 19:03:08",2020,4,3,1,3.3,1.2,0
,Invoke the code formatter on the newly-ingested code,,,,False,False,False,0,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/03/2020, 19:54:14",2020,"02/03/2020, 19:54:14",2020,4,1,1,0.0,1.0,0
,"Adjust GetBoundingRect for Inclusive end (#4449)

GetBoundingRect() has inclusive endpoints. I previously assumed end was exclusive so I drew the bounding rect wrong.

This also means that we should allow start and end to be the same. Which means that FailFastIf would get hit...",,,,True,True,False,2,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/03/2020, 21:25:08",2020,"02/03/2020, 21:25:08",2020,4,1,3,2.5,1.2,0
,"Update TAEF to 10.51 and remove the private dep on Taef.TestAdapter (#4450)

This removes some longstanding debt we've been carrying around.",,,,False,False,False,12,45,11,9,duhowett@microsoft.com,noreply@github.com,"02/03/2020, 22:14:43",2020,"02/03/2020, 22:14:43",2020,4,1,3,1.1,2.0,0
,"[VT Mouse Mode] Translate SGR Mouse VT Sequences to MOUSE_EVENT_RECORD (#3963)

## Summary of the Pull Request
Upgrades the `InputStateMachineEngine` to take SGR Mouse VT Sequences and translate them into `MOUSE_EVENT_RECORDS`.

## References
https://docs.microsoft.com/en-us/windows/console/mouse-event-record-str
https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h3-Extended-coordinates
#376

## PR Checklist
* [X] Contributes to #376
* [X] CLA signed.
* [X] Tests added/passed
* [ ] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

### Modifications to `InputStateMachineEngine`
I introduced various enum types...
- `CsiIntermediateCodes`: our supported intermediate codes. Currently only `<`
- `CsiEndCodes`: the last code used for SGR Mouse Mode
- `CsiMouseButtonCodes`: which button was pressed. Mutually exclusive. Buttons beyond button 11 are ambiguous.
- `CsiMouseModifierCodes`: bitfield of modifiers active for SGR Mouse Mode.

`CsiIntermediateCodes` is used first in `ActionCsiDispatch` to detect the VT Sequence. This kicks off a chain of function calls...
- `_GetXYPosition()`: figure out where the mouse was clicked
- `_UpdateSGRMouseButtonState`: read in what we found and update our internal state
- `_WriteMouseEvent()`: generate an INPUT_RECORD and send it off

### Modifications to Testing Suite
read below.
Also, made the test state a globally accessible/modifiable variable.

## Validation Steps Performed
Added tests that cover...
- button clicks
- button clicks with modifiers
- mouse movement
- mouse movement and entering/exiting a state where multiple buttons were pressed",,,,False,False,False,614,93,3,3,carlos.zamora@microsoft.com,noreply@github.com,"02/03/2020, 22:20:45",2020,"02/03/2020, 22:20:45",2020,4,1,3,4.3,3.0,0
,"Merged PR 4271163: [Git2Git] Remove use of private theme APIs

References MSFT:24418178",,,,False,False,False,17,187,9,7,miniksa@microsoft.com,duhowett@microsoft.com,"02/03/2020, 23:13:31",2020,"02/03/2020, 23:13:31",2020,4,3,1,0.9,3.0,0
,"Add support for VT100 Auto Wrap Mode (DECAWM) (#3943)

## Summary of the Pull Request

This adds support for the [`DECAWM`](https://vt100.net/docs/vt510-rm/DECAWM) private mode escape sequence, which controls whether or not the output wraps to the next line when the cursor reaches the right edge of the screen. Tested manually, with [Vttest](https://invisible-island.net/vttest/), and with some new unit tests.

## PR Checklist
* [x] Closes #3826
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3826

## Detailed Description of the Pull Request / Additional comments

The idea was to repurpose the existing `ENABLE_WRAP_AT_EOL_OUTPUT` mode, but the problem with that was it didn't work in VT mode - specifically, disabling it didn't prevent the wrapping from happening. This was because in VT mode the `WC_DELAY_EOL_WRAP` behaviour takes affect, and that bypasses the usual codepath where `ENABLE_WRAP_AT_EOL_OUTPUT` is checked,

To fix this, I had to add additional checks in the `WriteCharsLegacy` function (7dbefe06e41f191a0e83cfefe4896b66094c4089) to make sure the `WC_DELAY_EOL_WRAP` mode is only activated when `ENABLE_WRAP_AT_EOL_OUTPUT`  is also set.

Once that was fixed, though, another issue came to light: the `ENABLE_WRAP_AT_EOL_OUTPUT` mode doesn't actually work as documented. According to the docs, ""if this mode is disabled, the last character in the row is overwritten with any subsequent characters"". What actually happens is the cursor jumps back to the position at the start of the write, which could be anywhere on the line.

This seems completely broken to me, but I've checked in the Windows XP, and it has the same behaviour, so it looks like that's the way it has always been. So I've added a fix for this (9df98497ca38f7d0ea42623b723a8e2ecf9a4ab9), but it is only applied in VT mode.

Once that basic functionality was in place, though, we just needed a private API in the `ConGetSet` interface to toggle the mode, and then that API could be called from the `AdaptDispatch` class when the `DECAWM` escape sequence was received.

One last thing was to reenable the mode in reponse to a `DECSTR` soft reset. Technically the auto wrap mode was disabled by default on many of the DEC terminals, and some documentation suggests that `DECSTR` should reset it to that state, But most modern terminals (including XTerm) expect the wrapping to be enabled by default, and `DECSTR` reenables that state, so that's the behaviour I've copied.

## Validation Steps Performed

I've add a state machine test to confirm the `DECAWM` escape is dispatched correctly, and a screen buffer test to make sure the output is wrapped or clamped as appropriate for the two states.

I've also confirmed that the ""wrap around"" test is now working correctly in the _Test of screen features_ in Vttest.",,,,True,False,False,155,7,14,14,j4_james@hotmail.com,noreply@github.com,"02/04/2020, 00:20:21",2020,"02/04/2020, 00:20:21",2020,1,1,3,4.8,3.6,0
,"Unify UTF-8 handling using til::u8u16 & revise WriteConsoleAImpl (#4422)

Replace `utf8Parser` with `til::u8u16` in order to have the same
conversion algorithms used in terminal and conhost.

This PR addresses item 2 in this list:
1. ✉ Implement `til::u8u16` and `til::u16u8` (done in PR #4093)
2. ✔ **Unify UTF-8 handling using `til::u8u16` (this PR)**
    2.1. ✔ **Update VtInputThread::_HandleRunInput()**
    2.2. ✔ **Update ApiRoutines::WriteConsoleAImpl()**
    2.3. ❌ (optional / ask the core team) Remove Utf8ToWideCharParser from the code base to avoid further use
3. ❌ Enable BOM discarding (follow up)
    3.1. ❌ extend `til::u8u16` and `til::u16u8` with a 3rd parameter to enable discarding the BOM
    3.2. ❌ Make use of the 3rd parameter to discard the BOM in all current function callers, or (optional / ask the core team) make it the default for  `til::u8u16` and `til::u16u8` 
4. ❌ Find UTF-16 to UTF-8 conversions and examine if they can be unified, too (follow up)

Closes #4086
Closes #3378",,,,False,False,False,86,148,4,4,neffets720126@web.de,noreply@github.com,"02/04/2020, 02:06:55",2020,"02/04/2020, 02:06:55",2020,1,0,3,1.8,3.0,0
,"Update index.md - Tips and Tricks (#4451)

pwsh parent process has been changed, confirmations in the replies to the referenced tweet.

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Description
Updating documentation to reflect changes in pwsh parent process.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [x] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,True,False,1,1,1,1,rholliday@gmail.com,noreply@github.com,"02/04/2020, 15:54:07",2020,"02/04/2020, 15:54:06",2020,3,0,3,2.5,1.2,-1
,"Convert Tab to a WinRT type (#4350)

## Summary of the Pull Request
This PR will make the existing `Tab` class into a WinRT type. This will allow any XAML to simply bind to the `ObservableVector` of Tabs. 

This PR will be followed up with a future PR to change our TabView to use the ObservableVector, which will in turn eliminate the need for maintaining two vectors of Tabs. (We currently maintain `_tabs` in `TerminalPage` and we also maintain `TabView().TabViewItems()` at the same time as described here: #2740)

## References
#3922 

## PR Checklist
* [x] CLA signed.
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
I've currently only exposed a Tab's Title and IconPath to keep things simple. I foresee XAML elements that bind to Tabs to only really need these two properties for displaying.

I've also converted `TerminalPage`'s `std::vector<std::shared_ptr> _tabs` into a `IObservableVector<winrt::TerminalPage::Tab> _tabs` just so that future PRs will have the ground set for binding to this vector of tabs.

## Validation Steps Performed
Played around with Tabs and Panes and all sorts of combinations of keybindings for interacting with tabs and dragging and whatnot, it all seemed fine! Tab Tests also all pass.",,,,False,False,False,634,487,13,13,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/04/2020, 21:51:11",2020,"02/04/2020, 21:51:11",2020,4,1,3,2.8,4.0,0
,"Add VS Code keys and improve keybinding documentation (#4392)

* initial vs code keybinding functionality + initial keybinding documentation

* updated docs

* add descriptions to commands

* added descriptions of actions

* addressed feedback

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* Update doc/cascadia/SettingsSchema.md

Co-Authored-By: Mike Griese <migrie@microsoft.com>

* code formatting

Co-authored-by: Mike Griese <migrie@microsoft.com>",,,,False,False,False,143,133,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"02/04/2020, 23:47:09",2020,"02/04/2020, 23:47:09",2020,4,1,3,3.1,2.5,0
,"schema: add default colors for foreground and background (#4468)

Added `#000000` as default for `background` and `#FFFFFF` as default for `foreground` in JSON schema.

## PR Checklist
* [x] Closes #3466",,,,False,False,False,4,2,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"02/05/2020, 17:24:10",2020,"02/05/2020, 17:24:10",2020,3,1,3,3.3,1.2,0
,"Added shift+ins to defaults.json (#4467)

* added shift-ins to defaults.json

* add ctrl+ins and update defaults-universal.json",,,,False,False,False,4,0,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"02/05/2020, 18:01:41",2020,"02/05/2020, 18:01:41",2020,4,1,3,5.0,1.2,0
,doc: correct spelling error in UsingJsonSettings.md (#4518),,,,True,True,False,1,1,1,1,35580802+davidhaymond@users.noreply.github.com,noreply@github.com,"02/10/2020, 18:43:15",2020,"02/10/2020, 18:43:15",2020,4,0,3,2.5,1.2,0
,"Move tests to invoke `te.exe` directly instead of using VSTest runner (#4490)

Moves the tests from using the `vstest.console.exe` route to just using `te.exe`.

PROs:
- `te.exe` is significantly faster for running tests because the TAEF/VSTest adapter isn't great.
- Running through `te.exe` is closer to what our developers are doing on their dev boxes
- `te.exe` is how they run in the Windows gates.
- `te.exe` doesn't seem to have the sporadic `0x6` error code thrown during the tests where somehow the console handles get lost
- `te.exe` doesn't seem to repro the other intermittent issues that we have been having that are inscrutable. 
- Fewer processes in the tree (te is running anyway under `vstest.console.exe`, just indirected a lot
- The log outputs scroll live with all our logging messages instead of suppressing everything until there's a failure
- The log output is actually in the order things are happening versus vstest.

CONs:
- No more code coverage.
- No more test records in the ADO build/test panel.
- Tests really won't work inside Visual Studio at all.
- The log files are really big now
- Testing is not a test task anymore, just another script.

Refuting each CON:
- We didn't read the code coverage numbers
- We didn't look at the ADO test panel results or build-over-build velocities
- Tests didn't really work inside Visual Studio anyway unless you did the right incantations under the full moon.
- We could tone down the logging if we wanted at either the te.exe execution time (with a switch) or by declaring properties in the tests/classes/modules that are very verbose to not log unless it fails.
- I don't think anyone cares how they get run as long as they do.",,,,True,True,False,140,89,7,7,miniksa@microsoft.com,noreply@github.com,"02/10/2020, 19:14:06",2020,"02/10/2020, 19:14:06",2020,4,3,3,3.1,3.6,0
,doc: Fix link (and filename) in CONTRIBUTING.md (#4516),,,,True,True,False,1,1,1,1,20903852+christxph@users.noreply.github.com,noreply@github.com,"02/10/2020, 19:14:44",2020,"02/10/2020, 19:14:44",2020,4,0,3,2.5,1.2,0
,"Initialize Windows Terminal in STA (#4505)

This fixes a crash caused by Narrator starting *before* terminal.

Fixes #2907.

For context,

```
// We must initialize the main thread as a single-threaded apartment before
// constructing any Xaml objects. Failing to do so will cause some issues
// in accessibility somewhere down the line when a UIAutomation object will
// be queried on the wrong thread at the wrong time.
// We used to initialize as STA only _after_ initializing the application
// host, which loaded the settings. The settings needed to be loaded in MTA
// because we were using the Windows.Storage APIs. Since we're no longer
// doing that, we can safely init as STA before any WinRT dispatches.
```",,,,True,False,False,11,14,1,1,duhowett@microsoft.com,noreply@github.com,"02/10/2020, 20:16:08",2020,"02/10/2020, 20:16:08",2020,4,1,3,2.2,1.2,0
,"Passthrough `CSI 3 J` in Conpty (#4433)

## Summary of the Pull Request

Conpty doesn't need `CSI 3 J`, it doesn't have a scrollback. The terminal that's connected should use that. This makes conpty pass it through, like other sequences that conpty has no need for.

## References

## PR Checklist
* [x] Closes #2715
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,96,1,2,2,migrie@microsoft.com,noreply@github.com,"02/10/2020, 20:30:02",2020,"02/10/2020, 20:30:02",2020,4,3,3,4.9,1.5,0
,"Force the use of named forwarders in PublicTermCore for Win7 (#4522)

In debug builds that haven't been LTO'd or had unused refs removed,
there will still be a spurious reference to api-ms-win-winrt-core (or
something similar.)

In release builds, that reference is gone.

Fixes #4519.",,,,True,False,False,9,1,1,1,duhowett@microsoft.com,noreply@github.com,"02/10/2020, 20:35:32",2020,"02/10/2020, 20:35:32",2020,4,1,3,4.5,1.2,0
,"Fix a bunch of spelling errors across the project (#4295)

Generated by https://github.com/jsoref/spelling `f`; to maintain your repo, please consider `fchurn`

I generally try to ignore upstream bits. I've accidentally included some items from the `deps/` directory. I expect someone will give me a list of items to drop, I'm happy to drop whole files/directories, or to split the PR into multiple items (E.g. comments/locals/public).

Closes #4294",,,,True,False,False,363,363,177,174,jsoref@users.noreply.github.com,noreply@github.com,"02/10/2020, 20:40:01",2020,"02/10/2020, 20:40:01",2020,4,0,3,2.5,5.0,0
,"Fix FillConsoleOutputCharacterA crash (#4309)

## Summary of the Pull Request
Despite being specified as `noexcept`, `FillConsoleOutputCharacterA` emits an exception when a call to `ConvetToW` is made with an argument character which can't be converted. This PR fixes this throw, by wrapping `ConvertToW` in a try-catch_return.

## PR Checklist
* [x] Closes #4258
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed: thanks @miniksa 

## Detailed Description of the Pull Request / Additional comments
Following the semantics of other `FillConsoleOutputCharacter*` the output param `cellsModified` is set to `0`. The try-catch_return is also what other functions of this family perform in case of errors.

## Validation Steps Performed
Original repro no longer crashes.",,,,True,False,False,66,2,7,7,mkitzan45@gmail.com,noreply@github.com,"02/10/2020, 22:09:08",2020,"02/10/2020, 22:09:08",2020,4,1,3,4.9,2.4,0
,"Rename WTU to zTerminal using the CORE device family resource q… (#4520)

This also splits our resources (for WTU) into English vs. Neutral

Fixes #4491.

Co-authored-by: Michael Niksa <miniksa@microsoft.com>",,,,True,False,False,224,141,6,5,duhowett@microsoft.com,noreply@github.com,"02/10/2020, 22:37:24",2020,"02/10/2020, 22:37:24",2020,4,1,3,2.3,3.6,0
,"Fix scrollbar doesn't update viewport after window resize (#3344)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Fixes a bug where scrolling up/down doesn't update the viewport after the window is resized and in other cases. Also changes other things, please read the detailed description.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #1494
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

There are two ways scroll can happen:
- the user scrolls using the scroll bar and the `Terminal` is notified
- the `Terminal` changed the viewport and the scroll bar is updated to reflect the change

The code to notify the `Terminal` that the user scrolled is in the event handler for when the scroll bar's value changes. However this poses a problem because it means that when the `Terminal` changes the viewport, the scroll bar is updated so it would then also notify the `Terminal` that the scroll changed. But it already knows because it's coming from itself!

To fix this, the `TermControl` class had a member called `_lastScrollOffset` that would be set when the `Terminal` decides to change the viewport so that the event handler for the scroll bar could check the new scroll value against `_lastScrollOffset` and if it matches, then everything is fine and there is nothing to update.

This is what happens when the `Terminal` changes the viewport:
1. set `_lastScrollOffset`
2. dispatch job on the UI thread: update the scrollbar which is going to call the event handler which is going to check for `_lastScrollOffset` and clear it

There are two bugs introduced by this approach:
1. (I am not sure about this.) The dispatcher appears to store jobs in a LIFO stack so it sometimes reorders the ""update the scrollbar"" jobs when there are too many. When I run `1..10000` on PowerShell, then I get this from the event handler (format: `_lastScrollOffset newValue`):
    ```
    8988 8988
    8989 8989
    8990 8990
    8992 8991
    8993 8992
    ...
    9001 8997
    9001 8998
    9001 8999
    9001 9000
    9001 9001
    9001 8985
    9001 8968
    9001 8953
    ...
    9001 7242
    9001 7226
    9001 7210
    ```
    This causes the following issues:
    1. `_lastScrollOffset` wouldn't be reset because it wouldn't be equal to the current scroll bar value (see example above) so the next scrolls wouldn't do anything as the event handler would still be waiting for an event with the good scroll bar value which would never happen because it happened earlier
    2. the `TermControl` would notify the `Terminal` about its own scroll
2. If the `Terminal` didn't actually changed its viewport but still called the `TermControl::_TerminalScrollPositionChanged` method, then it would set the `_lastScrollOffset` member as usual but the scroll bar value change event handler would not be called because it is only called when the value actually changes so the `_lastScrollOffset` member wouldn't be cleared and subsequent scroll bar value change events would be ignored because again the event handler would still be waiting for an event with the good scroll bar value which would never happen. This is actually the reason for #1494: when the window is resized, the `Terminal` will call `TermControl::_TerminalScrollPositionChanged` even if the scroll position didn't actually change (https://github.com/microsoft/terminal/blob/444de5b166d800b17c90510cde8664aefffcb236/src/cascadia/TerminalCore/Terminal.cpp#L183). Maybe this should also be fixed in another PR?

I replaced `_lastScrollOffset` by a flag `_isTerminalInitiatedScroll`. I set the flag just before and unset it just after the terminal changes the scrollbar on the UI thread to eliminate the race conditions and the bug when the scroll bar's value doesn't actually change.

Other changes:
- I also fixed a potential bug where if the user scrolls just after the terminal updates the viewport, it would en up ignoring the user scroll. To do this, when the user scrolls, I cancel any update with `_willUpdateScrollBarToMatchViewport`.
- I also removed the original `ScrollViewport` method because it was not used anywhere and I think it can potentially create confusion (and therefore bugs) because this method updates the viewport but not the scroll bar unlike `KeyboardScrollViewport` which functions as you would expect. I then renamed `KeyboardScrollViewport` into `ScrollViewport`. So, now, there is only one method to scroll the viewport from the `TermControl`. Please, tell me if this shouldn't be in this PR.
- I also removed `_terminal->UserScrollViewport(viewTop);` in the `KeyboardScrollViewport` method because it will be updated later anyways in the scroll bar's value change event handler because of the `_scrollBar.Value(viewTop);`.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

I tested manually by doing this:
- For bug 1:
    1. Start the terminal
    2. Run the `1..30000` command in PowerShell and wait for it to end (maybe more if you have a fast  computer?)
    3. Hold left click on the scrollbar slider and start moving it
- For bug 2:
    1. Start the terminal
    2. Run the `1..100` command in PowerShell and wait for it to end
    3. Resize the window horizontally
    4. Hold left click on the scrollbar slider and start moving it

Without this patch, the viewport doesn't update.
With the patch, the viewport updates correctly.",,,,True,False,False,2263,2287,4,4,56923875+greg904@users.noreply.github.com,noreply@github.com,"02/10/2020, 23:15:30",2020,"02/10/2020, 23:15:30",2020,4,1,3,2.5,3.6,0
,"Limit Concept of TextBuffer's Size in UIA (#4523)

## Summary of the Pull Request
In UIA Providers, update the concept of the size of the text buffer to just go down to the virtual bottom. This significantly increases performance to the point that it can even be used in the Debug build.

## PR Checklist
* [x] Closes #4485 
* [x] CLA signed.

## Detailed Description of the Pull Request / Additional comments
We already actually have this concept exposed to us via the IUiaData. So we're just leveraging that and putting it in a helper function `_getBufferSize()`.

## Validation Steps Performed
Tested word nav on Narrator (previously hung). Now it works on the Debug build. Previously, using the release build was necessary to be able to test this feature.",,,,False,False,False,44,17,2,2,carlos.zamora@microsoft.com,noreply@github.com,"02/10/2020, 23:23:19",2020,"02/10/2020, 23:23:19",2020,4,1,3,3.6,1.8,0
,doc: add useAcrylic unfocused limitation to docs (#4412),,,,False,False,False,2,2,2,2,vitezslavferko@gmail.com,noreply@github.com,"02/11/2020, 00:09:48",2020,"02/11/2020, 00:09:48",2020,1,0,3,2.5,1.0,0
,"Move cursor in conpty correctly after a backspace when we've delayed an EOL wrap (#4403)

## Summary of the Pull Request

This is a fix that technically was caused by #357, though we didn't have the Terminal at the time, so I only fixed conhost then. When a client app prints the very last column in the buffer, the cursor is often not _actually_ moved to the next row quite yet. The cursor usually just ""floats"" on the last character of the row, until something happens. This could be a printable character, which will print it on the next line, or a newline, which will move the cursor to the next line manually, or it could be a backspace, which might take the cursor back a character. 

Conhost and gnome-terminal behave slightly differently here, and wt behaves differently all together. Heck, conhost behaves differently depending on what output mode you're in. 

The scenario in question is typing a full row of text, then hitting backspace to erase the last char of the row.

What we were emitting before in this case was definitely wrong - we'd emit a space at that last row, but then not increment our internal tracker of where the cursor is, so the cursor in conpty and the terminal would be misaligned. The easy fix for this is to make sure to always update the `_lastText` member appropriately. This is the `RightExclusive` change.

The second part of this change is to not be so tricksy immediately following a ""delayed eol wrap"". When we have just printed the last char like that, always use the VT sequence CUP the next time the cursor moves. Depending on the terminal emulator and it's flags, performing a BS in this state might not bring the cursor to the correct position. 

## References

#405, #780, #357

## PR Checklist
* [x] Closes #1245
* [x] I work here
* [ ] Tests added/passed 
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

With the impending #405 PR I have, this still works, but the sequences that are emitted change, so I didn't write a test for this currently.

## Validation Steps Performed

Tried the scenario for both #357 and #1245 in inception, `gnome-temrinal` and `wt` all, and they all display the cursor correctly.",,,,True,False,False,101,2,4,4,migrie@microsoft.com,noreply@github.com,"02/11/2020, 21:52:20",2020,"02/11/2020, 21:52:19",2020,4,3,3,4.9,2.4,-1
,"Fix UiaTextRange Misaligned Bounding Rects (#4497)

## Summary of the Pull Request
Forgot to include the scaling factor. Also went ahead and used chromium math for this portion.

## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #2551
* [x] CLA signed.

## Validation Steps Performed
Tested on 200% display and 100% display. Rects are aligned on both.",,,,True,False,False,46,7,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/11/2020, 21:58:20",2020,"02/11/2020, 21:58:20",2020,4,1,3,4.3,1.8,0
,"uia: add support for scrolling the viewport (#4525)

The UIA Provider now scrolls the viewport when necessary. This just fills in the missing virtual function in Terminal to have the same behavior as what it does in ConHost.

* [X] Closes #2361 
* [X] CLA signed.

`ChangeViewport` is now a virtual function at the `ScreenInfoUiaProvider` layer to have access to the TermControl.

In ConHost, we pass this call up to the WindowUiaProvider layer. In Terminal, we don't need to do that because the concept of updating the viewport is handled at the TermControl layer. So we just call that function and _voila_!",,,,False,False,False,11,3,5,5,carlos.zamora@microsoft.com,noreply@github.com,"02/11/2020, 22:06:50",2020,"02/11/2020, 22:06:50",2020,4,1,3,3.9,1.0,0
,"Fix the crash when closing Terminal containing multiple tabs. (#4538)

The Terminal would crash when closing it when there are multiple tabs
open. This was due to `TerminalPage` attempting to select a nonexistent
tab.

The block of code that was removed was causing issues when trying to
close all tabs at once. The way we close all our tabs in
`_CloseAllTabs()` was by repeatedly calling
`_RemoveTabViewItemByIndex(0)` until `_tabs.Size() == 0`. The problem
was that `_RemoveTabViewItemByIndex` would eventually call a coroutine
to set the next tab as the `SelectedItem` after removing a tab. The
coroutine would then pass control back to `_CloseAllTabs()` to finish
its loop, and by the time the coroutine resumes control, `_tabs` and
`TabView().TabItems()` would both be empty and it would crash attempting
to focus a tab.

Luckily, the functionality that this block of code provided is really no
longer needed . This code was used to focus on the next tab after
closing a  tab. This might have been written way back when TabView
didn't have this functionality built in. It seems now that after
removing a `TabItem` from the `TabView`, the `SelectedItem` of the
TabView automatically updates, making this block of code unnecessary.

## Validation Steps Performed
Did a lot of multiple tab open and closings and closing the window after
opening a ton of tabs. No crashes seem to occur anymore!
Test cases still pass.

Closes #4482",,,,True,False,False,0,19,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/11/2020, 22:18:38",2020,"02/11/2020, 22:18:38",2020,4,1,3,0.0,1.2,0
,"Don't say ""drop files"" for things that aren't files (#4541)

Fixes #4481.

## Validation Steps Performed
Dragged things.",,,,True,False,False,7,1,1,1,duhowett@microsoft.com,noreply@github.com,"02/12/2020, 15:30:33",2020,"02/12/2020, 15:30:33",2020,3,1,3,4.4,1.2,0
,WHITESPACE ONLY: TermControl->CRLF,,,,False,False,False,2265,2265,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/12/2020, 19:06:46",2020,"02/12/2020, 19:06:46",2020,4,1,1,2.5,3.0,0
,"doc: fix link to Contributor's Guide in README.md (#4550)

New Link https://github.com/microsoft/terminal/blob/master/CONTRIBUTING.md",,,,True,True,False,1,1,1,1,sebas.b@web.de,noreply@github.com,"02/12/2020, 19:36:31",2020,"02/12/2020, 19:36:31",2020,4,0,3,2.5,1.2,0
,"Gather data on profile customization and tab settings to help us improve defaults (#4534)

## Summary of the Pull Request
This will collect some user choices related to profiles and tab settings to help us understand if and how we should change the in-built defaults.

## PR Checklist
* [x] Closes #3855
* [x] I work here.
* [x] Manual test only.
* [x] Meh, no doc update.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
The following data is collected with examples of the types of questions we intend to answer:
1. What is the name of the executable attached to the PTY? (What shells are popular? Should we focus our testing on them? Are there any common ones we are blind to that we should know about?)
- ""Microsoft.Windows.Terminal.Connection"" {e912fe7b-eeb6-52a5-c628-abe388e5f792}
- ""ConPtyConnected"" event
- ""SessionGuid"" value = WT_SESSION 
- ""Client"" value = Name of EXE
2. Is Acrylic used on a tab? And with what opacity? (Do people really want acrylic? Should it be default? What opacity is most pleasing in our context?)
- ""Microsoft.Windows.Terminal.App"" {24a1622f-7da7-5c77-3303-d850bd1ab2ed}
- ""TabInformation"" event
- ""EventVer"" value is now 1u
- ""UseAcrylic"" value is now TRUE/FALSE on the setting choice
- ""TintOpacity"" value is now Float on the setting choice
3. What font are people choosing? (Do people move away from Cascadia Code? Which ones are the most popular for us to validate when updating the renderer?)
- ""Microsoft.Windows.Terminal.App"" {24a1622f-7da7-5c77-3303-d850bd1ab2ed}
- ""TabInformation"" event
- ""FontFace"" value is now string font from settings
4. What keybindings do people choose to customize (Add or Remove)? (Are there extremely common keys that folks bind or unbind that we should have adjusted by default in a fresh install?)
- ""Microsoft.Windows.Terminal.App"" {24a1622f-7da7-5c77-3303-d850bd1ab2ed}
- ""CustomKeybindings"" event
- ""Keybindings"" value is the entire JSON segment that describes the user keybindings from `settings.json`.
5. Do people change their default profile from the PowerShell one we set? If so, to what? (Should we not set PowerShell as the default? Should we adjust the ranking of our dynamic generators to favor the most popular ones to bubble to the top?)
- ""Microsoft.Windows.Terminal.App"" {24a1622f-7da7-5c77-3303-d850bd1ab2ed}
- ""CustomDefaultProfile"" event
- ""DefaultProfile"" value is the GUID of the chosen profile

## Validation Steps Performed
1. Implemented the events
2. Launched the ETL channel viewer
3. Triggered the events
4. Saw the data come out",,,,False,False,False,76,16,7,7,miniksa@microsoft.com,noreply@github.com,"02/12/2020, 20:02:48",2020,"02/12/2020, 20:02:48",2020,4,3,3,4.3,2.4,0
,"[Git2Git] Merged PR 4297546: Fix 'atribute' to 'attribute' per issue identified on GitHub

Fix 'atribute' to 'attribute' per issue identified on GitHub
Closes https://github.com/microsoft/terminal/pulls/4469

Related work items: MSFT:25154975",,,,True,True,False,9,9,3,3,miniksa@microsoft.com,duhowett@microsoft.com,"02/12/2020, 20:18:15",2020,"02/12/2020, 20:18:15",2020,4,3,1,2.5,1.2,0
,"Revert ""Fix column count issues with certain ligature."" (#4558)

Reopens #696.
Closes #4375.
This reverts commit 027f1228cb92746de102f04c491ac02b98708bf2.",,,,True,False,False,2,24,1,1,duhowett@microsoft.com,noreply@github.com,"02/12/2020, 23:54:25",2020,"02/12/2020, 23:54:25",2020,4,1,3,0.4,1.2,0
,"When patching profiles in, copy the user's indentation (#4555)

This will attempt to match the style of the user's JSON.

Caveats:
1. If the user has no profiles, it'll explode. This isn't new.
2. If the user's indentation style if `{profile}, {profile}, {profile}` (that is: no indentation), you'll get this:

```
{profile}, {profile}, {profile},
 {
     new profile content
 }
```

There may be something better we can do by copying their newline (or lack thereof) and using it in our generator or detecting the indentation of their members as well.
That's an exercise for later.

Ref #2805",,,,False,False,False,9,5,1,1,duhowett@microsoft.com,noreply@github.com,"02/13/2020, 00:09:49",2020,"02/13/2020, 00:09:49",2020,1,1,3,3.2,1.0,0
,"Update stock user defaults to the list+defaults style (#4556)

This will improve user education by showing them where ""default"" settings go.

Requires #4555.",,,,False,False,False,21,14,1,1,duhowett@microsoft.com,noreply@github.com,"02/13/2020, 00:12:18",2020,"02/13/2020, 00:12:18",2020,1,1,3,3.4,1.2,0
,"Fix click-drag selection on an unfocused Terminal (#4506)

## Summary of the Pull Request
This PR tries to address some of the weird interactions with pointer pressed events when the Terminal isn't in focus. Here's the four things that have changed as part of this PR;

1. This PR will allow the user to be able to make a selection with a click-drag without having to first perform a single click on a tab/pane to bring it to focus. 
2. Another weird bug that's fixed in this PR is where trying to make a selection on an unfocused tab when it already has a selection active will simply extend the existing selection instead of making a new one.
3. Not related to the issue that his PR closes: a right click will now focus the tab/pane.

I've made sure that we still have the existing functionality where a single click on an unfocused tab/pane does not make a single-cell selection and just focuses the tab/pane.

## PR Checklist
* [x] Closes #4282
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Played around with all sorts of selection when in-focus and out of focus with multiple panes and tabs.
Unit tests still pass as well.",,,,True,False,False,34,9,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/13/2020, 00:32:50",2020,"02/13/2020, 00:32:50",2020,1,1,3,4.0,1.2,0
,"throwing in the simplest fix i can think of while i ponder about what the real fix should be (#4559)

## Summary of the Pull Request
The issue seems to be how `SwapChainScaleChanged` gets fired and attempts to tell the renderer
to `UpdateDPI` when the renderer is gone. So, as a quick bandaid, we'll put a quick check to only do the thing if the renderer is alive.

## PR Checklist
* [x] Closes #4539
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Held my new tab button for about thirty seconds then held the close tab button until all tabs closed without a crash.",,,,True,False,False,8,5,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/13/2020, 00:42:06",2020,"02/13/2020, 00:42:06",2020,1,1,3,3.1,1.2,0
,version: bump to 0.10,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/13/2020, 00:54:18",2020,"02/13/2020, 00:54:18",2020,1,1,1,2.5,1.0,0
,"Turn on snapToGridOnResize by default (#4569)

Fixes #4349",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"02/13/2020, 21:42:14",2020,"02/13/2020, 21:42:14",2020,4,1,3,2.5,1.2,0
,"Avoid processing VT Render Trace strings when no one is listening (#4594)

## Summary of the Pull Request
- If no one is listening to the ETW provider for the VT Renderer for diagnostic purposes, do not spend time allocating/deleting/formatting strings for presentation in TraceLogging messages.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes something I noticed while working on the renderer.
* [x] I work here.
* [x] Existing tests should pass
* [x] No doc
* [x] Am core contributor.

## Validation Steps Performed
WPR/WPA

Before: 321/3016 samples on hot path (10.64%)
![image](https://user-images.githubusercontent.com/18221333/74568273-73500200-4f2c-11ea-9a62-9aa11ea163b9.png)

After: 0/1266 samples on the same path (0%)
![image](https://user-images.githubusercontent.com/18221333/74568361-a98d8180-4f2c-11ea-922e-fbc878ebe7d4.png)",,,,False,False,False,54,39,1,1,miniksa@microsoft.com,noreply@github.com,"02/14/2020, 21:40:39",2020,"02/14/2020, 21:40:39",2020,4,3,3,2.9,1.5,0
,"Throttle SetEvent call in render thread (#3511)

Reduce unnecessary SetEvent CPU overhead by using `std::atomic_flag` to avoid setting kernel events when the painting thread is already awake and running.",,,,False,False,False,26,1,2,2,skyline75489@outlook.com,noreply@github.com,"02/14/2020, 21:58:28",2020,"02/14/2020, 21:58:28",2020,4,1,3,4.8,1.0,0
,readme: reintroduce the Store install link (#4592),,,,False,False,False,11,2,1,1,clint@rutkas.com,noreply@github.com,"02/14/2020, 22:58:11",2020,"02/14/2020, 22:58:11",2020,4,0,3,4.2,1.0,0
,"Add linting fixes for markdown (#4615)

VSCode's markdown linter suggested a pile of fixes",,,,True,True,False,16,12,3,3,ryan@mirum.org,noreply@github.com,"02/18/2020, 17:20:03",2020,"02/18/2020, 17:20:03",2020,3,0,3,2.9,1.2,0
,doc: fix double quotes on cmder and Anaconda profiles (#4617),,,,True,True,False,2,2,1,1,fedeoliv@microsoft.com,noreply@github.com,"02/18/2020, 18:43:50",2020,"02/18/2020, 18:43:50",2020,4,0,3,2.5,1.2,0
,"Fix touchpad and touchscreen scrolling (#4554)

Fixed inconsistent scrolling when using both touchscreen and precision
touchpad.

Scrolling jumpiness is caused by rounding errors. Instead of retrieving
the current scrolling value from `GetScrollOffset`, which is already
rounded in `int`, let the scrolling operation to operate on
`_scrollBar`'s `Value` directly (which uses `double`) in
`TermControl.cpp`.

TermControl now also respects WHEEL_DELTA, which it was previously
ignoring, to determine how many scroll wheel detents were used.

Testing scrolling on the following scenario manually:

- nonscrollable terminal (e.g. the window is large enough to contain the
  current buffer).
- scrolling to the topmost and bottom-most.
- scrolling TUI apps such as `nano` and `more` in WSL.
- after clearing the terminal, both in cmd and WSL.

... has the same behavior between using touchscreen or precision trackpad
and regular mouse wheel.

Closes #4554 (original pull request)
Closes #1066
Closes #4542",,,,True,False,False,8,8,1,1,aslan.jnn@gmail.com,duhowett@microsoft.com,"02/19/2020, 01:07:05",2020,"02/19/2020, 03:01:58",2020,1,0,1,2.5,1.2,0
,"Batch up to 64 files per clang-format to speed it up (#4639)

This will make `Invoke-CodeFormat` less bad.",,,,False,False,False,13,2,2,2,duhowett@microsoft.com,noreply@github.com,"02/19/2020, 13:47:56",2020,"02/19/2020, 13:47:56",2020,3,1,3,4.3,1.0,0
,"Migrate the ConPTY functional tests out of Windows (#4648)

## Summary of the Pull Request
This will allow us to run the ConPTY tests in CI.

## PR Checklist
* [x] Closes MSFT:24265197
* [X] I've discussed this with core contributors already.

## Validation Steps Performed
I've run the tests.

Please note: this code is unchanged (apart from `wil::ScopeExit` -> `wil::scope_exit`) from Windows. Now is not the time to comment on their perfectness.",,,,False,False,False,528,0,5,5,duhowett@microsoft.com,noreply@github.com,"02/19/2020, 21:27:17",2020,"02/19/2020, 21:27:17",2020,4,1,3,5.0,3.0,0
,"Fix duplicate copyOnSelect when clicking on an unfocused terminal (#4596)

## Summary of the Pull Request
Currently, clicking on an unfocused terminal with a selection active will trigger `copyOnSelect`. This is because the check for `copyOnSelect` and copying to the clipboard is bound to when the Pointer is released. This works fine for when a user performs a click-drag selection, but it inadvertently also triggers when the user performs a single click on an unfocused terminal. We expect `copyOnSelect` to trigger only on the first time a selection is completed. 

This PR will allow the user to single click on an unfocused terminal that has a selection active without triggering a copyOnSelect. It also ensures that any click-drag selection, whether it's on an unfocused or focused terminal, will trigger copyOnSelect.

## PR Checklist
* [x] Closes #4255

## Validation Steps Performed
Performed manual testing involving permutations of multiple panes, tabs, in focus, and out of focus.",,,,True,False,False,21,10,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/20/2020, 18:30:10",2020,"02/20/2020, 18:30:10",2020,4,1,3,3.4,1.2,0
,Update building instructions (#4650),,,,False,False,False,34,11,1,1,yitzhak.s@gmail.com,noreply@github.com,"02/20/2020, 21:05:20",2020,"02/20/2020, 21:05:20",2020,4,0,3,3.8,1.0,0
,"Make ScreenInfoUiaProvider::GetSelection() Return One Selection (#4466)

## Summary of the Pull Request
We used to return multiple text ranges to represent one selection. We only support one selection at a time, so we should only return one range.

Additionally, I moved all TriggerSelection() calls to the renderer from Terminal to TermControl for consistency. This ensures we only call it _once_ when we make a change to our selection state.

## References
#2447 - helps polish Signaling for Selection
#4465 - This is more apparent as the problem holding back Signaling for Selection

## PR Checklist
* [x] Closes #4452 

Tested using Accessibility Insights.",,,,True,True,False,130,167,18,18,carlos.zamora@microsoft.com,noreply@github.com,"02/20/2020, 23:03:50",2020,"02/20/2020, 23:03:50",2020,4,1,3,2.2,4.2,0
,"Add DxEngine drawing ETW tracing for debugging and diagnostics purposes (#4664)

## Summary of the Pull Request
Adds an ETW provider for tracing out operations inside the DirectX Renderer.

## References
This supports #2191 and #778 and other rendering issues.

## PR Checklist
* [x] I work here

## Detailed Description of the Pull Request / Additional comments
This declares and defines the provider with the a GUID appropriate for the namespace and adds an initial invalidation rectangle method for figuring out what is being drawn mostly to understand what could be differential.

## Validation Steps Performed
Implemented provider.
Opened real-time ETW tracing tool
Ran the Terminal and watched invalidation events appear live",,,,False,False,False,41,0,2,2,miniksa@microsoft.com,noreply@github.com,"02/20/2020, 23:13:43",2020,"02/20/2020, 23:13:43",2020,4,3,3,5.0,1.2,0
,"UIA: Fix GetVisibleRanges() and add Tracing (#4495)

## Summary of the Pull Request
Debugging our custom UIA providers has been a painful experience because outputting content to VS may result in UIA Clients getting impatient and giving up on extracting data.

Adding tracing allows us to debug these providers without getting in the way of reproducing a bug. This will help immensely with developing accessibility features on Windows Terminal and Console.

This pull request additionally contains payload from #4526:
* Make GetVisibleRanges() return one range (and add tracing for it).
`ScreenInfoUiaProvider::GetVisibleRanges()` used to return one range per line of visible text. The documentation for this function says that we should return one per contiguous span of text. Since all of the text in the TermControl will always be contiguous (at least by our standards), we should only ever be returning one range.

## PR Checklist
* [x] Closes #1914. Closes #4507.
* [x] CLA signed

## Detailed Description of the Pull Request / Additional comments
`UiaTracing` is a singleton class that is in charge of registration for trace logging. `TextRange` is used to trace `UiaTextRange`, whereas `TextProvider` is used to trace `ScreenInfoUiaProviderBase`.

`_getValue()` is overloaded to transform complex objects and enums into a string for logging.

`_getTextValue()` had to be added to be able to trace the text a UiaTextRange included. This makes following UiaTextRanges much simpler.

## Validation Steps Performed
Performed a few operations when under NVDA/Narrator and manually checked the results.",,,,True,False,False,780,1237,11,11,carlos.zamora@microsoft.com,noreply@github.com,"02/20/2020, 23:50:43",2020,"02/20/2020, 23:50:43",2020,4,1,3,1.9,4.8,0
,"Unify resource filenames across the repository (#4642)

This unifies the rest of the projects around the resource structure laid out in WindowsTerminalUniversal. Now we'll have a single flat structure for resource files and keep the qualifiers in their filenames. It's easier to manage this way.",,,,False,False,False,81,19,9,9,duhowett@microsoft.com,noreply@github.com,"02/20/2020, 23:51:41",2020,"02/20/2020, 23:51:41",2020,4,1,3,3.0,2.0,0
,"Shim the AzureConn through a conhost to stop VT bleeding (#4652)

This commit introduces a small console-subsystem application whose sole
job is to consume TerminalConnection.dll and hook it up to something
other than Terminal. It is 99% of the way to a generic solution.

I've introduced a stopgap in TerminalPage that makes sure we launch
TerminalAzBridge using ConptyConnection instead of AzureConnection.

As a bonus, this commit includes a class whose sole job it is to make
reading VT input off a console handle not terrible. It returns you a
string and dispatches window size change callbacks.

Fixes #2267.
Fixes #4589.
Related to #2266 (since pwsh needs better VT).",,,,True,False,False,361,2,10,10,duhowett@microsoft.com,noreply@github.com,"02/21/2020, 00:21:05",2020,"02/21/2020, 00:21:05",2020,1,1,3,5.0,3.6,0
,"Restrict DX run height adjustment to only relevant glyph AND Correct PTY rendering on trailing half of fullwidth glyphs  (#4668)

## Summary of the Pull Request
- Height adjustment of a glyph is now restricted to itself in the DX
  renderer instead of applying to the entire run
- ConPTY compensates for drawing the right half of a fullwidth
  character. The entire render base has this behavior restored now as
  well.

## PR Checklist
* [x] Closes #2191
* [x] I work here
* [x] Tests added/passed
* [x] No doc
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
Two issues:
1. On the DirectX renderer side, when confronted with shrinking a glyph,
   the correction code would apply the shrunken size to the entire run, not
   just the potentially individual glyph that needed to be reduced in size.
   Unfortunately while adjusting the horizontal X width can be done for
   each glyph in a run, the vertical Y height has to be adjusted for an
   entire run. So the solution here was to split the individual glyph
   needing shrinking out of the run into its own run so it can be shrunk.
2. On the ConPTY side, there was a long standing TODO that was never
   completed to deal with a request to draw only the right half of a
   two-column character. This meant that when encountering a request for
   the right half only, we would transmit the entire full character to be
   drawn, left and right halves, struck over the right half position. Now
   we correct the cursor back a position (if space) and draw it out so the
   right half is struck over where we believe the right half should be (and
   the left half is updated as well as a consequence, which should be OK.)

The reason this happens right now is because despite VIM only updating
two cells in the buffer, the differential drawing calculation in the
ConPTY is very simplistic and intersects only rectangles. This means
from the top left most character drawn down to the row/col cursor count
indicator in vim's modeline are redrawn with each character typed. This
catches the line below the edited line in the typing and refreshes it.
But incorrectly.

We need to address making ConPTY smarter about what it draws
incrementally as it's clearly way too chatty. But I plan to do that with
some of the structures I will be creating to solve #778.

## Validation Steps Performed
- Ran the scenario listed in #2191 in vim in the Terminal
- Added unit tests similar to examples given around glyph/text mapping
  in runs from Microsoft community page",,,,False,False,False,505,86,12,12,miniksa@microsoft.com,noreply@github.com,"02/21/2020, 00:24:12",2020,"02/21/2020, 00:24:12",2020,1,3,3,4.3,4.8,0
,"Clip text to within the row we expect (#4671)

## Summary of the Pull Request
Adjusts `DrawGlyphRun` method inside DirectX renderer to restrict text
to be clipped within the boundaries of the row.

## PR Checklist
* [x] Closes #1703
* [x] I work here.
* [x] No tests.
* [x] No docs.
* [x] I am core contributor.

## Detailed Description of the Pull Request / Additional comments
For whatever reason, some of these shade glyphs near U+2591 tend to
extend way above the height of where we expect they should. This didn't
look like a problem in conhost because it clipped every draw inside the
bounds. This therefore applies the same clip logic as people don't
really expect text to pour out of the box.

It could, theoretically, get us into trouble later should someone
attempt zalgo text. But doing zalgo text is more of a silliness that
varies in behavior across rendering platforms anyway.

## Validation Steps Performed
- Ran the old conhost GDI renderer and observed
- Ran the new Terminal DX renderer and observed
- Made the code change
- Observed that the height and approximate display characteristics of
  the U+2591 shade and neighboring characters now matches with the conhost
  GDI style to stay within its lane.",,,,True,True,False,13,0,2,2,miniksa@microsoft.com,noreply@github.com,"02/21/2020, 00:57:14",2020,"02/21/2020, 00:57:14",2020,1,3,3,5.0,1.2,0
,"make sure caching of partials still works if the string consists of a single lead byte only (GH#4673) (#4685)

## Summary of the Pull Request
Fixes a flaw that happened if `til::u8u16` received a single lead byte.

## PR Checklist
* [x] Closes #4673 
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
The loop for caching partials didn't run and thus, the lead byte was
converted to U+FFFD. That's because the loop starts with `sequenceLen`
initialized with 1. And if the string has a length of 1 the initial
condition is `1<1` which is evaluated to `false` and the body of the
loop was never executed.

## Validation Steps Performed
1) updated the code of the state class and tested manually that `printf
   ""\xE2""; printf ""\x98\xBA\n""` prints a U+263A character
2) updated the unit tests to make sure that still up to 3 partials are
   cached
3) updated the unit tests to make sure caching also works if the string
   consists of a lead byte only
4) tested manually that #4086 is still resolved",,,,True,False,False,33,9,2,2,neffets720126@web.de,noreply@github.com,"02/21/2020, 20:45:53",2020,"02/21/2020, 20:45:53",2020,4,0,3,3.9,1.2,0
,"hook up UIA tree to WPF control (#4548)

This PR hooks up the existing UIA implementation to the WPF control. Some existing code that was specific to the UWP terminal control could be shared so that has been refactored to a common location as well.

## Validation Steps Performed
WPF control was brought up in UISpy and the UIA tree was verified. NVDA was then used to check that screen readers were operating properly.",,,,False,False,True,419,139,23,23,zoey@dos.cafe,noreply@github.com,"02/24/2020, 23:17:55",2020,"02/24/2020, 23:17:55",2020,4,1,3,4.0,4.0,0
,"Add support for cleartype text antialiasing (#4711)

## Summary of the Pull Request

I needed to do something to keep sane so today I day of learned about antialiasing. This PR adds the ability to specify the `""antialiasingMode""` as a setting.
* ""antialiasingMode"": ""grayscale"": the current behavior, `D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE`
* ""antialiasingMode"": ""cleartype"": use `D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE` instead


## PR Checklist
* [x] Closes #1298
* [x] I work here
* [ ] I didn't add tests 
* [x] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
Grayscale:
 
![image](https://user-images.githubusercontent.com/18356694/75173847-2373f680-56f5-11ea-8896-c1cf04c61d41.png)



Cleartype:
![image](https://user-images.githubusercontent.com/18356694/75173854-25d65080-56f5-11ea-9de1-e2d1c343cae5.png)

 


Side-by-side (can you tell which is which?) <!-- grayscale, cleartype -->
 
![image](https://user-images.githubusercontent.com/18356694/75173864-28d14100-56f5-11ea-8bdd-d47a60fbbe4d.png)",,,,False,False,False,147,7,11,11,migrie@microsoft.com,noreply@github.com,"02/25/2020, 22:19:57",2020,"02/25/2020, 22:19:57",2020,4,3,3,4.8,3.0,0
,"Scale retro terminal scan lines (#4716)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
- Scale the retro terminal effects (#3468) scan lines with the screen's DPI.
- Remove artifacts from sampling wrap around.

Before & after, with my display scale set to 350%:
![Scaling scan lines](https://user-images.githubusercontent.com/38924837/75214566-df0f4780-5742-11ea-9bdc-3430eb24ccca.png)

Before & after showing artifact removal, with my display scale set to 100%, and image enlarged to 400%:
![Sampling artifacts annotated](https://user-images.githubusercontent.com/38924837/75214618-05cd7e00-5743-11ea-9060-f4eba257ea56.png)

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4362
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

Adds a constant buffer, which could be used for other settings for the retro terminal pixel shader.

I haven't touched C++ in over a decade before this change, and this is the first time I've played with DirectX, so please assume my code isn't exactly best practice. 🙂

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

- Changed display scale with experimental.retroTerminalEffect enabled, enjoyed scan lines on high resolution monitors.
- Enabled experimental.retroTerminalEffect, turned the setting off, changed display scale. Retro tabs still scale scan lines.",,,,True,False,False,68,15,3,3,paulming@microsoft.com,noreply@github.com,"02/26/2020, 00:08:45",2020,"02/26/2020, 00:08:45",2020,1,0,3,4.1,1.8,0
,"Fix the build on VS 2019 Update 5 (#4722)

This commit introduces two fixes for C5205 (delete of an abtract class
without a virtual dtor) and one fix for a very hopeful VS version gating
that didn't pan out.",,,,True,True,False,3,3,3,3,duhowett@microsoft.com,noreply@github.com,"02/26/2020, 00:28:32",2020,"02/26/2020, 00:28:32",2020,1,1,3,2.5,1.2,0
,"TermControl: don't use narrow when narrow_cast will do (#4721)

This will help one cause of #4623, which looks like it may be caused by
floats being truncated when stuffed into LONGs for UIA purposes.",,,,False,False,False,10,10,2,2,duhowett@microsoft.com,noreply@github.com,"02/26/2020, 01:10:07",2020,"02/26/2020, 01:10:07",2020,1,1,3,2.5,1.0,0
,"Display Emojis, Kaomojis, and symbols while in IME mode (#4688)

## Summary of the Pull Request
Currently, while in IME mode, selections with the Emoji/Kaomoji/Symbol Picker (which is brought up with <kbd>win+.</kbd>) are not displayed until the user starts a new composition. This is due to the fact that we hide the TextBlock when we receive a CompositionCompleted event, and we only show the TextBlock when we receive a CompositionStarted event. Input from the picker does not count as a composition, so we were never showing the text box, even if the symbols were thrown into the inputBuffer. In addition, we weren't receiving CompositionStarted events when we expected to.

We should be showing the TextBlock when we receive _any_ text, so we should make the TextBlock visible inside of `TextUpdatingHandler`. Furthermore, some really helpful discussion in #3745 around wrapping the `NotifyTextChanged` call with a `NotifyFocusLeave` and a `NotifyFocusEnter` allowed the control to much more consistently determine when a CompositionStarted and a CompositionEnded.

I've also went around and replaced casts with saturating casts, and have removed the line that sets the `textBlock.Width()` so that it would automatically set its width. This resolves the issue where while composing a sentence, the textBlock would be too small to contain all the text, so it would be cut off, but the composition is still valid and still able to continue.

## PR Checklist
* [x] Closes #4148
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Tested picking emojis, kaomojis, and symbols with numerous different languages.",,,,False,False,False,70,40,3,3,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/26/2020, 18:36:02",2020,"02/26/2020, 18:36:02",2020,4,1,3,3.2,2.4,0
,"Allow IME input in Search Box (#4723)

## Summary of the Pull Request
Currently, when the user attempts to type using IME while the Search Box is focused, the input goes to the terminal instead. This is due to the fact that the `TSFInputControl` assumes it's in control whenever TermControl gets focus. So, it'll intercept IME input before the Search Box receives it. We simply need to modify `TermControl::GotFocus` to check if the SearchBox has focus. If it does, `TSFInputControl::NotifyFocusEnter` shouldn't be called.

As a small side fix, I've also disabled the terminal cursor blinking when the Search Box has focus.

Thinking a little further, if we have more features in the future that behave like search box (i.e. advanced tab switcher, or any other XAML controls that pop up) and require text input, we might need to create a sort of ""AnyOtherTextControlInFocus"" function to see if TSFInputControl should receive focus or not.

## PR Checklist
* [x] Closes #4434
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Search works as expected with IME. Composition picker appears underneath Search Box when typing IME in the Search Box. Clicking outside of the Search Box still returns control to TSFInputControl/TermControl.

Terminal Cursor blinks when it has focus, and doesn't when the Search Box has focus.",,,,True,False,False,9,0,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"02/26/2020, 19:28:01",2020,"02/26/2020, 19:28:01",2020,4,1,3,5.0,1.2,0
,"Don't split surrogate pairs when breaking runs for scaling. Affects emoji rendering. #4704 (#4731)

## Summary of the Pull Request
- Surrogate pairs are being split in half with the run splitting check.

## References
- Related to #4708 but not going to fix it.

## PR Checklist
* [x] Closes #4704
* [x] I work here.
* [x] I am a core contributor.

## Detailed Description of the Pull Request / Additional comments
- The adjustment of the run heights in the correction function reports back a text index and a scaling factor. However, I didn't remember at the time that the text is being stored as UTF-16. So the index given can be pointing to the high surrogate of a pair. Thus adding 1 to split ""after"" the text character, then backing up by 1 isn't valid in if the index given was for a high surrogate.

The quick fix is to advance by two if it's a high surrogate and one otherwise.

## Validation Steps Performed
- Used the sample code from #4704 to print the house emoji in various situations into the buffer.",,,,True,False,False,5,2,1,1,miniksa@microsoft.com,noreply@github.com,"02/26/2020, 21:55:22",2020,"02/26/2020, 21:55:22",2020,4,3,3,3.6,1.2,0
,"Fix PublicTerminalCore APIset usage on Windows 7 (#4733)

The new UIA code in PublicTerminalCore broke windows 7 support by referring
to API set dlls for UIA. This PR changes the link line to link to
UIAutomationcore.dll directly.",,,,True,True,False,1,1,1,1,zoey@dos.cafe,noreply@github.com,"02/27/2020, 00:30:05",2020,"02/27/2020, 00:30:05",2020,1,1,3,2.5,1.2,0
,"Convert TermControl to .xaml (#4729)

This commit removes all of the custom UI initialization code in
TermControl and replaces it with a xaml file. Some dead or reundant code
was removed as part of this refactoring.

It also fixes two (quasi-related) issues:

* The search box, on first launch, was offset by the scrollbar even if
  the scrollbar was invisible.
* The scrollbar state wasn't hot-reloadable.",,,,True,True,True,198,249,4,4,duhowett@microsoft.com,noreply@github.com,"02/27/2020, 00:35:16",2020,"02/27/2020, 00:35:16",2020,1,1,3,2.8,3.0,0
,"Make Conpty emit wrapped lines as actually wrapped lines (#4415)

## Summary of the Pull Request

Changes how conpty emits text to preserve line-wrap state, and additionally adds rudimentary support to the Windows Terminal for wrapped lines.

## References

* Does _not_ fix (!) #3088, but that might be lower down in conhost. This makes wt behave like conhost, so at least there's that
* Still needs a proper deferred EOL wrap implementation in #780, which is left as a todo
* #4200 is the mega bucket with all this work
* MSFT:16485846 was the first attempt at this task, which caused the regression MSFT:18123777 so we backed it out.
* #4403 - I made sure this worked with that PR before I even sent #4403

## PR Checklist
* [x] Closes #405
* [x] Closes #3367 
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I started with the following implementation:
When conpty is about to write the last column, note that we wrapped this line here. If the next character the vt renderer is told to paint get is supposed to be at the start of the following line, then we know that the previous line had wrapped, so we _won't_ emit the usual `\r\n` here, and we'll just continue emitting text.

However, this isn't _exactly_ right - if someone fills the row _exactly_ with text, the information that's available to the vt renderer isn't enough to know for sure if this line broke or not. It is possible for the client to write a full line of text, with a `\n` at the end, to manually break the line. So, I had to also add the `lineWrapped` param to the `IRenderEngine` interface, which is about half the files in this changelist.

## Validation Steps Performed
* Ran tests
* Checked how the Windows Terminal behaves with these changes
* Made sure that conhost/inception and gnome-terminal both act as you'd expect with wrapped lines from conpty",,,,True,False,False,512,35,24,24,migrie@microsoft.com,noreply@github.com,"02/27/2020, 16:40:11",2020,"02/27/2020, 16:40:11",2020,3,3,3,4.7,4.8,0
,"Fix RenderThread's notify mechanism (#4698)

## Summary of the Pull Request

Fix a bug where the `Renderer::PaintFrame` method:
1. is not called until the next `RenderThread::NotifyThread` call but needs to be called because there the terminal was updated (theoretical bug)
2. is called twice but needs to be called only once (verified bug)

## References

The bug was introduced by #3511.

## PR Checklist
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA

## Detailed Description of the Pull Request / Additional comments

### Before

#### First bug

In the original code, `_fNextFrameRequested` is set to `true` in render thread because `std::atomic_flag::test_and_set` is called.

This is wrong because it means that the render thread will render the terminal again even if there is no change after the last render.

I think the the goal was to load the boolean value for `_fNextFrameRequested` to check whether the thread should sleep or not.

The problem is that there is no method on `std::atomic_flag` to load its boolean value. I guess what happened was that the ""solution"" that was found was to use `std::atomic_flag::test_and_set`, followed by `std::atomic_flag::clear` if the value was `false` originally (if `std::atomic_flag::test_and_set` returned `false`) to restore the original value. I guess that this was believed to be equivalent to just a simple load, without doing any change to the value because it restores it at the end.

But it's not: this is dangerous because if the value is changed to `true` between the call to `std::atomic_flag::test_and_set` and the call to `std::atomic_flag::clear`, then the value ends up being `false` at the end which is wrong because we don't want to change it! And if that value ends up being `false`, it means that we miss a render because we will wait on `_hEvent` during the next iteration on the render thread.

Well actually, here, this not even a problem because when that code is ran, `_fPainting` is `false` which means that the other thread that modifies the `_fNextFrameRequested` value through `RenderThread::NotifyPaint` will not actually modify `_fNextFrameRequested` but rather call `SetEvent` (see the method's body).

But wait! There is a problem there too! `std::atomic_flag::test_and_set` is called for `_fPainting` which sets its value to `true`. It was probably unintended. So actually, the next call to `RenderThread::NotifyPaint` _will_ end up modifying `_fNextFrameRequested` which means that the data race I was talking about _might_ happen!

#### Second bug

Let's go back a little bit in my explanation. I was talking about the fact that:

> I guess what happened was that the ""solution"" that was found was to use `std::atomic_flag::test_and_set`, followed by `std::atomic_flag::clear` if the value was `false` originally (if `std::atomic_flag::test_and_set` returned `false`) to restore the original value.

The problem is that the reverse was done in the implementation: `std::atomic_flag::clear` is called if the value was _`true`_ originally!

So at this point, if the value of `_fNextFrameRequested` was `false`, then `std::atomic_flag::test_and_set` sets its is set to `true` and returns `false`. So for the next iteration, `_fNextFrameRequested` is `true` and the render thread will re-render but that was not needed.

### After

I used `std::atomic<bool>` instead of `std::atomic_flag` for `_fNextFrameRequested` and the other atomic field because it has a `load` and a `store` method so we can actually load the value without changing it.

I also replaced `_fPainting` by `_fWaiting`, which is basically the opposite of `_fPainting` but stays `true` for a little shorter than `_fPainting` would stay `false`. Indeed, I think that it makes more sense to directly wrap/scope _just_ the call to `WaitForSingleObject` by setting my atomic variable to `true` _just_ before and to `false` _just_ after because:
* It makes more sense while you're reading the code: it's easier IMO to understand what the purpose of `_fWaiting` is (that is, to call `SetEvent` from `RenderThread::NotifyPaint` if it's `true`).
* It's probably a tiny bit better for performance because it will become `true` for a little shorter which means less calls to `SetEvent`.

#### Warning

I don't really understand [std::memory_order](https://en.cppreference.com/w/cpp/atomic/memory_order)s.

So I used the default one (`std::memory_order_seq_cst`) which is the safest.

I believe that if no read or write are reordered in the two threads (`RenderThread::NotifyPaint` and `RenderThread::_ThreadProc`), then the code I wrote will behave correctly.

I think that `std::memory_order_seq_cst` enforces that so it should be fine, but I'm not sure.

## Validation Steps Performed

**I tried to reproduce the second bug that I described in the first section of this PR.**

I put a breakpoint on `RenderThread::NotifyPaint` and on `Renderer::PaintFrame`. Initially they are disabled. Then I ran the terminal in Release mode, waited a bit for the prompt to display and the cursor to start blinking. Then I enabled the breakpoints.

### Before

Each `RenderThread::NotifyPaint` is followed by 2 `Renderer::PaintFrame` calls. ❌ 

### After

Each `RenderThread::NotifyPaint` is followed by 1 `Renderer::PaintFrame` call. ✔️",,,,True,True,False,45,23,2,2,56923875+greg904@users.noreply.github.com,noreply@github.com,"02/27/2020, 18:29:21",2020,"02/27/2020, 18:29:21",2020,4,1,3,3.3,1.8,0
,"Accept String value for Keybindings's Keys  (#4714)

## Summary of the Pull Request

`keys` in `keybindings` now accepts a string value. This assumes that you wanted a keychord of size 1. The schema and user docs were properly updated too.

This means that the following keybinding is now accepted in your profiles.json:
```json
{ ""command"": ""copy"", ""keys"": ""ctrl+c"" }
```
as opposed to...
```json
{ ""command"": ""copy"", ""keys"": [ ""ctrl+c"" ] }
```

## PR Checklist
* [X] Closes #4713
* [X] CLA signed.
* [X] Tests added/passed
* [X] Requires documentation to be updated


## Validation Steps Performed
- [X] tested the new schema
- [X] added test",,,,False,False,False,114,60,5,5,carlos.zamora@microsoft.com,noreply@github.com,"02/27/2020, 20:53:31",2020,"02/27/2020, 20:53:31",2020,4,1,3,3.3,2.0,0
,"Define Automation Properties for TermControl (#4732)

Defines the following automation properties for a Terminal Control:
- [**Orientation**](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.automation.peers.automationpeer.getorientationcore):
  - The orientation of the control
  - None --> Vertical
- [**Name**](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.automation.peers.automationpeer.getnamecore):
  - The name as used by assistive technology and other Microsoft UI
    Automation clients. Generally presented by automation clients as the
    primary way to identify an element (along with the control type)
  - """" --> <profile name>
- [**HelpText**](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.automation.peers.automationpeer.gethelptextcore):
  - The help text. Generally presented by automation clients if
    requested by the user. This would be something that you would normally
    expect to appear from tooltips.
  - """" --> <tab title>
- [**LiveSetting**](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.automation.peers.automationpeer.getlivesettingcore):
  - reports the live setting notification behavior. A representation of
    how assertive this control should be when content changes.
  - none --> Polite

## Detailed Description of the Pull Request / Additional comments
ProfileName had to be added to the TerminalSettings (IControlSettings)
to pass that information along to the automation peer. In the rare event
that somebody purposefully decided to make their ProfileName empty, we
fallback to the tab title.


## Validation Steps Performed
Verified using Accessibility Insights and inspect.exe

This is are some examples of the information a general user can expect
to receive about a Terminal Control.

- Type: Terminal Control
- Name: Command Prompt
- Help Text (if requested): Command Prompt - ping bing.com

- Type: Terminal Control
- Name: Ubuntu
- Help Text (if requested): cazamor@PC-cazamor:/mnt/c/Users/cazamor$

Note, it is generally read by an automation client as follows:
""<type>, <name>""

References #2099 - Automation Properties for TerminalControl, Search Box
References #2142 - Localization

Closes #2142",,,,False,False,False,166,69,11,11,carlos.zamora@microsoft.com,noreply@github.com,"02/28/2020, 00:37:56",2020,"02/28/2020, 00:37:56",2020,1,1,3,3.5,3.5,0
,"Move rect expansion to textbuffer; refactor selection code (#4560)

- When performing chunk selection, the expansion now occurs at the time
  of the selection, not the rendering of the selection
- `GetSelectionRects()` was moved to the `TextBuffer` and is now shared
  between ConHost and Windows Terminal
- Some of the selection variables were renamed for clarity
- Selection COORDs are now in the Text Buffer coordinate space
- Fixes an issue with Shift+Click after performing a Multi-Click
  Selection

## References
This also contributes to...
- #4509: UIA Box Selection
- #2447: UIA Signaling for Selection
- #1354: UIA support for Wide Glyphs

Now that the expansion occurs at before render-time, the selection
anchors are an accurate representation of what is selected. We just need
to move `GetText` to the `TextBuffer`. Then we can have those three
issues just rely on code from the text buffer. This also means ConHost
gets some of this stuff for free 😀

### TextBuffer
- `GetTextRects` is the abstracted form of `GetSelectionRects`
- `_ExpandTextRow` is still needed to handle wide glyphs properly

### Terminal
- Rename...
    - `_boxSelection` --> `_blockSelection` for consistency with ConHost
    - `_selectionAnchor` --> `_selectionStart` for consistency with UIA
    - `_endSelectionPosition` --> `_selectionEnd` for consistency with
      UIA
- Selection anchors are in Text Buffer coordinates now
- Really rely on `SetSelectionEnd` to accomplish appropriate chunk
  selection and shift+click actions

## Validation Steps Performed
- Shift+Click
- Multi-Click --> Shift+Click
- Chunk Selection at...
    - top of buffer
    - bottom of buffer
    - random region in scrollback

Closes #4465
Closes #4547",,,,True,False,True,394,528,18,18,carlos.zamora@microsoft.com,noreply@github.com,"02/28/2020, 00:42:26",2020,"02/28/2020, 00:42:26",2020,1,1,3,2.7,4.8,0
,"Replace TSFInputControl with a xaml file (#4743)

This pull request is like #4729 but for TSFInputControl.",,,,False,False,False,34,46,4,4,duhowett@microsoft.com,noreply@github.com,"02/28/2020, 19:32:19",2020,"02/28/2020, 19:32:19",2020,4,1,3,2.1,1.5,0
,"fix mouse events in the wpf control (#4720)

PR #4548 inadvertantly broke mouse button input in the WPF control. This happened due to the extra layer of HWND indirection. The fix is to move the mouse button handling down into the native control where the window messages are now being sent.",,,,True,True,False,220,59,3,3,zoey@dos.cafe,noreply@github.com,"02/28/2020, 22:46:35",2020,"02/28/2020, 22:46:35",2020,4,1,3,3.9,3.0,0
,doc: add a tip about opening terminal in current directory (#4658),,,,False,False,False,2,1,1,1,prajwal.ady@gmail.com,noreply@github.com,"02/28/2020, 23:40:02",2020,"02/28/2020, 23:40:02",2020,4,0,3,3.3,1.0,0
,"Improve glyph scaling correction (#4747)

## Summary of the Pull Request
- Improves the correction of the scaling and spacing that is applied to
  glyphs if they are too large or too small for the number of columns that
  the text buffer is expecting

## References
- Supersedes #4438 
Co-authored-by: Mili (Yi) Zhang <milizhang@gmail.com>

- Related to #4704 (#4731)

## PR Checklist
* [x] Closes #696 
* [x] Closes #4375 
* [x] Closes #4708 
* [x] Closes a crash that @DHowett-MSFT complained about with
  `""x"" * ($Host.UI.RawUI.BufferSize.Width - 1) + ""`u{241b}""`
* [x] Eliminates an exception getting thrown with the U+1F3E0 emoji in
  `_CorrectGlyphRun`
* [x] Corrects several graphical issues that occurred after #4731 was
  merged to master (weird repeats and splits of runs)
* [x] I work here.
* [x] Tested manually versus given scenarios.
* [x] Documentation written into comments in the code.
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- The `_CorrectGlyphRun` function now walks through and uses the
  `_glyphClusters` map to determine the text span and glyph span for each
  cluster so it can be considered as a single unit for scaling.
- The total number of columns expected across the entire cluster
  text/glyph unit is considered for the available spacing for drawing
- The total glyph advances are summed to see how much space they will
  take
- If more space than necessary to draw, all glyphs in the cluster are
  offset into the center and the extra space is padded onto the advance of
  the last glyph in the range.
- If less space than necessary to draw, the entire cluster is marked for
  shrinking as a single unit by providing the initial text index and
  length (that is back-mapped out of the glyph run) up to the parent
  function so it can use the `_SetCurrentRun` and `_SplitCurrentRun`
  existing functions (which operate on text) to split the run into pieces
  and only scale the one glyph cluster, not things next to it as well.
- The scale factor chosen for shrinking is now based on the proportion
  of the advances instead of going through some font math wizardry
- The parent that calls the run splitting functions now checks to not
  attempt to split off text after the cluster if it's already at the end.
  This was @DHowett-MSFT's crash.
- The split run function has been corrected to fix the `glyphStart`
  position of the back half (it failed to `+=` instead of `=` which
  resulted in duplicated text, sometimes).
- Surrogate pair emoji were not allocating an appropriate number of
  `_textClusterColumns`. The constructor has been updated such that the
  trailing half of surrogate pairs gets a 0 column width (as the lead is
  marked appropriately by the `GetColumns()` function). This was the
  exception thrown.
- The `_glyphScaleCorrections` array stored up over the calls to
  `_CorrectGlyphRun` now uses a struct `ScaleCorrection` as we're up to 3
  values.
- The `ScaleCorrection` values are named to clearly indicate they're in
  relation to the original text span, not the glyph spans.
- The values that are used to construct `ScaleCorrection`s within
  `_CorrectGlyphRun` have been double checked and corrected to not
  accidentally use glyph index/counts when text index/counts are what's
  required.

## Validation Steps Performed
- Tested the utf82.txt file from one of the linked bugs. Looked
  specifically at Burmese through Thai to ensure restoration (for the most
  part) of the behavior
- Ensured that U+1f3e0 emoji (🏠) continues to draw correctly
- Checked Fixedsys Excelsior font to ensure it's not shrinking the line
  with its ligatures
- Checked ligatureness of Cascadia Code font 
- Checked combining characters U+0300-U+0304 with a capital A",,,,True,False,False,276,54,3,3,miniksa@microsoft.com,noreply@github.com,"03/02/2020, 19:21:07",2020,"03/02/2020, 19:21:07",2020,4,3,3,4.3,3.0,0
,"clear selection on viewport/font resize (#4777)

## Summary of the Pull Request
Match conhost behavior and clear selection on viewport/font resize.

## PR Checklist
* [X] Closes #1165 

## Validation Steps Performed
Retried attached bug repro steps",,,,True,True,False,2,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"03/02/2020, 20:45:31",2020,"03/02/2020, 20:45:31",2020,4,1,3,5.0,1.2,0
,"Do what the comment actually says and only insert 0s if we were given more text than the column value we were also given. (#4781)

## Summary of the Pull Request
Adjusts column padding code in `CustomTextLayout` to only pad out for surrogate pairs, not anything that reports two columns.

## References
- See also #4747

## PR Checklist
* [x] Closes #4780
* [x] I work here.
* [x] Manual tests.
* [x] No doc, this fixes code to match comment. Oops.
* [x] Am core contributor. Also discussed with @leonMSFT. 

## Detailed Description of the Pull Request / Additional comments
For surrogate pairs like high Unicode emoji, we receive two wchar_ts but only one column count (which is usually 2 because emoji are usually inscribed in the full-width squares.) To compensate for this, I added in a little padding function at the top of the `CustomTextLayout` construction that adds a column of 0 aligned with the second half of a surrogate pair so the text-to-glyph mapping lines up correctly.

Unfortunately, I made a mistake while either responding to PR feedback in #4747 or in the first place and I made it pad out extra 0 columns based on the FIRST column count, not based on whether or not there is a trailing surrogate pair. The correct thing to do is to pad it out based on the LENGTH of text associated with the given column count. This means that full width characters which can be represented in one wchar_t, like those coming from the IME in most cases (U+5C41 for example) will have a column count of 2. This is perfectly correct for mapping text-to-glyphs and doesn't need a 0 added after it. A house emoji (U+1F3E0) comes in as two wchar_ts (0xD83C 0xDFE0) with the column count of 2. To ensure that the arrays are aligned, the 2 matches up with the 0xD83C but the 0xDFE0 needs a 0 on it so it will be skipped over. (Don't worry, because it's a surrogate, it's naturally consumed correctly by the glyph mapper.)

The effect was that every OTHER character inserted by the IME was scaled to 0 size (as an advance of 0 was expected for 0 columns).
The fix restores it so those characters don't have an associated count and aren't scaled.

## Validation Steps Performed
- Opened it up
- Put in the house emoji like #4747 (U+1f3e0)
- Put in some characters with simplified Chinese IME (fixed now)
- Put in the utf83.txt sample text used in #4747",,,,True,False,False,1,1,1,1,miniksa@microsoft.com,noreply@github.com,"03/03/2020, 00:29:38",2020,"03/03/2020, 00:29:38",2020,1,3,3,2.5,1.2,0
,"Fix JSON syntax errors in UsingJsonSettings.md (#4784)

Fixes #4783.",,,,True,False,False,6,6,1,1,45581301+kevinaireland@users.noreply.github.com,noreply@github.com,"03/03/2020, 03:44:38",2020,"03/03/2020, 03:44:38",2020,1,0,3,2.5,1.2,0
,"ensure u8u16 handles lead & continuation bytes in separate txns (#4798)

- don't decrement backIter ahead of the string begin
- ensure partial multibyte characters are still captured correctly if
  the state class gets them byte by byte
- while we're here, switch to chromium math

Closes #4791
Closes #4290",,,,False,False,False,41,18,2,2,duhowett@microsoft.com,noreply@github.com,"03/04/2020, 19:15:35",2020,"03/04/2020, 19:15:35",2020,4,1,3,3.5,1.5,0
,"AzCon: improve input, usability, reliability (4 commits) (#4756)

* Azure: rewrite user input handler

This commit replaces the AzureConnection's input handler with one that
acts more like ""getline()"". Instead of the Read thread setting a state
and WriteInput filling in the right member variable, the reader blocks
on the user's input and receives it in an optional<string>.

This moves the input number parsing and error case handling closer to
the point where those inputs are used, as opposed to where they're
collected.

It also switches our input to be ""line-based"", which is a huge boon for
typing tenant numbers >9. This fixes #3233. A simple line editor
(supporting only backspace and CR) is included.

It also enables echo on user input, and prints it in a nice pretty green
color.

It also enables input queueing: if the user types anything before the
connection is established, it'll be sent once it is.

Fixes #3233.

* Azure: display the user's options and additional information in color

This commit colorizes parts of the AzCon's strings that include ""user
options"" -- things the user can type -- in yellow. This is to help with
accessibility.

The implementation here is based on a discussion with the team.
Alternative options for coloration were investigated, such as:

* Embedding escape sequences in the resource file.
  This would have been confusing for translators.
  The RESW file format doesn't support &#x1B; escapes, so we would need
  some magic post-processing.
* Embedding ""markup"" in the resource file (like #{93m}, ...)
  This still would have been annoying for translators.

We settled on an implementation that takes resource names, colorizes
them, and string-formats them into other resources.

* Azure: follow the user's shell choice from the online portal

Fixes #2266.

* Azure: remove all credentials instead of just the first one",,,,True,False,False,234,191,3,3,duhowett@microsoft.com,noreply@github.com,"03/04/2020, 19:30:20",2020,"03/04/2020, 19:30:20",2020,4,1,3,3.2,3.0,0
,"Make Korean IME input more consistent (#4796)

## Summary of the Pull Request
Korean IME was not working correctly due to way we were clearing the input buffer inside of `TSFInputControl`. We wanted to clear our input buffer and tell TSF to clear its input buffer as well when we receive a `CompositionCompleted` event. This works fine in some IME languages such as Chinese and Japanese. However, Korean IME composes characters differently in such a way where we can't tell TSF to clear their buffer during a `CompositionCompleted` event because it would clear the character that triggered the `CompositionCompleted` event in the first place.

The solution in this PR is to keep our `_inputBuffer` intact until the user presses <kbd>Enter</kbd> or <kbd>Esc</kbd>, in which case we clear our buffer and the TSF buffer. I've chosen these two keys because it seems to make sense to clear the buffer after text is sent to the terminal with <kbd>Enter</kbd>, and <kbd>Esc</kbd> usually means to cancel a current composition anyway.

This means we need to keep track of our last known ""Composition Start Point"", which is represented by `_activeTextStart`. Whenever we complete a composition, we'll send the portion of the input buffer between `_activeTextStart` and the end of the input buffer to the terminal. Then, we'll update `_activeTextStart` to be the end of the input buffer so that the next time we send text to the terminal, we'll only send the portion of our buffer that's ""active"".

## PR Checklist
* [x] Closes #4226
* [x] CLA signed
* [x] Tests added/passed

## Validation Steps Performed
Manual testing with Chinese, Japanese, and Korean IME.",,,,False,False,False,50,26,4,4,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/04/2020, 20:01:01",2020,"03/04/2020, 20:01:01",2020,4,1,3,3.3,1.5,0
,"Improve Word Navigation/Selection Performance (#4797)

## Summary of the Pull Request
1) Improves the performance of word-recognition operations such as word
   navigation in UIA and selection.

2) Fixes a bug where attempting to find the next word in UIA, when none
   exists, would hang

3) TraceLogging code only runs when somebody is listening

## Detailed Description of the Pull Request / Additional comments
- The concept of a delimiter class got moved to the CharRow.
- The buffer iterator used to save a lot more information than we needed
- I missed updating a tracing function after making GetSelection return
  one text range. That is fixed now.


## Validation Steps Performed
Performed Word Navigation under Narrator and NVDA.
NOTE: The release build should be used when testing to optimize
performance

Closes #4703",,,,True,False,False,476,390,8,8,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/04/2020, 23:10:10",2020,"03/04/2020, 23:10:10",2020,4,1,3,3.2,4.2,0
,"doc: update CODE_OF_CONDUCT.md (#4816)

This commit updates the COC to match current OSS team template",,,,False,False,False,7,6,1,1,duhowett@microsoft.com,noreply@github.com,"03/05/2020, 18:18:36",2020,"03/05/2020, 18:18:36",2020,4,1,3,2.7,1.0,0
,"Tunnel F7 keypresses directly into special handlers in TermControl (#4807)

The Xaml input stack doesn't allow an application to suppress the ""caret
browsing"" dialog experience triggered when you press F7.

The official recommendation from the Xaml team is to catch F7 before we
hand it off.

This commit introduces a special F7 handler and an ad-hoc implementation of event bubbling.
Runtime classes implementing a custom IF7Listener interface are
considered during a modified focus parent walk to determine who can
handle F7 specifically.

If the recipient control handles F7, we suppress the message completely.

This event bubbler has some minor issues -- the search box will not be
able to receive F7 because its parent control implements the handler.
Since search is already mostly a text box, it doesn't _need_ special
caret browsing functionality as far as I can tell.

TermControl implements its OnF7Pressed handler by synthesizing a
keybindings event and an event to feed into Terminal Core directly.

It's not possible to create a synthetic KeyPressRoutedEvent; if it were,
I would have just popped one into the traditional input queue. :)

Fixes #638.",,,,True,False,False,133,2,11,11,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/05/2020, 20:35:46",2020,"03/05/2020, 20:35:46",2020,4,1,3,4.9,3.6,0
,"Add warning messages for bad keybindings (#4746)

## Summary of the Pull Request

Adds warning messages for a pair of keybindings-related scenarios. This covers the following two bugs:
* #4239 - If the user has supplied more than one key chord in their `""keys""` array.
* #3522 - If a keybinding has a _required_ argument, then we'll display a message to the user
  - currently, the only required parameter is the `direction` parameter for both `resizePane` and `moveFocus`

## References

When we get to #1334, we'll want to remove the `TooManyKeysForChord` warning.

## PR Checklist
* [x] Closes #4239
* [x] Closes #3522
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

![image](https://user-images.githubusercontent.com/18356694/75593132-f18ec700-5a49-11ea-9d26-6acd0d28b0b7.png)


## Validation Steps Performed
Tested manually, added tests.",,,,True,True,False,204,46,11,11,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/05/2020, 21:06:58",2020,"03/05/2020, 21:06:58",2020,4,1,3,4.1,4.2,0
,"Apply dark window borders to NonClientIslandWindow using ThemeHelpers (#4817)

This solution was vetted by the DWM team.

Fixes #3425.",,,,True,False,False,9,2,3,3,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/05/2020, 21:28:55",2020,"03/05/2020, 21:28:55",2020,4,1,3,4.1,1.2,0
,"Polish AutomationProperties and UIA Tree Navigation (#4805)

AutomationProperties of interest in this PR include...
- Name: the name of a UI element (generally used as the main identifier
  for it)
- HelpText: an additional description for a more complex UI element
- AccessibilityView[1]
  - Raw: hide from the UIA tree. Only navigate to this if you know what
    you're doing
  - Control: a control without any content in it. Basically, a point at
    which the user can make a decision as to how to navigate the tree or
    invoke an action.
  - Content: a control that also has content to present to the user.

I set a few more AutomationProperties throughout Windows Terminal...
- MinMaxClose Control: hidden (we can/should rely on the true buttons
  that we are hiding)
- SplitButton: Name and Help text (currently ignored due to #4804, but
  having it in the resource file won't cause any problems)
- SearchBox: added a more specific name to the close button
- BackgroundImage: hide it

## References
A few additional work items have been created for tracking...
- SplitButton: https://github.com/microsoft/terminal/issues/4804

## PR Checklist
* [X] Closes #2099 
* [X] Closes #2102 

## Validation Steps Performed
Verified using Accessibility Insights and Inspect.exe

[1] https://docs.microsoft.com/en-us/windows/win32/winauto/uiauto-treeoverview",,,,True,True,False,73,37,8,7,48340428+msftbot[bot]@users.noreply.github.com,noreply@github.com,"03/05/2020, 22:32:46",2020,"03/05/2020, 22:32:46",2020,4,1,3,3.3,3.0,0
,"Avoid bailing on arg-free bindings (#4821)

Fixes #4820",,,,True,False,False,6,5,1,1,duhowett@microsoft.com,noreply@github.com,"03/06/2020, 16:40:14",2020,"03/06/2020, 16:40:14",2020,3,1,3,2.7,1.2,0
,"Resize the drag bar on `WM_DISPLAYCHANGE` (#4829)

## Summary of the Pull Request

Pretty straightforward. When we get a `WM_DISPLAYCHANGE`, that means the
display's DPI changed. When that happens, resize the drag bar, so that
it'll reflect the new scaling.

Unblocks #4778 
Closes #4166

## Validation
Man I've changed the DPI of my displays so many times in the last 30
minutes. I dragged the window across a bunch of DPI boundaries too.",,,,False,False,False,5,0,1,1,migrie@microsoft.com,noreply@github.com,"03/06/2020, 22:14:35",2020,"03/06/2020, 22:14:35",2020,4,3,3,5.0,1.0,0
,"Add a splitPane option to duplicate current profile (#4683)

This change adds the ability to configure a pane to split by duplicating the current profile 

Closes #1756",,,,False,False,False,48,4,5,5,susarla.surya.prakash.1998@gmail.com,noreply@github.com,"03/06/2020, 23:15:45",2020,"03/06/2020, 23:15:45",2020,4,0,3,4.6,1.5,0
,"Fix a rampant crash in `TSFInputControl` when opening new tabs (#4830)

## Summary of the Pull Request

We're deref'ing a null `_terminal`. Don't do that. This is a _okay_ fix, mostly to stem the bleeding. @DHowett-MSFT's got a mind for a real fix to #4166, but this isn't it.

## PR Checklist
* [x] related to #4166
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,True,False,False,17,7,1,1,migrie@microsoft.com,noreply@github.com,"03/07/2020, 03:20:04",2020,"03/07/2020, 03:20:04",2020,1,3,3,3.5,1.2,0
,"translate German message into English (#4838)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Translate automatically generated message text from German into English.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#4799

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
@miniksa mentioned in https://github.com/microsoft/terminal/pull/4799#discussion_r389166916
> Actually..... we would consider that block to be wrong. It should have had the English error text there. [...] It's just our practice to have everything be in English as that's our company's working language. [...]

The translation is based on the message text found in the official docs: https://docs.microsoft.com/en-us/nuget/Consume-Packages/Package-restore-troubleshooting

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,True,False,1,1,1,1,neffets720126@web.de,noreply@github.com,"03/08/2020, 20:13:22",2020,"03/08/2020, 20:13:22",2020,4,0,3,2.5,1.2,0
,"Abstract GetTextForClipboard() for UIA (#4578)

## Summary of the Pull Request
`GetTextForClipboard` already exists in the TextBuffer. It makes sense to use that for UIA as well. This changes the behavior or `GetText()` such that it does not remove leading/trailing whitespace anymore. That is more of an expected behavior.

## References
This also contributes to...
- #4509: UIA Box Selection
- #2447: UIA Signaling for Selection
- #1354: UIA support for Wide Glyphs
Now that the expansion occurs at before render-time, the selection anchors are an accurate representation of what is selected. We just need to move GetText to the TextBuffer. Then we can have those three issues just rely on code from the text buffer. This also means ConHost gets some of this stuff for free 😀

## Detailed Description of the Pull Request / Additional comments
- `TextBuffer::GetTextForClipboard()` --> `GetText()`
- `TextBuffer::GetText()` no longer requires GetForegroundColor/GetBackgroundColor. If either of these are not defined, we return a `TextAndColor` with only the `text` field populated.
- renamed a few parameters for copying text to the clipboard for clarity
- Updated `UiaTextRange::GetText()` to use `TextBuffer::GetText()`

## Validation Steps Performed
Manual tests for UIA using accessibility insights and Windows Terminal's copy action (w/ and w/out shift)

Added tests as well.",,,,False,False,False,353,166,13,13,carlos.zamora@microsoft.com,noreply@github.com,"03/09/2020, 15:17:34",2020,"03/09/2020, 15:17:34",2020,3,1,3,3.4,4.8,0
,"Send TSF input buffer starting from _activeTextStart to the end of the buffer (#4836)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Emoji composition was only being shown one letter at a time. This is because of the way I expected `CoreTextTextUpdatingEventArgs.Range` to be provided to TSFInputControl during composition (for Chinese/Japanese IME). Emoji IME composition gives the `StartCaretPosition` as the same as `EndCaretPosition`, unlike how for Chinese/Japanese IME, `StartCaretPosition` is usually the start of the composition and `EndCaretPosition` is the latest character in the composition. The solution is to change the `_inputBuffer.substr()` call to simply grab all of the buffer starting from `_activeTextStart`. This way I can ensure that I grab all of the ""active text"", instead of trusting the given `args.Range` to tell me the active text.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4828
* [x] CLA signed.
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Chinese, Japanese, Korean, Emoji composition performed. Emoji selection through pointer also performed.",,,,True,False,False,4,4,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/09/2020, 15:28:57",2020,"03/09/2020, 15:28:57",2020,3,1,3,2.5,1.2,0
,"Update the dragbar when the titlebar content size changes (#4845)

## Summary of the Pull Request

Add a `SizeChanged` handler to the titlebar content UI element. It's possible that this element's size will change after the dragbar's. When that happens, the drag bar won't send another `SizeChanged` event, because the dragbar's _size_ didn't change, only it's position.

## References

We originally duped this issue to #4166, but after #4829 fixed that issue, this one persisted. They're all related, and _look_ like dupes, but they weren't.

## PR Checklist
* [x] Closes #4288
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed

I had a solid 100% repro that doesn't repro anymore.

I've maximized, restored, resized, and generally played with the window a bunch.",,,,True,False,False,10,0,1,1,migrie@microsoft.com,noreply@github.com,"03/09/2020, 17:54:33",2020,"03/09/2020, 17:54:33",2020,3,3,3,5.0,1.2,0
,"Merged PR 4316726: [Git2Git] Merged PR 4314209: Fix some TVS warnings in Console UIA

[Git2Git] Merged PR 4314209: Fix some TVS warnings in Console UIA

1. We were doing `FAILED(X || FAILED(Y))` instead of `FAILED(X) || FAILED(Y)`.
   Fixes MSFT:24904151. Fixes MSFT:24904224.
2. You cannot SAL-annotate a `gsl::not_null`.
   Fixes MSFT:24904221

Related work items: #24904151, #24904221, #24904224 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 46167d4415c888d4d6a52ea7d3e3cc57a0f5a78d

Related work items: #24904151, #24904221, #24904224",,,,True,True,False,18,18,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"03/09/2020, 18:09:25",2020,"03/09/2020, 18:09:25",2020,4,3,1,2.5,1.2,0
,"Merged PR 4405977: tell git2git to ignore some cascadia things

This will clean up our OS side.

Related work items: #25505618",,,,False,False,False,5,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"03/09/2020, 18:15:10",2020,"03/09/2020, 18:15:10",2020,4,1,1,4.3,1.0,0
,"What I really needed was a lunch break

  checkpointing this since it's so close. It works for everything but fullscreen on my primary, 125% display which has the taskbar on top, and autohides. Every other case works fine.",,,,False,False,False,65,3,1,1,migrie@microsoft.com,migrie@microsoft.com,"03/09/2020, 20:37:59",2020,"03/09/2020, 20:37:59",2020,4,3,3,4.8,1.5,0
,"Revert ""What I really needed was a lunch break""

This reverts commit 469fdd0faa0df9a951d3b2b897b0aea3c627ffbb.",,,,False,False,False,3,65,1,1,migrie@microsoft.com,migrie@microsoft.com,"03/09/2020, 20:48:29",2020,"03/09/2020, 20:48:29",2020,4,3,3,0.2,1.5,0
,doc: update roadmap with proper v1 release date (#4860),,,,False,False,False,1,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"03/10/2020, 00:04:54",2020,"03/10/2020, 00:04:54",2020,1,1,3,2.5,1.0,0
,"add til::color, a universal-converting color type (#4108)

til::color will help us move away from COLORREF internally. It supports
conversion to/from COLORREF, and from all types of structs containing
members named R, G, B and A (or r, g, b, and a).

## Validation Steps Performed
Tests; run through profile/colorScheme deserialization with `til::color`
instead of `uint32_t` or `COLORREF`.",,,,False,False,False,230,0,7,7,duhowett@microsoft.com,noreply@github.com,"03/10/2020, 00:17:24",2020,"03/10/2020, 00:17:24",2020,1,1,3,5.0,3.0,0
,"Ignore right-click copy when copy on select is enabled (#4819)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Right clicking on a focused tab while Copy On Select is active currently copies any active selection. This is because `PointerReleasedHandler` doesn't check for the mouse button that was released. 
During a mouse button release, only the left mouse button release should be doing anything.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4740
* [x] CLA signed.
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
These are the scenarios I've tested. They're a combination of in focus/out of focus, Copy On Select on/off, left/right click pressed and their move and release variants.

From Out of Focus:
- Left Click = Focus
- Left Click Move = Focus + Selection
- Left Click Release
  - CoS on = Copy
  - CoS off = Nothing
- Shift Left Click = Focus
- Right Click 
  - Focus 
  - CoS on = Paste
  - CoS off = Copy if Active Selection, Paste if not.
- Right Click Move = Nothing
- Right Click Release = Nothing

From In Focus
- Left Click = Selection if CoS off
- Left Click Move = Selection
- Left Click Release
  - CoS on = Copy
  - CoS off = Nothing
- Shift Left Click = Set Selection Anchor
- Right Click 
  - CoS on = Paste
  - CoS off = Copy if Active Selection, Paste if not.
- Right Click Move = Nothing
- Right Click Release = Nothing",,,,True,False,False,37,42,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/10/2020, 14:59:16",2020,"03/10/2020, 14:59:16",2020,3,1,3,2.3,1.8,0
,"Reveal the taskbar when the user has the Terminal maximized or fullscreen (#4857)

## Summary of the Pull Request

When we are maximized or fullscreened, check for the presence of the taskbar in auto-hide mode. If the Terminal finds the taskbar on any side of the monitor, adjust our window rect by just a little bit, so that the taskbar can still be revealed by the user mousing over that edge.

## References

## PR Checklist
* [x] Closes #1438
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Note to future code archeologists:
This doesn't seem to work for fullscreen on the primary display. However, testing a bunch of other apps with fullscreen modes and an auto-hiding taskbar has shown that _none_ of them reveal the taskbar from fullscreen mode. This includes Edge, Firefox, Chrome, Sublime Text, Powerpoint - none seemed to support this. 

This does however work fine for maximized.

## Validation Steps Performed

I'm maximized and fullscreened the Terminal a lot in the last two days.",,,,False,False,False,77,12,1,1,migrie@microsoft.com,noreply@github.com,"03/10/2020, 15:37:49",2020,"03/10/2020, 15:37:49",2020,3,3,3,4.3,1.5,0
,"Show InputPanel on focus and pointer press (#4867)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
I originally thought that setting `TSFInputControl::_editContext.InputPaneDisplayPolicy` to be Automatic would allow the InputPanel to show and hide automatically when `TSFInputControl` gains and loses focus. It doesn't seem to behave that way, so we'll show the InputPanel manually. 

I'll show the panel during `PointerPressedHandler` and during `GotFocusHandler`. A user will have the on-screen keyboard pop up when getting focus, but if they close the keyboard, they can simply re-tap on the terminal to bring it back up.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #3639
* [x] CLA signed.
* [x] Tests added/passed

## Validation Steps Performed
Played on my surfaces book with the on screen keyboard by closing/tapping on the terminal and using the search box.",,,,True,False,False,11,3,3,3,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/10/2020, 17:55:57",2020,"03/10/2020, 17:55:57",2020,3,1,3,3.9,1.2,0
,"Suppress run breaking for abs. differences < 0.001 in advance (#4861)

With certain font faces at certain sizes, the advances seem to be
slightly more than the pixel grid; Cascadia Code at 13pt (though, 200%
scale) had an advance of 10.000001.

This commit makes it so that anything sub-1/100 of a cell won't make us
break up runs, because doing so results in suboptimal rendering.

Fixes #4806.",,,,True,False,False,6,2,1,1,duhowett@microsoft.com,noreply@github.com,"03/10/2020, 18:12:16",2020,"03/10/2020, 18:12:16",2020,4,1,3,3.7,1.2,0
,"Move dirty interface to N rectangles, not just one (#4854)

## Summary of the Pull Request
- Changes the `IRenderEngine` interface to return a vector of values instead of just a single one. Engines that want to report one still can. Engines that want to report multiple smaller ones will be able to do so going forward.

## PR Checklist
* [x] In support of differential rendering #778
* [x] I work here.
* [x] Manually tested it still works.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
- Some of my ideas for the `DxEngine` require the ability to specify multiple smaller rectangles instead of one giant one, specifically to mitigate the case where someone refreshes just one cell in two opposite corners of the display (which currently coalesces into refreshing the entire display.)
- This is pulled out into an individual PR to make it easier to review that concept changing.

## Validation Steps Performed
- Ran the Terminal",,,,False,False,False,96,76,15,15,miniksa@microsoft.com,noreply@github.com,"03/10/2020, 20:31:46",2020,"03/10/2020, 20:31:46",2020,4,3,3,2.8,3.0,0
,"til::size (#4850)

## Summary of the Pull Request
Introduces convenience type `til::size` which automatically implements our best practices for size-related types and provides automatic conversions in/out of the relevant types.

## PR Checklist
* [x] In support of Differental Rendering #778
* [X] I work here.
* [x] Tests added/passed
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- Automatically converts in from anything with a X/Y (console `COORD`) or cx/cy (Win32 `SIZE`)
- Automatically converts out to `COORD`, `SIZE`, or `D2D1_SIZE_F`.
- Constructs from bare integers written into source file
- Default constructs to empty
- Uses Chromium Math for all basic math operations (+, -, *, /)
- Provides equality tests
- Adds initial proposal for division-to-ceiling (round up division) that attempts to `ceil` without any floating point math.
- Accessors for height/width
- Type converting accessors (that use safe conversions and throw) for height/width
- Convenience function for area calculation (as that's common with type) and uses safe math to do it.
- TAEF/WEX Output and Comparators so they will print very nicely with `VERIFY` and `Log` macros in our testing suite.

## Validation Steps Performed
- See automated tests of functionality.",,,,False,False,False,791,2,8,8,miniksa@microsoft.com,noreply@github.com,"03/10/2020, 20:51:26",2020,"03/10/2020, 20:51:26",2020,4,3,3,5.0,4.2,0
,"Don't let ConptyConnection be UAF (#4871)

I noticed a crash in debug builds when a connected application terminates;
we get its exit code, then we destruct, and the u16state is used after it's
destructed by us parsing the process's last words.

We should have been doing this all along.",,,,False,False,False,4,0,1,1,duhowett@microsoft.com,noreply@github.com,"03/10/2020, 21:04:40",2020,"03/10/2020, 21:04:40",2020,4,1,3,5.0,1.2,0
,"Enable Passthrough for VT Input Mode in ConPty (#4856)

This commit enables passthrough mode for VT Input Mode in ConPty. This
will be used to pass VT Input from Mouse Mode directly to the app on the
other side.

## References
#545 - VT Mouse Mode (Terminal)
#376 - VT Mouse Mode (ConPty)

## Detailed Description of the Pull Request / Additional comments

### ConHost
- Set the callback for the InputEngine.
- Retrieve `IsInVirtualTerminalInputMode` from the InputBuffer

### Adapter (Dispatch)
Retrieve `VTInputMode` setting from ConHost

### Parser
- Add a callback to passthrough unknown input sequences directly to the
  input queue.
- If we're in VTInputMode, use the callback

## Validation Steps Performed
Tests should still pass.",,,,False,False,False,203,10,12,12,carlos.zamora@microsoft.com,noreply@github.com,"03/10/2020, 22:07:14",2020,"03/10/2020, 22:07:14",2020,4,1,3,4.8,3.5,0
,"Prevent tab reordering while elevated (#4874)

There's a platform limitation that causes us to crash when we rearrange
tabs. Xaml tries to send a drag visual (to wit: a screenshot) to the
drag hosting process, but that process is running at a different IL than
us.

For now, we're disabling elevated drag.

Fixes #3581",,,,True,False,False,44,0,4,4,duhowett@microsoft.com,noreply@github.com,"03/11/2020, 15:52:09",2020,"03/11/2020, 15:52:09",2020,3,1,3,5.0,1.2,0
,"Make ctrl+shift+scroll toggle acrylic on/off at extrema (#4853)

If UseAcrylic is disabled, CTRL+SHIFT+SCROLL would enable it, without
having to change the setting in profile.json manually.

1. Set ""useAcrylic"" to false for the any profile in profile.json
2. Open terminal window for that profile.
3. CTRL+SHIFT+MouseScroll
   Acrylic background opacity should change according to mouse scroll

## PR Checklist
* [x] CLA signed.
* [x] Tested manually
* [x] Updated documentation

Closes #661",,,,False,False,False,16,1,2,2,42885985+abhijeetviswam@users.noreply.github.com,noreply@github.com,"03/11/2020, 17:48:58",2020,"03/11/2020, 17:48:58",2020,3,0,3,4.7,1.0,0
,"doc: remove unimplemented `-t` arg from `split-pane` (#4888)

Fixes #4878",,,,True,False,False,1,5,1,1,migrie@microsoft.com,noreply@github.com,"03/11/2020, 17:50:34",2020,"03/11/2020, 17:50:34",2020,3,3,3,0.8,1.2,0
,"Correct for the size of the tabs when calculating our initial window size (#4825)

## Summary of the Pull Request

This fixes our calculation for the initial size of the window. WE weren't accounting for the height of the tabs, so the `initialRows` was consistently wrong.

## PR Checklist
* [x] Closes #2061
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

For the tabs below the titlebar case, there's 6px (unscaled) of space that I cannot account for. I seriously have no idea where it's coming from. When we end up creating the first `TermControl` after startup, there's an inexplicable `6*scale` difference between the height of the `tabContent` and the `SwapChainPanel`'s size.

## Validation Steps Performed

Checked all six of the following cases:
* 1.0 DPI scaling, Tabs in Titlebar
* 1.25 DPI scaling, Tabs in Titlebar
* 1.0 DPI scaling, Tabs NOT in Titlebar, always show tabs
* 1.0 DPI scaling, Tabs NOT in Titlebar, DON'T always show tabs
* 1.25 DPI scaling, Tabs NOT in Titlebar, always show tabs
* 1.25 DPI scaling, Tabs NOT in Titlebar, DON'T always show tabs",,,,True,False,False,37,2,2,2,migrie@microsoft.com,noreply@github.com,"03/11/2020, 20:29:36",2020,"03/11/2020, 20:29:36",2020,4,3,3,4.7,1.2,0
,"Use estimated formatted lengths to optimize performance of VT rendering (#4890)

## Summary of the Pull Request
Allows VT engine methods that print formatted strings (cursor movements, color changes, etc.) to provide a guess at the max buffer size required eliminating the double-call for formatting in the common case.

## PR Checklist
* [x] Found while working on #778
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [x] Am core contributor. 

## Detailed Description of the Pull Request / Additional comments
- The most common case for VT rendering is formatting a few numbers into a sequence. For the most part, we can already tell the maximum length that the string could be based on the number of substitutions and the size of the parameters.
- The existing formatting method would always double-call. It would first call for how long the string was going to be post-formatting, allocate that memory, then call again and fill it up. This cost two full times of running through the string to find a length we probably already knew for the most part.
- Now if a size is provided, we allocate that first and attempt the ""second pass"" of formatting directly into the buffer. This saves the count step in the common case.
- If this fails, we fall back and do the two-pass method (which theoretically means the bad case is now 3 passes.)
- The next biggest waste of time in this method was allocating and freeing strings for every format pass. Due to the nature of the VT renderer, many things need to be formatted this way. I've now instead moved the format method to hold a static string that really only grows over the course of the session for all of these format operations. I expect a majority of the time, it will only be consuming approximately 5-15 length of a std::string of memory space. I cannot currently see a circumstance where it would use more than that, but I'm consciously trading memory usage when running as a PTY for overall runtime performance here.

## Validation Steps Performed
- Ran the thing manually and checked it out with wsl and cmatrix and Powershell and such attached to Terminal
- Wrote and ran automated tests on formatting method",,,,True,True,False,77,12,4,4,miniksa@microsoft.com,noreply@github.com,"03/11/2020, 22:12:25",2020,"03/11/2020, 22:12:25",2020,4,3,3,4.5,1.8,0
,"vt: make sure to Flush the entire parsed sequence (#4870)

When we had to flush unknown sequences to the terminal, we were only
taking the _most recent run_ with us; therefore, if we received `\e[?12`
and `34h` in separate packets we would _only_ send out `34h`.

This change fixes that issue by ensuring that we cache partial bits of
sequences we haven't yet completed, just in case we need to flush them.

Fixes #3080.
Fixes #3081.",,,,True,False,False,97,8,3,3,duhowett@microsoft.com,noreply@github.com,"03/11/2020, 23:44:52",2020,"03/11/2020, 23:44:52",2020,4,1,3,4.6,2.4,0
,"Move MouseInput from TermAdapter to TermInput (#4848)

## Summary of the Pull Request
Move the contents and functionality of MouseInput from TerminalAdapter
to TerminalInput.

## References
#545 - VT Mouse Mode (Terminal)
#376 - VT Mouse Mode (ConPty)

## Detailed Description of the Pull Request / Additional comments
Pretty straightforward. The MouseInput class was a bit large though so I
split it up into a few files. This should make TerminalInput a bit
easier to manage.
- `mouseInputState`: enable some of the modes for mouse input. All saved
  to `_mouseInputState`.
- `mouseInput`: basically just `HandleMouse()` and any helper functions

## Validation Steps Performed
Tests should still pass.",,,,False,False,False,299,354,18,17,carlos.zamora@microsoft.com,noreply@github.com,"03/12/2020, 22:25:43",2020,"03/12/2020, 22:25:43",2020,4,1,3,2.4,4.0,0
,"When Conpty encounters an unknown string, flush immediately (#4896)

When ConPTY encounters a string we don't understand, immediately flush the frame.

## References

This PR supersedes #2665. This solution is much simpler than what was proposed in that PR. 
As mentioned in #2665: ""This might have some long-term consequences for #1173.""

## PR Checklist
* [x] Closes #2011
* [x] Closes #4106
* [x] I work here
* [x] Tests added/passed",,,,False,False,False,68,11,4,3,migrie@microsoft.com,noreply@github.com,"03/12/2020, 23:31:45",2020,"03/12/2020, 23:31:45",2020,4,3,3,4.3,1.5,0
,Invoke-CodeFormat on changes ingested from inbox,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"03/12/2020, 23:37:44",2020,"03/12/2020, 23:37:44",2020,4,1,1,2.5,1.0,0
,"til::point (#4897)

## Summary of the Pull Request
Introduces convenience type `til::point` which automatically implements our best practices for point-related types and provides automatic conversions in/out of the relevant types.

## PR Checklist
* [x] In support of Differential Rendering #778
* [X] I work here.
* [x] Tests added/passed
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- Automatically converts in from anything with a X/Y (console `COORD`) or x/y (Win32 `POINT`)
- Automatically converts out to `COORD`, `POINT`, or `D2D1_POINT_2F`.
- Constructs from bare integers written into source file
- Default constructs to empty
- Uses Chromium Math for all basic math operations (+, -, *, /)
- Provides equality tests
- Accessors for x/y
- Type converting accessors (that use safe conversions and throw) for x/y
- TAEF/WEX Output and Comparators so they will print very nicely with `VERIFY` and `Log` macros in our testing suite.
- A natvis

## Validation Steps Performed
- See automated tests of functionality.",,,,False,False,False,718,1,6,6,miniksa@microsoft.com,noreply@github.com,"03/13/2020, 00:04:43",2020,"03/13/2020, 00:04:43",2020,1,3,3,5.0,4.2,0
,"Add support for ""reflow""ing the Terminal buffer (#4741)

This PR adds support for ""Resize with Reflow"" to the Terminal. In
conhost, `ResizeWithReflow` is the function that's responsible for
reflowing wrapped lines of text as the buffer gets resized. Now that
#4415 has merged, we can also implement this in the Terminal. Now, when
the Terminal is resized, it will reflow the lines of it's buffer in the
same way that conhost does. This means, the terminal will no longer chop
off the ends of lines as the buffer is too small to represent them. 

As a happy side effect of this PR, it also fixed #3490. This was a bug
that plagued me during the investigation into this functionality. The
original #3490 PR, #4354, tried to fix this bug with some heavy conpty
changes. Turns out, that only made things worse, and far more
complicated. When I really got to thinking about it, I realized ""conhost
can handle this right, why can't the Terminal?"". Turns out, by adding
resize with reflow, I was also able to fix this at the same time.
Conhost does a little bit of math after reflowing to attempt to keep the
viewport in the same relative place after a reflow. By re-using that
logic in the Terminal, I was able to fix #3490.

I also included that big ole test from #3490, because everyone likes
adding 60 test cases in a PR.

## References
* #4200 - this scenario
* #405/#4415 - conpty emits wrapped lines, which was needed for this PR
* #4403 - delayed EOL wrapping via conpty, which was also needed for
  this
* #4354 - we don't speak of this PR anymore

## PR Checklist
* [x] Closes #1465
* [x] Closes #3490
* [x] Closes #4771
* [x] Tests added/passed

## EDIT: Changes to this PR on 5 March 2020

I learned more since my original version of this PR. I wrote that in
January, and despite my notes that say it was totally working, it
_really_ wasn't.

Part of the hard problem, as mentioned in #3490, is that the Terminal
might request a resize to (W, H-1), and while conpty is preparing that
frame, or before the terminal has received that frame, the Terminal
resizes to (W, H-2). Now, there aren't enough lines in the terminal
buffer to catch all the lines that conpty is about to emit. When that
happens, lines get duplicated in the buffer. From a UX perspective, this
certainly looks a lot worse than a couple lost lines. It looks like
utter chaos.

So I've introduced a new mode to conpty to try and counteract this
behavior. This behavior I'm calling ""quirky resize"". The **TL;DR** of
quirky resize mode is that conpty won't emit the entire buffer on a
resize, and will trust that the terminal is prepared to reflow it's
buffer on it's own.

This will enable the quirky resize behavior for applications that are
prepared for it. The ""quirky resize"" is ""don't `InvalidateAll` when the
terminal resizes"". This is added as a quirk as to not regress other
terminal applications that aren't prepared for this behavior
(gnome-terminal, conhost in particular). For those kinds of terminals,
when the buffer is resized, it's just going to lose lines. That's what
currently happens for them.  

When the quirk is enabled, conpty won't repaint the entire buffer. This
gets around the ""duplicated lines"" issue that requesting multiple
resizes in a row can cause. However, for these terminals that are
unprepared, the conpty cursor might end up in the wrong position after a
quirky resize.

The case in point is maximizing the terminal. For maximizing
(height->50) from a buffer that's 30 lines tall, with the cursor on
y=30, this is what happens: 

  * With the quirk disabled, conpty reprints the entire buffer. This is
    60 lines that get printed. This ends up blowing away about 20 lines
    of scrollback history, as the terminal app would have tried to keep
    the text pinned to the bottom of the window. The term. app moved the
    viewport up 20 lines, and then the 50 lines of conpty output (30
    lines of text, and 20 blank lines at the bottom) overwrote the lines
    from the scrollback. This is bad, but not immediately obvious, and
    is **what currently happens**. 


  * With the quirk enabled, conpty doesn't emit any lines, but the
    actual content of the window is still only in the top 30 lines.
    However, the terminal app has still moved 20 lines down from the
    scrollback back into the viewport. So the terminal's cursor is at
    y=50 now, but conpty's is at 30. This means that the terminal and
    conpty are out of sync, and there's not a good way of re-syncing
    these. It's very possible (trivial in `powershell`) that the new
    output will jump up to y=30 override the existing output in the
    terminal buffer. 

The Windows Terminal is already prepared for this quirky behavior, so it
doesn't keep the output at the bottom of the window. It shifts it's
viewport down to match what conpty things the buffer looks like.

What happens when we have passthrough mode and WT is like ""I would like
quirky resize""? I guess things will just work fine, cause there won't be
a buffer behind the passthrough app that the terminal cares about. Sure,
in the passthrough case the Terminal could _not_ quirky resize, but the
quirky resize won't be wrong.",,,,True,False,False,577,127,21,21,migrie@microsoft.com,noreply@github.com,"03/13/2020, 00:43:37",2020,"03/13/2020, 00:43:37",2020,1,3,3,4.1,4.8,0
,"Synthesize VT mouse events and add mouse support to Terminal (#4859)

## Summary of the Pull Request
Make TerminalControl synthesize mouse events and Terminal send them to
the TerminalInput's MouseInput module.

The implementation here takes significant inspiration from how we handle
KeyEvents.

## References
Closes #545 - VT Mouse Mode (Terminal)
References #376 - VT Mouse Mode (ConPty)

### TerminalControl
- `_TrySendMouseEvent` attempts to send a mouse event via TermInput.
  Similar to `_TrySendKeyEvent`
- Use the above function to try and send the mouse event _before_
  deciding to modify the selection

### TerminalApi
- Hookup (re)setting the various modes to handle VT Input
- Terminal is _always_ in VT Input mode (important for #4856)

### TerminalDispatch
- Hookup (re)setting the various modes to handle VT Input

### TerminalInput
- Convert the mouse input position from viewport position to buffer
  position
- Then send it over to the MouseInput in TerminalInput to actually do it
  (#4848)

## Validation Steps Performed
Tests should still pass.",,,,False,False,False,421,0,11,11,carlos.zamora@microsoft.com,noreply@github.com,"03/13/2020, 00:44:28",2020,"03/13/2020, 00:44:28",2020,1,1,3,5.0,3.5,0
,"Optimize rendering runs of spaces when there is no visual change (#4877)

cmatrix is somewhat of a pathological case for our infrastructure: it
prints out a bunch of green and white characters and then updates them a
million times a second.

It also maintains a column of space between every green character. When
it prints this column, it prints it in ""default"" or ""white"". This ends
up making runs of text that look like this:

(def: G=green B=bright white W=white *=matrix char  =space)

G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W
G W G W G W G W G W G W G W G W

As characters trickle in:

G*W G*W G*W G*W G*W G*W G*W B*W
G*W G*W G*W G*W G*W G*W G*W G W
G*W G*W G*W B*W G*W G*W G*W G W
G*W B*W G*W G W G*W G*W G*W G*W
G*W G W G*W G W G*W B*W G*W G*W
B*W G W G*W G W G*W G W B*W G*W
G W G W G*W G W G*W G W G W B*W
G W G W B*W G W G*W G W G W G W

Every one of those color transitions causes us to break up the run of
text and start rendering it again. This impacts GDI, Direct2D *and*
ConPTY. In the example above, there are 120 runs.

The problem is, printing a space doesn't **use** the foreground color!

This commit introduces an optimization. When we're about to break a text
cluster because its attributes changed, we make sure that it's not just
filled with spaces and doesn't differ in any visually-meaningful way
(like underline or strikethrough, considering global invert state).

This lets us optimize both the rendering _and_ the PTY output to look
like this:

G*   *   *   *   *   *   *  B*G
G*   *   *   *   *   *   *
G*   *   *  B*G  *   *   *
G*  B*G  *       *   *   *   *
G*       *       *  B*G  *   *
B*G      *       *      B*G  *
G        *       *          B*G
G       B*G      *

Text will be printed at best line-by-line and at worst only when the
visible properties of the screen actually change. In the example
above, there are only 21 runs.

This speeds up cmatrix remarkably.

Refs #1064",,,,True,True,False,73,8,8,8,duhowett@microsoft.com,noreply@github.com,"03/13/2020, 00:54:43",2020,"03/13/2020, 00:54:43",2020,1,1,3,4.6,2.4,0
,"Don't draw the cursor if it's outside the viewport (#4901)

## Summary of the Pull Request

This changes the renederer to make sure to not draw the cursor when it is placed outside the viewport. When the window height isn't an exact multiple of a row's height, then there's a little bit of space below the last line we're actually drawing. If cursor is on the line below the viewport, then it can actually get drawn into this space. Since we're not drawing the text for that line, this is a little odd. 

This PR fixes the issue by simply ensuring the cursor is in the veiwport before we draw it. 

## References

## PR Checklist
* [x] Closes #3166
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed
Checked with the GDI renderer as well as the DX renderer in conhost to make sure this is fixed for both of them, as well as the Terminal",,,,True,False,False,28,19,1,1,migrie@microsoft.com,noreply@github.com,"03/13/2020, 15:51:11",2020,"03/13/2020, 15:51:11",2020,3,3,3,3.0,1.2,0
,"Add support for setting the cursor visibility in Terminal (#4902)

Adds support for setting the cursor visibility in Terminal. Visibility
is a property entirely independent from whether the cursor is ""on"" or
not. The cursor blinker _should_ change the ""IsOn"" property. It was
actually changing the ""Visible"" property, which was incorrect. This PR
additionally corrects the naming of the method used by the cursor
blinker, and makes it do the right thing.

I added a pair of tests, one taken straight from conhost. In
copy-pasting that test, I took it a step further and implemented
`^[[?12h`, `^[[?12l`, which enables/disables cursor blinking, for the
`TerminalCore`. THIS DOES NOT ADD SUPPORT FOR DISABLING BLINKING IN THE
APP. Conpty doesn't emit the blinking on/off sequences quite yet, but
when it _does_, the Terminal will be ready.

## References
* I'd bet this conflicts with #2892
* This isn't a solution for #1379
* There shockingly isn't an issue for cursor blink state via conpty...?

## PR Checklist
* [x] Closes #3093
* [x] Closes #3499
* [x] Closes #4644
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,236,91,9,9,migrie@microsoft.com,noreply@github.com,"03/13/2020, 17:39:42",2020,"03/13/2020, 17:39:42",2020,3,3,3,3.6,3.6,0
,"Always remove the drag bar when entering fullscreen (#4904)

## Summary of the Pull Request

  When the auto-hide taskbar setting is enabled, then we don't
  always get another window message to trigger us to remove the drag bar.
  So, make sure to update the size of the drag region here, so that it
  _definitely_ goes away.

## References

## PR Checklist
* [x] Closes #4224
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Manually tested it",,,,False,False,False,5,0,1,1,migrie@microsoft.com,noreply@github.com,"03/13/2020, 22:20:39",2020,"03/13/2020, 22:20:39",2020,4,3,3,5.0,1.0,0
,"Only passthrough input changes if the client's in VT input mode (#4913)

Closes #4911.",,,,False,False,False,57,65,5,5,migrie@microsoft.com,noreply@github.com,"03/13/2020, 22:44:17",2020,"03/13/2020, 22:44:17",2020,4,3,3,2.3,2.0,0
,"til::rectangle (#4912)

## Summary of the Pull Request
Introduces convenience type `til::rectangle` which automatically implements our best practices for rectangle-related types and provides automatic conversions in/out of the relevant types.

## PR Checklist
* [x] In support of Differential Rendering #778
* [X] I work here.
* [x] Tests added/passed
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- Automatically converts in from anything with a Left/Top/Right/Bottom or left/top/right/bottom (Win32 `RECT`)
- Automatically converts Console type `SMALL_RECT` and shifts it from **inclusive** to **exclusive** on instantiation
- Automatically converts out to `SMALL_RECT` (converting back to **inclusive**), `RECT`, or `D2D1_RECT_F`.
- Constructs from bare integers written into source file
- Constructs from a single `til::point` as a 1x1 size rectangle with top-left corner (origin) at that point
- Constructs from a single `til::size` as a WxH size rectangle with top-left corner (origin) at 0,0
- Constructs from a `til::point` and a `til::size` representing the top-left corner and the width by height.
- Constructs from a `til::point` and another `til::point` representing the top-left corner and the **exclusive** bottom-right corner.
- Default constructs to empty
- Uses Chromium numerics for all basic math operations (+, -, *, /)
- Provides equality tests
- Provides `operator bool` to know when it's valid (has an area > 0) and `empty()` to know the contrary
- Accessors for left/top/right/bottom
- Type converting accessors (that use safe conversions and throw) for left/top/right/bottom
- Convenience methods for finding width/height (with Chromium numerics operations) and type-converting templates (with Chromium numerics conversions).
- Accessors for origin (top-left point) and the size/dimensions (as a `til::size`).
- Intersect operation on `operator &` to find where two `til::rectangle`s overlap, returned as a `til::rectangle`.
- Union operation on `operator |` to find the total area covered by two `til::rectangles`, returned as a `til::rectangle`.
- Subtract operation on `operator -` to find the area remaining after one `til::rectangle` is removed from another, returned as a `til::some<til::rectangle, 4>`.
- TAEF/WEX Output and Comparators so they will print very nicely with `VERIFY` and `Log` macros in our testing suite.
- Additional comparators, TAEF/WEX output, and tests written on `til::some` to support the Subtract operation.
- A natvis

## Validation Steps Performed
- See automated tests of functionality.",,,,False,False,False,1517,4,10,10,miniksa@microsoft.com,noreply@github.com,"03/14/2020, 17:27:47",2020,"03/14/2020, 17:27:47",2020,3,3,3,5.0,4.2,0
,"Maintain scrollbar position during a resize operation (#4903)

## Summary of the Pull Request

Currently, when the user resizes the Terminal, we'll snap the visible viewport back to the bottom of the buffer. This PR changes the visible viewport of the Terminal to instead remain in the same relative location it was before the resize.  

## References
Made possible by our sponsors at #4741, and listeners like you. 

## PR Checklist
* [x] Closes #3494
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

We already hated the `std::optional<short>&` thing I yeet'd into #4741 right at the end to replace a `short*`. So I was already going to change that to a `std::optional<std::reference_wrapper<short>>`, which is more idomatic. But then I was looking through the list of bugs and #3494 caught my eye. I realized it would be trivial to not only track the top of the `mutableViewport` during a resize, but we could use the same code path to track the _visible_ viewport's start as well. 

So basically I'm re-using that bit of code in `Reflow` to calculate the visible viewport's position too.

## Validation Steps Performed

Gotta love just resizing things all day, errday",,,,True,True,False,63,17,4,4,migrie@microsoft.com,noreply@github.com,"03/16/2020, 12:55:25",2020,"03/16/2020, 12:55:25",2020,3,3,3,3.9,1.8,0
,"Implement Hard Reset for Terminal (#4909)

## Summary of the Pull Request

This _actually_ implements `\033c`
([RIS](https://vt100.net/docs/vt220-rm/chapter4.html)) for the Windows Terminal.
I thought I had done this in #4433, but that PR actually only passthrough'd
`\x1b[3J`. I didn't realize at the time that #2715 was mostly about hard reset,
not erase scrollback.

Not only should conpty pass through RIS, but the Terminal should also be
prepared to actually handle that sequence. So this PR adds that support as well.

## References

* #4433: original PR I thought fixed this.

## PR Checklist
* [x] Closes #2715 for real this time
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Actually tested `printf \033c` in the Terminal this time",,,,True,False,False,187,4,5,5,migrie@microsoft.com,noreply@github.com,"03/16/2020, 15:32:01",2020,"03/16/2020, 15:32:01",2020,3,3,3,4.9,2.4,0
,"Always use the system's locale to render text (#4934)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Always use the system's locale to render text to ensure the correct font variants are used.

`_ResolveFontFaceWithFallback()` overrides the last argument with the locale name of the font, but users normally configure fonts with latin alphabet only and use font linking to display non-latin characters, which causes the the locale names of the latin fonts are used to render the non-latin fonts. https://github.com/microsoft/terminal/issues/4508#issuecomment-598552472

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4508
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation
On a zh-hans system, simplified Chinese hans are used after this patch (above), versus Japanese hans before (below).
![](https://user-images.githubusercontent.com/1297550/76591589-c9b06080-652b-11ea-904a-f7dd6d178372.png)",,,,True,False,False,4,1,1,1,richardtsai@users.noreply.github.com,noreply@github.com,"03/16/2020, 16:19:47",2020,"03/16/2020, 16:19:47",2020,3,0,3,4.0,1.2,0
,"Make commands in doc appear as code (#4933)

Co-authored-by: Carlos Zamora <cazamor@microsoft.com>",,,,False,False,False,25,25,1,1,carlos.zamora@microsoft.com,noreply@github.com,"03/16/2020, 16:44:53",2020,"03/16/2020, 16:44:53",2020,3,1,3,2.5,1.0,0
,"Fix C-M-z, C-M-x in Conpty (#4940)

## Summary of the Pull Request

This PR ensures that Conpty properly treats `^[^Z` and `^[^X` as
<kbd>Ctrl+Alt+z</kbd> and <kbd>Ctrl+Alt+x</kbd>, instead of <kbd>Ctrl+z</kbd>
and <kbd>Ctrl+x</kbd>.

## References

## PR Checklist
* [x] Closes #4201
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

`^Z` and `^X` are special control characters, SUB and CAN. For the output state
machine, these characters are supposed to be executed from _any_ state. However,
we shouldn't do this for the input engine. With the current behavior, these
characters are immediately executed regardless of what state we're in. That
means we end up synthesizing <kbd>Ctrl+z/x</kbd> for these characters. However,
for the InputStateMachine engine, when these characters are preceeded by `^[`
(ESC), we want to treat them as <kbd>Ctrl+Alt+z/x</kbd>.

This just adds a check in `StateMachine` to see if we should immediately execute
these characters from any state, similar to many of the other exceptions we
already perform in the StateMachine for the input engine.

## Validation Steps Performed
* ran tests
* checked `showkey -a` in gnome-terminal
* checked `showkey -a` in conhost
* checked `showkey -a` in vt pipeterm (conhost as a conpty terminal)
* checked `showkey -a` in Windows Terminal",,,,True,False,False,73,2,2,2,migrie@microsoft.com,noreply@github.com,"03/16/2020, 16:59:48",2020,"03/16/2020, 16:59:48",2020,3,3,3,4.9,1.8,0
,"Force WslDistroGenerator to timeout after 10s and return Profiles (#4905)

When WSL.exe would hang for users, WslDistroGenerator would also hang
while waiting for its `wsl.exe --list` call to return. The timeout was
`INFINITE` in the `WaitForSingleObject` call, but we should slap a
timeout on it instead (here we choose 2 seconds). In addition, if it
times out, we should also just return profiles and let the Terminal
continue to start up without the WSL distro profiles loaded.

# Validation Steps Performed
Made a sleep 30 executable as the command instead, made sure it hit the
`WAIT_TIMEOUT` and continued to start up without loading my Ubuntu
profile.

Closes #3987",,,,False,False,False,2,2,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/16/2020, 18:14:25",2020,"03/16/2020, 18:14:25",2020,4,1,3,2.5,1.0,0
,"Import build fix changes from OS for sync to a34a957cf

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 5b3acd8b5bac38da02fc86a29c81dfd252e79d1f

Related work items: MSFT:25505535",,,,True,True,False,15,3,11,11,miniksa@microsoft.com,duhowett@microsoft.com,"03/16/2020, 18:26:48",2020,"03/16/2020, 18:26:48",2020,4,3,1,4.2,2.4,0
,"Update comments in the ITermDispatch interface to better indicate the VT commands that are supported. (#4752)

## Summary of the Pull Request

Most of the methods in the `ITermDispatch` interface have a comment following them that indicates the VT function that they implement. These comments are then used by the script in PR #1884 to generate a table of supported VT functions. This PR updates some of those comments, to more accurately reflect the functions that are actually supported.

## References

PR #1884 

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed.
* [x] No new tests.
* [x] No new docs.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #1884

## Detailed Description of the Pull Request / Additional comments

In some cases there are methods that implement multiple VT functions which are essentially aliases. Originally the comments listed only one of the functions, so I've now updated them to list both. This includes `HPA` as an alias of `CHA`, and `HVP` as an alias of `CUP`.

Similarly, some control characters are implemented in terms of another VT function, but only the main function was listed in the comment. Again I've now updated the comments to list both the main function and any related control characters. This includes `BS` (sharing the same method as `CUB`), `HT` (the same method as `CHT`), and `LF`, `FF`, and `VT` (the same method as `IND` and `NEL`).

Then there were some minor corrections. The `DeviceAttributes` method was commented as `DA`, but it really should be `DA1`. `DesignateCharset` was simply commented as _DesignateCharset_, when it should be `SCS`. The `DECSCNM` comment was missing a space, so it wasn't picked up by the script. And the `SetColumns` comment mistakenly included `DECSCPP`, but we don't actually support that.

Finally there is the `DeviceStatusReport` method, which potentially covers a wide range of different reports. But for now we only support the _Cursor Position Report_, so I've commented it as `DSR, DSR-CPR` to more clearly indicate our level of support. In the long term we'll probably need a better way of handling these reports though.

## Validation Steps Performed

I've run the script from PR #1884 and confirmed that the output is now a more accurate reflection of our actual VT support.",,,,False,False,False,30,30,3,3,j4_james@hotmail.com,noreply@github.com,"03/17/2020, 15:55:22",2020,"03/17/2020, 15:55:22",2020,3,1,3,2.5,1.8,0
,"Make panes use xaml star sizing (#4953)

## Summary of the Pull Request
Dustin and Mike had a discussion on star sizing. Mcpiroman connected the dots. I just swooped in and implemented it.

## References
https://github.com/microsoft/terminal/issues/3996#issuecomment-566676111
https://github.com/microsoft/terminal/issues/3744#issuecomment-568926636

## PR Checklist
* [X] Closes #3744

## Detailed Description of the Pull Request / Additional comments
Star sizing allows us to keep things proportional. Since a 1::1 proportion is the same as a 100::100 proportion, I just went in and added star sizing. In the words of a some dude with a big metal fist, everything is perfectly balanced now.

![image](https://user-images.githubusercontent.com/11050425/76813679-f7103f00-67b5-11ea-9b5c-d2cc73673aba.png)



## Validation Steps Performed
Verified for vertical, horizontal, and uneven splits.",,,,False,False,False,4,4,1,1,carlos.zamora@microsoft.com,noreply@github.com,"03/17/2020, 17:44:45",2020,"03/17/2020, 17:44:45",2020,3,1,3,2.5,1.2,0
,"Make loop in IInputEvent more consistent and modern (#4959)

In IInputEvent, there are two for loops. One is a range based loop operating on ""records"", and the other is a classic for-loop doing the same. For consistency, the for-loop was changed into the more modern variation via a compiler refactoring, which has the exact same behavior as the other for-loop in the main function.

Yes, of course this was tested manually and with the unit tests.

# Validation Steps
Unit testing passed. In addition, for the manual validation tests, I compared the output for sample values between the two loops ensuring the same results.",,,,False,False,True,3,3,1,1,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"03/17/2020, 17:52:33",2020,"03/17/2020, 17:52:33",2020,3,0,3,3.0,1.0,0
,"Add cursorColor to color scheme (#4651)

Add the option to set the cursor color as part of the color scheme.

This is very useful for light themes, where the cursor disappears unless its color
is set in the profile.

Related to issue #764, but doesn't fully resolve it.

## Validation
I tested this manually by creating a light color scheme, setting the cursor color
to black and setting the profile color scheme to the newly created color scheme.
I validated the cursor is black, then set the cursor color in the profile (to red)
and saw it trumps the cursor color from the color scheme.",,,,False,False,False,127,21,10,10,yitzhaks@microsoft.com,noreply@github.com,"03/17/2020, 20:11:03",2020,"03/17/2020, 20:11:03",2020,4,0,3,4.3,3.0,0
,"Fix unbinding keys in v0.10 (#4988)

## Summary of the Pull Request

We (the royal ""we"") broke key unbinding in #4746. We didn't run the local tests after this, which actually would have caught this. The comment even suggests what we should have done here. We need to make sure that when we bail, it's because there's a parsing function that returned nothing. `null`, `""unbound""`, etc actually don't even have a parsing function at all, so they should just keep on keepin' on.

## References

Source of this regression: #4746

## PR Checklist
* [x] Closes #3729
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

This is a great example of why your unittests should run in CI always

## Validation Steps Performed
* **ran the tests**
* tested the following unbindings:

```json
        { ""command"": null, ""keys"": [ ""ctrl+shift+t"" ] },
        { ""command"": ""unbound"", ""keys"": [ ""ctrl+shift+t"" ] },
        { ""command"": ""null"", ""keys"": [ ""ctrl+shift+t"" ] },

```
and they each individually worked.",,,,True,False,False,1,1,1,1,migrie@microsoft.com,noreply@github.com,"03/18/2020, 17:52:43",2020,"03/18/2020, 17:52:43",2020,3,3,3,2.5,1.2,0
,"Ignore KeyDown events during Alt-Numpad Input (#4965)

## Summary of the Pull Request
Alt-Numpad# input would be escaping each numkey before sending it through. This would result in some weird behavior, for example, in powershell, where the first alt-numpad# would start digit argument and once the user releases alt, a character is sent through and digit argument would repeat that character X times. To resolve this, we simply need to ignore KeyDowns where Alt is held and a Numpad# is pressed. 

Once Alt is released, we'll receive a character through `TSFInputControl`, not `TermControl::CharacterHandler`. It seems that the `CoreTextEditContext` in `TSFInputControl` intercepts the character before it gets to `TermControl`. TSF will then send the received character through as normal.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #1401 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Testing various combinations of Alt-Numpad# consistently sends through only one instance of the expected symbols.",,,,False,False,False,10,0,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/18/2020, 17:58:10",2020,"03/18/2020, 17:58:10",2020,3,1,3,5.0,1.0,0
,"Fire UIA Events for Output and Cursor Movement (#4826)

## Summary of the Pull Request
This notifies automation clients (i.e.: NVDA, narrator, etc...) of new output being rendered to the screen.

## References
Close #2447 - Signaling for new output and cursor
Close #3791 - fixed by signaling cursor changes

## Detailed Description of the Pull Request / Additional comments
- Added tracing for UiaRenderer. This makes it easier to debug issues with notifying an automation client.
- Fire TextChanged automation events when new content is output to the screen.

## Validation Steps Performed
Verified with NVDA [1]

## Narrator
Narrator works _better_, but is unable to detect new output consistently. There is no harm for narrator when this change goes in.

[1] https://github.com/microsoft/terminal/issues/2447#issuecomment-595879890",,,,True,False,False,84,5,5,5,carlos.zamora@microsoft.com,noreply@github.com,"03/18/2020, 18:01:05",2020,"03/18/2020, 18:01:05",2020,4,1,3,4.7,1.8,0
,"Fix an off-by-one that made us use EL instead of ECH (#4994)

When we painted spaces up until the character right before the right
edge of the screen, we would erroneously use Erase in Line instead of
Erase Character due to an off-by-one.

Fixes #4727",,,,True,False,False,63,6,2,2,duhowett@microsoft.com,noreply@github.com,"03/18/2020, 20:24:20",2020,"03/18/2020, 20:24:20",2020,4,1,3,4.6,1.8,0
,"Properly represent block selections in UIA (#4991)

## Summary of the Pull Request
Block selections were always read and displayed as line selections in UIA. This fixes that.

## PR Checklist
* [x] Closes #4509 

## Detailed Description of the Pull Request / Additional comments
1. Expose `IsBlockSelection()` via IUiaData
2. Update the constructor to be able to take in a block selection parameter
3. Make ScreenInfoUiaProviders pass step 1 output into step 2 constructor
4. Update all instances of `UiaTextRange::GetTextRects()` to include this new flag

## Validation Steps Performed
Manually tested.
Additional tests would be redundant as GetTextRects() is tested in the text buffer.",,,,True,False,False,44,47,13,13,carlos.zamora@microsoft.com,noreply@github.com,"03/18/2020, 21:03:51",2020,"03/18/2020, 21:03:51",2020,4,1,3,2.4,3.0,0
,"Clamp the terminal buffer to `SHRT_MAX` on resize (#4964)

## Summary of the Pull Request

This is 100% on me. Even after mucking around in this function for the last 3
months, I missed that there was a single addition where we weren't doing a
clamped addition. This would lead to us creating a buffer with negative height,
and all sorts of badness.

Clamping this addition was enough to fix the bug.

## PR Checklist
* [x] Closes #2815
* [x] Closes #4972
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
* ran tests
* Created a profile with `""historySize"" : 32728`, then filled the viewport with
  text, then maximized, and saw that the viewport indeed did resize to the new
  size of the window.",,,,True,False,False,116,68,2,2,migrie@microsoft.com,noreply@github.com,"03/18/2020, 22:22:26",2020,"03/18/2020, 22:22:26",2020,4,3,3,3.2,2.4,0
,"Fix VT sequences for Ctrl+Alt+? input (#4947)

## Summary of the Pull Request

Ctrl+/ and Ctrl-? are complicated in VT input.

* C-/ is supposed to be `^_` (the C0 character US)
* C-? is supposed to be `DEL`
* C-M-/ is supposed to be `^[^_` (ESC US)
* C-M-? is supposed to be `^[^?` (ESC DEL)

The astute reader will note that these characters also share the same key on a
standard en-us keyboard layout, which makes the problem even more complicated.
This PR does a better job of handling these weird cases.

# References
* #3079 - At first, I thought this PR would close this issue, but as I've learned below, this won't solve that one. This bug was merely found during that investigation.

## PR Checklist
* [x] Related to #3079
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

* ran tests
* checked `showkey -a` in gnome-terminal, which gives you the wrong results for C-M-/, C-M-?
* checked `showkey -a` in xterm, which gives you the _right_ results for C-M-/, C-M-?
* checked `showkey -a` in conhost
* checked `showkey -a` in Windows Terminal",,,,True,False,False,98,6,2,2,migrie@microsoft.com,noreply@github.com,"03/18/2020, 22:38:31",2020,"03/18/2020, 22:38:31",2020,4,3,3,4.7,2.4,0
,"Add support for Ctrl+# keys (#4938)

## Summary of the Pull Request

Fixes the <kbd>Ctrl+Num</kbd> keys in both conhost and the Terminal. These keys are supposed to be mapped to specific characters according to [this doc](https://vt100.net/docs/vt220-rm/table3-5.html). Now we actually handle them correctly.

## PR Checklist
* [x] Closes #3507 
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

* Ran test
* tested in `gnome-terminal` with `showkeys -a`
* tested in conhost with `showkeys -a`
* tested in Windows Terminal with `showkeys -a`",,,,True,False,False,73,1,2,2,migrie@microsoft.com,noreply@github.com,"03/18/2020, 22:39:22",2020,"03/18/2020, 22:39:22",2020,4,3,3,4.9,1.8,0
,"Pin the DisplayName to Windows Terminal to fix the UAC prompt (#4995)

There's an issue in the UAC consent dialog where it cannot read an
application's name if it's stored in a resource. When it fails, it deems
us an ""Unknown Program"" and that looks pretty silly.

Fixes #2289.",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"03/18/2020, 23:19:06",2020,"03/18/2020, 23:19:06",2020,4,1,3,2.5,1.2,0
,"hygiene: change default specifiers of some functions to delete (#4962)

For some functions, the overriding implementation is set to default, but
the deletion is not explicitly set at all. For those functions, I
changed default to delete",,,,False,False,False,14,14,5,3,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"03/19/2020, 00:30:50",2020,"03/19/2020, 00:30:50",2020,1,0,3,2.5,1.2,0
,"til::bitmap (#4967)

## Summary of the Pull Request
Introduces type `til::bitmap` which implements an NxM grid of bits that can be used to track dirty/clean state on a per-cell basis throughout a rectangle.

## PR Checklist
* [x] In support of Differential Rendering #778
* [X] I work here.
* [x] Tests added/passed
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- Adds `const_iterator` to `til::rectangle` that will walk from top to bottom, left to right every position in the rectangle as a `til::point` and associated test.
- Adds `bool til::rectangle::contains(til::point)` to determine if a point lies within the rectangle and the associated test
- Adds complementary methods to `til::rectangle` of `index_of(til::point)` and `point_at(ptrdiff_t)` which will convert between a valid `point` position that lies inside the `rectangle` and the index as a count of cells from the top left corner (origin) in a top to bottom & left to right counting fashion (and associated tests).
- Adds `til::some<T, N>::clear()` to empty out the contents of the `some` and associated test.
THEN with all that support...
- Adds `til::bitmap` which represents a 2 dimensional grid of boolean/bit flags. This class contains set and reset methods for the entire region, and set only for a single `til::point` or a subregion as specified by a `til::rectangle` (and associated tests.) 
- Adds convenience methods of `any()`, `one()`, `none()`, and `all()` to the `til::bitmap` to check some of its state.
- Adds convenience method of `resize()` to `til::bitmap` that will grow or shrink the bitmap, copying whatever is left of the previous one that still fits and optionally filling or blanking the new space.
- Adds a `const_iterator` for `til::bitmap` that will walk top to bottom, left to right and return a `til::rectangle` representing a run of bits that are all on sequentially in a row. Breaks per row. Exactly as we expect to be drawing things (and associated tests.)

## Validation Steps Performed
- See automated tests of functionality.",,,,False,False,False,1141,0,9,9,miniksa@microsoft.com,noreply@github.com,"03/19/2020, 16:10:13",2020,"03/19/2020, 16:10:13",2020,3,3,3,5.0,3.5,0
,"Add explicit to bool operators of Point and Rect (#4948)

Found a bug where the following won't work:
```c++
COORD inclusiveEnd{ _end };
```
where `_end` is a `til::point`.

The only fix for this is to replace these instances with this:
```c++
COORD inclusiveEnd = _end;
```

What was happening in the first notation is the implicit conversion of `til::point` to `bool` to `SHORT`. The constructor for COORD only sees one SHORT so it thinks the value should be the definition for X, and Y should stay as 0. So we end up getting `1, 0`.

By adding the explicit keyword to the bool operators, we prevent the accident above from occurring.",,,,True,True,False,30,21,5,5,carlos.zamora@microsoft.com,noreply@github.com,"03/19/2020, 16:12:15",2020,"03/19/2020, 16:12:15",2020,3,1,3,2.9,1.8,0
,"doc: add docs for updating nuget packages and using .nupkgs (#4996)

This adds documentation regarding updating nuget versions and using .nupkg files instead of downloading them from Nuget repository.",,,,False,False,False,24,0,1,1,marcel.alex.wagner@outlook.com,noreply@github.com,"03/19/2020, 17:14:50",2020,"03/19/2020, 17:14:50",2020,3,0,3,5.0,1.0,0
,"Merged PR 4447792: Fix two bugs with DOSKEY

The first issue is in the console host: when we erase a command history,
we also clear its _allocated_ flag. It's supposed to remain allocated
but become ""reset"". When we later check that a command history that
exists in the list is allocated, we fail loudly because allocated has
been cleared.

The second is that in Windows Server 2003, we rewrote the console client
APIs (in kernelbase!) regarding command history and changed one internal
function from taking char** to taking char*. Since the signature was
_actually_ void** and that changed to void*, the compiler didn't notice
when in only one single place we continued to pass a char** instead of a
char*.  This caused us to send the wrong filename length for the ExeName
in SetConsoleNumberOfCommands.

Fixes MSFT:25265854
Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp b493fb5a06975c53b2fbb7b9fc0546244b551fa9",,,,True,True,False,1,1,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"03/19/2020, 18:14:52",2020,"03/19/2020, 18:14:52",2020,4,3,1,2.5,1.2,0
,Invoke-CodeFormat on inbox changes,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"03/19/2020, 18:16:32",2020,"03/19/2020, 18:16:32",2020,4,1,1,2.5,1.0,0
,"Allow IME Text Wrapping (#5005)

## Summary of the Pull Request
This PR turns on TextWrapping on `TSFInputControl::TextBlock`. Once the TextBlock hits the end of the Terminal window, it will wrap downwards, but the TextBlock will have as much width as it had when composition started. Unfortunately, this means if composition starts right at the end of the Terminal with enough width for just one character, there will be a vertical line of characters down the right side of the Terminal 😅. It's definitely not ideal, and I imagine this won't be the last time we visit this issue, but for now users can see what they're typing.

## PR Checklist
* [x] Closes #3657
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Played around with IME towards the edge of the Terminal window.",,,,False,False,False,14,10,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/19/2020, 19:15:13",2020,"03/19/2020, 19:15:13",2020,4,1,3,2.9,1.2,0
,"Set the ComponentResourceLocation for our DLL projects (#5031)

These projects load Xaml components that have Uids, but those Uids just
weren't working because Xaml components are, by default, loaded in
""Application"" scope. Application scope is great if the resource producer
is the EXE project.

Application scope means that resources are looked up at the resource
root, but DLLs with resources don't produce resources at the root. They
produce resources at a root named after the DLL.

Setting the Xaml component resource location to Nested makes sure the
Xaml resource loader loads resources from the right places.",,,,False,False,False,2,0,2,2,duhowett@microsoft.com,noreply@github.com,"03/20/2020, 20:08:32",2020,"03/20/2020, 20:08:32",2020,4,1,3,5.0,1.2,0
,"Change NULL to nullptr since they are pointers (#4960)

Some functions and variables are having NULL assigned to them when they are in fact pointers, so nullptr might be more accurate here.",,,,False,False,False,240,241,57,57,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"03/20/2020, 20:35:12",2020,"03/20/2020, 20:35:12",2020,4,0,3,2.5,4.5,0
,"Gracefully handle json data with the wrong value types (#4961)

## Summary of the Pull Request

Currently, if the Terminal attempts to parse a setting that _should_ be a `bool`
and the user provided a string, then we'll throw an exception while parsing the
settings, and display an error message that's pretty unrelated to the actual
problem.

The same goes for `bool`s as `int`s, `float`s as `int`s, etc.

This PR instead updates our settings parsing to ensure that we check the type of
a json value before actually trying to get its parsed value.

## References

## PR Checklist
* [x] Closes #4299
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I made a bunch of `JsonUtils` helpers for this in the same vein as the
`GetOptionalValue` ones.

Notably, any other value type can safely be treated as a string value.

## Validation Steps Performed
* added tests
* ran the Terminal and verified we can parse settings with the wrong types",,,,True,True,False,248,106,6,5,migrie@microsoft.com,noreply@github.com,"03/20/2020, 20:35:51",2020,"03/20/2020, 20:35:51",2020,4,3,3,3.4,3.6,0
,"Make sure to InvalidateAll on a resize (#5046)

## Summary of the Pull Request

Seriously just read the code on this one, it's so incredibly obvious what I did wrong

## References

Regressed with #4741 

## PR Checklist
* [x] Closes #5029
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,True,True,False,7,0,1,1,migrie@microsoft.com,noreply@github.com,"03/20/2020, 23:50:59",2020,"03/20/2020, 23:50:59",2020,4,3,3,5.0,1.2,0
,"Fix the Alternate Scroll Mode when DECCKM enabled (#5081)

## Summary of the Pull Request

If the _Alternate Scroll Mode_ is enabled, the terminal generates up/down keystrokes when the mouse wheel is scrolled. However, the expected escape sequences for those keys are dependent on the state of the _Cursor Keys Mode_ ( `DECCKM`), but we haven't taken that into account. This PR updates the alternate scroll implementation to make sure the appropriate sequences are sent for both `DECCKM` modes.

## References

#3321

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

I've simply added a condition in the `TerminalInput::_SendAlternateScroll` method to send a different pair of sequences dependent on the state of `_cursorApplicationMode`  flag.

## Validation Steps Performed

Manually tested in VIM (although that required me enabling the _Alternate Scroll Mode_ myself first). Also added a new unit test in `MouseInputTest` to confirm the correct sequences were generated for both `DECCKM` modes.",,,,True,False,False,44,2,2,2,j4_james@hotmail.com,noreply@github.com,"03/23/2020, 13:00:59",2020,"03/23/2020, 13:00:59",2020,3,1,3,4.8,1.2,0
,"Move ConPTY to use til::bitmap (#5024)

## Summary of the Pull Request
Moves the ConPTY drawing mechanism (`VtRenderer`) to use the fine-grained `til::bitmap` individual-dirty-bit tracking mechanism instead of coarse-grained rectangle unions to improve drawing performance by dramatically reducing the total area redrawn.

## PR Checklist
* [x] Part of #778 and #1064 
* [x] I work here
* [x] Tests added and updated.
* [x] I'm a core contributor

## Detailed Description of the Pull Request / Additional comments
- Converted `GetDirtyArea()` interface from `IRenderEngine` to use a vector of `til::rectangle` instead of the `SMALL_RECT` to banhammer inclusive rectangles.
- `VtEngine` now holds and operates on the `til::bitmap` for invalidation regions. All invalidation operation functions that used to be embedded inside `VtEngine` are deleted in favor of using the ones in `til::bitmap`.
- Updated `VtEngine` tracing to use new `til::bitmap` on trace and the new `to_string()` methods detailed below.
- Comparison operators for `til::bitmap` and complementary tests.
- Fixed an issue where the dirty rectangle shortcut in `til::bitmap` was set to 0,0,0,0 by default which means that `|=` on it with each `set()` operation was stretching the rectangle from 0,0. Now it's a `std::optional` so it has no value after just being cleared and will build from whatever the first invalidated rectangle is. Complementary tests added.
- Optional run caching for `til::bitmap` in the `runs()` method since both VT and DX renderers will likely want to generate the set of runs at the beginning of a frame and refer to them over and over through that frame. Saves the iteration and creation and caches inside `til::bitmap` where the chance of invalidation of the underlying data is known best. It is still possible to iterate manually with `begin()` and `end()` from the outside without caching, if desired. Complementary tests added.
- WEX templates added for `til::bitmap` and used in tests.
- `translate()` method for `til::bitmap` which will slide the dirty points in the direction specified by a `til::point` and optionally back-fill the uncovered area as dirty. Complementary tests added.
- Moves all string generation for `til` types `size`, `point`, `rectangle`, and `some` into a `to_string` method on each object such that it can be used in both ETW tracing scenarios AND in the TAEF templates uniformly. Adds a similar method for `bitmap`.
- Add tagging to `_bitmap_const_iterator` such that it appears as a valid **Input Iterator** to STL collections and can be used in a `std::vector` constructor as a range. Adds and cleans up operators on this iterator to match the theoretical requirements for an **Input Iterator**. Complementary tests added.
- Add loose operators to `til` which will allow some basic math operations (+, -, *, /) between `til::size` and `til::point` and vice versa. Complementary tests added. Complementary tests added.
- Adds operators to `til::rectangle` to allow scaling with basic math operations (+, -, *) versus `til::size` and translation with basic math operations (+, -) against `til::point`. Complementary tests added.
- In-place variants of some operations added to assorted `til` objects. Complementary tests added.
- Update VT tests to compare invalidation against the new map structure instead of raw rectangles where possible.

## Validation Steps Performed
- Wrote additional til Unit Tests for all additional operators and functions added to the project to support this operation
- Updated the existing VT renderer tests
- Ran perf check",,,,True,False,False,1639,333,39,39,miniksa@microsoft.com,noreply@github.com,"03/23/2020, 15:57:54",2020,"03/23/2020, 15:57:54",2020,3,3,3,4.3,5.0,0
,"Replace casting 0 to a pointer with nullptr (#5062)

## Summary of the Pull Request
When I did my last PR that was merged, the PR #4960, there were two more cases I forgot to include, so I included them here, for the sake of consistency and completion

## References
PR #4690

## PR Checklist
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [X] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
Replacing pointer casts to 0 with nullptr in two tests.

## Validation Steps Performed
Manual Testing
Automated Testing",,,,False,False,False,3,3,2,2,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"03/23/2020, 16:38:39",2020,"03/23/2020, 16:38:39",2020,3,0,3,2.5,1.0,0
,version: bump to 0.11,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"03/23/2020, 17:04:37",2020,"03/23/2020, 17:04:37",2020,3,1,3,2.5,1.0,0
,"deps: upgrade CppWinRT to 2.0.200316.3, gsl to v2.1.0 (#4536)

This commit upgrades C++/WinRT to 2.0.200316.3 and fixes a couple of the
transitive dependency issues we had in the process.

Because the latest version has better dependency resolution, we're able
to properly depend on Microsoft.UI.Xaml and the Toolkit in TerminalApp
and TerminalAppLib so we no longer need to manually include .dll and
.pri files.

Because of nebulous _other_ changes in dependency resolution,
WindowsTerminalUniversal isn't picking up transitive .winmd dependencies
from TerminalApp, and needs to include them as ProjectReferences
directly. This was already happening transitively, so now it's explicit.

I've also taken the time to upgrade GSL to v2.1.0, the last release
before they removed span::at and blew up our world.",,,,True,True,False,48,63,18,16,duhowett@microsoft.com,noreply@github.com,"03/23/2020, 17:15:24",2020,"03/23/2020, 17:15:24",2020,3,1,3,2.2,3.6,0
,doc: add MSYS2 profile to ThirdPartyToolProfiles.md (#5077),,,,False,False,False,13,0,1,1,ch.kroeppl@gmx.at,noreply@github.com,"03/23/2020, 17:30:52",2020,"03/23/2020, 17:30:52",2020,3,0,3,5.0,1.0,0
,"Fix the case sensitivity button in search on High Contrast (#5088)

Because the `Path` inside the case sensitivity button is not _text_,
it wasn't getting themed by the Xaml runtime's text style.",,,,True,True,False,7,1,1,1,duhowett@microsoft.com,noreply@github.com,"03/23/2020, 18:24:27",2020,"03/23/2020, 18:24:27",2020,4,1,3,4.4,1.2,0
,"Make sure to account for the size the padding _will be_ scaled to (#5091)

* [x] Fixes #2061 for good this time",,,,True,False,False,3,2,1,1,migrie@microsoft.com,noreply@github.com,"03/23/2020, 22:24:33",2020,"03/23/2020, 22:24:33",2020,4,3,3,3.0,1.2,0
,"Improve wide glyph support in UIA (#4946)

## Summary of the Pull Request
- Added better wide glyph support for UIA. We used to move one _cell_ at a time, so wide glyphs would be read twice.
- Converted a few things to use til::point since I'm already here.
- fixed telemetry for UIA

## PR Checklist
* [x] Closes #1354

## Detailed Description of the Pull Request / Additional comments
The text buffer has a concept of word boundaries, so it makes sense to have a concept of glyph boundaries too.

_start and _end in UiaTextRange are now til::point

## Validation Steps Performed
Verified using Narrator",,,,True,False,False,194,46,7,7,carlos.zamora@microsoft.com,noreply@github.com,"03/23/2020, 23:50:17",2020,"03/23/2020, 23:50:17",2020,4,1,3,4.2,3.6,0
,"Add enhanced key support for ConPty (#5021)

## Summary of the Pull Request
ConPty did not set the ENHANCED_KEY flag when generating new input. This change helps detect when it's supposed to do so, and sends it.

## References
[Enhanced Key Documentation](https://docs.microsoft.com/en-us/windows/console/key-event-record-str)

## PR Checklist
* [X] Closes #2397

## Detailed Description of the Pull Request / Additional comments
| KEY_EVENT_RECORD modifiers | VT encodable? | Detectable on the way out? |
|----------------------------|---------------|----------------------------|
| CAPSLOCK_ON                | No            | No                         |
| ENHANCED_KEY               | No            | Yes**                      |
| LEFT_ALT_PRESSED           | Yes*          | Yes*                       |
| LEFT_CTRL_PRESSED          | Yes*          | Yes*                       |
| NUMLOCK_ON                 | No            | No                         |
| RIGHT_ALT_PRESSED          | Yes*          | Yes*                       |
| RIGHT_CTRL_PRESSED         | Yes*          | Yes*                       |
| SCROLLLOCK_ON              | No            | No                         |
| SHIFT_PRESSED              | Yes           | Yes                        |
```
* We can detect Alt and Ctrl, but not necessarily which one
** Enhanced Keys are limited to the following:
    - off keypad: INS, DEL, HOME, END, PAGE UP, PAGE DOWN, direction keys
    - on keypad: / and ENTER
   Since we can't detect the keypad keys, those will _not_ send the ENHANCED_KEY modifier.
   For the following CSI action codes, we can assume that they are Enhanced Keys:
     case CsiActionCodes::ArrowUp:
     case CsiActionCodes::ArrowDown:
     case CsiActionCodes::ArrowRight:
     case CsiActionCodes::ArrowLeft:
     case CsiActionCodes::Home:
     case CsiActionCodes::End:
     case CsiActionCodes::CSI_F1:
     case CsiActionCodes::CSI_F3:
     case CsiActionCodes::CSI_F2:
     case CsiActionCodes::CSI_F4:
   These cases are handled in ActionCsiDispatch
```
## Validation Steps Performed
Followed bug repro steps. It now matches!",,,,True,True,False,97,11,3,3,carlos.zamora@microsoft.com,noreply@github.com,"03/24/2020, 19:45:56",2020,"03/24/2020, 19:45:56",2020,4,1,3,4.5,2.4,0
,"Make the window border actually follow the user's theme (#5105)

## Summary of the Pull Request

One of our great contributors already hooked up all the logic for this,
we just needed a theme library that could handle the request.

## PR Checklist
* [x] Fixes #4980
* [x] CLA signed
* [x] Tests added/passed
* [ ] Requires documentation to be updated",,,,True,False,False,4,8,3,3,duhowett@microsoft.com,noreply@github.com,"03/24/2020, 19:47:01",2020,"03/24/2020, 19:47:01",2020,4,1,3,1.7,1.2,0
,doc: add cmder icon to ThirdPartyToolProfiles (#5107),,,,False,False,False,1,0,1,1,7559494+dominik-ba@users.noreply.github.com,noreply@github.com,"03/24/2020, 21:14:12",2020,"03/24/2020, 21:14:12",2020,4,0,3,5.0,1.0,0
,"Improve keybinding JSON schema (#3904)

The pattern regex now correctly disallows keybindings consisting of only
modifiers, modifiers not separated by ""+"", and unknown keys. Certain
shift+numpad combinations are also not allowed.

The description lists allowed key names in tabular format (assuming the
client renders \t correctly).",,,,False,False,False,3,2,1,1,davidwin@outlook.com,noreply@github.com,"03/24/2020, 22:06:23",2020,"03/24/2020, 22:06:23",2020,4,0,3,3.4,1.0,0
,"Fix broken Chinese IME when deleting composition (#5109)

## Summary of the Pull Request
This PR fixes an out of bounds access when deleting composition during Chinese IME. What's happening is that we're receiving a CompositionCompleted before receiving the TextUpdate to tell us to delete the last character in the composition. This creates two problems for us:
1. The final character gets sent to the Terminal when it should have been deleted.
2. `_activeTextStart` gets set to `_inputBuffer.length()` when sending the character to the terminal, so when the `TextUpdate` comes right after the `CompositionCompleted` event, `_activeTextStart` is out of sync.

This PR fixes the second issue, by updating `_activeTextStart` during a `TextUpdate` in case we run into this issue. 
The first issue is trickier to resolve since we assume that if the text server api tells us a composition is completed, we should send what we have. It'll be tracked here: #5110.
At the very least, this PR will let users continue to type in Chinese IME without it breaking, but it will still be annoying to see the first letter of your composition reappear after deleting it.

## PR Checklist
* [x] Closes #5054
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

## Validation Steps Performed
Play around with Chinese IME deleting and composing, and play around with Korean and Japanese IME to see that it still works as expected.",,,,True,False,False,9,0,1,1,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/25/2020, 00:00:18",2020,"03/25/2020, 00:00:18",2020,1,1,3,5.0,1.2,0
,"Update til::bitmap to use dynamic_bitset<> + libpopcnt (#5092)

This commit replaces `std::vector<bool>` with `dynamic_bitset<>` by
@pinam45 (https://github.com/pinam45/dynamic_bitset) and with
`libpopcnt` for high-performance bit counting by @kimwalisch
(https://github.com/kimwalisch/libpopcnt).

* [x] In support of performance, incremental rendering, and Terminal
  ""not speed enough"" as well as my sanity relative to
  `std::vector<bool>`
* [x] Tests updated and passed.
* [x] `LICENSE`, `NOTICE`, and provenance files updated.
* [x] I'm a core contributor. I discussed it with @DHowett-MSFT and
  cleared the licensing checks before pulling this in.

## Details `std::vector<bool>` provided by the Microsoft VC Runtime is
incapable of a great many things. Many of the methods you come to expect
off of `std::vector<T>` that are dutifully presented through the `bool`
variant will spontaneously fail at some future date because it decides
you allocated, resized, or manipulated the `vector<bool>` specialization
in an unsupported manner. Half of the methods will straight up not work
for filling/resizing in bulk. And you will tear your hair out as it will
somehow magically forget the assignment of half the bits you gave it
part way through an iteration then assert out and die.

As such, to preserve my sanity, I searched for an alternative. I came
across the self-contained header-only library `dynamic_bitset` by
@pinam45 which appears to do as much of `boost::dynamic_bitset` as I
wanted, but without including 400kg of boost libraries. It also has a
nifty optional dependency on `libpopcnt` by @kimwalisch that will use
processor-specific extensions for rapidly counting bits. @DHowett-MSFT
and I briefly discussed how nice `popcnt` would have been on
`std::vector<bool>` last week... and now we can have it. (To be fair, I
don't believe I'm using it yet... but we'll be able to easily dial in
`til::bitmap` soon and not worry about a performance hit if we do have
to walk bits and count them thanks to `libpopcnt`.)

This PR specifically focuses on swapping the dependencies out and
ingesting the new libraries. We'll further tune `til::bitmap` in future
pulls as necessary.

## Validation
* [x] Ran the automated tests for bitmap.
* [x] Ran the terminal manually and it looks fine still.",,,,False,False,False,2988,34,14,14,miniksa@microsoft.com,noreply@github.com,"03/25/2020, 02:41:10",2020,"03/25/2020, 02:41:10",2020,1,3,3,4.9,4.0,0
,"Figure out if the x64 hosted tools make our build better or worse (#4956)

This commit may help with the compiler and linker running out of memory.",,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"03/25/2020, 15:47:17",2020,"03/25/2020, 15:47:17",2020,3,1,3,5.0,1.0,0
,"ci: run spell check in CI, fix remaining issues (#4799)

This commit introduces a github action to check our spelling and fixes
the following misspelled words so that we come up green.

It also renames TfEditSes to TfEditSession, because Ses is not a word.

currently, excerpt, fallthrough, identified, occurred, propagate,
provided, rendered, resetting, separate, succeeded, successfully,
terminal, transferred, adheres, breaks, combining, preceded,
architecture, populated, previous, setter, visible, window, within,
appxmanifest, hyphen, control, offset, powerpoint, suppress, parsing,
prioritized, aforementioned, check in, build, filling, indices, layout,
mapping, trying, scroll, terabyte, vetoes, viewport, whose",,,,True,True,False,483055,77,67,66,jsoref@users.noreply.github.com,noreply@github.com,"03/25/2020, 18:02:53",2020,"03/25/2020, 18:02:53",2020,4,0,3,5.0,5.0,0
,"Prepare for automated localization (#5119)

This pull request includes a localization config file that identifies
the modules we need to localize. It also moves us back to the
`Resources\LANGUAGE\Resources.resw` resource layout, but using wildcards
so that the build system can pick up any number of languages.",,,,False,False,False,22,10,13,13,duhowett@microsoft.com,noreply@github.com,"03/25/2020, 21:06:59",2020,"03/25/2020, 21:06:59",2020,4,1,3,3.4,2.0,0
,"Rework and simplify selection in TermControl (#5096)

This commit rewrites selection handling at the TermControl layer.
Previously, we were keeping track of a number of redundant variables
that were easy to get out of sync.

The new selection model is as follows:

* A single left click will always begin a _pending_ selection operation
* A single left click will always clear a selection (#4477)
* A double left click will always begin a word selection
* A triple left click will always begin a line selection
* A selection will only truly start when the cursor moves a quarter of
  the smallest dimension of a cell (usually its width) in any direction
  _This eliminates the selection of a single cell on one click._
  (#4282, #5082)
* We now keep track of whether the selection has been ""copied"", or
  ""updated"" since it was last copied. If an endpoint moves, it is
  updated. For copy-on-select, it is only copied if it's updated.
  (#4740)

Because of this, we can stop tracking the position of the focus-raising
click, and whether it was part of click-drag operation. All clicks can
_become_ part of a click-drag operation if the user drags.

We can also eliminate the special handling of single cell selection at
the TerminalCore layer: since TermControl determines when to begin a
selection, TerminalCore no longer needs to know whether copy on select
is enabled _or_ whether the user has started and then backtracked over a
single cell. This is now implicit in TermControl.

Fixes #5082; Fixes #4477",,,,True,False,False,41,121,8,8,duhowett@microsoft.com,noreply@github.com,"03/25/2020, 21:09:49",2020,"03/25/2020, 21:09:49",2020,4,1,3,2.0,3.0,0
,"Set Cascadia Code as default font (#5121)

## Summary of the Pull Request
Changes default font from Consolas to Cascadia Code.

## PR Checklist
* [x] Closes #4943 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed
I deleted my profiles.json and built from source. All profiles appeared in Cascadia Code.",,,,False,False,False,8,7,6,6,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"03/25/2020, 21:52:34",2020,"03/25/2020, 21:52:34",2020,4,1,3,2.7,1.8,0
,"ci: update spelling allowlists/dictionaries (#5124)

This is just some minor whitelisting/additions to dictionaries to catch
up between when the spell checker PR was written and when it was finally
merged.

This is basically taking the spelling output from
499f24a29e6f321d6c4da8eb22c2ef0d30f13770 and putting it into files.

The choice of files is arbitrary. I'm adding a `math.txt` dictionary
because it's a reasonable example.

The goal here is to get master to a green check mark

## Validation

When I pushed this commit to my fork, the spell check action ran and
gave me a check mark: https://github.com/jsoref/terminal/runs/534783276",,,,False,False,False,15,0,4,4,jsoref@users.noreply.github.com,noreply@github.com,"03/25/2020, 22:00:56",2020,"03/25/2020, 22:00:56",2020,4,0,3,5.0,1.0,0
,"ci: spelling: remove branch / tag filtering (#5126)

This repository tends to use `/`s in branch names.
Unfortunately, `branch: ""*""` at present only matches a single
level, which means it would match a branch named `foo` but not `bar/foo`.

Given that I don't think this repository is actively using tags,
and given that the general cost for the spell checker isn't particularly
high, it's better to remove the filtering so that all branches get
checked.

Worst case, a branch that is also tagged and has spelling errors
will get two comments complaining about those spelling errors.",,,,False,False,False,0,4,1,1,jsoref@users.noreply.github.com,noreply@github.com,"03/25/2020, 23:51:51",2020,"03/25/2020, 23:51:51",2020,4,0,3,0.0,1.2,0
,"Process actions sync. on startup; don't dupe nonexistent profile (#5090)

This PR has evolved to encapsulate two related fixes that I can't really
untie anymore.

#2455 - Duplicating a tab that doesn't exist anymore

This was the bug I was originally fixing in #4429. 

When the user tries to `duplicateTab` with a profile that doesn't exist
anymore (like might happen after a settings reload), don't crash.

As I was going about adding tests for this, got blocked by the fact that
the Terminal couldn't open _any_ panes while the `TerminalPage` was size
0x0. This had two theoretical solutions: 

* Fake the `TerminalPage` into thinking it had a real size in the test -
  probably possible, though I'm unsure how it would work in practice.
* Change `Pane`s to not require an `ActualWidth`, `ActualHeight` on
  initialization. 

Fortuately, the second option was something else that was already on my
backlog of bugs. 

#4618 - `wt` command-line can't consistently parse more than one arg

Presently, the Terminal just arbitrarily dispatches a bunch of handlers
to try and handle all the commands provided on the commandline. That's
lead to a bunch of reports that not all the commands will always get
executed, nor will they all get executed in the same order. 

This PR also changes the `TerminalPage` to be able to dispatch all the
commands sequentially, all at once in the startup. No longer will there
be a hot second where the commands seem to execute themselves in from of
the user - they'll all happen behind the scenes on startup. 

This involved a couple other changes areound the `TerminalPage`
* I had to make sure that panes could be opened at a 0x0 size. Now they
  use a star sizing based off the percentage of the parent they're
  supposed to consume, so that when the parent _does_ get laid out,
  they'll take the appropriate size of that parent.
* I had to do some math ahead of time to try and calculate what a
  `SplitState::Automatic` would be evaluated as, despite the fact that
  we don't actually know how big the pane will be. 
* I had to ensure that `focus-tab` commands appropriately mark a single
  tab as focused while we're in startup, without roundtripping to the
  Dispatcher thread and back

## References

#4429 - the original PR for #2455
#5047 - a follow-up task from discussion in #4429
#4953 - a PR for making panes use star sizing, which was immensly
        helpful for this PR.

## Detailed Description of the Pull Request / Additional comments

`CascadiaSettings::BuildSettings` can throw if the GUID doesn't exist.
This wraps those calls up with a try/catch.

It also adds a couple tests - a few `SettingsTests` for try/catching
this state. It also adds a XAML-y test in `TabTests` that creates a
`TerminalPage` and then performs som UI-like actions on it. This test
required a minor change to how we generate the new tab dropdown - in the
tests, `Application::Current()` is _not_ a `TerminalApp::App`, so it
doesn't have a `Logic()` to query. So wrap that in a try/catch as well.

While working on these tests, I found that we'd crash pretty agressively
for mysterious reasons if the TestHostApp became focused while the test
was running. This was due to a call in
`TSFInputControl::NotifyFocusEnter` that would callback to
`TSFInputControl::_layoutRequested`, which would crash on setting the
`MaxSize` of the canvas to a negative value. This PR includes a hotfix
for that bug as well. 

## Validation Steps Performed

* Manual testing with a _lot_ of commands in a commandline
* run the tests
* Team tested in selfhost

Closes #2455
Closes #4618",,,,True,False,False,879,148,11,11,migrie@microsoft.com,noreply@github.com,"03/26/2020, 00:03:32",2020,"03/26/2020, 00:03:32",2020,1,3,3,4.3,4.8,0
,"Merged PR 4465022: [Git2Git] Merged PR 4464559: Console: Ingest OSS changes up to e0550798

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp cba60cafaadfcc7890a45dea3e1a24412c3d0ec6

Related work items: MSFT:25631386",,,,False,False,False,5,0,2,2,miniksa@microsoft.com,duhowett@microsoft.com,"03/26/2020, 01:20:36",2020,"03/26/2020, 01:20:36",2020,1,3,1,5.0,1.0,0
,"Add a ""debug tap"" that lets you see the VT behind a connection (#5127)

This commit adds a debugging feature that can be activated by holding
down Left Alt _and_ Right Alt when a new tab is being created, if you
have the global setting ""debugFeatures"" set to true. That global setting
will default to true in DEBUG builds.

That debugging feature takes the form of a split pane that shows the raw
VT sequences being written to and received from the connection.

When those buttons are held down, every connection that's created as
part of a new tab is wrapped and split into _two_ connections: one to
capture input (and stand in for the main connection) and one to capture
output (and be displayed off to the side)

Closes #3206",,,,False,False,False,239,2,6,6,duhowett@microsoft.com,noreply@github.com,"03/26/2020, 22:33:47",2020,"03/26/2020, 22:33:47",2020,4,1,3,5.0,3.6,0
,"Rework TermControl's initialization (#5051)

This commit rewrites a large swath of TermControl's initialization code.

* `TermControl` now _always_ has a `_terminal`; it will never be null
* Event registration for `_terminal` and any other available-at-init
  fixtures has been moved into the constructor.
* Event handlers how more uniformly check `_closing` if they interact
  with the _terminal.
* Swap chain attachment has been cleaned up and no longer uses a
  coroutine when it's spawned from the UI thread.
   * We have to register the renderer's swapchain change notification
     handler after we set the swap chain, otherwise it'll call us back
     when it initializes itself.
* `InitializeTerminal` now happens under the `_terminal`'s write lock
   * Certain things that InitializeTerminal were calling themselves
     attempted to take the lock. They no longer do so.
* TermControlAutomationPeer cannot take the read lock, because setting
  the scrollbar's `Maximum` during `InitializeTerminal` will trigger
  vivification of the automation peer tree; if it attempts to take the
  lock it will deadlock during initialization.
* `BlinkCursor` was renamed to `CursorTimerTick` because it's the ""Tick""
  handler for the ""CursorTimer"".
* `DragDropHandler` was converted into a coroutine instead of just
  _calling_ a coroutine.

Caveats:

Terminal may not have a `_buffer` until InitializeTerminal happens.
There's a nasty coupling between RenderTarget and TextBuffer that means
that we need to have a renderer before we have a buffer.

There's a second nasty coupling between RenderThread and Renderer: we
can't create a RenderThread during construction because it needs to be
given a renderer, and we can't create a Renderer during construction
because it needs a RenderThread. We don't want to kick off a thread
during construction.

Testing:

I wailed on this by opening and closing and resizing terminals and panes
and tabs, up to a hundred open tabs and one tab with 51 panes. I set one
tab to update the title as fast as it possibly could and tested
teardown, zoom, resize, mouse movement, etc. while this was all
happening.

Closes #4613.",,,,False,False,False,213,194,2,2,duhowett@microsoft.com,noreply@github.com,"03/26/2020, 23:25:11",2020,"03/26/2020, 23:25:11",2020,4,1,3,3.1,3.0,0
,"Add a note about binding multiple keys (#5015)

* Add a note about Binding multiple keys

From discussion in #4992

* Update doc/user-docs/UsingJsonSettings.md

Co-Authored-By: Josh Soref <jsoref@users.noreply.github.com>

* update the comment here to be a little clearer

Co-authored-by: Josh Soref <jsoref@users.noreply.github.com>",,,,False,False,False,16,0,1,1,migrie@microsoft.com,noreply@github.com,"03/27/2020, 15:51:32",2020,"03/27/2020, 15:51:32",2020,3,3,3,5.0,1.0,0
,Doc: add Developer Command Prompt for VS profile (#5142),,,,False,False,False,12,0,1,1,skyline75489@outlook.com,noreply@github.com,"03/27/2020, 20:53:30",2020,"03/27/2020, 20:53:30",2020,4,1,3,5.0,1.0,0
,"Convert the About and Close All Tabs dialogs to xaml (#5140)

## Summary of the Pull Request

This pull request replaces about a hundred lines of manual xaml DOM code with a few lines of actual xaml, and wires up bound properties and event handlers in the good and correct way.

As part of this change, I've replaced the giant TextBlock in the about dialog with StackPanels, and replaced the Hyperlinks with HyperlinkButtons. This is in line with other platform applications.

URLs are _not_ localizable resources, so I moved them into the about dialog's xaml. Per #5138, we'll likely change them so that they get localization for ""free"" (dispatching based on the browser's language, without having to localize the URL in the application).",,,,False,False,False,114,159,5,5,duhowett@microsoft.com,noreply@github.com,"03/27/2020, 21:00:32",2020,"03/27/2020, 21:00:32",2020,4,1,3,2.1,2.5,0
,"Correct scrolling invalidation region for tmux in pty w/ bitmap (#5122)

Correct scrolling invalidation region for tmux in pty w/ bitmap

Add tracing for circling and scrolling operations. Fix improper
invalidation within AdjustCursorPosition routine in the subsection about
scrolling down at the bottom with a set of margins enabled.

## References
- Introduced with #5024 

## Detailed Description of the Pull Request / Additional comments
- This occurs when there is a scroll region restriction applied and a
  newline operation is performed to attempt to spin the contents of just
  the scroll region. This is a frequent behavior of tmux.
- Right now, the Terminal doesn't support any sort of ""scroll content""
  operation, so what happens here generally speaking is that the PTY in
  the ConHost will repaint everything when this happens.
- The PTY when doing `AdjustCursorPosition` with a scroll region
  restriction would do the following things:

1. Slide literally everything in the direction it needed to go to take
   advantage of rotating the circular buffer. (This would force a
   repaint in PTY as the PTY always forces repaint when the buffer
   circles.)
2. Copy the lines that weren't supposed to move back to where they were
   supposed to go.
3. Backfill the ""revealed"" region that encompasses what was supposed to
   be the newline.

- The invalidations for the three operations above were:

1. Invalidate the number of rows of the delta at the top of the buffer
   (this part was wrong)
2. Invalidate the lines that got copied back into position (probably
   unnecessary, but OK)
3. Invalidate the revealed/filled-with-spaces line (this is good).

- When we were using a simple single rectangle for invalidation, the
  union of the top row of the buffer from 1 and the bottom row of the
  buffer from 2 (and 3 was irrelevant as it was already unioned it)
  resulted in repainting the entire buffer and all was good.

- When we switched to a bitmap, it dutifully only repainted the top line
  and the bottom two lines as the middle ones weren't a consequence of
  intersect.

- The logic was wrong. We shouldn't be invalidating rows-from-the-top
  for the amount of the delta. The 1 part should be invalidating
  everything BUT the lines that were invalidated in parts 2 and 3.
  (Arguably part 2 shouldn't be happening at all, but I'm not optimizing
  for that right now.)

- So this solves it by restoring an entire screen repaint for this sort
  of slide data operation by giving the correct number of invalidated
  lines to the bitmap.

## Validation Steps Performed
- Manual validation with the steps described in #5104
- Automatic test `ConptyRoundtripTests::ScrollWithMargins`.

Closes #5104",,,,True,False,False,505,20,14,14,miniksa@microsoft.com,noreply@github.com,"03/27/2020, 22:37:23",2020,"03/27/2020, 22:37:23",2020,4,3,3,4.8,4.8,0
,"add til::math, use it for float conversions to point, size (#5150)

This pull request introduces the `til::math` namespace, which provides some casting functions to be used in support of `til::point` and `til::size`. When point/size want to ingest a floating-point structure, they _must_ be instructed on how to convert those floating-point values into integers.

This enables:

```
Windows::Foundation::Point wfPoint = /* ... */;
til::point tp{ til::math::rounding, wfPoint };
```

Future thoughts: should the TilMath types be stackable? Right now, you cannot get ""checked + rounding"" behavior (where it throws if it doesn't fit) so everything is saturating.

## PR Checklist
* [x] Closes a request by Michael
* [x] I've discussed this with core contributors already",,,,False,False,False,490,0,11,11,duhowett@microsoft.com,noreply@github.com,"03/27/2020, 22:48:49",2020,"03/27/2020, 22:48:49",2020,4,1,3,5.0,3.5,0
,doc: add Git Bash(WOW64) to ThirdPartyToolProfiles (#5141),,,,False,False,False,14,1,1,1,skyline75489@outlook.com,noreply@github.com,"03/27/2020, 23:18:10",2020,"03/27/2020, 23:18:10",2020,4,1,3,4.7,1.0,0
,"Set DxRenderer non-text alias mode (#5149)

There are two antialias modes that can be set on the ID2D1RenderTarget:
- one for text/glyph drawing [1]
- one for everything else [2]
We had to configure that in the RenderTarget.

Additionally, when clipping the background color rect, we need to make
sure that's aliased too. [3]

## References
[1] ID2D1RenderTarget::SetTextAntialiasMode
    https://docs.microsoft.com/en-us/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-settextantialiasmode
[2] ID2D1RenderTarget::SetAntialiasMode
    https://docs.microsoft.com/en-us/windows/win32/api/d2d1/nf-d2d1-id2d1rendertarget-setantialiasmode)
[3] ID2D1CommandSink::PushAxisAlignedClip
    https://docs.microsoft.com/en-us/windows/win32/api/d2d1_1/nf-d2d1_1-id2d1commandsink-pushaxisalignedclip)

## Validation
Open and interact with midnight commander with the display scaling set
to...
- 100%
- 125%
- 150%
- 175%
- 200%

Closes #3626",,,,False,False,False,11,1,2,2,carlos.zamora@microsoft.com,noreply@github.com,"03/28/2020, 00:15:50",2020,"03/28/2020, 00:15:50",2020,1,1,3,4.6,1.0,0
,"Remove unneeded whitespace (#5162)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Every single time a PR is run, there are a bunch of warnings about whitespace in the .cs files, so I ran the code format on those files, without changing their contents, so it won't be flagged anymore.
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [X] Tests added/passed

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Ran the code-format utility on the .cs files",,,,True,True,False,25,25,12,12,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"03/30/2020, 14:33:32",2020,"03/30/2020, 14:33:32",2020,3,0,3,2.5,2.4,0
,"Make conechokey use ReadConsoleInputW by default (#5148)

This PR updates our internal tool `conechokey` to use `ReadConsoleInputW` by default. It also adds a flag `-a` to force it to use `ReadConsoleInputA`.

I discovered this while digging around for #1503, but figured I'd get this checked in now while I'm still investigating.

Since this is just a helper tool, I spent as little effort writing this change - yea the whole tool could benefit from cleaner code but _ain't nobody got time for that_.",,,,False,False,False,120,6,1,1,migrie@microsoft.com,noreply@github.com,"03/30/2020, 16:06:27",2020,"03/30/2020, 16:06:27",2020,3,3,3,4.8,2.4,0
,"Redraw TSFInputControl when Terminal cursor updates (#5135)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This PR will allow TSFInputControl to redraw its Canvas and TextBlock in response to when the Terminal cursor position updates. This will fix the issue where during Korean composition, the first symbol of the next composition will appear on top of the previous composed character. Since the Terminal Cursor updates a lot, I've added some checks to see if the TSFInputControl really needs to redraw. This will also decrease the number of actual redraws since we receive a bunch of `LayoutRequested` events when there's no difference between them.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4963
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Startup, teardown, CJK IME gibberish testing, making sure the IME block shows up in the right place.",,,,True,False,False,152,38,7,7,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"03/30/2020, 23:21:47",2020,"03/30/2020, 23:21:47",2020,4,1,3,4.0,3.0,0
,"Remove a heap of legacy settings deserialization (#5190)

This commit removes support for:

* legacy keybindings of all types
* `colorScheme.colors`, as an array
* A `globals` object in the root of the settings file
* `profile.colorTable` and `profile.colorscheme` (the rare v0.1 all-lowercase variety)

Fixes #4091.
Fixes #1069.",,,,True,False,False,61,632,15,15,duhowett@microsoft.com,noreply@github.com,"03/31/2020, 20:58:28",2020,"03/31/2020, 20:58:28",2020,4,1,3,0.4,4.8,0
,"Use an Automatic split for splitPane by default (#5194)

## Summary of the Pull Request

You no longer _need_ to specify the `split` argument to `splitPane`, it will default to `Automatic` instead of `None`


## PR Checklist
* [x] Closes a discussion we had in team sync
* [x] I work here
* [x] Tests updated
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Also disables the tests that are broken in #5169 while I investigate",,,,False,False,False,230,223,7,7,migrie@microsoft.com,noreply@github.com,"04/01/2020, 00:59:31",2020,"04/01/2020, 00:59:31",2020,1,3,3,2.5,3.6,0
,"Reimplement the VT tab stop functionality (#5173)

## Summary of the Pull Request

This is essentially a rewrite of the VT tab stop functionality, implemented entirely within the `AdaptDispatch` class. This significantly simplifies the `ConGetSet` interface, and should hopefully make it easier to share the functionality with the Windows Terminal VT implementation in the future.

By removing the dependence on the `SCREEN_INFORMATION` class, it fixes the problem of the the tab state not being preserved when switching between the main and alternate buffers. And the new architecture also fixes problems with the tabs not being correctly initialized when the screen is resized.

## References

This fixes one aspect of issue #3545.
It also supersedes the fix for #411 (PR #2816).
I'm hoping the simplification of `ConGetSet` will help with #3849.

## PR Checklist
* [x] Closes #4669
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

In the new tab architecture, there is now a `vector<bool>` (__tabStopColumns_), which tracks whether any particular column is a tab stop or not. There is also a __initDefaultTabStops_ flag indicating whether the default tab stop positions need to be initialised when the screen is resized.

The way this works, the vector is initially empty, and only initialized (to the current width of the screen) when it needs to be used. When the vector grows in size, the __initDefaultTabStops_ flag determines whether the new columns are set to false, or if every 8th column is set to true.

By default we want the latter behaviour - newly revealed columns should have default tab stops assigned to them - so __initDefaultTabStops_ is set to true. However, after a `TBC 3` operation (i.e. we've cleared all tab stops), there should be no tab stops in any newly revealed columns, so __initDefaultTabStops_ is set to false.

Note that the __tabStopColumns_ vector is never made smaller when the window is shrunk, and that way it can preserve the state of tab stops that are off screen, but which may come into range if the window is made bigger again.

However, we can can still reset the vector completely after an `RIS` or `TBC 3` operation, since the state can then be reconstructed automatically based on just the __initDefaultTabStops_ flag.

## Validation Steps Performed

The original screen buffer tests had to be rewritten to set and query the tab stop state using escape sequences rather than interacting with the `SCREEN_INFORMATION` class directly, but otherwise the structure of most tests remained largely the same.

However, the alt buffer test was significantly rewritten, since the original behaviour was incorrect, and the initialization test was dropped completely, since it was no longer applicable. The adapter tests were also dropped, since they were testing the `ConGetSet` interface which has now been removed.

I also had to make an addition to the method setup of the screen buffer tests (making sure the viewport was appropriately initialized), since there were some tests (unrelated to tab stops) that were previously dependent on the state being set in the tab initialization test which has now been removed.

I've manually tested the issue described in #4669 and confirmed that the tabs now produce the correct spacing after a resize.",,,,True,False,False,344,602,11,11,j4_james@hotmail.com,noreply@github.com,"04/01/2020, 12:49:27",2020,"04/01/2020, 12:49:27",2020,3,1,3,1.8,4.8,0
,"Clamp parameter values to a maximum of 32767. (#5200)

## Summary of the Pull Request

This PR clamps the parameter values in the VT `StateMachine` parser to 32767, which was the initial limit prior to PR #3956. This fixes a number of overflow bugs (some of which could cause the app to crash), since much of the code is not prepared to handle values outside the range of a `short`.

## References

#3956 - the PR where the cap was changed to the range of `size_t`
#4254 - one example of a crash caused by the higher range

## PR Checklist
* [x] Closes #5160
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

The DEC STD 070 reference recommends supporting up to at least 16384 for parameter values, so 32767 should be more than enough for any standard VT sequence. It might be nice to increase the limit to 65535 at some point, since that is the cap used by both XTerm and VTE. However, that is not essential, since there are very few situations where you'd even notice the difference. For now, 32767 is the safest choice for us, since anything greater than that has the potential to overflow and crash the app in a number of places.

## Validation Steps Performed

I had to make a couple of modifications to the range checks in the `OutputEngineTest`, more or less reverting to the pre-#3956 behavior, but after that all of the unit tests passed as expected.

I manually confirmed that this fixes the hanging test case from #5160, as well as overflow issues in the cursor operations, and crashes in `IL` and `DL` (see https://github.com/microsoft/terminal/issues/4254#issuecomment-575292926).",,,,True,False,False,27,15,3,3,j4_james@hotmail.com,noreply@github.com,"04/01/2020, 12:49:57",2020,"04/01/2020, 12:49:57",2020,3,1,3,3.2,1.2,0
,"Reduce CursorChanged Events for Accessibility (#5196)

## Summary of the Pull Request
Reduce the number of times we dispatch a cursor changed event. We were firing it every time the renderer had to do anything related to the cursor. Unfortunately, blinking the cursor triggered this behavior. Now we just check if the position has changed.

## PR Checklist
* [X] Closes #5143


## Validation Steps Performed
Verified using Narrator
Also verified #3791 still works right",,,,False,False,False,14,5,2,2,carlos.zamora@microsoft.com,noreply@github.com,"04/01/2020, 15:56:20",2020,"04/01/2020, 15:56:20",2020,3,1,3,3.7,1.0,0
,"Manually pass mouse wheel messages to TermControls (#5131)

## Summary of the Pull Request

As we've learned in #979, not all touchpads are created equal. Some of them have bad drivers that makes scrolling inactive windows not work. For whatever reason, these devices think the Terminal is all one giant inactive window, so we don't get the mouse wheel events through the XAML stack. We do however get the event as a `WM_MOUSEWHEEL` on those devices (a message we don't get on devices with normally functioning trackpads).

This PR attempts to take that `WM_MOUSEWHEEL` and manually dispatch it to the `TermControl`, so we can at least scroll the terminal content.

Unfortunately, this solution is not very general purpose. This only works to scroll controls that manually implement our own `IMouseWheelListener` interface. As we add more controls, we'll need to continue manually implementing this interface, until the underlying XAML Islands bug is fixed. **I don't love this**. I'd rather have a better solution, but it seems that we can't synthesize a more general-purpose `PointerWheeled` event that could get routed through the XAML tree as normal. 

## References

* #2606 and microsoft/microsoft-ui-xaml#2101 - these bugs are also tracking a similar ""inactive windows"" / ""scaled mouse events"" issue in XAML

## PR Checklist
* [x] Closes #979
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I've also added a `til::point` conversion _to_ `winrt::Windows::Foundation::Point`, and some scaling operators for `point`

## Validation Steps Performed

* It works on my HP Spectre 2017 with a synaptics trackpad
  - I also made sure to test that `tmux` works in panes on this laptop
* It works on my slaptop, and DOESN'T follow this hack codepath on this machine.",,,,True,False,False,356,20,17,16,migrie@microsoft.com,noreply@github.com,"04/01/2020, 16:58:16",2020,"04/01/2020, 16:58:16",2020,3,3,3,4.7,4.2,0
,doc: fix a typo in dynamic profiles (#5206),,,,True,True,False,1,1,1,1,migrie@microsoft.com,noreply@github.com,"04/01/2020, 18:59:20",2020,"04/01/2020, 18:59:20",2020,4,3,3,2.5,1.2,0
,"rename profiles.json to settings.json, clean up the defaults (#5199)

This pull request migrates `profiles.json` to `settings.json` and removes the legacy roaming AppData settings migrator.

It also:

* separates the key bindings in defaults.json into logical groups
* syncs the universal terminal defaults with the primary defaults
* removes some stray newlines that ended up at the beginning of settings.json and defaults.json

Fixes #5186.
Fixes #3291.

### categorize key bindings

### sync universal with main

### kill stray newlines in template files

### move profiles.json to settings.json

This commit also changes Get*Settings from returning a string to
returning a std::filesystem::path. We gain in expressiveness without a
loss in clarity (since path still supports .c_str()).

NOTE: I tried to do an atomic rename with the handle open, but it didn't
work for reparse points (it moves the destination of a symbolic link
out into the settings folder directly.)

(snip for atomic rename code)

```c++
auto path{ pathToSettingsFile.wstring() };
auto renameBufferSize{ sizeof(FILE_RENAME_INFO) + (path.size() * sizeof(wchar_t)) };
auto renameBuffer{ std::make_unique<std::byte[]>(renameBufferSize) };
auto renameInfo{ reinterpret_cast<FILE_RENAME_INFO*>(renameBuffer.get()) };
renameInfo->Flags = FILE_RENAME_FLAG_REPLACE_IF_EXISTS | FILE_RENAME_FLAG_POSIX_SEMANTICS;
renameInfo->RootDirectory = nullptr;
renameInfo->FileNameLength = gsl::narrow_cast<DWORD>(path.size());
std::copy(path.cbegin(), path.cend(), std::begin(renameInfo->FileName));

THROW_IF_WIN32_BOOL_FALSE(SetFileInformationByHandle(hLegacyFile.get(),
                          FileRenameInfo,
                          renameBuffer.get(),
                          gsl::narrow_cast<DWORD>(renameBufferSize)));
```

(end snip)

### Stop resurrecting dead roaming profiles",,,,True,False,False,144,126,9,9,duhowett@microsoft.com,noreply@github.com,"04/01/2020, 19:09:42",2020,"04/01/2020, 19:09:42",2020,4,1,3,3.1,3.6,0
,"ci: remove ""wether"" from dictionary, add ""VTE"" (#5207)

_Technically_, ""wether"" is a word but I'd be shocked if there's a scenario for
us to use it properly in this repo, so I'm pulling it from the dictionary.

Also, in #5200, we added ""VTE"", which is totally a valid acronym, to the codebase,
but not the whitelist. I'm not sure why the bot let me merge it anyways, but I'm
fixing it now.",,,,True,True,False,1,3,2,2,migrie@microsoft.com,noreply@github.com,"04/01/2020, 19:15:20",2020,"04/01/2020, 19:15:20",2020,4,3,3,1.2,1.2,0
,ci: spelling: update to 0.0.13 and include advice (#5211),,,,False,False,False,19,2,3,3,jsoref@users.noreply.github.com,noreply@github.com,"04/01/2020, 19:15:42",2020,"04/01/2020, 19:15:42",2020,4,0,3,4.5,1.0,0
,"Use MONITOR_DEFAULTTONEAREST so we can restore properly from minimized (#5213)

## Summary of the Pull Request

When we're restoring from minimized, that `MonitorFromWindow` call is returning null. Curious that we're getting null here, when [MSDN states](https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-monitorfromwindow):
> If the window is currently minimized, MonitorFromWindow uses the rectangle of the window before it was minimized.

Turns out, `MONITOR_DEFAULTTONEAREST` just fixes this.

## References
* #4857 - original PR that added this code block

## PR Checklist
* [x] Closes #5209
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Verified manually",,,,True,False,False,3,1,1,1,migrie@microsoft.com,noreply@github.com,"04/01/2020, 21:19:04",2020,"04/01/2020, 21:19:04",2020,4,3,3,3.7,1.2,0
,"This fixes C-M-space for WSL but not for Win32, but I'm not sure there's a problem in Win32 quite yet. (#5208)

## Summary of the Pull Request

When conpty is in VT input mode, we pass through all the input we receive. This includes all the other `Action*Dispatch` methods, but missed this one.

## References
* Missed during #4856 
* Discovered during the course of the #4192 review
* #5205 Also investigated part of the issue, but found a different bug.

## PR Checklist
* [x] Doesn't close anything, just related to above things.
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
This will fix the <kbd>ctrl+alt+space</kbd> in the Terminal thing mentioned in #4192, but doesn't actually resolve the root cause of that bug (which is tracked in #5205).",,,,True,False,False,5,0,1,1,migrie@microsoft.com,noreply@github.com,"04/01/2020, 22:31:08",2020,"04/01/2020, 22:31:08",2020,4,3,3,5.0,1.2,0
,"Add `null`, `unbound` to schema for keybindings (#5221)

## Summary of the Pull Request

Add `null`, `unbound` to schema for keybindings

## PR Checklist
* [x] Closes #4751
* [x] I work here
* [n/a] Tests added/passed
* [x] Requires documentation to be updated",,,,False,False,False,4,2,1,1,migrie@microsoft.com,noreply@github.com,"04/02/2020, 19:43:46",2020,"04/02/2020, 19:43:46",2020,4,3,3,3.3,1.0,0
,"Rename copy keybinding arg (#5216)

## Summary of the Pull Request
`TrimWhitespace` is misleading. So it is now renamed as 'singleLine'. If true, it comes out as a single line! That makes more sense!

## PR Checklist
* [X] Closes #3824 

## Validation Steps Performed
Attempted the keybinding with both settings (and none set).
Attempted mouse copy with and without shift.",,,,False,False,False,30,31,9,9,carlos.zamora@microsoft.com,noreply@github.com,"04/02/2020, 23:10:28",2020,"04/02/2020, 23:10:28",2020,4,1,3,2.5,2.0,0
,Change aka.ms links to fwlinks (#5223),,,,False,False,False,5,5,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"04/02/2020, 23:19:03",2020,"04/02/2020, 23:19:03",2020,4,1,3,2.5,1.0,0
,"Add splitMode to JSON schema (#5123)

## Summary of the Pull Request
Added `splitMode` to settings schema JSON and md files.
The definition might need some tweaking.

## References

## PR Checklist
* [x] Closes #4939",,,,False,False,False,5,1,2,2,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"04/03/2020, 00:11:31",2020,"04/03/2020, 00:11:31",2020,1,1,3,4.2,1.0,0
,"Force all our dialogs into the application theme, forcibly (#5224)

Because we cannot set RequestedTheme at the application level, we
occasionally run into issues where parts of our UI end up themed
incorrectly.  Dialogs, for example, live under a different Xaml root
element than the rest of our application. This makes our popup menus and
buttons ""disappear"" when the user wants Terminal to be in a different
theme than the rest of the system.  This hack---and it _is_ a
hack--walks up a dialog's ancestry and forces the theme on each element
up to the root. We're relying a bit on Xaml's implementation details
here, but it does have the desired effect.

It's not enough to set the theme on the dialog alone.

Fixes #3654.
Fixes #5195.",,,,True,False,False,21,1,1,1,duhowett@microsoft.com,noreply@github.com,"04/03/2020, 15:55:04",2020,"04/03/2020, 15:55:04",2020,3,1,3,4.8,1.2,0
,"Add more object ID tracing for Accessibility (#5215)

## Summary of the Pull Request

In preparation for getting more accessibility-related issues, I added an ID to the `ScreenInfoUiaProvider` (SIUP) and abstracted the one from `UiaTextRange`. Using this, I noticed that we are creating SIUPs when a new tab/pane is created. This is _good_. This means that we need to somehow notify a UIA Client that out structure has changed, and we need to use the new SIUP because the old one has been removed.

I'll be investigating that more after this PR lands.",,,,False,False,False,128,42,9,9,carlos.zamora@microsoft.com,noreply@github.com,"04/03/2020, 20:06:47",2020,"04/03/2020, 20:06:47",2020,4,1,3,3.8,3.0,0
,"doc: remove ""globals"" from schema (#5229)

## Summary of the Pull Request
Minor cleanup on the schema. Globals isn't accepted anymore,
so the schema should not help you autocomplete anymore.

## Validation Steps Performed
Imported the new schema. You do _not_ get a warning when globals
is in. But, the schema won't suggest things when inside globals.
It's just treated as an unknown item.

However, ""defaultProfile"" is still required (more of a sanity test)",,,,False,False,False,6,28,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/03/2020, 20:58:56",2020,"04/03/2020, 20:58:56",2020,4,1,3,1.7,1.2,0
,"Make CodepointWidthDetector::GetWidth faster (#3727)

This is a subset of #3578 which I think is harmless and the first step towards making things right.
References #3546 #3578 

## Detailed Description of the Pull Request / Additional comments

For more robust Unicode support, `CodepointWidthDetector` should provide concrete width information rather than a simple boolean of `IsWide`. Currently only `IsWide` is widely used and optimized using quick lookup table and fallback cache. This PR moves those optimization into `GetWidth`.

## Validation Steps Performed

API remains unchanged. Things are not broken.",,,,False,False,False,68,52,2,2,skyline75489@outlook.com,noreply@github.com,"04/04/2020, 00:56:22",2020,"04/04/2020, 00:56:22",2020,1,1,3,3.3,2.0,0
,"Split rolling and PR builds. Drop ARM64, X86 from PR. (#5256)

## Summary of the Pull Request
Edits the definition file to distinguish further between the rolling build (the one that happens in master as it's updated) and the PR builds (that happen on every push to a pull request to master.) We will build less in PR since it rolls so often by removing the lines that reveal very few to no bugs at PR time. We'll leave them on in rolling so stuff can still be caught.

## PR Checklist
* [x] Closes a desire to not waste builds.
* [x] I work here.
* [ ] We'll see if the build still works.
* [x] No specific docs.
* [x] I talked about this with @DHowett-MSFT already.

## Validation Steps Performed
* [x] This PR itself should validate that the definition still works in PRs. I think we have to wait for it to go to master to see if the trigger still works there.",,,,True,True,False,39,17,1,1,miniksa@microsoft.com,noreply@github.com,"04/06/2020, 22:11:03",2020,"04/06/2020, 22:11:03",2020,4,3,3,3.5,1.8,0
,"Prevent the cursor type being reset when changing the visibility (#5251)

A side effect of the `SetConsoleCursorInfo` API is that it resets the
cursor type to _Legacy_. This makes it impossible to change the cursor
visibility via the console APIs without also resetting the user's
preferred cursor type. This PR attempts to fix that limitation, by only
resetting the cursor type if the size has also been changed.

## PR Checklist
* [x] Closes #4124
* [x] CLA signed
* [ ] Tests added/passed
* [ ] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I suspect the reason for the original behaviour was because the
`SetConsoleCursorInfo` API sets both the visibility and the size, and if
you're setting the size, it's assumed you'd want the _Legacy_ cursor
type, because that's the only style for which the size is applicable.

So my solution was to only reset the cursor type if the requested cursor
size was actually different from the current size. That should be
reasonably backwards compatible with most size-changing code, but also
allow for changing the visibility without resetting the cursor type.

## Validation Steps Performed

I've tested the example code from issue #4124, and confirmed that it now
works correctly without resetting the cursor type.

I've also tested the console's _mark mode_, which temporarily changes
the cursor size while selecting. I've confirmed that the size still
changes, and that the original cursor type is restored afterwards.",,,,True,False,False,9,1,1,1,j4_james@hotmail.com,noreply@github.com,"04/06/2020, 23:00:40",2020,"04/06/2020, 23:00:40",2020,4,1,3,4.5,1.2,0
,"Make RIS switch back to the main buffer (#5248)

## Summary of the Pull Request

If we receive a _Reset to Initial State_ (`RIS`) sequence while in the alternate screen buffer, we should be switching back to the main buffer. This PR fixes that behavior.

## PR Checklist
* [x] Closes #3685
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

I've added a condition at the start of the `AdaptDispatch::HardReset` method to check whether we're using the alt buffer, and if so, call the `ConGetSet::PrivateUseMainScreenBuffer` API to switch back to the main buffer.

Calling `AdaptDispatch::UseMainScreenBuffer` would probably be neater for this, but it would also attempt to restore the cursor state, which seems pointless when we're in the process of resetting everything anyway.

## Validation Steps Performed

I've added a screen buffer test to confirm that the `RIS` sequence does actually switch back to the main buffer. I've also manually confirmed that the test case in issue #3685 does now behave as expected.",,,,True,False,False,37,2,2,2,j4_james@hotmail.com,noreply@github.com,"04/06/2020, 23:44:55",2020,"04/06/2020, 23:44:55",2020,4,1,3,4.7,1.2,0
,"Relax locking around the swapchain (#5225)

The terminal lock is really only for the terminal; since the renderer is
fully owned by the control, not the Terminal, and we'll only be
receiving swap chain events after we register them during
initialization, we don't need to lock before _or_ after firing off the
coroutine.

Fixes #5203.",,,,True,False,False,3,10,1,1,duhowett@microsoft.com,noreply@github.com,"04/07/2020, 00:15:31",2020,"04/07/2020, 00:15:31",2020,1,1,3,1.2,1.2,0
,"Patch the default profile and version into the settings template (#5232)

This pull request introduces unexpanded variables (`%DEFAULT_PROFILE%`,
`%VERSION%` and `%PRODUCT%`) to the user settings template and code to
expand them.

While doing this, I ran into a couple things that needed to widen from
accepting strings to accepting string views. I also had to move
application name and version detection up to AppLogic and expose the
AppLogic singleton.

The dynamic profile generation logic had to be moved to before we inject
the templated variables, as the new default profile depends on the
generated dynamic profiles.

References #5189, #5217 (because it has a dependency on `VERSION` and
`PRODUCT`).

## PR Checklist
* [x] Closes #2721 
* [x] CLA signed
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already

## Validation Steps Performed
Deleted my settings and watched them regenerate.",,,,False,False,False,143,35,15,15,duhowett@microsoft.com,noreply@github.com,"04/07/2020, 18:35:05",2020,"04/07/2020, 18:35:05",2020,4,1,3,4.0,3.6,0
,"Delegate all character input to the character event handler (#4192)

My basic idea was that `WM_CHAR` is just the better `WM_KEYDOWN`.
The latter fails to properly support common dead key sequences like in
#3516.

As such I added some logic to `Terminal::SendKeyEvent` to make it return
false if the pressed key represents a printable character.
This causes us to receive a character event with a (hopefully) correctly
composed code unit, which then gets sent to `Terminal::SendCharEvent`.
`Terminal::SendCharEvent` in turn had to be modified to support
potentially pressed modifier keys, since `Terminal::SendKeyEvent` isn't
doing that for us anymore.
Lastly `TerminalInput` had to be modified heavily to support character
events with modifier key states. In order to do so I merged its
`HandleKey` and `HandleChar` methods into a single one, that now handles
both cases.
Since key events will now contain character data and character events
key codes the decision logic in `TerminalInput::HandleKey` had to be
rewritten.

## PR Checklist
* [x] CLA signed
* [x] Tests added/passed
* [x] I've discussed this with core contributors already.

## Validation Steps Performed

* See #3516.
* I don't have any keyboard that generates surrogate characters. Due to
  this I modified `TermControl::_SendPastedTextToConnection` to send the
  data to `_terminal->SendCharEvent()` instead. I then pasted the test
  string """"𐐌𐐜𐐬"" and ensured that the new `TerminalInput::_SendChar`
  method still correctly assembles surrogate pairs.

Closes #3516
Closes #3554 (obsoleted by this PR)
Potentially impacts #391, which sounds like a duplicate of #3516",,,,True,True,False,436,339,12,12,leonard@hecker.io,noreply@github.com,"04/07/2020, 19:09:28",2020,"04/07/2020, 19:09:28",2020,4,1,3,2.8,4.8,0
,"Rename 'requestedTheme' to 'theme' (#5265)

## Summary of the Pull Request

Renames the `requestedTheme` global setting to `theme`. Propagates updates to...
- schema
- doc
- defaults.json
- universal-defaults.json
 
## PR Checklist
* [X] Closes #5264 

## Validation Steps Performed
| `theme` | Success? |
|--|--|
| `system` | ✔ |
| `light` | ✔ |
| `dark` | ✔ |

But we really know that `dark` is the one we care about here 😉",,,,False,False,False,21,23,7,7,carlos.zamora@microsoft.com,noreply@github.com,"04/07/2020, 19:14:06",2020,"04/07/2020, 19:14:06",2020,4,1,3,2.4,1.8,0
,ci/spelling: add ecma to the allowlist (#5275),,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"04/07/2020, 21:39:21",2020,"04/07/2020, 21:39:21",2020,4,1,3,5.0,1.0,0
,ci: spelling: update to 0.0.14a (#5270),,,,False,False,False,3,5,2,2,jsoref@users.noreply.github.com,noreply@github.com,"04/07/2020, 21:58:12",2020,"04/07/2020, 21:58:12",2020,4,0,3,1.9,1.0,0
,"Localize the profile name for cmd, change it to Command Prompt (#5287)

This commit introduces another template replacement for the user's
default settings, COMMAND_PROMPT_LOCALIZED_NAME, which will be replaced
with the contents of the CommandPromptDisplayName resource.

By default, that will be ""Command Prompt."" This name change will apply
only for new users, and only on first launch. Changes in the system
locale after first launch will not impact the name of the profile.

If the user _removes_ the name from their command prompt profile, its
name will revert irrecoverably to ""Command Prompt"". They will not be
given a chance to regenerate a localized name.

Fixes #4476.",,,,True,False,False,9,2,4,4,duhowett@microsoft.com,noreply@github.com,"04/08/2020, 20:41:58",2020,"04/08/2020, 20:41:58",2020,4,1,3,4.1,1.2,0
,"Control: Start the connection outside of lock (#5286)

When the connection printed text immediately, synchronously, as part of
Start() it would cause terminal to deadlock. We should start the
connection outside of lock.

The ConptyConnection would do this when it failed to launch something
(trivial repro: `wt -- xyz`).

The TelnetConnection would do this all the time, because local loopback
telnet is fast and easy.",,,,True,True,False,6,2,1,1,duhowett@microsoft.com,noreply@github.com,"04/08/2020, 20:55:20",2020,"04/08/2020, 20:55:20",2020,4,1,3,3.7,1.2,0
,"Fix copying wrapped lines by implementing better scrolling (#5181)

Now that the Terminal is doing a better job of actually marking which
lines were and were not wrapped, we're not always copying lines as
""wrapped"" when they should be. We're more correctly marking lines as not
wrapped, when previously we'd leave them marked wrapped.

The real problem is here in the `ScrollFrame` method - we'd manually
newline the cursor to make the terminal's viewport shift down to a new
line. If we had to scroll the viewport for a _wrapped_ line, this would
cause the Terminal to mark that line as broken, because conpty would
emit an extra `\n` that didn't actually exist.

This more correctly implements `ScrollFrame`. Now, well move where we
""thought"" the cursor was, so when we get to the next `PaintBufferLine`,
if the cursor needs to newline for the next line, it'll newline, but if
we're in the middle of a wrapped line, we'll just keep printing the
wrapped line.

A couple follow up bugs were found to be caused by the same bad logic.
See #5039 and #5161 for more details on the investigations there.

## References

* #4741 RwR, which probably made this worse
* #5122, which I branched off of 
* #1245, #357 - a pair of other conpty wrapped lines bugs
* #5228 - A followup issue for this PR

## PR Checklist
* [x] Closes #5113
* [x] Closes #5180 (by fixing DECRST 25)
* [x] Closes #5039
* [x] Closes #5161 (by ensuring we only `removeSpaces` on the actual
  bottom line)
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

* Checked the cases from #1245, #357 to validate that they still work
* Added more and more tests for these scenarios, and then I added MORE
  tests
* The entire team played with this in selfhost builds",,,,True,False,False,1136,86,12,12,migrie@microsoft.com,noreply@github.com,"04/09/2020, 00:06:25",2020,"04/09/2020, 00:06:25",2020,1,3,3,4.6,4.8,0
,"Muffle updates to the cursor position to 1/~100ms (#5289)

This stops us from dispatching back-to-back terminal cursor position
updates to the TSF control before it has a chance to get back to us.

Fixes #5288.",,,,True,False,False,23,0,2,2,duhowett@microsoft.com,noreply@github.com,"04/09/2020, 00:20:51",2020,"04/09/2020, 00:20:51",2020,1,1,3,5.0,1.2,0
,doc: update list of team members in README (#5296),,,,False,False,False,0,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"04/09/2020, 17:38:12",2020,"04/09/2020, 17:38:12",2020,3,1,3,0.0,1.0,0
,"Add 'copyFormatting' global setting (#5263)

## Summary of the Pull Request
Implements `copyFormatting` as a global setting. When enabled, formatting such as font and foreground/background colors are copied to the clipboard on _all_ copy operations.

Also updates the schema and docs.

## References
#5212 - Spec for Formatted Copying
#4191 - Setting to enable/disable formatted copy

This feature will also have an impact on these yet-to-be-implemented features:
- #5262 - copyFormatting Keybinding Arg for Copy
- #1553 - Pointer Bindings


## PR Checklist
* [X] Closes #4191

## Detailed Description of the Pull Request / Additional comments
We already check if the hstring passed into the clipboard is empty before setting it. So the majority of the changes are actually just adding the global setting in.

## Validation Steps Performed
| `copyFormatting` | Mouse Copy | Keyboard Copy |
|--|--|--|
| not set (`false`) | ✔ | ✔ |
| `true` | ✔ | ✔ |
| `false` | ✔ | ✔ |",,,,False,False,False,32,10,5,5,carlos.zamora@microsoft.com,noreply@github.com,"04/09/2020, 18:03:32",2020,"04/09/2020, 18:03:32",2020,4,1,3,3.8,1.0,0
,"Revert ""Add 'copyFormatting' global setting (#5263)"" (#5298)

This reverts commit c55d9cd62daf2a7bef5903e489e77de83e79e17b.
It was merged with its corresponding specification unmerged.",,,,False,False,False,10,32,5,5,duhowett@microsoft.com,noreply@github.com,"04/09/2020, 18:13:21",2020,"04/09/2020, 18:13:21",2020,4,1,3,1.2,1.0,0
,"Control: make sure we actually have a dispatcher in 100ms (#5292)

This fixes a silly regression introduced by 1299a839b. We would crash
when the connection updated the cursor as it was being torn down.",,,,True,True,False,2,1,1,1,duhowett@microsoft.com,noreply@github.com,"04/09/2020, 19:08:06",2020,"04/09/2020, 19:08:06",2020,4,1,3,3.3,1.2,0
,"Add support for the DSR-OS operating status report (#5300)

This adds support for the VT escape sequence that requests the
terminal's operating status. There is no attempt to actually verify the
status of the app, though. We always return a response indicating a good
operating condition (the same as most terminal emulators).

## PR Checklist
* [x] CLA signed.
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments

This required an update to the `OutputStateMachineEngine` to accept the
`DSR-OS` type, since it only dispatches types that it recognises (I
think that's unnecessary, but that's an issue for another day).

The actual processing of the request is handled in the `AdaptDispatch`
class, where it simply responds with a hard coded sequence (`CSI 0 n`),
indicating a good operating condition.

## Validation Steps Performed

I've added unit tests to confirm that the request is dispatched
correctly, and the appropriate response is returned. I've also manually
confirmed that the test of the _Device Status Report_ in _Vttest_ is now
succeeding.

Closes #5052",,,,False,False,False,48,5,8,8,j4_james@hotmail.com,noreply@github.com,"04/09/2020, 20:11:37",2020,"04/09/2020, 20:11:37",2020,4,1,3,4.5,2.4,0
,"Fall back to TerminalApp.dll's version when we're unpackaged (#5274)

This pull request makes sure we still get a usable (for troubleshooting purposes) version number in the about dialog and settings file when the user is running unpackaged.

This introduces a magic LCID constant (0x0409).B y default, Package ES emits
version resource information that says we're localized to ... language zero.
It also emits a language-coded version block for 0x0409 (en-US).

These two things cannot both be true. Collapse the wave function by hardcoding
0x0409.",,,,False,False,False,34,0,2,2,duhowett@microsoft.com,noreply@github.com,"04/09/2020, 22:59:21",2020,"04/09/2020, 22:59:21",2020,4,1,3,5.0,1.2,0
,"Add default values to defaults.json (#5231)

## Summary of the Pull Request
This updates defaults.json to include the default values for all global and profile settings. Most default keybinding args are added too. This also updates a few outdated items found in the docs.

## PR Checklist
* [X] Closes #5189 

## Validation Steps Performed
After making the changes, I made sure all of the settings are deserialized by debugging and stepping through the `LayerJson` code.
- [X] Global Settings

I was mainly looking for two things:
- the key/value pair is found and read
- the value did not change before/after the pair was read",,,,False,False,False,72,39,5,5,carlos.zamora@microsoft.com,noreply@github.com,"04/09/2020, 23:13:57",2020,"04/09/2020, 23:13:57",2020,4,1,3,3.2,2.4,0
,"Update default settings.json experience (#5217)

## Summary of the Pull Request
Add comments and settings to settings.json for discoverability.

## PR Checklist
* [X] Closes #5187 
* [X] Closes #5188 
* [X] Closes #3058",,,,False,False,False,39,9,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/09/2020, 23:21:22",2020,"04/09/2020, 23:21:22",2020,4,1,3,4.1,1.2,0
,"Don't wait for a connection to finish when a control is closed (#5303)

## Summary of the Pull Request

When a pane is closed by a connection, we want to wait until the connection is actually `Closed` before we fire the actual `Closed` event. If the connection didn't close gracefully, there are scenarios where we want to print a message to the screen.

However, when a pane is closed by the UI, we don't really care to wait for the connection to be completely closed. We can just do it whenever. So I've moved that call to be on a background thread.

## PR Checklist
* [x] Closes #1996
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
Previously we'd wait for the connection to close synchronously when closing tabs or panes. For misbehaving applications like `ssh.exe`, that could result in the `Close` needing to `WaitForSingleObject` _on the UI thread_. If the user closed the tab / pane either with a keybinding or with some other UI element, they don't really care to see the error message anymore. They just want the pane closed. So there's no need to wait for the actual connection to close - the app can just continue on with whatever it was doing.

## Validation Steps Performed
Messed around with closing tabs, panes, tabs with many panes, the entire window. Did this with keybindings, or by clicking on the 'x' on the tab, the 'x' on the window, or using middle-click.

I'm always scared of things like this, so there's a 50% chance this makes things horribly worse.",,,,True,True,False,28,5,2,2,migrie@microsoft.com,noreply@github.com,"04/09/2020, 23:27:56",2020,"04/09/2020, 23:27:56",2020,4,3,3,4.2,1.2,0
,"doc: add a spec for the change to formatted copying (#5212)

This is the spec that goes into what we do with HTML copy once we set the
default copy behavior to plain text.

Specs #4191 

Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>
Co-authored-by: Josh Soref <jsoref@users.noreply.github.com>
Co-authored-by: Leon Liang <57155886+leonMSFT@users.noreply.github.com>",,,,False,False,False,88,0,2,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"04/09/2020, 23:30:19",2020,"04/09/2020, 23:30:19",2020,4,1,3,5.0,1.8,0
,"Add 'copyFormatting' global setting (#5299)

## Summary of the Pull Request
Implements `copyFormatting` as a global setting. When enabled, formatting such as font and foreground/background colors are copied to the clipboard on _all_ copy operations.

Also updates the schema and docs.

## References
#5212 - Spec for Formatted Copying
#4191 - Setting to enable/disable formatted copy

#5263 - PR prematurely merged without approval of #5212 

This feature will also have an impact on these yet-to-be-implemented features:
- #5262 - copyFormatting Keybinding Arg for Copy
- #1553 - Pointer Bindings
- #4191 - add array support for `copyFormatting`


## Detailed Description of the Pull Request
We already check if the hstring passed into the clipboard is empty before setting it. So the majority of the changes are actually just adding the global setting in.

## Validation Steps Performed
| `copyFormatting` | Mouse Copy | Keyboard Copy |
|--|--|--|
| not set (`false`) | ✔ | ✔ |
| `true` | ✔ | ✔ |
| `false` | ✔ | ✔ |",,,,False,False,False,32,10,5,5,carlos.zamora@microsoft.com,noreply@github.com,"04/09/2020, 23:32:38",2020,"04/09/2020, 23:32:38",2020,4,1,3,3.8,1.0,0
,"Render row-by-row instead of invalidating entire screen (#5185)

## Summary of the Pull Request
Adjusts DirectX renderer to use `til::bitmap` to track invalidation
regions. Uses special modification to invalidate a row-at-a-time to
ensure ligatures and NxM glyphs continue to work.

## References
Likely helps #1064

## PR Checklist
* [x] Closes #778
* [x] I work here.
* [x] Manual testing performed. See Performance traces in #778.
* [x] Automated tests for `til` changes.
* [x] Am core contributor. And discussed with @DHowett-MSFT.

## Detailed Description of the Pull Request / Additional comments
- Applies `til::bitmap` as the new invalidation scheme inside the
  DirectX renderer and updates all entrypoints for collecting
  invalidation data to coalesce into this structure.
- Semi-permanently routes all invalidations through a helper method
  `_InvalidateRectangle` that will expand any invalidation to cover the
  entire line. This ensures that ligatures and NxM glyphs will continue
  to render appropriately while still allowing us to dramatically reduce
  the number of lines drawn overall. In the future, we may come up with
  a tighter solution than line-by-line invalidation and can modify this
  helper method appropriately at that later date to further scope the
  invalid region.
- Ensures that the `experimental.retroTerminalEffects` feature continues
  to invalidate the entire display on start of frame as the shader is
  applied at the end of the frame composition and will stack on itself
  in an amusing fashion when we only redraw part of the display.
- Moves many member variables inside the DirectX renderer into the new
  `til::size`, `til::point`, and `til::rectangle` methods to facilitate
  easier management and mathematical operations. Consequently adds
  `try/catch` blocks around many of the already-existing `noexcept`
  methods to deal with mathematical or casting failures now detected by
  using the support classes.
- Corrects `TerminalCore` redraw triggers to appropriately communicate
  scrolling circumstances to the renderer so it can optimize the draw
  regions appropriately.
- Fixes an issue in the base `Renderer` that was causing overlapping
  scroll regions due to behavior of `Viewport::TrimToViewport` modifying
  the local. This fix is ""good enough"" for now and should go away when
  `Viewport` is fully migrated to `til::rectangle`.
- Adds multiplication and division operators to `til::rectangle` and
  supporting tests. These operates will help scale back and forth
  between a cell-based rectangle and a pixel-based rectangle. They take
  special care to ensure that a pixel rectangle being divided downward
  back to cells will expand (with the ceiling division methods) to cover
  a full cell when even one pixel inside the cell is touched (as is how
  a redraw would have to occur).
- Blocks off trace logging of invalid regions if no one is listening to
  optimize performance.
- Restores full usage of `IDXGISwapChain1::Present1` to accurately and
  fully communicate dirty and scroll regions to the underlying DirectX
  framework. This additional information allows the framework to
  optimize drawing between frames by eliminating data transfer of
  regions that aren't modified and shuffling frames in place. See
  [Remarks](https://docs.microsoft.com/en-us/windows/win32/api/dxgi1_2/nf-dxgi1_2-idxgiswapchain1-present1#remarks)
  for more details.
- Updates `til::bitmap` set methods to use more optimized versions of
  the setters on the `dynamic_bitset<>` that can bulk fill bits as the
  existing algorithm was noticeably slow after applying the
  ""expand-to-row"" helper to the DirectX renderer invalidation.
- All `til` import hierarchy is now handled in the parent `til.h` file
  and not in the child files to prevent circular imports from happening.
  We don't expect the import of any individual library file, only the
  base one. So this should be OK for now.

## Validation Steps Performed
- Ran `cmatrix`, `cmatrix -u0`, and `cacafire` after changes were made.
- Made a bunch of ligatures with `Cascadia Code` in the Terminal
  before/after the changes and confirmed they still ligate.
- Ran `dir` in Powershell and fixed the scrolling issues
- Clicked all over the place and dragged to make sure selection works.
- Checked retro terminal effect manually with Powershell.",,,,True,False,False,762,431,17,17,miniksa@microsoft.com,noreply@github.com,"04/13/2020, 20:09:02",2020,"04/13/2020, 20:09:02",2020,4,3,3,3.6,4.8,0
,doc: Fix the typos I introduced in #2193 (#5343),,,,True,True,False,16,14,2,1,migrie@microsoft.com,noreply@github.com,"04/13/2020, 20:50:02",2020,"04/13/2020, 20:50:02",2020,4,3,3,3.4,1.2,0
,"Add the Tango color schemes for Terminal and ColorTool (#5305)

The Tango color scheme is part of the Tango Desktop Project, which was
released to the public domain in 2009.

More information is available at http://tango-project.org/.

This commit adds the ""Tango Dark"" and ""Tango Light"" color scheme
presets.

Closes #5281

Signed-off-by: Rafael Kitover <rkitover@gmail.com>",,,,False,False,False,499,1,4,4,rkitover@gmail.com,noreply@github.com,"04/14/2020, 17:47:02",2020,"04/14/2020, 17:47:02",2020,3,0,3,5.0,2.5,0
,"spelling: COLOREREF -> COLORREF (#5352)

Spell check passed on my fork :-)

I saw this when I was looking at someone else's PR and realized that it's just a typo.",,,,False,False,False,1,2,2,2,jsoref@users.noreply.github.com,noreply@github.com,"04/14/2020, 19:30:51",2020,"04/14/2020, 19:30:51",2020,4,0,3,1.7,1.0,0
,"Import fmtlib/fmt@6.2.0, a C++20-style format library (#5336)

We received a request from our localization team to switch from
printf-style format strings (%s, %u) to format strings with positional
argument support. I've been hoping for a long time to take a dependency
on C++20's std::format, but we're just not somewhere we can do that.
Enter fmt. fmt is _exactly_ the library we need.

Minor comparison:

std::wstring_view world = /* ... */;
auto str{ wil::str_printf<std::wstring>(L""hello %.*s"",
	   gsl::narrow_cast<size_t>(world.size()),
	   world.data()) };

---

auto str{ fmt::format(L""hello {0}"", world) };

If you really want to use the print specifiers:

auto str{ fmt::printf(L""hello %s"", world) };

It's got optional compile-time checking for format strings and is
MIT-licensed. Eventually, we should be able to replace fmt:: with std::
and end up pretty much where we left off.
What more could you ask for?",,,,False,False,False,11495,4,24,24,dustin@howett.net,noreply@github.com,"04/14/2020, 20:04:23",2020,"04/14/2020, 20:04:23",2020,4,1,3,5.0,4.0,0
,Add spelling issues from {fmt} to the allowlist/dictionary,,,,False,False,False,2,0,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"04/14/2020, 20:05:38",2020,"04/14/2020, 20:05:38",2020,4,1,1,5.0,1.2,0
,"Add support for renderer backoff, don't FAIL_FAST on 3x failures, add UI (#5353)

## Summary of the Pull Request
Renderer: Add support for backoff and auto-disable on failed retry

This commit introduces a backoff (150ms * number of tries) to the
renderer's retry logic (introduced in #2830). It also changes the
FAIL_FAST to a less globally-harmful render thread disable, so that we
stop blowing up any application hosting a terminal when the graphics
driver goes away.

In addition, it adds a callback that a Renderer consumer can use to
determine when the renderer _has_ failed, and a public method to kick it
back into life.

Fixes #5340.

This PR also wires up TermControl so that it shows some UI when the renderer tastes clay.

![image](https://user-images.githubusercontent.com/14316954/79266118-f073f680-7e4b-11ea-8b96-5588a13aff3b.png)

![image](https://user-images.githubusercontent.com/14316954/79266125-f36ee700-7e4b-11ea-9314-4280e9149461.png)

## PR Checklist
* [x] Closes #5340
* [x] cla
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already.

## Validation Steps Performed

I tested this by dropping the number of retries to 1 and forcing a TDR while doing `wsl cmatrix -u0`. It picked up exactly where it left off.

As a bonus, you can actually still type into the terminal when it's graphically suspended (and `exit` still works.). The block is _entirely graphical_.",,,,True,False,False,106,2,9,9,duhowett@microsoft.com,noreply@github.com,"04/14/2020, 20:11:47",2020,"04/14/2020, 20:11:47",2020,4,1,3,4.9,3.0,0
,"specs: draft spec for adding profiles to the Windows jumplist (#5350)

_This is literally just #1357, but moved to the `drafts/` folder_. Since
@dsafa doesn't have the time to finish this on their own, we'll take it
from here for 2.0 ☺️

## Summary of the Pull Request
Adds a spec describing jumplist integration and adding profiles to the jumplist. Includes details about previous investigations into adding the jumplist.

## PR Checklist
* [x] Specs #576 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [n/a] Tests added/passed
* [x] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #576 

## Detailed Description of the Pull Request / Additional comments
Details in the spec.

## Validation Steps Performed
N/A

Co-authored-by: Brandon Chong <brndnchong@gmail.com>",,,,False,False,False,133,0,5,5,migrie@microsoft.com,noreply@github.com,"04/14/2020, 20:17:15",2020,"04/14/2020, 20:17:15",2020,4,3,3,5.0,2.4,0
,"Remove singleLine copy from Shift+Click, CopyOnSelect (#5346)

This fixes an issue where a shift+click selection with `copyOnSelect`
enabled would result in copying the content as a single line.

## Detailed Description of the Pull Request / Additional comments
I've been thinking a lot about this issue and how it relates to the
copy/paste discussions we've been having over the past few weeks.
Considering that the majority of users want regular copy, it makes sense
to default to that in this case too.

If a user wants to perform a special form of copy, it makes sense that
they should use their custom keybinding to accomplish that. This kind of
behavior aligns with that kind of philosophy.

## Validation Steps Performed

The following scenarios were tested with `copyOnSelect` enabled.
| scenario                                | behavior                      |
|-----------------------------------------|-------------------------------|
| Perform a shift+click selection         | content copied w/ newlines    |
| right-click                             | clipboard paste               |
| copy keybinding (`singleLine` disabled) | content copied w/ newlines    |
| copy keybinding (`singleLine` enabled)  | content copied as single line |

Closes #4737",,,,True,False,False,3,11,2,2,carlos.zamora@microsoft.com,noreply@github.com,"04/14/2020, 20:19:22",2020,"04/14/2020, 20:19:22",2020,4,1,3,1.1,1.2,0
,"Update the virtual bottom location if the cursor moves below it (#5317)

If an application writes to the screen while not in VT mode, and the
user has scrolled forward in the screen buffer, the _virtual bottom_
location is not updated to take that new content into account. As a
result, the viewport can later jump back to the previous _virtual
bottom_, making the content disappear off screen. This PR attempts to
fix that issue by updating the _virtual bottom_ location whenever the
cursor moves below that point.

## PR Checklist
* [x] CLA signed. 
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments

This simply adds a condition in the
`SCREEN_INFORMATION::SetCursorPosition` to check if the new _Y_
coordinate is below the current _virtual bottom_, and if so, updates the
_virtual bottom_ to that new value.

I considered trying to make it only update when something is actually
written to the screen, but this seemed like a cleaner solution, and is
less likely to miss out on a needed update.

## Validation Steps Performed

I've manually tested the case described in issue #5302, and confirmed
that it now works as expected. I've also added a unit test that checks
the virtual bottom is updated correctly under similar conditions.

Closes #5302",,,,True,False,False,55,0,2,2,j4_james@hotmail.com,noreply@github.com,"04/14/2020, 20:20:30",2020,"04/14/2020, 20:20:30",2020,4,1,3,5.0,1.8,0
,"Fix localizability issues in Windows Terminal (#5339)

Loc issues are given to us through the internal bug tracker.

* Lock some strings, or parts of strings, that should not be localized.
* Switch to positional format parameters
* Remove the forced newlines in the warning resources; insert them at
  runtime

Fixes MSFT:25936156.",,,,True,True,False,54,46,6,6,duhowett@microsoft.com,noreply@github.com,"04/14/2020, 20:48:46",2020,"04/14/2020, 20:48:46",2020,4,1,3,2.7,2.4,0
,"Emit lines wrapped due to spaces at the end correctly (#5294)

## Summary of the Pull Request

When WSL vim prints the initial empty buffer (the one that's just a bunch of '\~'s), it prints this by doing the following:
* Print '\~' followed by enough spaces to clear the line
* Use CUP (`^[[H`) to move the cursor to the start of the next line
* repeat until the buffer is full

When we'd get the line of ""\~     ""... in conhost, we'd mark that line as wrapped. 

Logically, it doesn't really make any sense that when we follow that up by moving the cursor, the line is wrapped. However, this is just how conhost is right now. 
This wasn't ever a problem in just conhost before, because we really didn't care if lines in the alt buffer were ""wrapped"" or not. Plus, when vim would get resized, it would just reprint it's own buffer anyways. Nor was this a problem in conpty before this year (2020). We've only just recently added logic to conpty to try and preserve wrapped lines. 

Initially, I tried fixing this by breaking the line manually when the cursor was moved. This seemed to work great, except for the win32 vim.exe. Vim.exe doesn't emit a newline or a CUP to get to the next line. It just _goes for it_ and keeps printing. So there's _no way_ for us to know the line broke, because they're essentially just printing one long line, assuming we'll automatically move the cursor.

So instead, I'm making sure to emit the proper number of spaces at the end of a line when the line is wrapped. We won't do any funny business in that scenario and try to optimize for them, we'll _just print the spaces_.

## References

* #5181 - This change regressed this
* #4415 - Actually implemented wrapped lines in conpty

## PR Checklist
* [x] Closes #5291
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
* Wrote a unittest first and foremost
* Checked vtpipeterm to make sure vim still works
* checked Terminal to make sure vim still works",,,,True,True,False,199,21,4,4,migrie@microsoft.com,noreply@github.com,"04/15/2020, 15:52:11",2020,"04/15/2020, 15:52:11",2020,3,3,3,4.6,3.0,0
,"Show a double width cursor for double width characters (#5319)

# Summary of the Pull Request
This PR will allow the cursor to be double width when on top of a double width character. This required changing `IsCursorDoubleWidth` to check whether the glyph the cursor's on top of is double width. This code is exactly the same as the original PR that addressed this issue in #2932. That one got reverted at some point due to the crashes related to it, but due to a combination of Terminal having come further since that PR and other changes to address use-after-frees, some of the crashes may/may not be relevant now. The ones that seemed to be relevant/repro-able, I attempt to address in this PR.

The `IsCursorDoubleWidth` check would fail during the `TextBuffer::Reflow` call inside of `Terminal::UserResize` occasionally, particularly when `newCursor.EndDeferDrawing()` is called. This is because when we tell the newCursor to `EndDefer`, the renderer will attempt to redraw the cursor. As part of this redraw, it'll ask if `IsCursorDoubleWidth`, and if the renderer managed to ask this before `UserResize` swapped out the old buffer with the new one from `Reflow`, the renderer will be asking the old buffer if its out-of-bounds cursor is double width. This was pretty easily repro'd using `cmatrix -u0` and resizing the window like a madman.

As a solution, I've moved the Start/End DeferDrawing calls out of `Reflow` and into `UserResize`. This way, I can ""clamp"" the portion of the code where the newBuffer is getting created and reflowed and swapped into the Terminal buffer, and only allow the renderer to draw once the swap is done. This also means that ConHost's `ResizeWithReflow` needed to change slightly.

In addition, I've added a WriteLock to `SetCursorOn`. It was mentioned as a fix for a crash in #2965 (although I can't repro), and I also figured it would be good to try to emulate where ConHost locks with regards to Cursor operations, and this seemed to be one that we were missing.

## PR Checklist
* [x] Closes #2713
* [x] CLA signed
* [x] Tests added/passed

## Validation Steps Performed
Manual validation that the cursor is indeed chonky, added a test case to check that we are correctly saying that the cursor is double width (not too sure if I put it in the right place). Also open to other test case ideas and thoughts on what else I should be careful for since I am quite nervous about what other crashes might occur.",,,,True,False,False,67,13,7,7,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"04/15/2020, 19:23:06",2020,"04/15/2020, 19:23:06",2020,4,1,3,4.2,2.4,0
,"Rework error handling and state flow in the Azure connection (#5356)

This commit fixes a number of problems and code quality/health issues
with the AzureConnection.

This is a general tidying-up of the azure connection. It improves error
logging (like: it actually emits error logs...) and retry logic and the
state machine and it audits the exit points of the state machine for
exceptions and removes the HRESULT returns (so they either succeed and
transition to a new state or throw an exception or are going down
anyway).

There's also a change in here that changes how we display tenants. It
adds the ""default domain"" to the name, so that instead of seeing this:

Conhost (aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa)
Default Directory (bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb)

you see this

Conhost (conhost.onmicrosoft.com)
Default Directory (dustinhowett.onmicrosoft.com)

Changes:

* rework tenant/tenant storage and fix display names

  Switch to the 2020 tenant API.

  Instead of passing around four loose variables, create a Tenant class
  and use that for packing/unpacking into/out of json (and the windows
  credential store, where we ""cleverly"" used json for the tenant info
  there too).
  
  When displaying a tenant, use its display name if there is one, the
  unknown resource string if there isn't, and the default domain if
  there is one and the ID if there isn't.
  
  Fixes #5325.

* use {fmt} for formatting request bodies
* remove dead strings
* rework/rename Request/HeaderHelper to
  Send(Authenticated)ReqReturningJson
* rewrite polling to use std::chrono
* remove HR returns from state machine
* rename state handlers from _XHelper to _RunXState
* cleanup namespaces, prefix user input with >, remove namespaces
* Rework error handling
  - _RequestHelper no longer eats exceptions.
  - Delete the ""no internet"" error message.
  - Wrap exceptions coming out of Azure API in a well-known type.
  - Catch by type.
  - Extract error codes for known failures (keep polling, invalid
    grant).
  - When we get an Invalid Grant, dispose of the cached refresh token
    and force the user to log in again.
  - Catch all printable exceptions and print them.
  - Remove the NoConnect state completely -- just bail out when an
    exception hits the toplevel of the output thread.
  - Move 3x logic into _RefreshTokens and pop exceptions out of it.
  - Begin abstracting into AzureClient

Fixes #5325 (by addressing its chief complaint).
Fixes #4803 (by triggering auth flow again if the token expires).
Improves diagnosability for #4575.",,,,True,False,False,320,257,4,4,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 00:32:52",2020,"04/17/2020, 00:32:52",2020,1,1,3,3.2,3.6,0
,"wpf: fix two crashes and some fallout from the new key event handler (#5373)

## Summary of the Pull Request

This pull request fixes a crash on scrolling down (overflow exception cramming the signed short upper WORD of the wParam into an actual signed short on x64) and a crash on key input caused by improper use of `Marshal.ReadByte` on an integer (instead of a memory address).

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed
Manually did those things on x64.",,,,True,True,False,3,3,1,1,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 01:10:14",2020,"04/17/2020, 01:10:14",2020,1,1,3,2.5,1.2,0
,"wpf: port selection changes from TermControl, add multi-click selection (#5374)

## Summary of the Pull Request

This pull request ports #5096 to WpfTerminalControl, bringing it in line with the selection mechanics in Terminal. It also introduces double- and triple-click selection and makes sure we clear the selection when we resize.

Please read #5096 for more details.

## Detailed Description of the Pull Request / Additional comments

This code is, largely, copy-and-pasted from TermControl with some updates to use `std::chrono` and `til::point`. I love `til::point`. A lot.

## Validation Steps Performed
Lots of manual selection.",,,,False,False,False,83,18,3,3,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 01:10:29",2020,"04/17/2020, 01:10:29",2020,1,1,3,4.1,2.0,0
,"wpf: add support for VT mouse mode (#5375)

## Summary of the Pull Request

This pull request ports the VT mouse code from TermControl to WpfTerminalControl. Our WPF control is a lot closer to Win32 than to Xaml, so our mouse event handler looks _nothing_ like the one that we got from Xaml. We can pass events through almost directly, because the window message handling in the mouse input code actually came from _conhost_. It's awesome.

Neither TermControl nor conhost pass hover events through when the control isn't focused, so I wired up focus events to make sure we acted the same.

Just like Terminal and conhost, mouse events are suppressed when <kbd>Shift</kbd> is held.

## Validation Steps Performed
Tested with MC, and tested by manually engaging SGR events in an Echo terminal.

![image](https://user-images.githubusercontent.com/14316954/79417901-2f976a00-7f68-11ea-97e9-c053cbed3878.png)",,,,False,False,False,75,0,4,4,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 02:05:47",2020,"04/17/2020, 02:05:47",2020,1,1,3,5.0,1.5,0
,"Add SS3 cursor key encoding to ConPty (#5383)

## Summary of the Pull Request
Adds SS3 cursor encoding for cursor keys and home/end button. Reverts a portion of #4913 that checks for VT Input Mode.

## PR Checklist
* [X] Closes #4873

## Validation Steps Performed
1. Open pwsh
2. run `wsl`
3. execute `printf ""\e[?1h""`
4. verify keys work
5. exit back to pwsh
6. verify keys work still (didn't previously)

Also verified that those keys work in vim when connected to my Raspberry Pi over SSH.",,,,False,False,False,74,49,4,4,carlos.zamora@microsoft.com,noreply@github.com,"04/17/2020, 16:14:38",2020,"04/17/2020, 16:14:38",2020,3,1,3,3.0,2.0,0
,"Fix a deadlock and a bounding rects issue in UIA (#5385)

The scroll locking rework that landed with the DxRenderer's partial
invalidation change introduced a deadlock. UIA locks the buffer for
reading before asking it to scroll (which now requires a write lock.)

Scrolling is probably _okay_ to have a little bit of torn state that
might arise from us unlocking the read lock early before triggering the
write lock down the line.

While investigating this, I also noticed that our bounding rects stopped
being viewport-relative (and were instead buffer-relative.) That
regressed with the switch to `GetTextRects` in #4991  

## PR Checklist
* [ ] Closes (issues noticed in investigating the DPI changes)
* [x] CLA signed.
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] Core contributor badge

## Validation Steps Performed
Manual pass with inspect.exe",,,,True,True,False,6,2,1,1,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 17:09:58",2020,"04/17/2020, 17:09:58",2020,3,1,3,3.7,1.2,0
,"Add WT_PROFILE_ID to the environment of the spawned process (#4852)

This commit adds a `WT_PROFILE_ID` environment variable, which contains
the guid of the active profile.

It also teaches ConptyConnection to take an environment map on creation.

We had to do a little manual jiggery with the WSLENV environment
variable as passed by the creator.

* [x] CLA signed
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already.

Ran terminal, validated vars and translated paths under windows and WSL. 

References #4566 (this PR originally introduced WT_SETTINGS/DEFAULTS)
Closes #3589",,,,False,False,False,58,11,5,5,oising@gmail.com,noreply@github.com,"04/17/2020, 17:15:20",2020,"04/17/2020, 17:15:20",2020,3,2,3,4.2,1.8,0
,"wpf: only dismiss selection for real chars, not modifiers (#5388)

Selection would act up when you were using shift to ignore VT mouse
mode: we would get hundreds of WM_KEYDOWN for VK_SHIFT and dismiss the
selection every time.

I took the opportunity to move the actual responsibility for key event
dispatch into HwndTerminal. In the future, I'd like to make more of the
TerminalXxx calls just call impl methods on HwndTerminal.",,,,False,False,False,36,8,3,3,duhowett@microsoft.com,noreply@github.com,"04/17/2020, 18:28:56",2020,"04/17/2020, 18:28:56",2020,4,1,3,4.1,1.0,0
,"Add a git submodules sanity check step to the build (#5424)

This commit adds a specific error message to the build that tells people
to restore git submodules if they forgot to read the README.

#5416 was the straw that broke the camel's back.",,,,True,True,False,8,0,1,1,migrie@microsoft.com,noreply@github.com,"04/20/2020, 18:11:36",2020,"04/20/2020, 18:11:36",2020,4,3,3,5.0,1.2,0
,"Don't duplicate spaces from potentially-wrapped EOL-deferred lines (#5398)

The logic here, regarding deleting the spaces and just instantly adding
them bad, is incredibly suspect. Given that we're close to 0.11, I don't
think I can change it.

I've added a TODO with an issue number to figure out the right logic
here.

Fixes #5386.

## PR Checklist
* [x] Closes #5386
* [x] CLA signed
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I'm horrified.

## Validation Steps Performed
Tests, manual validation of the scenario in 5386 and a repro program.",,,,True,False,False,58,1,2,2,duhowett@microsoft.com,noreply@github.com,"04/20/2020, 21:45:44",2020,"04/20/2020, 21:45:44",2020,4,1,3,4.9,1.8,0
,"Add copyFormatting setting to all settings json files (#5404)

## Summary of the Pull Request
Added `copyFormatting` to defaults json files and userDefaults.

## PR Checklist
* [X] Closes #5403",,,,False,False,False,6,1,4,4,carlos.zamora@microsoft.com,noreply@github.com,"04/20/2020, 23:49:12",2020,"04/20/2020, 23:49:12",2020,4,1,3,4.3,1.2,0
,"UIA: Prevent crash from invalid UTR endpoint comparison (#5399)

## Summary of the Pull Request
This is a quick-and-easy solution to #5309. If the ITextRangeProvider API allows us to take in two UiaTextRanges, we need to verify that they are both valid.

With this PR, we make sure they both fit in the current TextBuffer. If not, we return `E_FAIL`. Though this doesn't prove that both UiaTextRanges are from the same TextBuffer, at the very least we don't crash and in cases where we can't make a valid comparison, we return an HRESULT failure.

## References
#5406 - This should be the proper solution to this problem. Each UiaTextRange needs to be aware of which TextBuffer it came from.

## PR Checklist
* [X] Closes #5309

## Validation Steps Performed
1. generate enough output to cause the terminal to scroll
2. execute `nano` to make us go into the alternate buffer
This previously crashed, now NVDA seems to detect that there was an error and keeps moving along.",,,,True,True,False,21,4,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/21/2020, 16:45:17",2020,"04/21/2020, 16:45:17",2020,3,1,3,4.2,1.2,0
,"Change Windows Powershell default scheme to Campbell (#5432)

The ""Campbell Powershell"" color scheme does not have a high enough color contrast
ratio. Campbell does, so we're changing it there.

Closes (only upon validation) #5393.",,,,False,False,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/21/2020, 17:19:54",2020,"04/21/2020, 17:19:54",2020,3,1,3,2.5,1.2,0
,"Merged PR 4560408: [Git2Git] LKG9 optimizer workaround

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/200414-1630 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 90031afa8114b7d95e3993573fc8449a1524a7fd

Related work items: #25439646",,,,False,False,False,4,0,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"04/21/2020, 17:44:56",2020,"04/21/2020, 17:44:56",2020,3,3,1,5.0,1.0,0
,doc: add a note about running `wt` in the current instance (#5448),,,,False,False,False,7,2,1,1,migrie@microsoft.com,noreply@github.com,"04/21/2020, 20:45:18",2020,"04/21/2020, 20:45:18",2020,4,3,3,3.9,1.0,0
,"ci: spelling: update to 0.0.15a; update whitelist (#5413)

* Cleaning up the whitelist a bit.
  * The magic to exclude repeated characters worked 👍 
  * Every successful run on master now logs its suggested cleanup, e.g. for https://github.com/microsoft/terminal/commit/5740e197c20bea97b0afe4b396d0541691d02b2c has https://github.com/microsoft/terminal/runs/596271627#step:4:37 
* ⚠️ This check-spelling 0.0.15a+ tolerates Windows line endings in the `whitelist.txt` file (another project I touched had some `.gitconfig` magic which required supporting them).
  This means that if someone edits the file w/ something that likes Windows line endings, the file will successfully convert (instead of it being ignored and check-spelling complaining about everything). Most likely anyone else who then edits the file will use something that will maintain the line endings.",,,,False,False,False,9,71,8,8,jsoref@users.noreply.github.com,noreply@github.com,"04/21/2020, 21:07:04",2020,"04/21/2020, 21:07:04",2020,4,0,3,1.5,2.0,0
,"build: move oss required to build conhost out of dep/ (#5451)

This change is necessary as the dep/ folder is not synced into the
Windows source tree.

I've also added a build rule producing a lib for {fmt}.

This will be required for our next OS ingestion.",,,,False,False,False,49,8,56,56,duhowett@microsoft.com,noreply@github.com,"04/21/2020, 21:43:09",2020,"04/21/2020, 21:43:09",2020,4,1,3,4.3,3.5,0
,"doc: Add note about using `;` as a separator in PowerShell (#5361)

This PR adds some notes from #4570 to the [UsingCommandlineArguments.md](https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingCommandlineArguments.md) doc. Hopefully, this should add clarity on how to use sub-commands in the `wt` commandline from within Powershell.

* [x] Closes #4570 
* [x] I work here
* [x] This is docs",,,,False,False,False,73,5,1,1,migrie@microsoft.com,noreply@github.com,"04/21/2020, 21:55:02",2020,"04/21/2020, 21:55:02",2020,4,3,3,4.7,1.5,0
,ci: add LKG to the MS dictionary,,,,False,False,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"04/21/2020, 23:42:43",2020,"04/21/2020, 23:43:03",2020,4,1,1,5.0,1.0,0
,"ci: weird, spell didn't warn me about notypeopt (#5456)",,,,False,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"04/22/2020, 01:46:45",2020,"04/22/2020, 01:46:45",2020,1,1,3,5.0,1.0,0
,"Add a test to cover #5428 (#5449)

This PR adds a test for #5428. Mysteriously, after #5398 merged, 5428 went away. However, I already wrote this test for it, so we might as well add it to our collection.

* [x] Closes #5428
* [x] I work here
* [x] Is a test",,,,False,False,False,137,0,1,1,migrie@microsoft.com,noreply@github.com,"04/22/2020, 11:16:17",2020,"04/22/2020, 11:16:17",2020,2,3,3,5.0,2.0,0
,Use string_view where possible (#5457),,,,False,False,False,2,2,1,1,loorongjie@gmail.com,noreply@github.com,"04/22/2020, 17:24:19",2020,"04/22/2020, 17:24:19",2020,3,0,3,2.5,1.0,0
,"Send a Ctrl-C KeyUp event (#5431)

## Summary of the Pull Request
Users were not able to intercept Ctrl-C input using `$Host.UI.RawUI.ReadKey(""IncludeKeyUp"")`, because we weren't sending a Ctrl-C KeyUp event. This PR simply adds a KeyUp event alongside the existing KeyDown.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #1894
* [x] CLA signed.
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
The repro script in #1894 now works, both options for `ReadKey`: `IncludeKeyUp` and `IncludeKeyDown` work fine.",,,,False,False,False,7,4,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"04/22/2020, 17:28:04",2020,"04/22/2020, 17:28:04",2020,3,1,3,3.2,1.0,0
,"Enable Control Flow Guard in the common build props (#5453)

All binaries produced by our build system will have CFG enabled.

Fixes #5452",,,,True,False,False,1,0,1,1,duhowett@microsoft.com,noreply@github.com,"04/22/2020, 18:30:13",2020,"04/22/2020, 18:30:13",2020,4,1,3,5.0,1.2,0
,"Adjusts High DPI scaling to enable differential rendering (#5345)

## Summary of the Pull Request
- Adjusts scaling practices in `DxEngine` (and related scaling practices in `TerminalControl`) for pixel-perfect row baselines and spacing at High DPI such that differential row-by-row rendering can be applied at High DPI.

## References
- #5185 

## PR Checklist
* [x] Closes #5320, closes #3515, closes #1064
* [x] I work here.
* [x] Manually tested.
* [x] No doc.
* [x] Am core contributor. Also discussed with some of them already via Teams.

## Detailed Description of the Pull Request / Additional comments

**WAS:**
- We were using implicit DPI scaling on the `ID2D1RenderTarget` and running all of our processing in DIPs (Device-Independent Pixels). That's all well and good for getting things bootstrapped quickly, but it leaves the actual scaling of the draw commands up to the discretion of the rendering target.
- When we don't get to explicitly choose exactly how many pixels tall/wide and our X/Y placement perfectly, the nature of floating point multiplication and division required to do the presentation can cause us to drift off slightly out of our control depending on what the final display resolution actually is.
- Differential drawing cannot work unless we can know the exact integer pixels that need to be copied/moved/preserved/replaced between frames to give to the `IDXGISwapChain1::Present1` method. If things spill into fractional pixels or the sizes of rows/columns vary as they are rounded up and down implicitly, then we cannot do the differential rendering.

**NOW:**
- When deciding on a font, the `DxEngine` will take the scale factor into account and adjust the proposed height of the requested font. Then the remainder of the existing code that adjusts the baseline and integer-ifies each character cell will run naturally from there. That code already works correctly to align the height at normal DPI and scale out the font heights and advances to take an exact integer of pixels.
- `TermControl` has to use the scale now, in some places, and stop scaling in other places. This has to do with how the target's nature used to be implicit and is now explicit. For instance, determining where the cursor click hits must be scaled now. And determining the pixel size of the display canvas must no longer be scaled.
- `DxEngine` will no longer attempt to scale the invalid regions per my attempts in #5185 because the cell size is scaled. So it should work the same as at 96 DPI.
- The block is removed from the `DxEngine` that was causing a full invalidate on every frame at High DPI.
- A TODO was removed from `TermControl` that was invalidating everything when the DPI changed because the underlying renderer will already do that.

## Validation Steps Performed
* [x] Check at 150% DPI. Print text, scroll text down and up, do selection.
* [x] Check at 100% DPI. Print text, scroll text down and up, do selection.
* [x] Span two different DPI monitors and drag between them.
* [x] Giant pile of tests in https://github.com/microsoft/terminal/pull/5345#issuecomment-614127648

Co-authored-by: Dustin Howett <duhowett@microsoft.com>
Co-authored-by: Mike Griese <migrie@microsoft.com>",,,,False,False,False,356,166,17,17,miniksa@microsoft.com,noreply@github.com,"04/22/2020, 21:59:51",2020,"04/22/2020, 21:59:51",2020,4,3,3,3.4,4.8,0
,"Re-enable Ctrl-C if the application that spawned us disabled it (#5472)

If Terminal is spawned by a shortcut that requests that it run in a new process group
while attached to a console session, that request is nonsense. That request will, however,
cause WT to start with Ctrl-C disabled. This wouldn't matter, because it's a Windows-subsystem
application. Unfortunately, that state is heritable. In short, if you start WT using cmd in
a weird way, ^C stops working inside the terminal. Mad.

Fixes #5460.",,,,True,False,False,7,0,1,1,duhowett@microsoft.com,noreply@github.com,"04/23/2020, 15:00:42",2020,"04/23/2020, 15:00:42",2020,3,1,3,5.0,1.2,0
,"Make sure background color is opaque when attrs are reversed (#5509)

In order to support a transparent background for the acrylic effect, the
renderer sets the alpha value to zero for the default background color.
However, when the _reversed video_ attribute is set, the background is
actually filled with the foreground color, and will not be displayed
correctly if it is made transparent. This PR addresses that issue by
making sure the rendered background color is opaque if the reversed
video attribute is set.

## References

* This is not a major issue at the moment, since the _reverse video_
  attribute is not typically forwarded though conpty, but that will
  change once #2661 is fixed.

## PR Checklist
* [x] Closes #5498
* [x] CLA signed.
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not
  checked, I'm ready to accept this work might be rejected in favor of a
  different grand plan. Issue number where discussion took place: #5498

## Detailed Description of the Pull Request / Additional comments

This simply adds an additional check in `Terminal::GetBackgroundColor`
to make sure the returned color is opaque if the _reverse video_
attribute is set. At some point in the future this check may need to be
extended to support the `DECSCNM` reverse screen mode, but for now
that's not an issue.

## Validation Steps Performed

I've run the test case from issue #5498, and confirmed that it now works
as expected. I've also got an experimental fix for #2661 that I've
tested with this patch, and that now displays _reverse video_ attributes
correctly too.

Closes #5498",,,,True,False,False,2,2,1,1,j4_james@hotmail.com,noreply@github.com,"04/23/2020, 21:35:12",2020,"04/23/2020, 21:35:12",2020,4,1,3,2.5,1.2,0
,"Include Cascadia Mono in-package, switch to it by default (#5505)

It was brought to our attention that shipping a font with ligatures as our default
font could be an accessibility issue for the visually-impaired. Unfortunately, we
don't have a renderer setting to disable ligatures (#759). Fortunately however, we
DO already have a version of Cascadia that doesn't have ligatures.

If we ship that and set it as our default font, we'll at least let people _opt_ to
have ligatures enabled by switching from `Cascadia Mono` to `Cascadia Code`.

## PR Checklist
* [x] Closes internal discussion
* [x] CLA signed
* [ ] Tests added/passed
* [x] Requires documentation to be updated
* [x] I've discussed this with core contributors already.",,,,False,False,False,12,7,9,8,duhowett@microsoft.com,noreply@github.com,"04/23/2020, 22:12:36",2020,"04/23/2020, 22:12:36",2020,4,1,3,3.2,1.8,0
,Lower case modifiers in doc (#5536),,,,False,False,False,1,1,1,1,jon.ronnenberg@gmail.com,noreply@github.com,"04/24/2020, 16:12:22",2020,"04/24/2020, 16:12:22",2020,3,0,3,2.5,1.0,0
,"Add descriptions for `backgroundImageAlignment`, `backgroundImageOpacity` (#5533)

These were already in the `SettingsSchema.md`, so I just updated the `profiles.schema.json` to have the descriptions as well.

* [x] closes #5520
* [x] I work here.
* [x] This is docs.",,,,False,False,False,2,1,1,1,migrie@microsoft.com,noreply@github.com,"04/24/2020, 17:15:35",2020,"04/24/2020, 17:15:35",2020,3,3,3,3.3,1.0,0
,"Use grayscale AA always on non-opaque backgrounds (#5277)

## Summary of the Pull Request

When we're on acrylic, we can't have cleartype text unfortunately. This PR changes the DX renderer to force cleartype runs of text that are on a non-opaque background to use grayscale AA instead.

## References

Here are some of the URLS I was referencing as writing this:

* https://stackoverflow.com/q/23587787
* https://docs.microsoft.com/en-us/windows/win32/direct2d/supported-pixel-formats-and-alpha-modes#cleartype-and-alpha-modes
* https://devblogs.microsoft.com/oldnewthing/20150129-00/?p=44803
* https://docs.microsoft.com/en-us/windows/win32/api/d2d1/ne-d2d1-d2d1_layer_options
* https://docs.microsoft.com/en-us/windows/win32/direct2d/direct2d-layers-overview#d2d1_layer_parameters1-and-d2d1_layer_options1
* https://docs.microsoft.com/en-us/windows/win32/api/dcommon/ne-dcommon-d2d1_alpha_mode?redirectedfrom=MSDN#cleartype-and-alpha-modes
* https://stackoverflow.com/a/26523006

Additionally:
* This was introduced in #4711 

## PR Checklist
* [x] Closes #5098
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Basically, if you use cleartype on a light background, what you'll get today is the text foreground color _added_ to the background. This will make the text look basically invisible. 

So, what I did was use some trickery with `PushLayer` to basically create a layer where the text would be forced to render in grayscale AA. I only enable this layer pushing business when both:
  * The user has enabled cleartype text
  * The background opacity < 1.0

This plumbs some information through from the TermControl to the DX Renderer to make this smooth.

## Validation Steps Performed

Opened both cleartype and grayscale panes SxS, and messed with the opacity liberally.",,,,False,False,False,132,3,5,5,migrie@microsoft.com,noreply@github.com,"04/24/2020, 17:16:34",2020,"04/24/2020, 17:16:34",2020,3,3,3,4.9,2.0,0
,"Remove last lingering references to profiles.json (#5534)

Literally just <kbd>ctrl+f</kbd> find-and-replace all the old `profiles.json` that are sitting around in the repo with `settings.json`. I didn't touch the specs, since it seemed better to leave them in the state that they were originally authored in.

* [x] closes #5522
* [x] I work here.
* [x] This is docs.",,,,False,False,False,14,13,6,6,migrie@microsoft.com,noreply@github.com,"04/24/2020, 21:29:33",2020,"04/24/2020, 21:29:33",2020,4,3,3,2.6,1.5,0
,"Lock when changing selection endpoint on wheel/auto-scroll (#5551)

Takes the lock inside two routines in `TermControl` that were changing
the selection endpoint while a rendering frame was still drawing,
resulting in several variants of graphical glitches from double-struck
selection boxes to duplicated line text.

## References
- Introduced with #5185

## PR Checklist
* [x] Closes #5471 
* [x] Already signed life away to company.
* [x] Manual tests passed since it's visual.
* [x] No extra doc besides the comments.
* [x] Am core contributor: Roar.

The renderer base and specific renderer engine do a lot of work to
remember the previous selection and compensate for scrolling regions and
deltas between frames. However, all that work doesn't quite match up
when the endpoints are changed out from under it. Unfortunately,
`TermControl` doesn't have a robust history of locking correctly in step
with the renderer nor does the renderer's `IRenderData` currently
provide any way of 'snapping' state at the beginning of a frame so it
could work without a full lock. So the solution for now is for the
methods that scroll the display in `TermControl` to take the lock that
is shared with the renderer's frame painter so they can't change out of
sync.

## Validation Steps Performed
- Opened terminal with Powershell core.
  Did ls a bunch of times.
  Clicked to make selection and held mouse button while wheeling around.
- Opened terminal with Powershell core.;
  Did ls a bunch of times.
  Clicked to make selection and dragged mouse outside the window to make
  auto scroll happen.
- Opened terminal with Powershell core.
  Did ls a bunch of times.
  Clicked to make selection and released. Wheeled around like a crazy
  person to make sure I didn't regress that.",,,,False,False,False,6,0,1,1,miniksa@microsoft.com,noreply@github.com,"04/24/2020, 22:14:43",2020,"04/24/2020, 22:14:43",2020,4,3,3,5.0,1.0,0
,doc: add `disabledProfileSources` to the schema (#5549),,,,False,False,False,17,1,2,2,migrie@microsoft.com,noreply@github.com,"04/24/2020, 22:15:27",2020,"04/24/2020, 22:15:27",2020,4,3,3,4.7,1.0,0
,"Replace the HRGN-based titlebar cutout with an overlay window (#5485)

Also known as ""Kill HRGN II: Kills Regions Dead (#5485)""

Copying the description from @greg904 in #4778.

--- 8< ---
My understanding is that the XAML framework uses another way of getting
mouse input that doesn't work with `WM_SYSCOMMAND` with `SC_MOVE`. It
looks like it ""steals"" our mouse messages like `WM_LBUTTONDOWN`.

Before, we were cutting (with `HRGN`s) the drag bar part of the XAML
islands window in order to catch mouse messages and be able to implement
the drag bar that can move the window. However this ""cut"" doesn't only
apply to input (mouse messages) but also to the graphics so we had to
paint behind with the same color as the drag bar using GDI to hide the
fact that we were cutting the window.

The main issue with this is that we have to replicate exactly the
rendering on the XAML drag bar using GDI and this is bad because:
1. it's hard to keep track of the right color: if a dialog is open, it
   will cover the whole window including the drag bar with a transparent
   white layer and it's hard to keep track of those things.
2. we can't do acrylic with GDI

So I found another method, which is to instead put a ""drag window""
exactly where the drag bar is, but on top of the XAML islands window (in
Z order). I've found that this lets us receive the `WM_LBUTTONDOWN`
messages.
--- >8 ---

Dustin's notes: I've based this on the implementation of the input sink
window in the UWP application frame host.

Tested manually in all configurations (debug, release) with snap,
drag, move, double-click and double-click on the resize handle. Tested
at 200% scale.

Closes #4744
Closes #2100
Closes #4778 (superseded.)",,,,False,False,False,198,79,6,6,duhowett@microsoft.com,noreply@github.com,"04/24/2020, 22:22:40",2020,"04/24/2020, 22:22:40",2020,4,1,3,3.6,3.6,0
,Remove a stray __stdcall that was breaking the x86 build (#5554),,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"04/24/2020, 23:46:01",2020,"04/24/2020, 23:46:01",2020,4,1,3,2.5,1.0,0
,"Updating to change from requestedTheme to theme (#5556)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Simple fix to update the example documentation with the recent changes to 0.11.",,,,True,True,False,1,1,1,1,marius@thestroms.org,noreply@github.com,"04/27/2020, 13:57:46",2020,"04/27/2020, 13:57:46",2020,3,0,3,2.5,1.2,0
,"Actually check the elevation status when disabling tab rearrange (#5542)

Fixes #5564.",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"04/27/2020, 16:17:19",2020,"04/27/2020, 16:17:19",2020,3,1,3,2.5,1.2,0
,"Improve default foregrounds for Tango schemes (#5598)

Followup to ea61aa3b.

The default foreground in the iTerm2 defaults for the Tango Dark color
scheme is too bright, use the value for ANSI 7 (white) instead.

References #5305

Sorry, I should have really done this in the original PR.

Signed-off-by: Rafael Kitover <rkitover@gmail.com>",,,,False,False,False,8,8,3,3,rkitover@gmail.com,noreply@github.com,"04/27/2020, 22:20:02",2020,"04/27/2020, 22:20:02",2020,4,0,3,3.0,1.2,0
,"Add a warning about using the `globals` property (#5597)

This property was deprecated in 0.11. We probably should have also added a warning
message to help the community figure out that this property is gone and won't work
anymore.

This PR adds that warning.

* I'm not going to list the enormous number of duped threads _wait yes I am_
    * #5581
    * #5547
    * #5555
    * #5557
    * #5573 
    * #5532
    * #5527
    * #5535 
    * #5510
    * #5511
    * #5512
    * #5513
    * #5516
    * #5515
    * #5521 
    * This literally isn't even all of them 

* [x] Also mainly related to #5458
* [x] I work here
* [x] Tests added/passed",,,,False,False,False,122,28,6,6,migrie@microsoft.com,noreply@github.com,"04/27/2020, 22:20:18",2020,"04/27/2020, 22:20:18",2020,4,3,3,4.1,2.5,0
,"Improve cluster construction performance (#5584)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

A tiny performance fix in `renderer.cpp`.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

The cluster construction code is intensively called during rendering. Even though a single `back()` is fast, but accumulated `back()`s still take a noticiable amount of CPU cycles.


Before:

![perf1](https://user-images.githubusercontent.com/4710575/80323322-4342aa80-885d-11ea-92fb-06998dcef327.png)

After:

![图片](https://user-images.githubusercontent.com/4710575/80323336-52c1f380-885d-11ea-8244-4d8d432f7c52.png)

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Manually validated.",,,,True,True,False,6,3,1,1,skyline75489@outlook.com,noreply@github.com,"04/28/2020, 15:41:44",2020,"04/28/2020, 15:41:44",2020,3,1,3,3.7,1.2,0
,"Adjust TSFInputControl alignment (#5609)

This PR fixes a couple of issues with TSFInputControl alignment:

1. The emoji picker IME in particular would show up overlapping the
   current buffer row because I stupidly didn't realize that
   `TextBlock.ActualHeight` is 0 right after initialization and before
   it has any text. So, the emoji picker will show up on the bottom of
   the 0 height TextBlock, which overlaps the current buffer row. This
   isn't a problem with CJK because inputting text _causes_ the IME to
   show up, so by the time the IME shows up, the TextBlock has text and
   accordingly has a height.
2. It turns out the emoji picker IME doesn't follow the `TextBlock`
   bottom, unlike Chinese and Japanese IME, so if a user were to compose
   near the edge of the screen and let the `TextBlock` start line
   wrapping, the emoji IME doesn't follow the bottom of the `TextBlock`
   as it grows. This means that the `TextBlock` position doesn't update
   in the middle of composition, and the `LayoutRequested` event that it
   fires at the beginning of composition is the only chance we get to
   tell the emoji IME where to place itself. It turns out when we reset
   `TextBlock.Text`, the ActualHeight doesn't get immediately reset back
   to the min size. So if a user were to bring up the emoji IME before
   `ActualHeight` is reset, the IME will show up way below the current
   buffer row.
3. We don't currently `TryRedrawCanvas` when the window position changes
   (resizing, dragging the window around), so sometimes dragging or
   resizing the Terminal doesn't update the position of the IME. Ideally
   it should be listening to some ""window position changed"" event, but
   alas we don't have that and it would be much harder than this
   incoming fix. We'll just track the window bounds as part of
   `TryRedrawCanvas` and redraw if it changes. For the most part, this
   will allow the IME to update to where the new window position is, but
   it'll only be called if we receive a `LayoutRequested` event.

## PR Checklist
* [x] Closes #5470
* [x] CLA signed.
* [x] Tests added/passed

## Validation Steps Performed
I play with it for quite a bit.",,,,True,False,False,26,8,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"04/28/2020, 18:50:33",2020,"04/28/2020, 18:50:33",2020,4,1,3,3.8,1.2,0
,"doc: clean up the schema (#5304)

## Summary of the Pull Request
This PR performs a number of miscellaneous clean-up tasks on our schema:
- [X] allow null for some settings
- [X] update some default values to be more useful
- [X] consistently use "" instead of '
- [X] remove colorTable
- [X] provide missing description for `backgroundImageOpacity`
- [X] update cursorShape to have options match order displayed in vs code
- [X] if a setting has multiple options, provide a list of those options with a short description on each
   - this one I only did a few times
- [X] remove a little bit of ambiguity on some descriptions

## PR Checklist
Closes #5279

## Detailed Description of the Pull Request / Additional comments
Validation was performed for...
- [X] Global Settings
- [X] Profile Settings
- [x] Keybinding Actions


## Validation Steps Performed
I linked VS Code to the my version of the schema. Defined all settings from scratch in settings.json. Anytime I found something off, I updated the schema and saw if it looks right.",,,,False,False,False,39,116,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/28/2020, 19:14:30",2020,"04/28/2020, 19:14:30",2020,4,1,3,2.0,2.4,0
,"Add a Third-Party notices link to the about dialog (#5508)

## Summary of the Pull Request
This PR will add a link to the version of `NOTICE.md` in GitHub at the commit that the build was on. It uses the same approach for generating our settings files, where we'll create a header file with the commit hash assigned to a `wstring_view` during build time.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #5139
* [x] CLA signed.
* [x] Tests added/passed

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
The link is there and goes to the expected `NOTICE.md`.",,,,False,False,False,44,0,7,6,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"04/28/2020, 20:22:44",2020,"04/28/2020, 20:22:44",2020,4,1,3,5.0,1.5,0
,"Fix Ctrl+Alt not being treated as a substitute for AltGr anymore (#5552)

This PR fixes #5525 by re-adding range checks that were erroneously removed in
a9c9714.

## Validation Steps Performed

* Enabled a German keyboard layout
* Entered `<`, `+`, `7`, `8`, `9`, `0` while holding either Alt+Ctrl or AltGr and...
* Ensuring that both produce `|`, `~`, `{`, `[`, `]`, `}`

Closes #5525",,,,True,False,False,12,12,2,2,leonard@hecker.io,noreply@github.com,"04/28/2020, 22:27:43",2020,"04/28/2020, 22:27:43",2020,4,1,3,2.5,1.2,0
,"Add and enforce minimum width (#5599)

## Summary of the Pull Request
Enforces a minimum width of 460 wide. This allows tabs to always be seen (albeit partially).

NOTE: A minimum height was originally added to allow the About menu to be seen. This minimum height was removed from this PR because we don't foresee a circumstance where your Terminal is in that state, and you can't just resize it to make the content fit properly.

## References
#4990 may be fixed/affected by this?

## PR Checklist
* [X] Closes #4976 
* [X] Will close issue #5418 upon verification

## Validation Steps Performed
Here's some images of what the terminal looks like when it's at its minimum size:

### 100% scaling

#### 100% scaling: one tab
![100% scaling: one tab](https://user-images.githubusercontent.com/11050425/80408686-76e0fd00-887c-11ea-8283-35871d24652a.png)

#### 100% scaling: two tabs
![100% scaling: two tabs](https://user-images.githubusercontent.com/11050425/80408695-79435700-887c-11ea-9670-116cde320e07.png)

#### 100% scaling: 3 tabs (scrolling enabled)
![100% scaling: 3 tabs (scrolling enabled)](https://user-images.githubusercontent.com/11050425/80408701-7c3e4780-887c-11ea-8ede-8b69d20d6f66.png)


### 200% scaling

#### 200% scaling: one tab
![200% scaling: one tab](https://user-images.githubusercontent.com/11050425/80408783-9a0bac80-887c-11ea-8b62-bd064f89403d.png)

#### 200% scaling: two tabs
![200% scaling: two tabs](https://user-images.githubusercontent.com/11050425/80408793-9c6e0680-887c-11ea-9301-344189281006.png)

#### 200% scaling: 3 tabs (scrolling enabled)
![200% scaling: 3 tabs (scrolling enabled)](https://user-images.githubusercontent.com/11050425/80408799-9ed06080-887c-11ea-892a-ee8e329080c5.png)",,,,True,False,False,10,0,2,2,carlos.zamora@microsoft.com,noreply@github.com,"04/28/2020, 23:24:21",2020,"04/28/2020, 23:24:21",2020,4,1,3,5.0,1.2,0
,"Notify UIA when Search finds something (#5478)

## Summary of the Pull Request
Before this, if the Search Box was open, new selections would not notify automation clients. This was because the UiaEngine (responsible for notifying automation clients) would remain disabled. Now we're enabling it before the early exit in TermControl's FocusHandler

## PR Checklist
* [X] Will close issue #5421 upon verification

## Validation Steps Performed
Verified using NVDA.
Narrator's behavior is not impacted, for some reason.",,,,False,False,False,7,5,1,1,carlos.zamora@microsoft.com,noreply@github.com,"04/29/2020, 17:36:45",2020,"04/29/2020, 17:36:45",2020,3,1,3,2.9,1.2,0
,"Clamp the new rows scrolling value to a positive number (#5630)

## Summary of the Pull Request

This PR clamp the ""new rows"" scrolling value to a positive number. We can't create a negative number of new rows. It also adds a test.

## References

## PR Checklist
* [x] Closes #5540
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

The origin of this bug is that as newlines are emitted, we'll accumulate an enormous scroll delta into a selection region, to the point of overflowing a `SHORT`. When the overflow occurs, the `Terminal` would fail to send a `NotifyScroll()` to the `TermControl` hosting it.

For this bug to repro, we need to:
- Have a sufficiently large buffer, because each newline we'll accumulate a delta of (0, ~bufferHeight), so (bufferHeight^2 + bufferHeight) > SHRT_MAX
- Have a selection

## Validation Steps Performed
* Dustin verified this actually
* Created a new insane test case",,,,True,True,False,195,4,5,4,migrie@microsoft.com,noreply@github.com,"04/29/2020, 19:28:59",2020,"04/29/2020, 19:28:59",2020,4,3,3,4.7,2.4,0
,"Added even more quick exit in InsertAttrRuns (#5644)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

In tonight's episode of ""I wanna my CPU back"", we'll see a quite familiar face whose name is Mr.AttrRow.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

#2937

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

I knew this is possible a long time ago. Just didn't got the chance to actually implement this. I understand that you guys are busy preparing the v1.0 release. So if this is a bad time, this can wait.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Manually tested. If all goes well, nothing will be broken.",,,,True,True,False,44,2,2,2,skyline75489@outlook.com,noreply@github.com,"04/29/2020, 20:08:37",2020,"04/29/2020, 20:08:37",2020,4,1,3,4.8,1.2,0
,"Reserve textClusterColumns vector for performance (#5645)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

In tonight's episode of ""Can we be even faster?"", we will... you know what, just take a look at the code.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

It is actually a quite common technique seen inside the codebase to first reserve the spaces before pushing something into vectors. I don't know why it is not used here.

Before:
![before](https://user-images.githubusercontent.com/4710575/80594408-84051400-8a55-11ea-9c04-c0a808061976.png)

After:

![after](https://user-images.githubusercontent.com/4710575/80594402-80718d00-8a55-11ea-8639-6c038b4bfcf8.png)

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,True,False,2,0,1,1,skyline75489@outlook.com,noreply@github.com,"04/29/2020, 20:12:05",2020,"04/29/2020, 20:12:05",2020,4,1,3,5.0,1.2,0
,"Remove ""Getting Started"" from the about dialog (#5656)

This is some fit/finish polish for v1.",,,,False,False,False,0,3,1,1,duhowett@microsoft.com,noreply@github.com,"04/29/2020, 23:37:00",2020,"04/29/2020, 23:37:00",2020,4,1,3,0.0,1.0,0
,"Remove the title tag from the generated HTML (#5595)

Web apps apparently will paste the <title> as plaintext before the
actual HTML content from the clipboard. Since this seems to be
widespread behavior across web apps, this isn't just a bug in _some
app_, this is a bug on us. We shouldn't emit the title. 

This PR removes the title tag from the generated HTML.

Closes #5347",,,,True,True,False,12,9,5,5,migrie@microsoft.com,noreply@github.com,"04/29/2020, 23:41:56",2020,"04/29/2020, 23:41:56",2020,4,3,3,2.9,1.2,0
,"Hide the commandline on a resize to prevent a crash when snapping the window (#5620)

Hide any commandline (cooked read) we have before we begin a resize, and
show it again after the resize. 

## References

* I found #5618 while I was working on this.

## PR Checklist
* [x] Closes #1856
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Basically, during a resize, we try to restore the viewport position
correctly, and part of that checks where the current commandline ends.
However, when we do that, the commandline's _current_ state still
reflects the _old_ buffer size, so resizing to be smaller can cause us
to throw an exception, when we find that the commandline doesn't fit in
the new viewport cleanly.

By hiding it, then redrawing it, we avoid this problem entirely. We
don't need to perform the check on the old commandline contents (since
they'll be empty), and we'll redraw it just fine for the new buffer size

## Validation Steps Performed
* ran tests
* checked resizing, snapping in conhost with a cooked read
* checked resizing, snapping in the Terminal with a cooked read",,,,True,True,False,96,28,3,3,migrie@microsoft.com,noreply@github.com,"04/29/2020, 23:47:56",2020,"04/29/2020, 23:47:56",2020,4,3,3,4.1,2.4,0
,"Add explicit identifier to some constructors (#5652)

If a class has a constructor which can be called with a single argument,
then this constructor becomes conversion constructor because such a
constructor allows conversion of the single argument to the class being
constructed. To ensure these constructors are passed the argument of its
type, I labeled them explicit.

In some header files, there were constructors that took a value that
could involve implicit conversions, so I added explicit to ensure that
does not happen.",,,,False,False,False,12,11,11,11,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"04/29/2020, 23:50:47",2020,"04/29/2020, 23:50:47",2020,4,0,3,2.6,2.0,0
,"Grab the write lock before updating the font (#5654)

## Summary of the Pull Request
Based on the discussion in #5479, it seems that the crash is caused by a race condition due to not obtaining the write lock before calling `TriggerFontChange`.

I'm not totally sure if my approach is the right one, but I've taken the lock out of `_RefreshSize` since it seems like all calls of `_RefreshSize` come after a `TriggerFontChange`/`UpdateFont`. Then I just 
made sure all calls of `TriggerFontChange`/`UpdateFont` are preceded with a `LockForWriting`.

## PR Checklist
* [x] Closes #5479
* [x] CLA signed.
* [x] Tests added/passed

## Validation Steps Performed
Scrolling to change my font size does not kill the Terminal anymore! 🙌",,,,False,False,False,19,13,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"04/30/2020, 00:05:29",2020,"04/30/2020, 00:05:29",2020,1,1,3,3.0,1.2,0
,"Bundle the entire CRT with our branded Release packages (#5661)

For our release builds, we're just going to integrate the UWPDesktop CRT
into our package and delete the package dependencies.  It's very
difficult for users who do not have access to the store to get our
dependency packages, and we want to be robust and deployable everywhere.
Since these libraries can be redistributed, it's easiest if we simply
redistribute them.

Our package grows by ~550kb per architecture (compressed) because of
this. I've added validation that we don't have both the libs _and_ the
dependencies in the same package.

Fixes #3097.

## Validation

The script does it!",,,,True,False,False,69,1,5,5,duhowett@microsoft.com,noreply@github.com,"04/30/2020, 07:08:43",2020,"04/30/2020, 07:08:43",2020,2,1,3,4.9,1.8,0
,"Don't remove spaces when printing a new bottom line with a background color (#5550)

Turns out we're still being a bit too aggressive when removing spaces.
If there are spaces at the end of the first run painted to a bottom
line, _and the bottom line was a different color than the previous_,
then we can't trim those spaces off the string. We still need to emit
those to make sure the terminal has colored spaces in it as well.

## References

* there's like 80 PRs in the last month for this function

## PR Checklist
* [x] Closes #5502
* [x] I work here
* [x] Tests added/passed

## Validation Steps

* [x] ran the tests
* [x] checked that vtpipeterm still worked
* [x] Checked that the bug was fixed in the Terminal",,,,True,False,False,195,1,6,6,migrie@microsoft.com,noreply@github.com,"04/30/2020, 15:01:03",2020,"04/30/2020, 15:01:03",2020,3,3,3,5.0,3.0,0
,"Intentionally leak our Application, so that we DON'T crash on exit (#5629)

We've got a weird crash that happens terribly inconsistently, but pretty
readily on migrie's laptop, only in Debug mode. Apparently, there's some
weird ref-counting magic that goes on during teardown, and our
Application doesn't get closed quite right, which can cause us to crash
into the debugger. This of course, only happens on exit, and happens
somewhere in the `...XamlHost.dll` code.

Crazily, if we _manually leak the `Application`_ here, then the crash
doesn't happen. This doesn't matter, because we really want the
Application to live for _the entire lifetime of the process_, so the only
time when this object would actually need to get cleaned up is _during
exit_. So we can safely leak this `Application` object, and have it just
get cleaned up normally when our process exits.

* [x] I discussed this with @DHowett-MSFT and we both agree this is mental
* [x] I'm pretty sure there's not an actual bug on our repo for this
* [x] I verified on my machine where I can crash the terminal 100% of the time on exit in debug, this fixes it
* [x] I verified that it doesn't introduce a _new_ crash in Release on my machine",,,,True,True,False,18,0,1,1,migrie@microsoft.com,noreply@github.com,"04/30/2020, 19:36:02",2020,"04/30/2020, 19:36:02",2020,4,3,3,5.0,1.2,0
,"Implement a pair of shims for `cls`, `Clear-Host` in conpty mode (#5627)

## Summary of the Pull Request

This PR implements a pair of shims for `cmd` and `powershell`, so that their `cls` and `Clear-Host` functions will clear the entire terminal buffer (like they do in conhost), instead of just the viewport. With the conpty viewport and buffer being the same size, there's effectively no way to know if an application is calling these API's in this way with the intention of clearing the buffer or the viewport. We absolutely have to guess. 

Each of these shims checks to see if the way that the API is being called exactly matches the way `cmd` or `powershell` would call these APIs. If it does, we manually write a `^[[3J` to the connected terminal, to get he Terminal to clear it's own scrollback.

~~_⚠️ If another application were trying to clear the **viewport** with an exactly similar API call, this would also cause the terminal scrollback to get cleared ⚠️_~~

* [x] Should these shims be restricted to when the process that's calling them is actually `cmd.exe` or `powershell.exe`? Can I even do this? I think we've done such a good job of isolating the client process information from the rest of the host code that I can't figure out how to do this.
  - YES, this can be done, and I did it.
* [ ] **TODO**: _While I'm here_, should I have `DoSrvPrivateEraseAll` (the implementation for `^[[2J`, in `getset.cpp`) also manually trigger a EraseAll in the terminal in conpty mode?

## PR Checklist
* [x] Closes #3126
* [x] Actually closes #1305 too, which is really the same thing, but probably deserves a callout
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
* ran tests
* checked `cls` in the Terminal
* checked `Clear-Host` in the Terminal
* Checked running `powershell clear-host` from `cmd.exe`",,,,False,False,False,475,72,24,24,migrie@microsoft.com,noreply@github.com,"04/30/2020, 21:53:31",2020,"04/30/2020, 21:53:31",2020,4,3,3,4.3,4.0,0
,"On second thought, embed the third-party notices in the package (#5673)

This commit introduces a NOTICE.html file that will be embedded into the
package. It will be stamped down with the real notices during a branded
release build (as part of the build pipeline.)

It, in part, reverts some of the really good work in determining the
commit hash at build time. That work will be preserved in history.

This is more compliant with our duties to the OSS we consume.",,,,False,False,False,42,34,10,9,duhowett@microsoft.com,noreply@github.com,"04/30/2020, 22:06:13",2020,"04/30/2020, 22:06:13",2020,4,1,3,3.1,2.0,0
,"Add tooltip text to New Tab/Min/Max/Close (#5484)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Tooltip texts is an important element of each software! Added tooltip text to close button, minimize, restore down, and new tab. Moved from original.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
Connected to #5355 

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #5355 
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [X] No Docs
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #5355 

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
I'm pretty sure most ppl know what a tooltip text is, but for those who don't, it's a text that tells you what a button does when you over the button with your mouse.",,,,True,False,False,12,0,1,1,47545798+chips1234@users.noreply.github.com,noreply@github.com,"04/30/2020, 22:45:56",2020,"04/30/2020, 22:45:56",2020,4,0,3,5.0,1.2,0
,"Remove the (Preview) tag from the primary App Name (#5679)

This is part of the v1 polish.",,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"05/01/2020, 16:30:16",2020,"05/01/2020, 16:30:16",2020,3,1,3,2.5,1.0,0
,"remove decreaseFontSize from schema (#5712)

It was replaced with adjustFontSize in 0.11.",,,,False,False,False,0,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"05/03/2020, 03:23:13",2020,"05/03/2020, 03:23:13",2020,1,1,3,0.0,1.0,0
,doc: fix typo in UsingCommandlineArguments.md (#5714),,,,True,True,False,1,1,1,1,dev@anthonyv.be,noreply@github.com,"05/03/2020, 06:33:10",2020,"05/03/2020, 06:33:10",2020,2,0,3,2.5,1.2,0
,"Fix RTL regression (fixes #4779) (#5734)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This fixes the RTL regression caused in #4747. We create the rectangle taking the direction (through the BiDi Level) into account, and then the rendering works again. The GlyphRun shaping could still probably use some work to be a polished thingy, and there are still issues with RTL getting chopped up a lot when there's font fallback going on, but this fixes the regression, and it's now functional again.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#4779 #4747 

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #4779
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
The baseline is actually direction dependent. So when it was being initialized, the unconditional baseline as left broke it, setting the box off to right of the text. We just check if the `GlyphRun->bidiLevel` is set, and if so, we adjust it so that the baseline lines up with the right, not with the left.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
![image](https://user-images.githubusercontent.com/16987694/80968891-681cbc00-8e21-11ea-9e5c-9b7cf6d78d53.png)",,,,True,False,False,10,4,1,1,mosheraphael@gmail.com,noreply@github.com,"05/04/2020, 16:14:44",2020,"05/04/2020, 16:14:44",2020,3,0,3,3.6,1.2,0
,"Add a note that the user needs to hide dynamic profiles (#5684)

Add a note that the user needs to hide dynamic profiles, not just delete them.

* [x] I work here
* [x] Is documentation.
* related to discussion in #3231",,,,False,False,False,6,0,1,1,migrie@microsoft.com,noreply@github.com,"05/04/2020, 20:04:09",2020,"05/04/2020, 20:04:09",2020,4,3,3,5.0,1.0,0
,"Add support for displaying the version with `wt --version` (#5501)

## Summary of the Pull Request
Here's 3000 words:

![image](https://user-images.githubusercontent.com/18356694/80125877-e2af2700-8557-11ea-809a-63e50d76fe2b.png)
![image](https://user-images.githubusercontent.com/18356694/80125882-e5aa1780-8557-11ea-8f73-2e50c409b76d.png)
![image](https://user-images.githubusercontent.com/18356694/80125886-e8a50800-8557-11ea-8d28-6d1694c57c0c.png)

## References
* #4632 

## PR Checklist
* [x] Closes #5494
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,82,10,10,10,migrie@microsoft.com,noreply@github.com,"05/04/2020, 20:56:15",2020,"05/04/2020, 20:56:15",2020,4,3,3,4.5,2.0,0
,"Add support for setting a tab's color at runtime w/ context menu (#3789)

This commit introduces a context menu for Tab and a new item,
""Color..."", which will display a color picker.

A flyout menu, containing a custom flyout, is attached to each tab. The
flyout displays a palette of 16 preset colors and includes a color
picker. When the user selects or clears color, an event is fired, which
is intercepted by the tab to which the flyout belongs.

The changing of the color is achieved by putting the selected color in
the resource dictionary of the tab, using well-defined dictionary keys
(e.g. TabViewItemHeaderBackground). Afterwards the visual state of the
tab is toggled, so that the color change is visible immediately.

Custom-colored tabs will be desaturated (somewhat) by alpha blending
them with the tab bar background.

The flyout menu also contains a 'Close' flyout item.

## Validation Steps Performed
I've validated the behavior manually: start the program via the start
menu. Right click on the tab -> Choose a tab color.

The color flyout is going to be shown. Click a color swatch or click
'Select a custom color' to use the color picker. Use the 'Clear the
current color' to remove the custom color.

Closes #2994. References #3327.",,,,False,False,False,1202,6,24,23,georgi.baychev@gmail.com,noreply@github.com,"05/04/2020, 20:57:12",2020,"05/04/2020, 20:57:12",2020,4,0,3,5.0,4.0,0
,"Fix a few minor typos from #3789 (#5740)

I never got to fixing these in the original #3789 PR, but I messed up that branch way too many times already that I figured I'd just do it in post.

* [x] Fixes the typo bot in `master`
* [x] I work here",,,,True,True,False,7,6,3,3,migrie@microsoft.com,noreply@github.com,"05/04/2020, 21:47:29",2020,"05/04/2020, 21:47:29",2020,4,3,3,2.7,1.2,0
,"Make sure that EraseAll moves the Terminal viewport (#5683)

The Erase All VT sequence (`^[[2J`) is supposed to erase the entire
contents of the viewport. The way it usually does this is by shifting
the entirety of the viewport contents into scrollback, and starting the
new viewport below it. 

Currently, conpty doesn't propagate that state change correctly. When
conpty gets a 2J, it simply erases the content of the connected
terminal's viewport, by writing over it with spaces. Conpty didn't
really have a good way of communicating ""your viewport should move"", it
only knew ""the buffer is now full of spaces"".

This would lead to bugs like #2832, where pressing <kbd>ctrl+L</kbd> in
`bash` would delete the current contents of the viewport, instead of
moving the viewport down.

This PR makes sure that when conpty sees a 2J, it passes that through
directly to the connected terminal application as well. Fortunately, 2J
was already implemented in the Windows Terminal, so this actually fixes
the behavior of <kbd>ctrl+L</kbd>/`clear` in WSL in the Terminal.

## References

* #4252 - right now this isn't the _most_ optimal scenario, we're
  literally just printing a 2J, then we'll perform ""erase line"" `height`
  times. The erase line operations are all redundant at this point - the
  entire viewport is blank, but conpty doesn't really know that.
  Fortunately, #4252 was already filed for me to come through and
  optimize this path.

## PR Checklist
* [x] Closes #2832
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
* ran tests
* compared <kbd>ctrl+L</kbd> with its behavior in conhost
* compared `clear` with its behavior in conhost",,,,True,False,False,139,7,5,5,migrie@microsoft.com,noreply@github.com,"05/05/2020, 01:36:30",2020,"05/05/2020, 01:36:30",2020,1,3,3,4.8,2.4,0
,version: bump to 1.1 on master,,,,False,False,False,2,2,1,1,duhowett@microsoft.com,noreply@github.com,"05/05/2020, 01:52:44",2020,"05/05/2020, 01:52:44",2020,1,1,3,2.5,1.0,0
,"Make sure we don't try to remove tabs when they don't exist (#5742)

This was an oversight.

Fixes #5738.",,,,True,False,False,5,3,1,1,duhowett@microsoft.com,noreply@github.com,"05/05/2020, 16:16:09",2020,"05/05/2020, 16:16:09",2020,3,1,3,3.1,1.2,0
,Add File Explorer tip to User Docs (#5752),,,,False,False,False,1,1,1,1,gmartin@gmartin.org,noreply@github.com,"05/05/2020, 16:50:27",2020,"05/05/2020, 16:50:27",2020,3,0,3,2.5,1.0,0
,"Don't set the new tab button colors for now (#5749)

This is actually related to another issue we have, #3917. I think if the system is set to ""Dark"" theme, but the app is set to light theme, then the brush lookup in `_ClearNewTabButtonColor` still returns to us the dark theme brushes.

Fortunately, since we're not actually setting the color of the new tab button anymore, we can just remove the call to that method now, and loop back on it later.

## References
* regressed in #3789 
* related to #3917

## PR Checklist
* [x] Closes #5741",,,,False,False,False,10,1,1,1,migrie@microsoft.com,noreply@github.com,"05/05/2020, 20:33:07",2020,"05/05/2020, 20:33:07",2020,4,3,3,4.5,1.2,0
,"Switch to the new lozenge-style dev icons and add preview icons (#5755)

This commit also introduces a copy of the svg source for the icon.

The icons were generated with a powershell script, which will be the
subject of a future checkin.

Below, peep the asset size ramps. The text is hidden at sizes <32px because it would be illegible. Click for full size, as they do not necessarily fit in the GitHub box.

![montage](https://user-images.githubusercontent.com/14316954/81114789-8c3ad480-8ed7-11ea-8963-67ba195f25b8.png)

![montage](https://user-images.githubusercontent.com/14316954/81114796-8f35c500-8ed7-11ea-881f-c69fc9468914.png)",,,,False,False,False,903,0,139,3,duhowett@microsoft.com,noreply@github.com,"05/05/2020, 21:29:09",2020,"05/05/2020, 21:29:09",2020,4,1,3,5.0,5.0,0
,"Merged PR 4641914: [Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/200504-1008 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp bbdf04608ba96c3f8ee06cf100428cde01f3df79

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/200504-1008 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp bbdf04608ba96c3f8ee06cf100428cde01f3df79

Related work items: #26071826",,,,False,False,False,6,0,1,1,miniksa@microsoft.com,duhowett@microsoft.com,"05/05/2020, 22:47:08",2020,"05/05/2020, 22:47:08",2020,4,3,1,5.0,1.0,0
,"Merged PR 4645239: [Git2Git] Merged PR 4644345: conhost: disable the DX renderer in inbox builds

[Git2Git] Merged PR 4644345: conhost: disable the DX renderer in inbox builds

We're going to be taking on some changes to the Dx renderer that are at
the very least annoying and at the very most inconsequential to the
inbox console. This commit removes support for the DX renderer from the
inbox console.

SizeBench reports that ConRenderDx contributes 55.1kb to the conhost
image (as its third largest constituent library), so this should net us
a couple pleasant WPG improvements down the line.

Related work items: #26291552 Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 6e36786d447b7975298ba31ccd77c5c649fbfbe6

Related work items: #26291552",,,,False,False,False,12,8,9,9,miniksa@microsoft.com,duhowett@microsoft.com,"05/05/2020, 23:03:07",2020,"05/05/2020, 23:03:07",2020,4,3,1,3.4,1.5,0
,Update docs to mention commandline args (#5765),,,,False,False,False,1,1,1,1,gmartin@gmartin.org,noreply@github.com,"05/06/2020, 19:08:18",2020,"05/06/2020, 19:08:18",2020,4,0,3,2.5,1.0,0
,"Add a new appxmanifest for preview (#5774)

## Summary of the Pull Request
This adds a new appxmanifest for 'Windows Terminal (Preview)' and links the resources.

Code-wise, split up `WindowsTerminalReleaseBuild` into...
- WindowsTerminalOfficialBuild: [true, false]
- WindowsTerminalBranding: [Dev, Preview, Release]

Added a comment about that in release.yml

## Validation Steps Performed
used msbuild to build...
- [X] Dev
- [X] Preview
- [X] Release
then checked the msix for the correct name/icon.",,,,False,False,False,180,17,7,7,carlos.zamora@microsoft.com,noreply@github.com,"05/07/2020, 16:00:56",2020,"05/07/2020, 16:00:56",2020,3,1,3,4.6,2.5,0
,Add an AppDescription for the Preview package (#5794),,,,False,False,False,4,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"05/07/2020, 18:34:43",2020,"05/07/2020, 18:34:43",2020,4,1,3,4.0,1.0,0
,"Manually select a new tab when we're in fullscreen mode (#5809)

If we're fullscreen, the TabView isn't `Visible`. If it's not `Visible`,
it's _not_ going to raise a `SelectionChanged` event, which is what we
usually use to focus another tab. Instead, we'll have to do it manually
here.

So, what we're going to try to do is move the focus to the tab to the
left, within the bounds of how many tabs we have.

EX: we have 4 tabs: [A, B, C, D]. If we close:
* A (`tabIndex=0`): We'll want to focus tab B (now in index 0)
* B (`tabIndex=1`): We'll want to focus tab A (now in index 0)
* C (`tabIndex=2`): We'll want to focus tab B (now in index 1)
* D (`tabIndex=3`): We'll want to focus tab C (now in index 2)

`_UpdatedSelectedTab` will do the work of setting up the new tab as the
focused one, and unfocusing all the others.

Also, we need to _manually_ set the SelectedItem of the tabView here. If
we don't, then the TabView will technically not have a selected item at
all, which can make things like ClosePane not work correctly.

## PR Checklist
* [x] Closes #5799
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Played with it a bunch",,,,False,False,False,31,0,1,1,migrie@microsoft.com,noreply@github.com,"05/08/2020, 18:53:34",2020,"05/08/2020, 18:53:34",2020,4,3,3,5.0,1.0,0
,"Scale box drawing glyphs to fit cells for visual bliss (#5743)

## Summary of the Pull Request
Identifies and scales glyphs in the box and line drawing ranges U+2500-U+259F to fit their cells.

## PR Checklist
* [x] Closes #455
* [x] I work here.
* [x] Manual tests. This is all graphical.
* [x] Metric ton of comments
* [x] Math spreadsheet included in PR.
* [x] Double check RTL glyphs.
* [x] Why is there the extra pixel?
* [x] Scrolling the mouse wheel check is done.
* [x] Not drawing outline?
* [x] Am core contributor. Roar.
* [x] Try suppressing negative scale factors and see if that gets rid of weird shading.

## Detailed Description of the Pull Request / Additional comments

### Background
- We want the Terminal to be fast at drawing. To be fast at drawing, we perform differential drawing, or only drawing what is different from the previous frame. We use DXGI's `Present1` method to help us with this as it helps us compose only the deltas onto the previous frame at drawing time and assists us in scrolling regions from the previous frame without intervention. However, it only works on strictly integer pixel row heights.
- Most of the hit testing and size-calculation logic in both the `conhost` and the Terminal products are based on the size of an individual cell. Historically, a cell was always dictated in a `COORD` structure, or two `SHORT` values... which are integers. As such, when we specify the space for any individual glyph to be displayed inside our terminal drawing region, we want it to fall perfectly inside of an integer box to ensure all these other algorithms work correctly and continue to do so.
- Finally, we want the Terminal to have font fallback and locate glyphs that aren't in the primary selected font from any other font it can find on the system that contains the glyph, per DirectWrite's font fallback mechanisms. These glyphs won't necessarily have the same font or glyph metrics as the base font, but we need them to fit inside the same cell dimensions as if they did because the hit testing and other algorithms aren't aware of which particular font is sourcing each glyph, just the dimensions of the bounding box per cell.

### How does Terminal deal with this?
- When we select a font, we perform some calculations using the design metrics of the font and glyphs to determine how we could fit them inside a cell with integer dimensions. Our process here is that we take the requested font size (which is generally a proxy for height), find the matching glyph width for that height then round it to an integer. We back convert from that now integer width to a height value which is almost certainly now a floating point number. But because we need an integer box value, we add line padding above and below the glyphs to ensure that the height is an integer as well as the width. Finally, we don't add the padding strictly equally. We attempt to align the English baseline of the glyph box directly onto an integer pixel multiple so most characters sit crisply on a line when displayed. 
- Note that fonts and their glyphs have a prescribed baseline, line gap, and advance values. We use those as guidelines to get us started, but then to meet our requirements, we pad out from those. This results in fonts that should be properly authored showing gaps. It also results in fonts that are improperly authored looking even worse than they normally would.

### Now how does block and line drawing come in?
- Block and Line drawing glyphs are generally authored so they will look fine when the font and glyph metrics are followed exactly as prescribed by the font. (For some fonts, this still isn't true and we want them to look fine anyway.)
- When we add additional padding or rounding to make glyphs fit inside of a cell, we can be adding more space than was prescribed around these glyphs. This can cause a gap to be visible.
- Additionally, when we move things like baselines to land on a perfect integer pixel, we may be drawing a glyph lower in the bounding box than was prescribed originally.

### And how do we solve it?
- We identify all glyphs in the line and block drawing ranges.
- We find the bounding boxes of both the cell and the glyph.
- We compare the height of the glyph to the height of the cell to see if we need to scale. We prescribe a scale transform if the glyph wouldn't be tall enough to fit the box. (We leave it alone otherwise as some glyphs intentionally overscan the box and scaling them can cause banding effects.)
- We inspect the overhang/underhang above and below the boxes and translate transform them (slide them) so they cover the entire cell area.
- We repeat the previous two steps but in the horizontal direction.

## Validation Steps Performed
- See these commments:
   - https://github.com/microsoft/terminal/issues/455#issuecomment-620248375
   - https://github.com/microsoft/terminal/issues/455#issuecomment-621533916
   - https://github.com/microsoft/terminal/issues/455#issuecomment-622585453

Also see the below one with more screenshots:
   - https://github.com/microsoft/terminal/pull/5743#issuecomment-624940567",,,,False,False,False,673,43,14,13,miniksa@microsoft.com,noreply@github.com,"05/08/2020, 21:09:32",2020,"05/08/2020, 21:09:32",2020,4,3,3,4.7,4.8,0
,"Fix wrapped lines in `less` in Git for Windows (#5771)

## Summary of the Pull Request

This PR resolves an issue with the Git for Windows (MSYS) version of `less`. It _doesn't_ use VT processing for emitting text tothe buffer, so when it hits `WriteCharsLegacy`, `WC_DELAY_EOL_WRAP` is NOT set.

When this happens, `less` is writing some text that's longer than the width of the buffer to the last line of the buffer. We're hitting the 
```c++
    Status = AdjustCursorPosition(screenInfo, CursorPosition, WI_IsFlagSet(dwFlags, WC_KEEP_CURSOR_VISIBLE), psScrollY);
```
call in `_stream.cpp:560`.

The cursor is _currently_ at `{40, 29}`, the _start_ of the run of text that wrapped. We're trying to adjust it to `{0, 30}`, which would be the start of the next line of the buffer. However, the buffer is only 30 lines tall, so we've got to `IncrementCircularBuffer` first, so we can move the cursor there.

When that happens, we're going to paint frame. At the end of that frame, we're going to try and paint the cursor position. The cursor is still at `{40, 29}` here, so unfortunately, the `cursorIsInDeferredWrap` check in `XtermEngine::PaintCursor` is `false`. That means, conpty is going to try to move the cursor to where the console thinks the cursor actually is at the end of this frame, which is `{40, 29}`.

If we're painting the frame because we circled the buffer, then the cursor might still be in the position it was before the text was written to the buffer to cause the buffer to circle. In that case, then we DON'T want to paint the cursor here either, because it'll cause us to manually break this line. That's okay though, the frame will be painted again, after the circling is complete.

## PR Checklist
* [x] Closes #5691
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I suppose that's the detailed description above

## Validation Steps Performed
* ran tests
* checked that the bug was actually fixed in the Terminal",,,,True,False,False,421,13,5,5,migrie@microsoft.com,noreply@github.com,"05/08/2020, 21:22:09",2020,"05/08/2020, 21:22:09",2020,4,3,3,4.9,3.0,0
,"Trigger scroll on scrolled selection (#5798)

## Summary of the Pull Request
We accidentally missed switching one `TriggerRedrawAll` to `TriggerScroll`. This does that.

## References
#5185 - applies logic from this PR

## PR Checklist
* [X] Closes #5756

## Validation Steps Performed
Followed bug repro steps.",,,,True,True,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"05/08/2020, 21:48:23",2020,"05/08/2020, 21:48:23",2020,4,1,3,2.5,1.2,0
,"Make most emojis full-width (#5795)

The table that we refer to in `CodepointWidthDetector.cpp` to determine
whether or not a codepoint should be rendered as Wide vs Narrow was
based off EastAsianWidth[1].  If a codepoint wasn't included in this
table, they're considered Narrow. Many emojis aren't specified in the
EAW list, so this PR supplements our table with emoji codepoints from
emoji-data[2] in order to render most, if not all, emojis as full-width. 

There are certain codepoints I've added to the comments (in case we want
to add them officially to the table in the future) that Microsoft
decided to give an emoji presentation even if it's specified as
Narrow/Ambiguous in the EAW list and are _not_ specified in the Unicode
emoji list. These include all of the Mahjong Tiles block, different
direction pencils (✎✐), different pointing index fingers (☜, ☞) among
others. I have no idea if I've captured all of them, as I don't know of
an easy way to detect which are Microsoft specific emojis.

## Validation Steps Performed
I have looked at so many emojis that I dream emoji.

These screenshots aren't encompassing _all_ emoji but I've tried to grab
a couple from all across the codepoint ranges:

Before:
![before](https://user-images.githubusercontent.com/57155886/81445092-2051a980-912d-11ea-9739-c9f588da407d.png)

After:
![after](https://user-images.githubusercontent.com/57155886/81445107-2778b780-912d-11ea-9615-676c2150e798.png)

[1] http://www.unicode.org/Public/UCD/latest/ucd/EastAsianWidth.txt
[2] https://www.unicode.org/Public/13.0.0/ucd/emoji/emoji-data.txt

Closes #900",,,,False,False,False,130,145,3,3,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"05/08/2020, 22:31:09",2020,"05/08/2020, 22:31:09",2020,4,1,3,2.4,2.5,0
,dx: fix a missing stdcall that was blowing up the x86 build (#5818),,,,True,True,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"05/08/2020, 23:02:16",2020,"05/08/2020, 23:02:16",2020,4,1,3,2.5,1.2,0
,"Refactor the SGR implementation in AdaptDispatch (#5758)

This is an attempt to simplify the SGR (Select Graphic Rendition)
implementation in conhost, to cut down on the number of methods required
in the `ConGetSet` interface, and pave the way for future improvements
and bug fixes. It already fixes one bug that prevented SGR 0 from being
correctly applied when combined with meta attributes.

* This a first step towards fixing the conpty narrowing bugs in issue
  #2661
* I'm hoping the simplification of `ConGetSet` will also help with
  #3849.
* Some of the `TextAttribute` refactoring in this PR overlaps with
  similar work in PR #1978. 

## Detailed Description of the Pull Request / Additional comments

The main point of this PR was to simplify the
`AdaptDispatch::SetGraphicsRendition` implementation. So instead of
having it call a half a dozen methods in the `ConGetSet` API, depending
on what kinds of attributes needed to be set, there is now just one call
to get current attributes, and another call to set the new value. All
adjustments to the attributes are made in the `AdaptDispatch` class, in
a simple switch statement.

To help with this refactoring, I also made some change to the
`TextAttribute` class to make it easier to work with. This included
adding a set of methods for setting (and getting) the individual
attribute flags, instead of having the calling code being exposed to the
internal attribute structures and messing with bit manipulation. I've
tried to get rid of any methods that were directly setting legacy, meta,
and extended attributes.

Other than the fix to the `SGR 0` bug, the `AdaptDispatch` refactoring
mostly follows the behaviour of the original code. In particular, it
still maps the `SGR 38/48` indexed colors to RGB instead of retaining
the index, which is what we ultimately need it to do. Fixing that will
first require the color tables to be unified (issue #1223), which I'm
hoping to address in a followup PR.

But for now, mapping the indexed colors to RGB values required adding an
an additional `ConGetSet` API to lookup the color table entries. In the
future that won't be necessary, but the API will still be useful for
other color reporting operations that we may want to support. I've made
this API, and the existing setter, standardise on index values being in
the ""Xterm"" order, since that'll be essential for unifying the code with
the terminal adapter one day.

I should also point out one minor change to the `SGR 38/48` behavior,
which is that out-of-range RGB colors are now ignored rather than being
clamped, since that matches the way Xterm works.

## Validation Steps Performed

This refactoring has obviously required corresponding changes to the
unit tests, but most were just minor updates to use the new
`TextAttribute` methods without any real change in behavior. However,
the adapter tests did require significant changes to accommodate the new
`ConGetSet` API. The basic structure of the tests remain the same, but
the simpler API has meant fewer values needed to be checked in each test
case. I think they are all still covering the areas there were intended
to, though, and they are all still passing.

Other than getting the unit tests to work, I've also done a bunch of
manual testing of my own. I've made sure the color tests in Vttest all
still work as well as they used to. And I've confirmed that the test
case from issue #5341 is now working correctly.

Closes #5341",,,,True,False,True,519,1452,28,27,j4_james@hotmail.com,noreply@github.com,"05/08/2020, 23:04:16",2020,"05/08/2020, 23:04:16",2020,4,1,3,2.1,5.0,0
,"dx: when filling an HWND target, use the actual background color (#5848)

There is no guarantee that the HWND's backing color matches our expected
backing color.

This repairs the gutter in the WPF terminal.",,,,False,False,False,6,1,1,1,duhowett@microsoft.com,noreply@github.com,"05/11/2020, 20:54:29",2020,"05/11/2020, 20:54:29",2020,4,1,3,4.3,1.0,0
,"Add renderer settings to mitigate blurry text for some graphics devices

## Summary of the Pull Request
Adds user settings to adjust rendering behavior to mitigate blurry text on some devices.

## References
- #778 introduced this, almost certainly.

## PR Checklist
* [x] Closes #5759, mostly
* [x] I work here.
* [ ] We need community verification that this will help.
* [x] Updated schema and schema doc.
* [x] Am core contributor. Discussed in Monday sync meeting and w/ @DHowett-MSFT. 

## Detailed Description of the Pull Request / Additional comments
When we switched from full-screen repaints to incremental rendering, it seems like we exposed a situation where some display drivers and hardware combinations do not handle scroll and/or dirty regions (from `IDXGISwapChain::Present1`) without blurring the data from the previous frame. As we're really close to ship, I'm offering two options to let people in this situation escape it on their own. We hope in the future to figure out what's actually going on here and mitigate it further in software, but until then, these escape hatches are available.

1. `experimental.rendering.forceFullRepaint` - This one restores the pre-778 behavior to the Terminal. On every single frame paint, we'll invalidate the entire screen and repaint it.
2. `experimental.rendering.software` - This one uses the software WARP renderer instead of using the hardware and display driver directly. The theory is that this will sidestep any driver bugs or hardware variations.

One, the other, or both of these may be field-applied by users who are experiencing this behavior. 

Reverting #778 completely would also resolve this, but it would give back our largest performance win in the whole Terminal project. We don't believe that's acceptable when seemingly a majority of the users are experiencing the performance benefit with no detriment to graphical display.

## Validation Steps Performed
- [x] Flipped them on and verified with the debugger that they are being applied to the rendering pipeline
- [ ] Gave a private copy to community members in #5759 and had them try whether one, the other, or both resolved their issue.",,,,True,True,False,118,16,10,10,miniksa@microsoft.com,noreply@github.com,"05/11/2020, 21:54:03",2020,"05/11/2020, 21:54:03",2020,4,3,3,4.4,3.0,0
,"InteractivityWin32: Add a dependency on Dx (#5851)

#5743 introduced a dependency from _any consumer of the DX header_ to a header generated from an IDL file.

Fixes #5819.",,,,True,False,False,5,0,1,1,duhowett@microsoft.com,noreply@github.com,"05/11/2020, 22:09:14",2020,"05/11/2020, 22:09:14",2020,4,1,3,5.0,1.2,0
,"Stop trying to set selection endpoints when there's no selection (#5855)

It turns out that we weren't really adequately guarding calls to
SetSelectionEnd and friends.

We're clearing the active selection when the window resizes, but we're
doing so by nulling out the std::optional<Selection> it lives in. Later,
though, when we set the selection endpoint we're using ""_selection->"".

Optional's operator-> has undefined behavior when the optional doesn't
have a value in it.

In our case, it looks like it was returning whatever the value was prior
to it being emptied out. PivotSelection would attempt to access an
out-of-bounds coordinate when the buffer got smaller during a resize.

The solution is to guard both levels of selection endpoint manipulation
in a check for an active selection.

Apparently, this accounts for somewhere between 7% and 14% of our
crashes on 1.0RC1.

Repro was:
Use Win+Arrow to snap the window while in the middle of a selection.",,,,False,False,False,12,0,2,2,duhowett@microsoft.com,noreply@github.com,"05/12/2020, 18:23:10",2020,"05/12/2020, 18:23:10",2020,4,1,3,5.0,1.2,0
,"Teach TerminalPage to handle exceptions that happen during paste (#5856)

Terminal should try not to join the choir invisible when the clipboard
API straight up horks it.

This accounts for ~3% of the crashes seen in 1.0RC1 and ~1% of the
crashes seen all-up in the last 14 days.

## Repro (prior to this commit)
Set `""copyOnSelect"": true`.

Copy something small.

Hold down <kbd>Ctrl+Shift+V</kbd>

Double-click like your life depends on it. Double-click like you're
playing cookie clicker again. 2013 called, it wants its cookies back.

Fixes #4906.",,,,True,False,False,8,4,1,1,duhowett@microsoft.com,noreply@github.com,"05/12/2020, 18:23:58",2020,"05/12/2020, 18:23:58",2020,4,1,3,3.3,1.2,0
,doc: fix broken link within documentation (#5859),,,,True,True,False,1,1,1,1,morgy93@users.noreply.github.com,noreply@github.com,"05/12/2020, 18:27:36",2020,"05/12/2020, 18:27:36",2020,4,0,3,2.5,1.2,0
,Bump Cascadia Code to v2004.30 (#5867),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"05/12/2020, 19:33:00",2020,"05/12/2020, 19:33:00",2020,4,1,3,2.5,1.0,0
,"Revert some emoji back to narrow width

A couple of codepoints, namely the card suites, male and female signs,
and white and black smiling faces were changed to have a two-column
width as part of #5795 since they were specified as emoji in Unicode's
emoji list v13.0[1]. 

These particular glyphs also show up in some of the most fundamental
code pages, such as CP437[2] and WGL4[3]. We should
not be touching the width of the glyphs in these codepages, as suddenly
changing a long-time-running narrow glyph to use two-columns all of a
sudden will surely break (and has already broken) things.

[1] https://www.unicode.org/Public/13.0.0/ucd/emoji/emoji-data.txt
[2] https://en.wikipedia.org/wiki/Code_page_437
[3] https://en.wikipedia.org/wiki/Windows_Glyph_List_4

Closes #5822",,,,False,False,False,7,7,2,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"05/12/2020, 19:38:11",2020,"05/12/2020, 19:38:11",2020,4,1,3,2.5,1.0,0
,"Implement drag-drop paste for text (#5865)

## Summary of the Pull Request

Implements drag-dropping text onto a `TermControl`, in addition to the already supported drag-drop of files.

## References
* [StandardDataFormats](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.datatransfer.standarddataformats?view=winrt-18362)
* [StandardDataFormats::Text](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.datatransfer.standarddataformats.text?view=winrt-18362#Windows_ApplicationModel_DataTransfer_StandardDataFormats_Text)
* [GetTextAsync](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.datatransfer.datapackageview.gettextasync?view=winrt-18362)

## PR Checklist
* [x] Closes #5863
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Oh I also changed ""Copy path to file"" to ""Paste path to file"". I thought that actually made more sense here

## Validation Steps Performed
* Tested manually that text and files still work.",,,,False,False,False,55,31,2,2,migrie@microsoft.com,noreply@github.com,"05/12/2020, 21:46:47",2020,"05/12/2020, 21:46:47",2020,4,3,3,3.2,1.5,0
,"Fix an accidental regression from #5771 (#5870)

This PR reverts a relatively minor change that was made incorrectly to
ConPTY in #5771.

In that PR, I authored two tests. One of them actually caught the bug
that was supposed to be fixed by #5771. The other test was simply
authored during the investigation. I believed at the time that the test
revealed a bug in conpty that was fixed by _removing_ this block of
code. However, an investigation itno #5839 revealed that this code was
actually fairly critical. 

So, I'm also _skipping_ this buggy test for now. I'm also adding a
specific test case to this bug.

The problem in the bugged case of `WrapNewLineAtBottom` is that
`WriteCharsLegacy` is wrapping the bottom row of the ConPTY buffer,
which is causing the cursor to automatically move to the next line in
the buffer. This is because `WriteCharsLegacy` isn't being called with
the `WC_DELAY_EOL_WRAP` flag. So, in that test case, 
* The client emits a wrapped line to conpty
* conpty fills the bottom line with that text, then dutifully increments
  the buffer to make space for the cursor on a _new_ bottom line.
* Conpty reprints the last `~` of the wrapped line
* Then it gets to the next line, which is being painted _before_ the
  client emits the rest of the line of text to fill that row.
* Conpty thinks this row is empty, (it is) and manually breaks the row. 

However, the test expects this row to be emitted as wrapped. The problem
comes from the torn state in the middle of these frames - the original
line probably _should_ remain wrapped, but this is a sufficiently rare
case that the fix is being punted into the next release. 

It's possible that improving how we handle line wrapping might also fix
this case - currently we're only marking a row as wrapped when we print
the last cell of a row, but we should probably mark it as wrapped
instead when we print the first char of the _following_ row. That work
is being tracked in #5800

### The real bug in this PR

The problem in the `DeleteWrappedWord` test is that the first line is
still being marked as wrapped. So when we get to painting the line below
it, we'll see that there are no characters to be printed (only spaces),
we emit a `^[20X^[20C`, but the cursor is still at the end of the first
line. Because it's there, we don't actually clear the text we want to
clear.

So DeleteWrappedWord, #5839 needs the `_wrappedRow = std::nullopt;`
statement here.

## References
* I guess just look at #5800, I put everything in there.

## Validation Steps Performed
* Tested manually that this was fixed for the Terminal
* ran tests

Closes #5839",,,,True,False,False,121,0,2,2,migrie@microsoft.com,noreply@github.com,"05/12/2020, 22:02:15",2020,"05/12/2020, 22:02:15",2020,4,3,3,5.0,2.4,0
,"Manually close tabs when they're closed while dragging them (#5883)

## Summary of the Pull Request

When we're dragging the tab around, if you execute a `ClosePane`/`CloseTab`, then we should make sure to actually activate a new tab, so that focus doesn't just fall into the void.

## References

* This is almost exactly #5799, but with rearranging tabs

## PR Checklist
* [x] Closes #5559
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
We suppress `_OnTabItemsChanged` events during a rearrange, so if a tab is closed while we're rearranging tabs, the we don't fire the `SelectionChanged` event that we usually do during a close that would select the new tab.

## Validation Steps Performed
* Tested manually
  - Confirmed that tragging a tab out, closing it, then dragging it back in does nothing.",,,,False,False,False,14,1,1,1,migrie@microsoft.com,noreply@github.com,"05/14/2020, 01:47:32",2020,"05/14/2020, 01:47:32",2020,1,3,3,4.7,1.0,0
,"Rename `propsheet/TerminalPage` to `propsheet/TerminalPropsheetPage` (#5882)

My workflow is to use Sublime's <kbd>Ctrl+P</kbd> shortcut to navigate to files by name. However, the propsheet version of the files _always_ comes up before the `TerminalApp` one does. This results in me having to close the file and re-open the right one.

This PR renames the propsheet one, so it's unambiguous which one I'm opening.

It's really the most trivial nit.",,,,False,False,False,23,23,5,5,migrie@microsoft.com,noreply@github.com,"05/14/2020, 01:49:20",2020,"05/14/2020, 01:49:20",2020,1,3,3,2.5,1.0,0
,doc: add a tip about launching WT with a Win+Number shortcut (#5909),,,,False,False,False,2,1,1,1,hmemcpy@gmail.com,noreply@github.com,"05/14/2020, 23:48:03",2020,"05/14/2020, 23:48:03",2020,4,0,3,3.3,1.0,0
,"CodepointWidthDetector: reclassify U+25FB, U+25FC as Narrow (#5914)

This seems to be in line with the emoji-sequences table in the latest
version of the Unicode standard: those glyphs require U+FE0F to activate
their emoji presentation. Since we don't support composing U+FE0F, we
should not present them as emoji by default.

Fixes #5910.

Yes, I hate this.",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"05/14/2020, 23:49:08",2020,"05/14/2020, 23:49:08",2020,4,1,3,2.5,1.2,0
,doc: add a link to default keybindings (#4614),,,,False,False,False,2,2,1,1,ryan@mirum.org,noreply@github.com,"05/14/2020, 23:53:34",2020,"05/14/2020, 23:53:34",2020,4,0,3,2.5,1.2,0
,Update Cascadia Code to 2005.15 (#5930),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"05/15/2020, 20:47:09",2020,"05/15/2020, 20:47:09",2020,4,1,3,2.5,1.0,0
,"Remove the JSON reserializers (except for AKB) (#5918)

The AKB serializer is used in the tracelogging pipeline.

Chatted with @zadjii-msft about ganking the deserializers. The form
they'll take in the future is probably very different from this.

We'll need to have some better tracking of the _source_ or _pass_ a
setting was read during so that we can accurately construct an internal
settings attribution model. Diffing was very extremely cool, but we
didn't end up needing it.

This apparently drops our binary size by a whopping _zero bytes_ because
the optimizer was smarter than us and actually totally deleted it.",,,,False,False,False,2,298,8,8,duhowett@microsoft.com,noreply@github.com,"05/15/2020, 21:51:57",2020,"05/15/2020, 21:51:57",2020,4,1,3,1.0,3.0,0
,"Switch the Cascadia projects to til::color where it's easily possible to do so (#5847)

This pull request moves swaths of Cascadia to use `til::color` for color
interop. There are still some places where we use `COLORREF`, such as in
the ABI boundaries between WinRT components.

I've also added two more til::color helpers - `with_alpha`, which takes
an existing color and sets its alpha component, and a
`Windows::UI::Color` convertor pair.

Future direction might include a `TerminalSettings::Color` type at the
idl boundary so we can finally stop using UInt32s (!) for color.

## Validation Steps Performed
Tested certain fragile areas:
* [x] setting the background with OSC 11
* [x] setting the background when acrylic is in use (which requires
  low-alpha)",,,,False,False,False,143,102,18,17,duhowett@microsoft.com,noreply@github.com,"05/15/2020, 22:43:00",2020,"05/15/2020, 22:43:00",2020,4,1,3,2.9,3.5,0
,"Make bcz not run personal PowerShell profile script (-NoProfile) (#5945)

The `bcz.cmd` script calls a powershell helper script (bx.ps1), but
(previous to this change) did not pass `-NoProfile`, which means that
powershell.exe would load and run one's personal profile script, which
can only slow things down, and worse, can change default behaviors (such
as turning on strict mode by default, which will cause scripts that
don't run cleanly with strict mode to generate lots of errors--such as
bx.ps1).

This change amends the powershell.exe command line to pass -NoProfile,
as well as to set the execution policy and ensure that interactive
prompts can't inadvertently show up (normal best practices for use of
powershell in build scripts).

This change will speed things up (probably negligibly, but still) and
(more importantly) prevent non-determinism and errors that could result
from running people's profile scripts when running the helper bx.ps1.",,,,False,False,False,1,2,1,1,danthom@microsoft.com,noreply@github.com,"05/17/2020, 00:40:10",2020,"05/17/2020, 00:40:10",2020,1,0,3,2.3,1.2,0
,"Partially regenerate codepoint widths from Emoji 13.0 (#5934)

This removes all glyphs from the emoji list that do not default to
""emoji presentation"" (EPres). It removes all local overrides, but retains
the comments about the emoji we left out that are Microsoft-specific.

This brings us fully in line with the most popular Terminals on OS X,
except that we squash our emoji down to fit in one cell and they let
them hang over the edges and damage other characters. Oh well.

## Detailed Description of the Pull Request / Additional comments

Late Friday evening, I tested my emoji test file on iTerm2. In so doing, I realized
that @j4james and @leonMSFT were right the entire time in #5914: Emoji
that require `U+FE0F` must not be double-width by default.

I finally banged up a powershell script that parses the UCD and emits a codepoint
width table. Once checked in, this will be definitive.

Refs #900, #5914.
Fixes #5941.",,,,True,False,False,111,144,2,2,dustin+microsoft@howett.net,noreply@github.com,"05/17/2020, 20:32:43",2020,"05/17/2020, 20:32:43",2020,4,0,3,2.2,3.0,0
,"ci: Update spelling patterns to cover cascadia commit ID (#5955)

Thankfully this is a pattern file, so it won't conflict w/ the 0.0.16 update.",,,,False,False,False,2,1,1,1,jsoref@users.noreply.github.com,noreply@github.com,"05/17/2020, 22:13:48",2020,"05/17/2020, 22:13:48",2020,4,0,3,3.3,1.0,0
,doc: correct Help Wanted link in CONTRIBUTING.md (#5967),,,,False,False,False,2,2,1,1,shivamtomar28@gmail.com,noreply@github.com,"05/18/2020, 16:28:31",2020,"05/18/2020, 16:28:31",2020,3,0,3,2.5,1.0,0
,doc: fix a typo in user-docs/index.md (#5961),,,,True,True,False,1,1,1,1,mengqipei@gmail.com,noreply@github.com,"05/18/2020, 16:29:30",2020,"05/18/2020, 16:29:30",2020,3,0,3,2.5,1.2,0
,"Update README with v1 announcements (#5993)

We have some goodies that have been announced at Build 2020 that need to be in the README. 😊",,,,False,False,False,6,10,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"05/19/2020, 16:19:04",2020,"05/19/2020, 16:19:04",2020,3,1,3,1.9,1.0,0
,"Correct the default 6x6x6 palette entries (#5999)

There is a range of 216 colors in the default 256-color table that is
meant to be initialized with a 6x6x6 color cube, with each color
component iterating over the values `00`, `5F`, `87`, `AF`, `D7`, and
`FF`. A few of the entries incorrectly had the _red_ component has `DF`,
when it should have been `D7`.  This PR corrects those entries. It also
removes a bit of unnecessary whitespace in the first 100 entries.

## Validation Steps Performed

I have a visual test script that renders the full 256-color palette,
using both the indexed color sequence (`SGR 38;5`) and the equivalent
rgb representation (`SGR 38;2`) side by side. Although the difference
was subtle when it was incorrect, I can now see that it has been fixed.

Closes #5994",,,,True,False,False,134,134,1,1,j4_james@hotmail.com,noreply@github.com,"05/19/2020, 20:02:38",2020,"05/19/2020, 20:02:38",2020,4,1,3,2.5,3.0,0
,Add Carlos Zamora to spell checker (#6009),,,,False,False,False,2,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"05/19/2020, 23:37:38",2020,"05/19/2020, 23:37:38",2020,4,1,3,5.0,1.0,0
,"Add font weight options (#6048)

## Summary of the Pull Request
Adds the ability to specify the font weight in the profiles, right next to the size and the font face.

## PR Checklist
* [x] Closes #1751 
* [x] I work here.
* [x] Tested manually, see below.
* [x] Added documentation to the schema 
* [x] Requires docs.microsoft.com update, filed as https://github.com/MicrosoftDocs/terminal/issues/26
* [x] I'm a core contributor.

## Detailed Description of the Pull Request / Additional comments
- Weights can be specified according to the OpenType specification values. We accept either the friendly name or the numerical value that applies to each weight.
- Weights are carried through per-profile and sent into the renderer.
- Weights are carried through to the TSF/IME overlay.
- The names are restricted to the set seen at https://docs.microsoft.com/en-us/uwp/api/windows.ui.text.fontweights.
- There are alternate names at https://docs.microsoft.com/en-us/windows/win32/api/dwrite/ne-dwrite-dwrite_font_weight for the same values (ultra-black is just an alias for extra-black at 950).

## Validation Steps Performed
- Cascadia Code normal
![image](https://user-images.githubusercontent.com/18221333/82480181-46117380-9a88-11ea-9436-a5fe4ccd4350.png)

- Cascadia Code bold
![image](https://user-images.githubusercontent.com/18221333/82480202-4f9adb80-9a88-11ea-9e27-a113b41387f5.png)

- Segoe UI Semilight
![image](https://user-images.githubusercontent.com/18221333/82480306-73f6b800-9a88-11ea-93f7-d773ab7ccce8.png)

- Segoe UI Black
![image](https://user-images.githubusercontent.com/18221333/82480401-9688d100-9a88-11ea-957c-0c8e03a8cc29.png)

- Segoe UI 900 (value for Black)
![image](https://user-images.githubusercontent.com/18221333/82480774-26c71600-9a89-11ea-8cf6-aaeab1fd0747.png)",,,,False,False,False,159,6,13,13,miniksa@microsoft.com,noreply@github.com,"05/20/2020, 20:17:17",2020,"05/20/2020, 20:17:17",2020,4,3,3,4.8,3.6,0
,"Update to point to live docs (#6011)

included a link to the repo, but live docs is a better reading experience",,,,False,False,False,1,1,1,1,mattwoj@microsoft.com,noreply@github.com,"05/21/2020, 12:41:55",2020,"05/21/2020, 12:41:55",2020,3,0,3,2.5,1.0,0
,"Get rid of the padding above the tab row when maximized (#5881)

## Summary of the Pull Request

When we maximize the window, shrink the caption buttons (the min, max, close buttons) down to 32px tall, to be the same height as the `TabRowControl`. This way, the tabs will be flush with the top of the display.

## PR Checklist
* [x] Closes #2541
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

I tried for a couple hours this morning to do this as a `VisualState`. First I tried doing it as one on the TabRow, which I had very little success with. Then, I eventually realized that the TabRow wasn't even responsible for the padding there, it was being created by the fact that the caption buttons were too tall. Again, I tried to use the existing `VisualState`s they have defined for this, but I couldn't figure out how to do that.

I think the visual state solution would be _cleaner_, so if someone knows how to do that instead, please let me know. 

## Validation Steps Performed

* Maximized/restored the Terminal on my display with the taskbar on the bottom
* Maximized/restored the Terminal on my display with the taskbar on the top",,,,False,False,False,57,5,2,2,migrie@microsoft.com,noreply@github.com,"05/21/2020, 22:26:37",2020,"05/21/2020, 22:26:37",2020,4,3,3,4.7,1.5,0
,"Make sure to update the maximize button's visual state on launch (#5988)

## Summary of the Pull Request
This is an enormously trivial nit - when we launch maximized, we don't draw the maximize button in the ""restore"" state.

This PR changes the terminal to manually update the Maximize button on launch, once the titlebar is added to the UI tree.

## PR Checklist
* [x] Closes #3440
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,5,0,1,1,migrie@microsoft.com,noreply@github.com,"05/21/2020, 23:27:33",2020,"05/21/2020, 23:27:33",2020,4,3,3,5.0,1.0,0
,"Make sure cursor visibility is restored after using an IME (#6207)

## Summary of the Pull Request

When using an _Input Method Editor_ in conhost for East Asian languages, the text cursor is temporarily hidden while the characters are being composed. When the composition is complete, the cursor visibility is meant to be restored, but that doesn't always happen if the IME composition is cancelled. This PR makes sure the cursor visibility is always restored, regardless of how the IME is closed.

## PR Checklist
* [x] Closes #810
* [x] CLA signed.
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan.

## Detailed Description of the Pull Request / Additional comments

The original implementation hid the cursor whenever `ConsoleImeInfo::WriteCompMessage` was called (which could be multiple times in the course of a composition), and then only restored the visibility when `ConsoleImeInfo::WriteResultMessage` was called. If a composition is cancelled, though, `WriteResultMessage` would never be called, so the cursor visibility wouldn't be restored.

I've now made the `SaveCursorVisibility` and `RestoreCursorVisibility` methods public, so they can instead be called from the `ImeStartComposition` and `ImeEndComposition` functions. This makes sure `RestoreCursorVisibility` is always called, regardless of how the composition ended, and `SaveCursorVisibility` is only called once at the start of the composition (which isn't essential, but seems cleaner to me).

## Validation Steps Performed

I've manually tested opening and closing the IME, both while submitting characters and while cancelling a composition, and in all cases the cursor visibility was correctly restored.",,,,False,False,False,11,9,3,3,j4_james@hotmail.com,noreply@github.com,"05/27/2020, 16:31:09",2020,"05/27/2020, 16:31:09",2020,3,1,3,3.2,1.0,0
,"Add `winget` instructions to README.md (#6169)

Added install instructions for winget

resolves #6159",,,,False,False,False,9,0,2,2,sascha@1-2.dev,noreply@github.com,"05/27/2020, 16:34:32",2020,"05/27/2020, 16:34:32",2020,3,0,3,5.0,1.0,0
,"Fix #6079, allow pasting from Explorer's 'Copy Address' (#6146)

Fixes #6079 by implementing support for IStorageItem clipboard contents. Manually tested, seems to work for both types of address-copying from Explorer (as well as normal text).

## PR Checklist
* [x] Closes #6079
* Not sure what tests would be useful here, it's mostly to do with what Explorer's doing

Not enormously familiar with C++ or this codebase, so happy to make changes as requested.

## Validation Steps Performed

Ran the terminal, pasted from several different sources (explorer's various copy functions + plaintext)",,,,True,False,False,11,0,1,1,alex@alexhicks.net,noreply@github.com,"05/27/2020, 17:42:49",2020,"05/27/2020, 17:42:49",2020,3,0,3,5.0,1.2,0
,"Add stdexcept header explicitly to u8u16test tool (#6226)

## Summary of the Pull Request
Adds implicit stdexcept header include to u8u16test tool.

## PR Checklist
* [x] Closes regression introduced when moving from VS 16.5 to VS 16.6 (which the CI did of its own accord)
* [x] I work here.
* [x] Built it.
* [x] No doc.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
In VS 16.5, the <stdexcept> header was pulled in by `<string>` or  `<string_view>` or `<array>` or `<algorithm>` implicitly. In VS 16.6, that's gone. No one wrote it in the header because it was just automatically there in the past. Now I wrote it in the header.

## Validation Steps Performed
* [x] Built it on my machine after upgrading to VS `16.6.0`.
* [x] Built it in CI.",,,,False,False,False,1,0,1,1,miniksa@microsoft.com,noreply@github.com,"05/27/2020, 19:06:35",2020,"05/27/2020, 19:06:35",2020,4,3,3,5.0,1.0,0
,"Replace everything in `TerminalSettings` with `GETSET_PROPERTY` (#6110)

This is mostly a codehealth thing - we made these handy macros for just defining basic `{ get; set; }` properties, but we never used them in TerminalSettings, because that file was written before the macros were.

This cleans up that class.

* [x] I work here.",,,,False,False,False,69,514,3,3,migrie@microsoft.com,noreply@github.com,"05/27/2020, 21:46:39",2020,"05/27/2020, 21:46:39",2020,4,3,3,1.5,3.0,0
,"Fix SGR indexed colors to distinguish Indexed256 color (and more) (#5834)

This PR introduces a new `ColorType` to allow us to distinguish between
`SGR` indexed colors from the 16 color table, the lower half of which
can be brightened, and the ISO/ITU indexed colors from the 256 color
table, which have a fixed brightness. Retaining the distinction between
these two types will enable us to forward the correct `SGR` sequences to
conpty when addressing issue #2661. 

The other benefit of retaining the color index (which we didn't
previously do for ISO/ITU colors) is that it ensures that the colors are
updated correctly when the color scheme is changed.

## References

* This is another step towards fixing the conpty narrowing bugs in issue
  #2661.
* This is technically a fix for issue #5384, but that won't be apparent
  until #2661 is complete.

## PR Checklist
* [x] Closes #1223
* [x] CLA signed. 
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already.

## Detailed Description of the Pull Request / Additional comments

The first part of this PR was the introduction of a new `ColorType` in
the `TextColor` class. Instead of just the one `IsIndex` type, there is
now an `IsIndex16` and an `IsIndex256`. `IsIndex16` covers the eight
original ANSI colors set with `SGR 3x` and `SGR 4x`, as well as the
brighter aixterm variants set with `SGR 9x` and `SGR 10x`. `IsIndex256`
covers the 256 ISO/ITU indexed colors set with `SGR 38;5` and `SGR
48;5`.

There are two reasons for this distinction. The first is that the ANSI
colors have the potential to be brightened by the `SGR 1` bold
attribute, while the ISO/ITO color do not. The second reason is that
when forwarding an attributes through conpty, we want to try and
preserve the original SGR sequence that generated each color (to the
extent that that is possible). By having the two separate types, we can
map the `IsIndex16` colors back to ANSI/aixterm values, and `IsIndex256`
to the ISO/ITU sequences.

In addition to the VT colors, we also have to deal with the legacy
colors set by the Windows console APIs, but we don't really need a
separate type for those. It seemed most appropriate to me to store them
as `IsIndex256` colors, since it doesn't make sense to have them
brightened by the `SGR 1` attribute (which is what would happen if they
were stored as `IsIndex16`). If a console app wanted a bright color it
would have selected one, so we shouldn't be messing with that choice.

The second part of the PR was the unification of the two color tables.
Originally we had a 16 color table for the legacy colors, and a separate
table for the 256 ISO/ITU colors. These have now been merged into one,
so color table lookups no longer need to decide which of the two tables
they should be referencing. I've also updated all the methods that took
a color table as a parameter to use a `basic_string_view` instead of
separate pointer and length variables, which I think makes them a lot
easier and safer to work with. 

With this new architecture in place, I could now update the
`AdaptDispatch` SGR implementation to store the ISO/ITU indexed colors
as `IsIndex256` values, where before they were mapped to RGB values
(which prevented them reflecting any color scheme changes). I could also
update the `TerminalDispatch` implementation to differentiate between
the two index types, so that the `SGR 1` brightening would only be
applied to the ANSI colors.

I've also done a bit of code refactoring to try and minimise any direct
access to the color tables, getting rid of a lot of places that were
copying tables with `memmove` operations. I'm hoping this will make it
easier for us to update the code in the future if we want to reorder the
table entries (which is likely a requirement for unifying the
`AdaptDispatch` and `TerminalDispatch` implementations). 

## Validation Steps Performed

For testing, I've just updated the existing unit tests to account for
the API changes. The `TextColorTests` required an extra parameter
specifying the index type when setting an index. And the `AdapterTest`
and `ScreenBufferTests` required the use of the new `SetIndexedXXX`
methods in order to be explicit about the index type, instead of relying
on the `TextAttribute` constructor and the old `SetForeground` and
`SetBackground` methods which didn't have a way to differentiate index
types.

I've manually tested the various console APIs
(`SetConsoleTextAttribute`, `ReadConsoleOutputAttribute`, and
`ReadConsoleOutput`), to make sure they are still setting and reading
the attributes as well as they used to. And I've tested the
`SetConsoleScreenBufferInfoEx` and `GetConsoleScreenBufferInfoEx` APIs
to make sure they can read and write the color table correctly. I've
also tested the color table in the properties dialog, made sure it was
saved and restored from the registry correctly, and similarly saved and
restored from a shortcut link.

Note that there are still a bunch of issues with the color table APIs,
but no new problems have been introduced by the changes in this PR, as
far as I could tell.

I've also done a bunch of manual tests of `OSC 4` to make sure it's
updating all the colors correctly (at least in conhost), and confirmed
that the test case in issue #1223 now works as expected.",,,,True,False,True,328,376,36,34,j4_james@hotmail.com,noreply@github.com,"05/27/2020, 22:34:45",2020,"05/27/2020, 22:34:45",2020,4,1,3,2.9,5.0,0
,"ci: spelling: update to 0.0.16a; update advice (#5922)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Updates the check spelling action to [0.0.16-a](https://github.com/check-spelling/check-spelling/releases/tag/0.0.16-alpha)
* update advice -- [sample](https://github.com/jsoref/terminal/commit/57fc13f6c6fa0a79a06acb94de5005904a2e1222#commitcomment-39489723) -- I really do encourage others to adjust it as desired
* rename `expect` (there are consumers who were not a fan of the `whitelist` nomenclature)
* prune stale items
* some `patterns` improvements to reduce the number of items in `expect`


<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
:warning: Anyone with an inflight addition of a new file to the `whitelist` directory will be moderately unhappy as the action would only use items from there if it didn't find `expect` (and this PR includes the rename).

## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Runs should be ~30s faster.

I was hoping to be able to offer the ability to talk to the bot, but sadly that feature is still not quite ready -- and I suspect that I may want to let projects opt in/out of that feature.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

* I added a commit with misspellings: https://github.com/jsoref/terminal/commit/57fc13f6c6fa0a79a06acb94de5005904a2e1222 ❌  and ran the command it suggested (in bash). 
* The commit [itself passes its own testing](https://github.com/jsoref/terminal/commit/78df00dcf6cc7b81ffe2f604881e20552d3c94be) ✔️ 

The commands were never `cmd`/`psh` friendly. This iteration is designed to make it easier for a bot to parse and eventually do the work in response to a GitHub request, sadly that feature is behind schedule.",,,,True,True,False,40,79,11,10,jsoref@users.noreply.github.com,noreply@github.com,"05/28/2020, 13:01:52",2020,"05/28/2020, 13:01:52",2020,3,0,3,2.3,3.6,0
,"Add a context menu entry to ""Open Windows Terminal here"" (#6100)

## Summary of the Pull Request

![image](https://user-images.githubusercontent.com/18356694/82586680-94447680-9b5d-11ea-9cf1-a85d2b32db10.png)

I went with the simple option - just open the Terminal with the default profile in the selected directory. I'd love to add another entry for ""Open Terminal here with Profile..."", but that's going to be follow-up work, once we sort out pulling the Terminal Settings into their own dll.

## References
* I'm going to need to file a bunch of follow-ups on this one.
  - We should add another entry to let the user select which profile
  - We should add the icon - I've got to do it in `dllname.dll,1` format, which is annoying.
  - These strings should be localized.
  - Should this only appear on <kbd>Shift</kbd>+right click? Probably! However, I don't know how to do that.
* [A Win7 Explorer Command Sample](https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/Win7Samples/winui/shell/appshellintegration/ExplorerCommandVerb) which hasn't aged well
* [cppwinrt tutorial](https://docs.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/author-coclasses) on using COM in cppwinrt
* [This is PowerToys' manifest](https://github.com/microsoft/PowerToys/blob/d2a60c7287eb5667b5282a519c92b759664c9e30/installer/MSIX/appxmanifest.xml#L53-L65) and then [their implementation](https://github.com/microsoft/PowerToys/blob/d16ebba9e0f06e7a0d41d981aeb1fd0a78192dc0/src/modules/powerrename/dll/PowerRenameExt.cpp) which were both helpful
* [This ](https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/desktop-to-uwp-extensions#instructions) was the sample I followed for how to actually set up the manifest, with the added magic that [`desktop5` lets you specify ""Directory""](https://docs.microsoft.com/en-us/uwp/schemas/appxpackage/uapmanifestschema/element-desktop5-itemtype)

## PR Checklist
* [x] Closes #1060
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

This adds a COM class that implements `IExplorerCommand`, which is what lets us populate the context menu entry. We expose that type through a new DLL that is simply responsible for the shell extension, so that explorer doesn't need to load the entire Terminal just to populate that entry.

The COM class is tied to the application through some new entries in the manifest. The Clsid values are IMPORTANT - they must match the UUID of the implementation type. However, the `Verb` in the manifest didn't seem important.",,,,False,False,False,580,11,22,22,migrie@microsoft.com,noreply@github.com,"05/28/2020, 15:42:13",2020,"05/28/2020, 15:42:13",2020,3,3,3,4.9,4.8,0
,"Add support for fullscreen `launchMode` (#6060)

## Summary of the Pull Request

Adds `""launchMode"": ""fullscreen""`, which does what it says on the box.

## PR Checklist
* [x] Closes #288
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

It's important to let the winow get created, _then_ fullscreen it, because otherwise, when the user exits fullscreen, the window is sized to like, 0x0 or something, and that's just annoying.",,,,False,False,False,90,56,7,7,migrie@microsoft.com,noreply@github.com,"05/28/2020, 16:53:01",2020,"05/28/2020, 16:53:01",2020,3,3,3,3.1,2.5,0
,"Enable tab renaming at runtime from the UI (#5775)

## Summary of the Pull Request

Adds support for setting, from the UI, a runtime override for the tab title text. The user can use this to effectively ""rename"" a tab.

If set, the tab will _always_ use the runtime override string. If the user has multiple panes with different titles in a pane, then the tab's override text will be used _regardless_ of which pane was focused when the tab was renamed.

The override text can be removed by just deleting the entire contents of the box. Then, the tab will revert to using the terminal's usual title. 

## References
* Wouldn't be possible without the context menu from #3789
* Focus doesn't return to the active terminal after hitting <kbd>enter</kbd>/<kbd>esc</kbd>, but that's tracked by #5750 

## PR Checklist
* [x] Closes #1079
* [x] I work here
* [ ] Tests added/passed
* [ ] Requires documentation to be updated

## TODO
* [x] `Tab::SetTabText` might be able to be greatly simplified/removed?
* [x] I'm _pretty sure_ if they set an override title, we won't bubble that up to set the window title.
* [x] I'm unsure how this behaves when the terminal's title changes _while_ the TextBox is visible. I don't think it should change the current contents of the box, but it might currently.
* [ ] **for discussion**: If the user doesn't actually change the text of the tab, then we probably shouldn't set the override text, right? 
  - EX: if they open the box and the text is ""cmd"", and immediately hit <kbd>enter</kbd>, then run `title foo`, should the text change to ""foo"" or stay ""cmd""?

## Detailed Description of the Pull Request / Additional comments
![image](https://user-images.githubusercontent.com/18356694/81230615-713f9180-8fb7-11ea-8945-6681eec02a4f.png)
![image](https://user-images.githubusercontent.com/18356694/81230640-7ac8f980-8fb7-11ea-9e6b-22f0e0ed128a.png)
![image](https://user-images.githubusercontent.com/18356694/81230665-86b4bb80-8fb7-11ea-90f0-16d4ffb60d89.png)
![image](https://user-images.githubusercontent.com/18356694/81230686-9207e700-8fb7-11ea-94a9-f3f5a59be139.png)
![image](https://user-images.githubusercontent.com/18356694/81230732-a350f380-8fb7-11ea-9901-6dd4f36154f1.png)
![image](https://user-images.githubusercontent.com/18356694/81230746-a8ae3e00-8fb7-11ea-94fa-d2578f9241a7.png)
![image](https://user-images.githubusercontent.com/18356694/81230787-bc59a480-8fb7-11ea-8edf-2bd7fad343fc.png)
![image](https://user-images.githubusercontent.com/18356694/81230851-dc896380-8fb7-11ea-98c1-918b943543e4.png)",,,,False,False,False,193,26,4,4,migrie@microsoft.com,noreply@github.com,"05/28/2020, 21:06:17",2020,"05/28/2020, 21:06:17",2020,4,3,3,4.4,2.5,0
,"Make the Shell Extension methods STDMETHODIMP (#6238)

These methods need to be declared STDMETHODIMP so the x86 build will pass.",,,,False,False,False,14,14,1,1,migrie@microsoft.com,noreply@github.com,"05/28/2020, 21:09:52",2020,"05/28/2020, 21:09:52",2020,4,3,3,2.5,1.0,0
,"Give cursor radio buttons their own sequential IDs in propsheet (#6231)

For a radio button group to work properly, they need sequential IDs.
This moves the cursor radio buttons on the `conhost` property sheet to
be sequential.

## References
- Introduced with #2663
- Found while investigating #4186

## PR Checklist
* [x] Closes unfiled issue found while investigating #4186
* [x] I work here.
* [x] Manual test.
* [x] No documentation required.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
- `CheckRadioButton` takes a contiguous group of IDs. It will set one
  item in the list and then uncheck the rest. When a new one was added
  to the group, it was added to the end of the segment in the IDs file,
  but not immediately after the existing radio buttons. This means it
  accidentally turned off all the other buttons in the middle.
- To resolve this, I moved all the cursor buttons into their own
  sequential group number and I deprecated the old values.

## Validation Steps Performed
- [x] Ensured that the ""Discard Old Duplicates"" value was set in the
  registry, walked through debugger as `conhost` packed the `TRUE` value
  into the property sheet blob, walked through the property sheet
  `console.dll` as it unpacked the `TRUE`, then observed that the
  checkbox was actually set instead of getting unset by the
  `CheckRadioButton` call that went from 107 to 119 and accidentally
  unchecked number 112, `IDD_HISTORY_NODUP` even though I swear it was
  just set.",,,,False,False,False,9,4,1,1,miniksa@microsoft.com,noreply@github.com,"05/28/2020, 21:16:10",2020,"05/28/2020, 21:16:10",2020,4,3,3,3.5,1.2,0
,"Add missing namespaces to the Preview, Release manifests (#6241)",,,,False,False,False,7,3,2,2,migrie@microsoft.com,noreply@github.com,"05/28/2020, 22:02:40",2020,"05/28/2020, 22:02:40",2020,4,3,3,3.5,1.0,0
,Reintroduce accidentally removed uap7 namespace (#6243),,,,False,False,False,2,0,2,2,duhowett@microsoft.com,noreply@github.com,"05/28/2020, 22:18:35",2020,"05/28/2020, 22:18:35",2020,4,1,3,5.0,1.0,0
,Fix syntax errors in font weight options (#6248),,,,True,True,False,3,2,1,1,39125296+alexzshl@users.noreply.github.com,noreply@github.com,"05/29/2020, 05:28:13",2020,"05/29/2020, 05:28:13",2020,1,0,3,3.0,1.2,0
,"Find icon from shortcut target if shortcut doesn't specify it (#6277)

Implements what I was suggesting in #6266 where if a shortcut doesn't
specify an icon, the shortcut target full path is used before searching
for a matching executable in the path.

## References

Found due to not getting the right icon in conhost from the Yori
installer.  It's fixed in the installer from
https://github.com/malxau/yori/commit/5af366b6a5ea4c92dce3940abb8616ab5bd300a6
for all current users of conhost though, so this PR is just trying to
minimize surprises for the next guy.

## Detailed Description of the Pull Request / Additional comments

I know conhost and shortcut settings aren't really the team's focus
which is why I'm doing this.  I understand though if there's a better
way or there are factors that I hadn't considered.  Note that the path
searching code is used when programs are launched without using a
shortcut, and it will match if the working directory of the shortcut is
the directory containing the executable.

## Validation Steps Performed

Created a shortcut that didn't specify an icon to a binary that wasn't
in the path, and verified that the icon in the upper left of the console
window could resolve correctly when opening the shortcut.  I'm not aware
of a way to get into this path (of launching via a shortcut to a command
line process) without replacing the system conhost, which is what I did
to verify it.  In order to diagnose it, I used hardcoded DebugBreak()
since even ImageFileExecutionOptions didn't like running against conhost-
is there are better way to debug and test these cases without being so
invasive on the system?

Closes #6266",,,,True,False,False,45,15,4,4,malxau@users.noreply.github.com,noreply@github.com,"06/01/2020, 17:19:05",2020,"06/01/2020, 17:19:05",2020,3,1,3,3.7,1.8,0
,"Skip glyph shaping analysis when the entire text is simple (#6206)

## Summary of the Pull Request

As the title suggests, this PR will make CustomTextLayout skip glyph shaping analysis when the entire text is detected as simple.

## References

My main reference is [DirectX Factor - Who’s Afraid of Glyph Runs?](https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/november/directx-factor-who%e2%80%99s-afraid-of-glyph-runs)

And also #2959

## PR Checklist
* [x] Closes @skyline75489's continuous drive for perf gainz. 
* [x] CLA signed. 
* [x] Manual tests.
* [x] Nah on docs.
* [x] Discussed with core contributors in this PR.

## Detailed Description of the Pull Request / Additional comments

This can be seen as a followup of #2959. The idea is the same: make use of simple text (which makes up I think 95% of all terminal text) as much as possible.

The performance boost is huge. Cacafire is actually on fire this time (and remember I'm using 4K!). The frame rate is also boosted since more CPU time can be used for actual drawing.

Before:

![图片](https://user-images.githubusercontent.com/4710575/82913277-b21c3c00-9fa0-11ea-8785-a14b347bbcbd.png)

After:

![图片](https://user-images.githubusercontent.com/4710575/82912969-4afe8780-9fa0-11ea-8795-92617dde822f.png)

## Validation Steps Performed

Manually validated.",,,,False,False,False,89,9,2,2,skyline75489@outlook.com,noreply@github.com,"06/01/2020, 18:36:28",2020,"06/01/2020, 18:36:28",2020,4,1,3,4.5,1.5,0
,"Add startup task, setting to launch application on login (#4908)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This PR adds a new boolean global setting, startOnUserLogin, along with associated AppLogic to request enabling or disabling of the StartupTask. Added UAP5 extensions to AppX manifests. 
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

#2189 

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #2189
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [x] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #2189

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Please note, I'm a non-practicing C++ developer, there are a number of things I wasn't sure how to handle in the appropriate fashion, mostly around error handling and what probably looks like an incredibly naive (and messy) way to implement the async co_await behavior. 

Error handling-wise, I found (don't ask me how!) that if you somehow mismatch the startup task's ID between the manifest and the call to `StartupTask::GetAsync(hstring taskId)`, you'll get a very opaque WinRT exception that boils down to a generic invalid argument message. This isn't likely to happen in the wild, but worth mentioning...

I had enough trouble getting myself familiarized with the project, environment, and C++/WinRT in general didn't want to try to tackle adding tests for this quite yet since (as I mentioned) I don't really know what I'm doing. I'm happy to give it a try with perhaps a bit of assistance in getting started 😃 

Further work in this area of the application outside of this immediate PR might need to include adding an additional setting to contain launch args that the startup task can pass to the app so that users can specify a non-default profile to launch on start, window position (e.g., #653).

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

✔️ Default settings:
Given the user does not have the `startOnUserLogin` setting in their profile.json,
When the default settings are opened (via alt+click on Settings), 
Then the global settings should contain the `""startOnUserLogin"": false` token

✔️ Applying setting on application launch
Given the `startOnUserLogin` is `true` and 
  the `Windows Terminal` startup task is `disabled` and 
  the application is not running
When the application is launched
Then the `Windows Terminal` entry in the user's Startup list should be `enabled`

✔️ Applying setting on settings change
Given the `startOnUserLogin` is `true` and
  the `Windows Terminal` startup task is `enabled` and
  the application is running
When the `startOnUserLogin` setting is changed to `false` and
  the settings file is saved to disk
Then the `Windows Terminal` startup task entry should be `disabled`

✔️ Setting is ignored when user has manually disabled startup
Given the `startOnUserLogin` is `true` and
  the application is not running and
  the `Windows Terminal` startup task has been set to `disabled` via user action
When the application is launched
Then the startup task should remain disabled and
  the application should not throw an exception

#### note: Task Manager does not seem to re-scan startup task states after launch; the Settings -> Apps -> Startup page also requires closing or moving away to refresh the status of entries",,,,True,False,False,79,2,11,10,josh@liquidelectron.com,noreply@github.com,"06/01/2020, 20:24:43",2020,"06/01/2020, 20:24:43",2020,4,0,3,4.9,3.0,0
,"Allow the default profile to be specified by name (#5706)

## Summary of the Pull Request

This looks like a big diff, but there's a bunch of existing code that
just got moved around, and there's a cool new Utils template.

The tests all pass, and this passed manual validation. I tried weird
things like ""making a profile named `{                            }`""
(w/ enough spaces to look like a guid), and yeah it doesn't let you
specify that one as a name, but _why would you do that?!_

Okay, this pull request abstracts the conversion of a profile name into
an optional profile guid out of the ""New Terminal Tab Args"" handler and
into a common space for all of CascadiaSettings to use.

It also cleans up the conversion of indices and names into optional
GUIDs and turns _those_ into further helpers.

It also introduces a cool new template for running value_or multiple
times on a chain of optionals. CoalesceOptionals is a ""choose first,
with fallback"" for N>1 optionals.

On top of all this, I've built support for an ""unparsed default GUID"":
we load the user's defaultProfile as a string, and as part of settings
validation we unpack that string using the helpers outlined above.

## References

Couples well with #5690.

## PR Checklist
* [x] Incidentally fixes #2876
* [x] Core Contributor
* [x] Tests added/passed
* [x] Requires documentation to be updated (done)
* [x] I've discussed this with core contributors already

## Validation Steps Performed

Added additional test collateral to make sure that this works.",,,,True,False,False,174,115,8,8,dustin+microsoft@howett.net,noreply@github.com,"06/01/2020, 20:26:00",2020,"06/01/2020, 20:26:00",2020,4,0,3,3.4,3.6,0
,"Adds Alt+Click to auto split pane (#5928)

## Summary of the Pull Request
Users can now open an auto split pane with the mouse.
When opening the dropdown, alt+invoke the profile of choice and it should open in an auto sized pane.

## References
#5025 - further discussion there as to whether this actually closes it.

## Detailed Description of the Pull Request / Additional comments
Had to do a special check for debugTap because that's triggered by holding both alts.

## Validation Steps Performed
alt+click/enter on a new profile. Looks great!",,,,False,False,False,23,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"06/01/2020, 20:26:21",2020,"06/01/2020, 20:26:21",2020,4,1,3,4.8,1.2,0
,"Add support for VT52 emulation (#4789)

## Summary of the Pull Request

This PR adds support for the core VT52 commands, and implements the `DECANM` private mode sequence, which switches the terminal between ANSI mode and VT52-compatible mode.

## References

PR #2017 defined the initial specification for VT52 support.
PR #4044 removed the original VT52 cursor ops that conflicted with VT100 sequences.

## PR Checklist
* [x] Closes #976
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #2017

## Detailed Description of the Pull Request / Additional comments

Most of the work involves updates to the parsing state machine, which behaves differently in VT52 mode. `CSI`, `OSC`, and `SS3` sequences are not applicable, and there is one special-case escape sequence (_Direct Cursor Address_), which requires an additional state to handle parameters that come _after_ the final character.

Once the parsing is handled though, it's mostly just a matter of dispatching the commands to existing methods in the `ITermDispatch` interface. Only one new method was required in the interface to handle the _Identify_ command.

The only real new functionality is in the `TerminalInput` class, which needs to generate different escape sequences for certain keys in VT52 mode. This does not yet support _all_ of the VT52 key sequences, because the VT100 support is itself not yet complete. But the basics are in place, and I think the rest is best left for a follow-up issue, and potentially a refactor of the `TerminalInput` class.

I should point out that the original spec called for a new _Graphic Mode_ character set, but I've since discovered that the VT terminals that _emulate_ VT52 just use the existing VT100 _Special Graphics_ set, so that is really what we should be doing too. We can always consider adding the VT52 graphic set as a option later, if there is demand for strict VT52 compatibility. 

## Validation Steps Performed

I've added state machine and adapter tests to confirm that the `DECANM` mode changing sequences are correctly dispatched and forwarded to the `ConGetSet` handler. I've also added state machine tests that confirm the VT52 escape sequences are dispatched correctly when the ANSI mode is reset.

For fuzzing support, I've extended the VT command fuzzer to generate the different kinds of VT52 sequences, as well as mode change sequences to switch between the ANSI and VT52 modes.

In terms of manual testing, I've confirmed that the _Test of VT52 mode_ in Vttest now works as expected.",,,,False,False,True,592,21,21,21,j4_james@hotmail.com,noreply@github.com,"06/01/2020, 21:20:40",2020,"06/01/2020, 21:20:40",2020,4,1,3,4.9,4.8,0
,"Add support for `--fullscreen`, `--maximized` (#6139)

## Summary of the Pull Request

Adds two new flags to the `wt.exe` alias:

* `--maximized,-M`: Launch the new Terminal window maximized. This flag cannot be combined with `--fullscreen`.
* `--fullscreen,-F`: Launch the new Terminal window fullscreen. This flag cannot be combined with `--maximized`.

## References
* This builds on the work done in #6060.
* The cmdline args megathread: #4632

## PR Checklist
* [x] Closes #5801
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

* I had to move the commandline arg parsing up a layer from `TerminalPage` to `AppLogic`, because `AppLogic` controls the Terminal's settings, including launch mode settings. This seems like a reasonable change, to put both the settings from the file and the commandline in the same place.
  - **Most of the diff is that movement of code**

* _""What happens when you try to pass both flags, like `wtd -M -F new-tab`?""_:
![image](https://user-images.githubusercontent.com/18356694/82679939-3cffde00-9c11-11ea-8d88-03ec7db83e59.png)

## Validation Steps Performed
* Ran a bunch of commandlines to see what happened.",,,,False,False,False,160,129,9,9,migrie@microsoft.com,noreply@github.com,"06/01/2020, 21:57:30",2020,"06/01/2020, 21:57:30",2020,4,3,3,2.8,3.0,0
,"Update wil. Fixes GDI handle leak (#6229)

## Summary of the Pull Request
When resizing the window title, a GDI object would be leaked. This has to do with our island message handler using `wil` to track these objects and `wil` having a bug.

## References
microsoft/wil#100

## PR Checklist
* [x] Closes #5949 
* [x] I work here.
* [x] Tested manually
* [x] Doc not required.
* [x] Am core contributor.

## Validation Steps Performed
* [x] Added the GDI Objects column to Task Manager, set the Terminal to use the `titleWidth` size tabs, then changed the title a bunch with PowerShell. Confirmed repro before (increasing GDI count). Confirmed it's gone after (no change to object count).",,,,True,False,False,14,4,7,6,miniksa@microsoft.com,noreply@github.com,"06/01/2020, 22:29:05",2020,"06/01/2020, 22:29:05",2020,4,3,3,3.9,1.8,0
,"DEPS: Update jsoncpp to 1.9.3 (#6308)

Updates jsoncpp to 1.9.3. Doesn't look like any of the tests broke.

* [x] I work here
* [x] Ran existing tests

I'll file a follow-up PR for adding trailing comma support, as mentioned in https://github.com/microsoft/terminal/issues/4232#issuecomment-634126486",,,,False,False,False,2490,2282,5,5,migrie@microsoft.com,noreply@github.com,"06/02/2020, 18:50:06",2020,"06/02/2020, 18:50:06",2020,4,3,3,2.6,3.6,0
,"Animate Hover state change of CaptionButtons (#6303)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
As discussed in #6293 , this PR adds a fade animation to button background when pointer hover ends
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6293
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Added storyboarded coloranimations to the visualstategroup of captionbuttons
<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Tested manually",,,,True,False,False,15,2,1,1,anuthadev@gmail.com,noreply@github.com,"06/02/2020, 18:50:18",2020,"06/02/2020, 18:50:18",2020,4,1,3,4.4,1.2,0
,"DEPS: Update CLI11 to 1.9 (#6307)

Updates CLI11 to 1.9. Doesn't look like any of the tests broke.

* [x] I work here
* [x] Ran existing tests",,,,False,False,False,3178,1311,3,3,migrie@microsoft.com,noreply@github.com,"06/02/2020, 18:51:17",2020,"06/02/2020, 18:51:17",2020,4,3,3,3.5,3.0,0
,"Add support for `--title` to the `wt.exe` commandline args (#6296)

## Summary of the Pull Request

Adds support for setting the terminal `title` with the commandline argument `--title <title>`.

## PR Checklist
* [x] Closes #6183
* [x] I work here
* [ ] Tests added/passed
* [ ] Requires documentation to be updated - probably does, yea

## Detailed Description of the Pull Request / Additional comments

* I wasn't sure how we felt about `-t` being the short version of this argument, so I left it out. If we're cool with that, adding it wouldn't be hard.

## Validation Steps Performed

![image](https://user-images.githubusercontent.com/18356694/83450866-afe03480-a41b-11ea-84e7-9134474fdd7a.png)",,,,False,False,False,15,0,3,3,migrie@microsoft.com,noreply@github.com,"06/02/2020, 18:52:08",2020,"06/02/2020, 18:52:08",2020,4,3,3,5.0,1.0,0
,"Fix a crash with this method when running unpackaged (#6314)

## Summary of the Pull Request

I was debugging the terminal unpackaged, and noticed that this method crashes immediately. I'm gonna bet that this functionality only works when the app is installed as a package. Wrapping this whole method up in one big ol' `try/catch` seems to fix the immediate crash.

## References

* Introduced in #4908 

## PR Checklist
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

We _could_ display a warning if the user has this property set and is running the terminal unpackaged, to clue them in that it won't work? I'm willing to file a follow-up for that, but I think we should fix the crash _now_.

## Validation Steps Performed
* Ran the terminal successfully unpackaged.",,,,True,True,False,11,0,1,1,migrie@microsoft.com,noreply@github.com,"06/03/2020, 00:17:52",2020,"06/03/2020, 00:17:52",2020,1,3,3,5.0,1.2,0
,"tools: add a powershell script to generate CPWD from the UCD (#5946)

This commit introduces Generate-CodepointWidthsFromUCD, a powershell
(7+) script that will parse a UCD XML database in the UAX 42 format from
https://www.unicode.org/Public/UCD/latest/ucdxml/ and generate
CodepointWidthDetector's giant width array.

By default, it will emit one UnicodeRange for every range of non-narrow
glyphs with a different Width + Emoji + Emoji Presentation class;
however, it can be run in ""packing"" and ""full"" mode.

* Packing mode: ignore the width/emoji/pres class and combine adjacent
  runs that CPWD will treat the same.
     * This is for optimizing the number of individual ranges emitted
       into code.
* Full mode: include narrow codepoints (helpful for visualization)

It also supports overrides, provided in an XML document of the same format
as the UCD itself. Entries in the overrides files are applied after the
entire UCD is read and will replace any impacted ranges.

The output (when packing) looks like this:

```c++
// Generated by Generate-CodepointWidthsFromUCD -Pack:True -Full:False
// on 05/17/2020 02:47:55 (UTC) from Unicode 13.0.0.
// 66182 (0x10286) codepoints covered.
static constexpr std::array<UnicodeRange, 23> s_wideAndAmbiguousTable{
    UnicodeRange{ 0xa1, 0xa1, CodepointWidth::Ambiguous },
    UnicodeRange{ 0xa4, 0xa4, CodepointWidth::Ambiguous },
    UnicodeRange{ 0xa7, 0xa8, CodepointWidth::Ambiguous },
    .
    .
    .
    UnicodeRange{ 0x1f210, 0x1f23b, CodepointWidth::Wide },
    UnicodeRange{ 0x1f37e, 0x1f393, CodepointWidth::Wide },
    UnicodeRange{ 0x100000, 0x10fffd, CodepointWidth::Ambiguous },
};
```

The output (when overriding) looks like this:

```c++
// Generated by Generate-CodepointWidthsFromUCD.ps1 -Pack:True -Full:False -NoOverrides:False
// on 5/22/2020 11:17:39 PM (UTC) from Unicode 13.0.0.
// 321205 (0x4E6B5) codepoints covered.
// 240 (0xF0) codepoints overridden.
static constexpr std::array<UnicodeRange, 23> s_wideAndAmbiguousTable{
    UnicodeRange{ 0xa1, 0xa1, CodepointWidth::Ambiguous },
    ...
    UnicodeRange{ 0xfe20, 0xfe2f, CodepointWidth::Narrow }, // narrow combining ligatures (split into left/right halves, which take 2 columns together)
    ...
    UnicodeRange{ 0x100000, 0x10fffd, CodepointWidth::Ambiguous },
};
```",,,,False,False,False,280,1,3,3,duhowett@microsoft.com,noreply@github.com,"06/03/2020, 07:16:14",2020,"06/03/2020, 07:16:14",2020,2,1,3,5.0,3.0,0
,"Remove more serializers missed in 6394e5d70 (#6321)

Every time somebody sees these they think they have to write new ones for their new things.",,,,False,False,False,0,238,4,4,duhowett@microsoft.com,noreply@github.com,"06/03/2020, 16:08:20",2020,"06/03/2020, 16:08:20",2020,3,1,3,0.0,2.5,0
,"Fix line drawing during IME operations. (#6223)

## Summary of the Pull Request
Restores proper line drawing during IME operations in `conhost`

## PR Checklist
* [x] Closes #803
* [x] I work here.
* [x] Tested manually.
* [x] Check the performance of this and see if it's worse-enough to merit a more confusing algorithm. It was worse for the majority case so I scoped it.
* [x] No doc, it should have worked this way.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
- Changed `ConsoleImeInfo::s_ConvertToCells` to be less confusing. It's doing about the same thing, but it's way easier to read now and the compiler/linker/optimizer should just be the same.
- Edited `Renderer::_PaintBufferOutputHelper` to check each attribute for line drawing characters as the right half of a two-col character might have different line drawing characters than the left-half.

## Validation Steps Performed
- [x] Manual operation of IME in conhost with Japanese IME.
- [x] Manual operation of IME in conhost with Chinese IME.
- [x] Manual operation of IME in conhost with Chinese (Traditional) IME.
- [x] Manual operation of IME in conhost with and Korean IME. - @leonMSFT says Korean doesn't work this way. But Korean is broken worse in that it's not showing suggestions at all. Filing new bug. #6227 
- [x] Validated against API-filling calls through `SetConsoleTextAttribute` per @j4james's sample code",,,,True,False,False,50,5,2,2,miniksa@microsoft.com,noreply@github.com,"06/03/2020, 22:21:04",2020,"06/03/2020, 22:21:04",2020,4,3,3,4.6,1.8,0
,"Replace manual get/set code in GlobalAppSettings with GETSET_PROPERTY (#5931)

## Summary of the Pull Request

This pull request removes all of the custom `Get` and `Set` implementations from GlobalAppSettings and replaces them with `GETSET_PROPERTY`. This will be required if we ever convert it to a WinRT class, but for now it's simply niceness-improving.

## References

Required #5847 to land.

## PR Checklist
* [ ] Closes norhing
* [x] CLAd
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already",,,,False,False,False,121,305,7,7,dustin+microsoft@howett.net,noreply@github.com,"06/03/2020, 22:51:46",2020,"06/03/2020, 22:51:46",2020,4,0,3,1.4,3.0,0
,doc: Propose a JsonUtils replacement by writing documentation (#5875),,,,False,False,False,257,0,1,1,dustin+microsoft@howett.net,noreply@github.com,"06/04/2020, 05:54:54",2020,"06/04/2020, 05:54:54",2020,1,0,3,5.0,2.5,0
,"Add a helper to skip nuget restore during local builds (#6339)

Running `nuget restore` on every build is pretty unnecessary - usually, you _know_ when you need to run it. For the inner dev loop, this is a few seconds on every `bx` build. 

This adds a environment variable you can set to skip the `nuget restore` part of a `bcz` build.

Add the following to your `.razzlerc.cmd`:
```cmd
set _SKIP_NUGET_RESTORE=1
```

and `bcz` (and the other helpers) _won't_ perform a nuget restore on every build.",,,,False,False,False,6,2,1,1,migrie@microsoft.com,noreply@github.com,"06/04/2020, 12:39:30",2020,"06/04/2020, 12:39:30",2020,3,3,3,3.7,1.0,0
,"Spec for Improved keyboard handling in Conpty (#5887)

## Summary of the Pull Request

We have a number of bugs in the Terminal that all have the same singular root cause - VT input does not carry the same fidelity that Win32 input does. For Win32 applications there are certain keystrokes that simply cannot be represented with VT sequences. 

This is my proposal for how we'll handle all these cases. I'm proposing a _new VT sequence_, which will enable the Terminal to send input with all of the information that an `INPUT_RECORD` might have, to conpty. There, conpty will be able to send input to the client application with the same fidelity they're used to, enabling these keys to work for those applications once again. 

## PR Checklist
* [x] Specs #4999
* [x] I work here
* [x] is a spec

## Detailed Description of the Pull Request / Additional comments
_read the spec_",,,,True,True,False,574,0,4,4,migrie@microsoft.com,noreply@github.com,"06/04/2020, 12:42:33",2020,"06/04/2020, 12:42:33",2020,3,3,3,5.0,3.6,0
,"Draw the cursor underneath text, and above the background (#6337)

## Summary of the Pull Request

![textAboveCursor003](https://user-images.githubusercontent.com/18356694/83681722-67a24d00-a5a8-11ea-8d9b-2d294065e4e4.gif)

This is the plan that @miniksa suggested to me. Instead of trying to do lots of work in all the renderers to do backgrounds as one pass, and foregrounds as another, we can localize this change to basically just the DX renderer. 
1. First, we give the DX engine a ""heads up"" on where the cursor is going to be drawn during the frame, in `PrepareRenderInfo`.
  - This function is left unimplemented in the other render engines.
2. While printing runs of text, the DX renderer will try to paint the cursor in `CustomTextRenderer::DrawGlyphRun` INSTEAD of `DxEngine::PaintCursor`. This lets us weave the cursor background between the text background and the text. 

## References

* #6151 was a spec in this general area. I should probably go back and update it, and we should probably approve that first.
* #6193 is also right up in this mess

## PR Checklist
* [x] Closes #1203
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

* This is essentially `""cursorTextColor"": ""textForeground""` from #6151.
* A follow up work item is needed to add support for the current behavior, (`""cursorTextColor"": null`), and hooking up that setting to the renderer.",,,,False,False,False,314,144,17,17,migrie@microsoft.com,noreply@github.com,"06/04/2020, 12:58:22",2020,"06/04/2020, 12:58:22",2020,3,3,3,3.4,3.5,0
,"Add a test to ensure support for trailing commas in `settings.json` (#6312)

## Summary of the Pull Request

Adds support for trailing commas in our json files. 

## References

* Enabled due to the excellent work over in https://github.com/open-source-parsers/jsoncpp/pull/1098

## PR Checklist
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,37,0,1,1,migrie@microsoft.com,noreply@github.com,"06/04/2020, 16:57:06",2020,"06/04/2020, 16:57:06",2020,3,3,3,5.0,1.0,0
,"Improve support for VT character sets (#4496)

This PR improves our VT character set support, enabling the [`SCS`]
escape sequences to designate into all four G-sets with both 94- and
96-character sets, and supports invoking those G-sets into both the GL
and GR areas of the code table, with [locking shifts] and [single
shifts]. It also adds [`DOCS`] sequences to switch between UTF-8 and the
ISO-2022 coding system (which is what the VT character sets require),
and adds support for a lot more characters sets, up to around the level
of a VT510.

[`SCS`]: https://vt100.net/docs/vt510-rm/SCS.html
[locking shifts]: https://vt100.net/docs/vt510-rm/LS.html
[single shifts]: https://vt100.net/docs/vt510-rm/SS.html
[`DOCS`]: https://en.wikipedia.org/wiki/ISO/IEC_2022#Interaction_with_other_coding_systems

## Detailed Description of the Pull Request / Additional comments

To make it easier for us to declare a bunch of character sets, I've made
a little `constexpr` class that can build up a mapping table from a base
character set (ASCII or Latin1), along with a collection of mappings for
the characters the deviate from the base set. Many of the character sets
are simple variations of ASCII, so they're easy to define this way.

This class then casts directly to a `wstring_view` which is how the
translation tables are represented in most of the code. We have an array
of four of these tables representing the four G-sets, two instances for
the active left and right tables, and one instance for the single shift
table.

Initially we had just one `DesignateCharset` method, which could select
the active character set. We now have two designate methods (for 94- and
96- character sets), and each takes a G-set number specifying the target
of the designation, and a pair of characters identifying the character
set that will be designated (at the higher VT levels, character sets are
often identified by more than one character).

There are then two new `LockingShift` methods to invoke these G-sets
into either the GL or GR area of the code table, and a `SingleShift`
method which invokes a G-set temporarily (for just the next character
that is output).

I should mention here that I had to make some changes to the state
machine to make these single shift sequences work. The problem is that
the input state machine treats `SS3` as the start of a control sequence,
while the output state machine needs it to be dispatched immediately
(it's literally the _Single Shift 3_ escape sequence). To make that
work, I've added a `ParseControlSequenceAfterSs3` callback in the
`IStateMachineEngine` interface to decide which behavior is appropriate.

When it comes to mapping a character, it's simply an array reference
into the appropriate `wstring_view` table. If the single shift table is
set, that takes preference. Otherwise the GL table is used for
characters in the range 0x20 to 0x7F, and the GR table for characters
0xA0 to 0xFF (technically some character sets will only map up to 0x7E
and 0xFE, but that's easily controlled by the length of the
`wstring_view`).

The `DEL` character is a bit of a special case. By default it's meant to
be ignored like the `NUL` character (it's essentially a time-fill
character). However, it's possible that it could be remapped to a
printable character in a 96-character set, so we need to check for that
after the translation. This is handled in the `AdaptDispatch::Print`
method, so it doesn't interfere with the primary `PrintString` code
path.

The biggest problem with this whole process, though, is that the GR
mappings only really make sense if you have access to the raw output,
but by the time the output gets to us, it would already have been
translated to Unicode by the active code page. And in the case of UTF-8,
the characters we eventually receive may originally have been composed
from two or more code points.

The way I've dealt with this was to disable the GR translations by
default, and then added support for a pair of ISO-2022 `DOCS` sequences,
which can switch the code page between UTF-8 and ISO-8859-1. When the
code page is ISO-8859-1, we're essentially receiving the raw output
bytes, so it's safe to enable the GR translations. This is not strictly
correct ISO-2022 behavior, and there are edge cases where it's not going
to work, but it's the best solution I could come up with.

## Validation Steps Performed

As a result of the `SS3` changes in the state machine engine, I've had
to move the existing `SS3` tests from the `OutputEngineTest` to the
`InputEngineTest`, otherwise they would now fail (technically they
should never have been output tests).

I've added no additional unit tests, but I have done a lot of manual
testing, and made sure we passed all the character set tests in Vttest
(at least for the character sets we currently support). Note that this
required a slightly hacked version of the app, since by default it
doesn't expose a lot of the test to low-level terminals, and we
currently identify as a VT100.

Closes #3377
Closes #3487",,,,True,True,False,1704,328,30,30,j4_james@hotmail.com,noreply@github.com,"06/04/2020, 19:40:15",2020,"06/04/2020, 19:40:15",2020,4,1,3,4.4,5.0,0
,"Reflect OS build fixes on 7b489128ac back to inbox

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 677d15a4e298a0e1e3ce093bc1dff8d832e3c2b1

Related work items: #26765368",,,,True,True,False,13,3,4,4,duhowett@microsoft.com,duhowett@microsoft.com,"06/04/2020, 22:09:17",2020,"06/04/2020, 22:09:17",2020,4,1,1,4.1,1.2,0
,"Allow Ctrl+Alt <> AltGr aliasing to be disabled (#6212)

## Summary of the Pull Request

Some people wish to use Ctrl+Alt combinations without Windows treating those as an alias for AltGr combinations. This PR adds a new `altGrAliasing` setting allowing one to control this behavior.

## PR Checklist
* [x] Closes #6211
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Manual testing
* [x] Requires documentation to be updated: https://github.com/MicrosoftDocs/terminal/issues/50
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed

* Choose a German keyboard layout
* Using `showkey -a` ensured that both `Ctrl+Alt+Q/E` and `AltGr+Q/E` produce `@/€`
* Added `""altGrAliasing"": false` to the WSL profile
* Using `showkey -a` ensured `Ctrl+Alt+Q/E` now produces `^[^Q/E` while `AltGr+Q/E` continues to produce `@/€`",,,,False,False,False,33,4,11,11,leonard@hecker.io,noreply@github.com,"06/05/2020, 16:11:41",2020,"06/05/2020, 16:11:41",2020,3,1,3,4.5,2.4,0
,"Move to Microsoft.UI.Xaml 2.4.0 (#5778)

This brings support for ""Compact"" tab sizing, which compresses all inactive tabs to just the size of their icons plus the close button. Neat!

It also just keeps us generally up-to-date and good citizens.",,,,False,False,False,18,18,11,11,dustin+microsoft@howett.net,noreply@github.com,"06/05/2020, 17:07:03",2020,"06/05/2020, 17:07:03",2020,3,0,3,2.5,2.0,0
,"Spec for tab tear off and default app (#2080)

docs have no build, cleaning out draft spec from PR queue",,,,False,False,False,319,0,1,1,miniksa@microsoft.com,noreply@github.com,"06/05/2020, 18:08:32",2020,"06/05/2020, 18:08:32",2020,4,3,3,5.0,3.0,0
,"First draft of a spec for panes with non-terminal content (#1080)

Co-authored-by: Michael Niksa <miniksa@microsoft.com>

putting outdated draft spec into drafts folder and closing PR. CI has no function on docs.",,,,False,False,False,115,0,3,3,migrie@microsoft.com,noreply@github.com,"06/05/2020, 18:14:01",2020,"06/05/2020, 18:14:01",2020,4,3,3,5.0,2.0,0
,fix spell things I forced into master.,,,,True,True,False,3,3,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"06/05/2020, 18:28:19",2020,"06/05/2020, 18:28:19",2020,4,3,3,2.5,1.2,0
,"Add support for `compact` tab sizing (#5787)

## Summary of the Pull Request

Really couldn't be more starightforward. MUX 2.4 added support for ""compact"" sized tabs. This PR (targeting the 2.4 PR currently, will move to `master` when that merges) enables users to specify `""tabWidthMode"": ""compact""` in their global settings to get this behavior.

## References
* #5778 - PR to move to MUX 2.4
* [microsoft-ui-xaml#2016](https://github.com/microsoft/microsoft-ui-xaml/pull/2016) - the MUX PR for compact tab sizing.
* #597 - Tab sizing options?

## PR Checklist
* [x] I don't think we have an issue for this, though I could be wrong.
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

In this screenshot, I'm hovering over tab 2, but the ubuntu tab is focused:
![image](https://user-images.githubusercontent.com/18356694/81302365-e6ef4000-903f-11ea-9ce3-5f5ce92e5ba4.png)

In this screenshot, tab 2 is focused:
![image](https://user-images.githubusercontent.com/18356694/81302383-ea82c700-903f-11ea-9820-92348d5adc64.png)",,,,True,True,False,22,10,3,3,migrie@microsoft.com,noreply@github.com,"06/05/2020, 18:51:04",2020,"06/05/2020, 18:51:04",2020,4,3,3,3.4,1.2,0
,spelling I,,,,False,False,False,13,6,3,3,duhowett@microsoft.com,duhowett@microsoft.com,"06/05/2020, 18:57:17",2020,"06/05/2020, 18:57:17",2020,4,1,1,3.4,1.0,0
,spelling II,,,,False,False,False,4,4,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"06/05/2020, 18:58:25",2020,"06/05/2020, 18:58:25",2020,4,1,1,2.5,1.0,0
,Last round of master spelling fixes,,,,True,True,False,2,1,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"06/05/2020, 19:03:20",2020,"06/05/2020, 19:03:20",2020,4,1,1,3.3,1.2,0
,"Update the tab's close button color to match the tab text color (#5789)

## Summary of the Pull Request

When we select a color for the tab, we update the foreground color of the text so that it maintains acceptable contrast with the new tab color. However, we weren't also updating the foreground color of the close button.

This is understandable though, because apparently this wasn't fixable until MUX 2.4 arrived. I'm not a XAML expert, but I know that setting this key only works when we're using MUX 2.4, so I'm assuming something about the TabView implementation changed in that release. _This PR is marked as a draft until #5778 is merged, then I'll re-target to master._

## References
* #5778 - PR to move to MUX 2.4
* This bug was introduced with the tab color picker in #3789

## PR Checklist
* [x] Closes #5780
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
A light tab color:
![image](https://user-images.githubusercontent.com/18356694/81303943-00918700-9042-11ea-86e6-7bdfe343c4ca.png)

A dark tab color:
![image](https://user-images.githubusercontent.com/18356694/81303953-04250e00-9042-11ea-8db2-be97af519fae.png)",,,,True,True,False,3,1,1,1,migrie@microsoft.com,noreply@github.com,"06/05/2020, 19:12:28",2020,"06/05/2020, 19:12:28",2020,4,3,3,3.7,1.2,0
,"Make the conversion from WORD to TextAttribute explicit (#6380)

In Windows, we build with /Zc:wchar_t- (which makes wchar_t an unsigned
short typedef.) This causes build breaks when we compare two wchar_t
values (or a wchar_t and an enum class that's of type wchar_t) and the
compiler decides that it might want to _promote them to TextAttribute_
before doing the comparison.",,,,False,False,False,69,69,9,9,duhowett@microsoft.com,noreply@github.com,"06/05/2020, 23:20:32",2020,"06/05/2020, 23:20:32",2020,4,1,3,2.5,2.5,0
,"Reflect OS build fixes back from f90f3bf99

Retrieved from https://microsoft.visualstudio.com os OS official/rs_onecore_dep_uxp 272dfa1c4ad5e4202c4c56f3db7a445dc0b003cf",,,,True,True,False,69,69,9,9,duhowett@microsoft.com,duhowett@microsoft.com,"06/05/2020, 23:25:23",2020,"06/05/2020, 23:25:23",2020,4,1,1,2.5,3.0,0
,"Improve the legacy color conversions (#6358)

This PR provides a faster algorithm for converting 8-bit and 24-bit
colors into the 4-bit legacy values that are required by the Win32
console APIs. It also fixes areas of the code that were incorrectly
using a simple 16-color conversion that didn't handle 8-bit and 24-bit
values.

The faster conversion algorithm should be an improvement for issues #783
and #3950.

One of the main points of this PR was to fix the
`ReadConsoleOutputAttribute` API, which was using a simplified legacy
color conversion (the original `TextAttribute:GetLegacyAttributes`
method), which could only handle values from the 16-color table. RGB
values, and colors from the 256-color table, would be mapped to
completely nonsensical values. This API has now been updated to use the
more correct `Settings::GenerateLegacyAttributes` method.

But there were also a couple of other places in the code that were using
`GetLegacyAttributes` when they really had no reason to be working with
legacy attributes at all. This could result in colors being downgraded
to 4-bit values (often badly, as explained above), when the code was
already perfectly capable of displaying the full 24-bits.

This included the fill colors in the IME composer (in `ConsoleImeInfo`),
and the construction of the highlighting colors in the color
search/selection handler (`Selection::_HandleColorSelection`). I also
got rid of some legacy attribute code in the `Popup` class, which was
originally intended to update colors below the popup when the settings
changed, but actually caused more problems than it solved.

The other major goal of this PR was to improve the performance of the
`GenerateLegacyAttributes` method, since the existing implementation
could be quite slow when dealing with RGB values.

The simple cases are handled much the same as they were before. For an
`IsDefault` color, we get the default index from the
`Settings::_wFillAttribute` field. For an `IsIndex16` color, the index
can just be returned as is.

For an `IsRgb` color, the RGB components are compressed down to 8 bits
(3 red, 3 green, 2 blue), simply by dropping the least significant bits.
This 8-bit value is then used to lookup a representative 16-color value
from a hard-coded table. An `IsIndex256` color is also converted with a
lookup table, just using the existing 8-bit index.

The RGB mapping table was calculated by taking each compressed 8-bit
color, and picking a entry from the _Campbell_ palette that best
approximated that color. This was done by looking at a range of 24-bit
colors that mapped to the 8-bit value, finding the best _Campbell_ match
for each of them (using a [CIEDE2000] color difference calculation), and
then the most common match became the index that the 8-bit value would
map to.

The 256-color table was just a simpler version of this process. For each
entry in the table, we take the default RGB palette value, and find it's
closest match in the _Campbell_ palette.

Because these tables are hard-coded, the results won't adjust to changes
in the palette. However, they should still produce reasonable results
for palettes that follow the standard ANSI color range. And since
they're only a very loose approximation of the colors anyway, the exact
value really isn't that important.

That said, I have tried to make sure that if you take an RGB value for a
particular index in a reasonable color scheme, then the legacy color
mapped from that value should ideally match the same index. This will
never be possible for all color schemes, but I have tweaked a few of the
table entries to improve the results for some of the common schemes.

One other point worth making regarding the hard-coded tables: even if we
wanted to take the active palette into account, that wouldn't actually
be possible over a conpty connection, because we can't easily know what
color scheme the client application is using. At least this way the
results in conhost are guaranteed to be the same as in the Windows
Terminal.

[CIEDE2000]: https://en.wikipedia.org/wiki/Color_difference#CIEDE2000

## Validation Steps Performed

This code still passes the `TextAttributeTests` that check the basic
`GetLegacyAttribute` behaviour and verify the all legacy attributes
roundtrip correctly. However, some of the values in the `RgbColorTests`
had to be updated, since we're now intentionally returning different
values as a result of the changes to the RGB conversion algorithm.

I haven't added additional unit tests, but I have done a lot of manual
testing to see how well the new algorithm works with a range of colors
and a variety of different color schemes. It's not perfect in every
situation, but I think it works well enough for the purpose it serves.

I've also confirmed that the issues reported in #5940 and #6247 are now
fixed by these changes. 

Closes #5940 
Closes #6247",,,,True,False,False,137,212,19,19,j4_james@hotmail.com,noreply@github.com,"06/08/2020, 19:05:06",2020,"06/08/2020, 19:05:06",2020,4,1,3,2.6,4.2,0
,"Move all wildcards into targets or expand them (#6406)

Wildcards are not allowed in toplevel ItemGroups in vcxproj; they must
be generated by targets.

We mostly use wildcards for pulling in PRI files that are dumped on disk
by the translation tool. We don't want to check those in, so we can't
expand references to them.

To that end, I've introduced a new target that will take a list of
folders containing resw files and expand wildcards under them.

All[1] other wildcards have been moved into their respective targets
_or_ simply expanded.

[1]: Nothing has complained about the resource wildcards in
CascadiaResources.build.items, so I haven't exploded it yet.

Fixes #6214.",,,,True,False,False,107,43,13,13,duhowett@microsoft.com,noreply@github.com,"06/08/2020, 21:01:47",2020,"06/08/2020, 21:01:47",2020,4,1,3,3.6,3.6,0
,"Remove the shell extension from directory backgrounds (#6415)

We're removing this because of MSFT:24623699, which prevents us from being able to do the right thing when we're called on the background of a directory for a range of OS builds. 

#6414 will track re-adding this to the Terminal when the original issue is closed.

* [x] closes #6245
* I work here",,,,False,False,False,16,0,3,3,migrie@microsoft.com,noreply@github.com,"06/08/2020, 21:35:39",2020,"06/08/2020, 21:35:39",2020,4,3,3,5.0,1.2,0
,"Add support for win32-input-mode to conhost, ConPTY, Terminal (#6309)

Adds support for `win32-input-mode` to conhost, conpty, and the Windows
Terminal.

* The shared `terminalInput` class supports sending these sequences when
  a VT client application requests this mode.
* ConPTY supports synthesizing `INPUT_RECORD`s from the input sent to it
  from a terminal
* ConPTY requests this mode immediately on startup (if started with a
  new flag, `PSEUDOCONSOLE_WIN32_INPUT_MODE`)
* The Terminal now supports sending this input as well, when conpty asks
  for it.

Also adds a new ConPTY flag `PSEUDOCONSOLE_WIN32_INPUT_MODE` which
requests this functionality from conpty, and the Terminal requests this
by default.

Also adds `experimental.input.forceVT` as a global setting to let a user
opt-out of this behavior, if they don't want it / this ends up breaking
horribly.

## Validation Steps Performed
* played with this mode in vtpipeterm
* played with this mode in Terminal
* checked a bunch of scenarios, as outlined in a [comment] on #4999

[comment]: https://github.com/microsoft/terminal/issues/4999#issuecomment-628718631

References #4999: The megathread
References #5887: The spec

Closes #879
Closes #2865
Closes #530 
Closes #3079
Closes #1119
Closes #1694 
Closes #3608 
Closes #4334
Closes #4446",,,,False,False,False,619,66,55,55,migrie@microsoft.com,noreply@github.com,"06/08/2020, 22:31:28",2020,"06/08/2020, 22:31:28",2020,4,3,3,4.5,5.0,0
,"Remove parentheses from Preview and Dev build (#6418)

## Summary of the Pull Request
Remove parentheses from the Preview and Dev build. Now they're called Windows Terminal Preview and Windows Terminal Dev Build respectively.

Also removed them from other identifiers of Terminal for consistency.

## PR Checklist
* [X] Closes #5974",,,,False,False,False,6,6,3,3,carlos.zamora@microsoft.com,noreply@github.com,"06/09/2020, 18:32:27",2020,"06/09/2020, 18:32:27",2020,4,1,3,2.5,1.0,0
,"Upload Windows Terminal 2.0 roadmap (#6419)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Upload the roadmap for Windows Terminal 2.0 and link to it on the README.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,True,False,117,0,3,3,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"06/09/2020, 20:27:00",2020,"06/09/2020, 20:27:00",2020,4,1,3,5.0,2.4,0
,"wpf: add a .NET Core WPF Test project for the WPF Control (#6441)

This commit introduces a new project that lets you F5 a working instance
of the Wpf Terminal Control.

To make the experience as seamless as possible, I've introduced another
solution platform called ""DotNet_x64Test"". It is set to build the WPF
projects for ""Any CPU"" and every project that PublicTerminalCore
requires (including itself) for ""x64"". This is the only way to ensure
that when you press F5, all of the native and managed dependencies get
updated.

It's all quite cool when it works.",,,,False,False,False,430,1,9,9,duhowett@microsoft.com,noreply@github.com,"06/09/2020, 20:41:42",2020,"06/09/2020, 20:41:42",2020,4,1,3,5.0,3.0,0
,"Set tab title as early as possible (#6433)

When opening a new tab, it takes a few milliseconds before title to
appears. This PR makes it instantaneous.

* Updated the Terminal so that it can load the title from the settings
  before it is initialized.
* Load terminal settings in TermControl constructor before the terminal
  is initialized (see above).
* Update Tab so that it sets the TabViewItem's title in the constructor
  (in Tab::_MakeTabViewItem) instead of waiting for the VT sequence to
  set the title (from what I understand).

NOTE 1: there is a similar problem with the tabview icon which is not
fixed by this PR.

NOTE 2: This is only a problem with animations disabled because
otherwise the title fades in so there is enough time for it to be set
when it becomes visible.

## Validation

I ran the terminal and opened a new tab. The title appears instantly.",,,,True,True,False,20,14,6,6,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/09/2020, 21:47:13",2020,"06/09/2020, 21:47:13",2020,4,1,3,2.9,1.8,0
,"Don't snap on input nor dismiss selection for just a modifier key (#6431)

Does what it says on the label. Pure modifier keys weren't making it
this far at all prior to #6309. This PR changes these methods to make
sure that we only dismiss a selection or snap on input when the key
pressed isn't a modifier key.

## References

* regressed in #6309

## PR Checklist
* [x] Closes #6423
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

* Tried to repro this in the Terminal, couldn't anymore.",,,,False,False,False,36,2,4,4,migrie@microsoft.com,noreply@github.com,"06/09/2020, 21:49:39",2020,"06/09/2020, 21:49:39",2020,4,3,3,4.7,1.0,0
,"Don't send a manual F7 keyup (#6442)

## Summary of the Pull Request

When someone asked ""Do we need to send a F7 keyup too"" in #6309, the right answer was actually _no_. Turns out that while XAML will eat the F7 key**down**, it _won't_ eat the F7 key**up**. 

## References

* regressed in #6309

## PR Checklist
* [x] Closes #6438 
* [x] I work here
* [ ] Tested manually
* [n/a] Requires documentation to be updated

## Validation Steps Performed

* Checked this with the debug tap",,,,False,False,False,2,1,1,1,migrie@microsoft.com,noreply@github.com,"06/09/2020, 23:16:38",2020,"06/09/2020, 23:16:38",2020,4,3,3,3.3,1.2,0
,"Tie up some A11y loose threads (#6417)

This pull request moves WindowUiaProvider back into Win32 interactivity
and deletes all mention of it from Windows Terminal. Terminal does not
have a single toplevel window that requires Console-like UIA, as each
Xaml control inside it is in charge of its own destiny.

I've also merged `IUiaWindow` and `IConsoleWindow` back together, as
well as `WindowUiaProviderBase` and `WindowUiaProvider`.

Things look a lot more like they did before we tore them apart.

## PR Checklist
* [x] Closes #3564
* [x] CLA
* [x] Tests added/passed (manual)
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already

## Validation

Carlos validated conhost and terminal on this branch.",,,,False,False,False,323,762,28,23,duhowett@microsoft.com,noreply@github.com,"06/10/2020, 15:15:26",2020,"06/10/2020, 15:15:26",2020,3,1,3,2.0,4.5,0
,"WpfTest: Add an x86/Win32 build, make DPI aware (#6455)

This matches more closely how Visual Studio uses the WPF control.
It comes in the form of _another platform_ (sorry), `DotNet_x86Test`.",,,,False,False,False,264,2,3,3,duhowett@microsoft.com,noreply@github.com,"06/10/2020, 21:08:16",2020,"06/10/2020, 21:08:16",2020,4,1,3,5.0,2.5,0
,"Improve perf by avoiding vector reallocation in renderer clusters and VT output graphics options (#6420)

## Summary of the Pull Request
Caches vectors in the class and uses a new helper to opportunistically shrink/grow as viewport sizes change in order to save performance on alloc/free of commonly used vectors.

## PR Checklist
* [x] Scratches a perf itch.
* [x] I work here.
* [x] wil tests added
* [x] No add'l doc.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
Two fixes:
1. For outputting lots of text, the base renderer class spent a lot of time allocating and freeing and reallocating the `Cluster` vector that adapts the text buffer information into render clusters. I've now cached this vector in the base render class itself and I shrink/grow it based on the viewport update that happens at the top of every frame. To prevent too much thrashing in the downward/shrink direction, I wrote the `til::manage_vector` helper that contains a threshold to only shrink if it asks for small enough of a size relative to the existing one. I used 80% of the existing size as the threshold for this one.
2. For outputting lots of changing colors, the VT graphics output engine spent a bunch of time allocating and reallocating the vector for `GraphicsOptions`. This one doesn't really have a predictable size, but I never expect it to get extremely big. So I just held it in the base class.

## Validation Steps Performed
* [x] Ran the til unit test
* [x] Checked render cluster vector time before/after against `big.txt` from #1064
* [x] Checked VT graphics output vector time before/after against `cacafire`

Case | Before | After
---|---|---|
`big.txt` | ![image](https://user-images.githubusercontent.com/18221333/84088632-cbaa8400-a9a1-11ea-8932-04b2e12a0477.png) | ![image](https://user-images.githubusercontent.com/18221333/84088996-b6822500-a9a2-11ea-837c-5e32a110156e.png)
`cacafire` | ![image](https://user-images.githubusercontent.com/18221333/84089153-22648d80-a9a3-11ea-8567-c3d80efa16a6.png) | ![image](https://user-images.githubusercontent.com/18221333/84089190-34463080-a9a3-11ea-98e5-a236b12330d6.png)",,,,True,False,False,82,10,9,9,miniksa@microsoft.com,noreply@github.com,"06/10/2020, 22:02:05",2020,"06/10/2020, 22:02:05",2020,4,3,3,4.6,2.4,0
,"Reduce latency with DXGI 1.3 GetFrameLatencyWaitableObject (#6435)

This pull request reduces input lag, especially with selection, by using
`IDXGISwapChain2::GetFrameLatencyWaitableObject`.

This is based on the [DXGI 1.3 documentation].

Excerpt from the [DXGI 1.3 improvement list]:
> The following functionality has been added in Microsoft DirectX
Graphics Infrastructure (DXGI) 1.3, which is included starting in
Windows 8.1.

Before, during rendering:
1. render frame
2. call `Present` on swap chain:
   2.a. blocks until it can present
   2.b. meanwhile, selection/text in terminal might have changed, but
     we're still using the frame that we rendered before blocking
   2.c. presents

After, during rendering:
1. block until we can present
2. render frame with latest data
3. call `Present` on swap chain:
  3.a. present without blocking

[DXGI 1.3 documentation]: https://docs.microsoft.com/en-us/windows/uwp/gaming/reduce-latency-with-dxgi-1-3-swap-chains
[DXGI 1.3 improvement list]: https://docs.microsoft.com/en-us/windows/win32/direct3ddxgi/dxgi-1-3-improvements:",,,,False,False,False,72,1,9,9,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/10/2020, 22:35:14",2020,"06/10/2020, 22:35:14",2020,4,1,3,4.9,2.0,0
,"Open the system menu when user right clicks the drag bar (#6443)

Related to #1375 (""Click/Right click icon should display
Minimize/Maximize/Close menu"")",,,,False,False,False,58,2,3,3,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/10/2020, 22:56:36",2020,"06/10/2020, 22:56:36",2020,4,1,3,4.8,1.5,0
,"Deps: Bump Newtonsoft.Json from 10.0.3 to 12.0.3 (#6369)

Bump Newtonsoft.Json from 10.0.3 to 12.0.3

## References
Part of #5297

## PR Checklist
* [ ] Closes (none)
* [x] CLA signed
* [ ] Tests added/passed N/A
* [ ] Requires documentation to be updated N/A
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed
CI builds successfully",,,,False,False,False,3,3,2,2,33032910+wsluser@users.noreply.github.com,noreply@github.com,"06/10/2020, 23:54:02",2020,"06/10/2020, 23:54:02",2020,4,1,3,2.5,1.2,0
,"Fix the x86 build and re-enable x86 CI (#6467)

This was a miss.",,,,True,True,False,3,4,2,2,duhowett@microsoft.com,noreply@github.com,"06/11/2020, 17:04:42",2020,"06/11/2020, 17:04:42",2020,3,1,3,2.1,1.2,0
,"Add Mini-Spec for openSettings (#5915)

The spec introduces a keybinding argument of 'target' to be able to open a specific settings file. When the Settings UI gets implemented, it will also become an option.

Alternative designs were presented but the 'target' model was decided on.",,,,False,False,False,135,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"06/11/2020, 17:12:08",2020,"06/11/2020, 17:12:08",2020,3,1,3,5.0,2.0,0
,"Fix 3 different bugs in the WPF control (#6464)

* [wpf] WM_KEYUP crashes on x64 #6444
  - Turns out that doing the `(uint)lParam` cast worked fine for the
    keydowns, because the value of lParam usually didn't have super
    high-order bits set. That's not the case for keyups, where the 30th
    bit is _always_ set. This is fixed by explicitly getting the byte
    with the scancode in it.
* [wpf] WM_KEYUP generates wrong value in Win32 input mode #6445
  - This was fixed by basically the same thing as the above.
* [wpf] WPF control crashes on startup trying to render cursor #6446
  - This was a regression from #6337. I forgot to initialize the brush
    used to paint the cursor, because the UWP version always uses color
    (but the WPF one relies on the text foreground color).
* Also adds a minor change to the WPF test app, so that the user can
  actually exit `win32-input-mode`.

* #6337 regressed #6446 
* #6309 regressed the other two.

Closes #6444
Closes #6445
Closes #6446",,,,True,False,False,38,16,4,4,migrie@microsoft.com,noreply@github.com,"06/11/2020, 18:05:43",2020,"06/11/2020, 18:05:43",2020,4,3,3,3.5,1.8,0
,"Finalize Command Palette Spec (#5674)

## Summary of the Pull Request

This PR aims to move the command palette spec out of the draft state and into a finalized state for inclusion in the 2.0 version of the Windows Terminal. 

Notably, I've added sections regarding the ability to run `wt` commandlines using the Command Palette UI, something we hadn't considered in the original draft, because `wt` commandlines didn't land for like _4 months_ after this first draft.

## References
* #2046 - the original command palette thread
* #2193 - the original draft PR
* #5400 - the new command palette megathread for WT 2.0, which I'll be updating with follow-up tasks as we work on implementing this.

## PR Checklist
* [x] Specs #2046
* [x] I work here
* [x] Is documentation

## Detailed Description of the Pull Request / Additional comments

_read the spec_",,,,False,False,False,788,430,3,2,migrie@microsoft.com,noreply@github.com,"06/11/2020, 21:33:20",2020,"06/11/2020, 21:33:20",2020,4,3,3,3.8,3.0,0
,"Pass <Alt> to the application (#6461)

For mysterious reasons lost to the sands of time, XAML will _never_ pass
us a VK_MENU event. This is something that'll probably get fixed in
WinUI 3, but considering we're stuck on system XAML for the time being,
the only way to work around this bug is to pass the event through
manually. This change generalizes the F7 handler into a ""direct key
event"" handler that uses the same focus and tunneling method to send
different key events, and then uses it to send VK_MENU.

## Validation Steps Performed

Opened the debug tap, verified that I was seeing alt key ups.
Also used some alt keybindings to make sure I didn't break them.

Closes #6421",,,,True,False,False,74,49,12,12,migrie@microsoft.com,noreply@github.com,"06/11/2020, 22:41:16",2020,"06/11/2020, 22:41:16",2020,4,3,3,3.0,3.6,0
,"Throttle scrollbar updates in TermControl to ~one per 8ms (#4608)

In addition to the below (original) description, this commit introduces
a ThrottledFunc template that can throttle _any_ function. It applies
that type to muffle updates to the scrollbar.

---

Redo #3531 but without the bug that it caused (#3622) which is why it
was reverted.

I'm sorry if I explain this badly. If you don't understand a part, make
sure to let me know and I will explain it better.

### Explanation

How it worked before: `Terminal` signals that viewport changed ->
`TermControl::_TerminalScrollPositionChanged` gets called on the
terminal thread -> it dispatches work for later to be ran the UI thread
to updates the scrollbar's values

Why it's bad:
* If we have many viewport changes, it will create a long stack of
  operations to run. Instead, we should just update the scroll bar with
  the most recent information that we know.
* Imagine if the rate that the work gets pushed on the UI thread is
  greater than the rate that it can handle: it might freeze?
* No need to be real time, we can wait just a little bit (8ms) to
  accumulate viewport changes before we actually change the scroll bar's
  value because it appears to be expensive (see perf below).

Now: `Terminal` signals that viewport changed ->
`TermControl::_TerminalScrollPositionChanged` gets called on the
terminal thread -> it tells the `ScrollBarUpdater` about a new update ->
the `ScrollBarUpdater` only runs one job (I don't know if that's the
right term) on the UI thread at a time. If a job is already running but
hasn't updated the scroll bar yet, it changes the setting in the already
existing job to update the scroll bar with the new values. A job ""waits""
some time before doing the update to throttle updates because we don't
need real time scroll bar updates. -> eventually, it updates the scroll
bar If the user scrolls when a scroll bar update is pending, we keep the
scroll bar's Maximum and Minimum but let the user choose its new Value
with the `CancelPendingValueChange` method.

### Note

Also I changed a little bit the code from the Terminal to notify the
TermControl less often when possible.

I tried to scroll with the scroll bar, with the mouse wheel. I tried to
scroll while content is being outputted.

I tried to reproduce the crash from #2248 without success (good).

Co-authored-by: Leonard Hecker <leonard@hecker.io>

Closes #3622",,,,True,True,False,453,250,12,10,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/12/2020, 19:51:37",2020,"06/12/2020, 19:51:37",2020,4,1,3,3.5,4.8,0
,"Add keybinding arg to openSettings (#6299)

## Summary of the Pull Request
Adds the `target` keybinding arg to `openSettings`. Possible values include: `defaultsFile`, `settingsFile`, and `allFiles`.

## References
#5915 - mini-spec

## PR Checklist
* [x] Closes #2557 
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
Implemented as discussed in the attached spec. A new enum will be added for the SettingsUI when it becomes available.

## Validation Steps Performed
Added the following to my settings.json:
```json
{ ""command"": ""openSettings"", ""keys"":... },
{ ""command"": { ""action"": ""openSettings"" }, ""keys"":... },
{ ""command"": { ""action"": ""openSettings"", ""target"": ""settingsFile"" }, ""keys"":... },
{ ""command"": { ""action"": ""openSettings"", ""target"": ""defaultsFile"" }, ""keys"":... },
{ ""command"": { ""action"": ""openSettings"", ""target"": ""allFiles"" }, ""keys"":... }
```",,,,False,False,False,131,12,9,9,carlos.zamora@microsoft.com,noreply@github.com,"06/12/2020, 21:19:18",2020,"06/12/2020, 21:19:18",2020,4,1,3,4.6,3.0,0
,"Add fast path to til::bitmap::translate using bitshifts (#6493)

This commit adds a fast path to `til::bitmap::translate`: use bit shifts
when the delta is vertical.

Performance while printing the content of a big file, with the patch
from #6492 which hasn't been merged yet, in Release mode:

Before:
* translate represents 13.08% of samples in InvalidateScroll

After:
* translate represents  0.32% of samples in InvalidateScroll

## Validation

Tests passed.",,,,False,False,False,60,0,1,1,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/14/2020, 06:45:10",2020,"06/14/2020, 06:45:10",2020,2,1,3,5.0,1.5,0
,"Clear cached runs after translate_y (#6501)

""While re-reading the code, I found out that I forgot to do clear cached runs
after translate_y in c360b7588ff8d389b49a4ed60cdee51401a5e172.""",,,,False,False,False,2,0,1,1,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/14/2020, 07:17:26",2020,"06/14/2020, 07:17:26",2020,2,1,3,5.0,1.0,0
,"Reintroduce the check for VT_INPUT_MODE in AdaptDispatch (#6485)

This commit reverts the removal of the ""SSH hack"" in #5383. It was
originally added as a solution to #4911, when we realized that SSH would
request the SS3 cursor key encoding but we weren't equipped to handle
it.

A number of folks have filed issues that, in summary, say ""when I use
SSH, I can't select/copy/paste text"". It turns out that SSH will _also_
pass through requests for mouse input. Terminal dutifully responds to
those requests, of course, by disabling mouse selection/copy/paste. SSH
is **NOT** actually in VT_INPUT_MODE, so it will never receive the mouse
messages.

It's important to note that even with #376 fixed, we are still required
to keep this check. With the closure of #376, we'll be able to convert
VT mouse input back into Win32 mouse input for Win32 applications . . .
but SSH also doesn't know how to handle Win32 mouse input.

Fixes #6476.
Fixes #6196.
Fixes #5704.
Fixes #5608.",,,,True,False,False,30,18,2,2,duhowett@microsoft.com,noreply@github.com,"06/15/2020, 13:04:38",2020,"06/15/2020, 13:04:38",2020,3,1,3,3.1,1.2,0
,"Extract `ActionAndArgs::FromJson` into its own class (#6351)

## Summary of the Pull Request

Pulls the `ActionAndArgs` deserializing into its own class, separate from `AppKeyBindings`. Some 2.0 features are going to need to re-use these actions in their json, so we'll want one unified way of deserializing them.

## References

* Done primarily as part of the work on #2046/#5400/#5674 
* Also related: #1571/#5888 
* Will aggressively conflict with any open PRs that introduced keybindings (looking at #6299)

## PR Checklist
* [x] Closes nothing, this is code refactoring
* [x] I work here
* [x] Current tests passed
* [n/a] Requires documentation to be updated",,,,False,False,True,218,174,3,3,migrie@microsoft.com,noreply@github.com,"06/15/2020, 13:33:30",2020,"06/15/2020, 13:33:30",2020,3,3,3,3.2,2.5,0
,"Fix sending a NUL on alt key up (#6516)

## Summary of the Pull Request

Make sure to set the scancode for the manual alt-up's we're sending. If you don't, then terminalInput in the conpty is going to treat that keypress as an actual NUL, and send that to the connected client.

## References
* regressed in #6421 

## PR Checklist
* [x] Closes #6513
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Tested `showkeys -a`",,,,True,False,False,3,1,1,1,migrie@microsoft.com,noreply@github.com,"06/15/2020, 19:54:51",2020,"06/15/2020, 19:54:51",2020,4,3,3,3.7,1.2,0
,"Only snap on key _downs_ (#6517)

## Summary of the Pull Request
Prior to #6309, we'd only snap on input for non-modifier key_down_ events. #6423 fixed this for modifier keys, but didn't fix this for keyups.

## References
* #6423 was an incomplete fix to this problem, which caused this regression

## PR Checklist
* [x] Closes #6481
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,True,False,False,3,1,1,1,migrie@microsoft.com,noreply@github.com,"06/15/2020, 19:55:20",2020,"06/15/2020, 19:55:20",2020,4,3,3,3.7,1.2,0
,"Fix openSettings misspelling in defaults (#6520)

Fixes #6486.",,,,True,False,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"06/15/2020, 22:35:15",2020,"06/15/2020, 22:35:15",2020,4,1,3,2.5,1.2,0
,"Remove the WinTelnetEngine (#6526)

Nobody was using it.

Discussed in #2661.",,,,False,False,False,2,470,11,9,duhowett@microsoft.com,noreply@github.com,"06/17/2020, 16:29:49",2020,"06/17/2020, 16:29:49",2020,3,1,3,0.0,3.0,0
,"Spec: Advanced Tab Switcher (#3753)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This is the spec for the Advanced Tab Switcher. This would allow the user to navigate through a vertical list of tabs through a UI, similar to those found in VSCode and Visual Studio.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#1502: Feature Request: Advanced Tab Switcher
#973: Ctrl+Tab toggling between two tabs

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Spec for #1502
* [x] CLA signed.",,,,True,False,False,229,0,9,2,57155886+leonmsft@users.noreply.github.com,noreply@github.com,"06/17/2020, 17:30:24",2020,"06/17/2020, 17:30:24",2020,3,1,3,5.0,3.6,0
,"Introduce JsonUtilsNew as documented in #5875 (#6355)

Read the [JsonUtils Spec] for more details.

This pull request introduces the next version of JsonUtils. It is in a
separate file for ease of review and testing.

JsonUtilsNew will be renamed in a subsequent commit that rewrites our
JSON deserializers.

### Implementer's Notes

I went with telescoping exceptions for the key parsing code, because
it's totally possible that you can be five keys deep and encounter a
type error. This lets us encode information about all failures in the
chain instead of just the topmost one.

The original JsonUtilsNew code changed to use `decay` everywhere because
the tests wouldn't compile. We want to treat `GetValue<const guid>` _the
same as_ `GetValue<guid>`, and this lets us do so. `decay` is awesome.

I've been developing this with a shim that redirects `JsonUtils.h` to
`JsonUtilsNew.h`. I am not comfortable deleting the original until we've
moved off of it, and that _will_ be the subject of a followup PR.

## Validation Steps Performed

So many tests.

[JsonUtils Spec]: https://github.com/microsoft/terminal/blob/master/doc/cascadia/Json-Utility-API.md

Refs #2550",,,,True,True,False,918,0,5,4,duhowett@microsoft.com,noreply@github.com,"06/18/2020, 00:27:42",2020,"06/18/2020, 00:27:42",2020,1,1,3,5.0,3.6,0
,"Fixed #6377: TerminalCore::_altGrAliasing is undefined by default (#6571)

## Summary of the Pull Request

Fixes #6377. `TerminalCore` does not initialize `_altGrAliasing`. The impact is minimized in WT because it defaults to `true` in higher layers. It's not initialized when WPF is driving.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6377
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx",,,,True,False,False,1,0,1,1,leonard@hecker.io,noreply@github.com,"06/18/2020, 22:09:45",2020,"06/18/2020, 22:09:45",2020,4,1,3,5.0,1.2,0
,"Use early returns in TermControl::_KeyHandler (#6575)

## Summary of the Pull Request

This PR changes `TermControl::_KeyHandler` to use early returns, which you can think of as ""guard clauses"".
This has the benefit of a reduced nesting level, easier to understand control flow and opens op the way to more complex conditions.

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed

Everything still works as expected.",,,,False,False,False,26,17,2,2,leonard@hecker.io,noreply@github.com,"06/18/2020, 22:24:12",2020,"06/18/2020, 22:24:12",2020,4,1,3,3.0,1.2,0
,doc: copyedit the roadmap a little bit (#6587),,,,False,False,False,1,1,1,1,ddejohn@pm.me,noreply@github.com,"06/19/2020, 05:17:48",2020,"06/19/2020, 05:17:48",2020,1,0,3,2.5,1.0,0
,Add 1.1 blog post to 2.0 roadmap (#6581),,,,False,False,False,1,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"06/19/2020, 15:18:58",2020,"06/19/2020, 15:18:58",2020,3,1,3,2.5,1.0,0
,Update PR template with link to docs (#6583),,,,False,False,False,1,1,1,1,48369326+cinnamon-msft@users.noreply.github.com,noreply@github.com,"06/19/2020, 15:19:28",2020,"06/19/2020, 15:19:28",2020,3,1,3,2.5,1.0,0
,"Improved ATTR_ROW::ReplaceAttrs performance (#6573)

## Summary of the Pull Request

Improve `ATTR_ROW::ReplaceAttrs` performance by only reserving the necessary capacity instead of resizing the new run.
That way `TextAttributeRun`s are only instantiated once instead of twice.

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

Performance could be further improved by directly moving `TextAttributeRun`s into the new vector, but I considered this out of scope for this PR.

## Validation Steps Performed

CPU usage when running `cacafire` is slightly reduced.",,,,False,False,False,22,45,1,1,leonard@hecker.io,noreply@github.com,"06/19/2020, 15:55:17",2020,"06/19/2020, 15:55:17",2020,3,1,3,2.3,1.8,0
,"Add schema check to PR template (#6599)

This adds a check for updating the schema, and rewords the documentation checkbox to match the wording of the others.",,,,False,False,False,2,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"06/19/2020, 19:06:23",2020,"06/19/2020, 19:06:23",2020,4,1,3,3.3,1.0,0
,"Enable hot reload of renderer settings that aren't already hot reload capable (#6551)

## Summary of the Pull Request

## PR Checklist
* [x] Closes #3927
* [x] I work here.
* [x] Tested manually.
* [x] Requires documentation to be updated: (generate doc bug here)
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
- I found four settings that weren't hot reloadable with the 3927 comment above them:
1. Experimental retro terminal effect
2. Experimental software rendering
3. Experimental full repaint rendering
4. Antialiasing settings for text

I made them all hot reloadable by telling the `TermControl` to propagate them on settings change to the `DxEngine`.
Then I set up the `DxEngine` inside the setters to only set them if they changed. And if they do change, to trigger a full repaint and/or a complete drop and recreate of the entire DX device chain (as would happen if it were lost for another reason like a user-mode graphics failure, disconnected display, etc.)
I made the boolean an atomic because the settings can be coming in off of another thread (the XAML eventing one) and the renderer is picking the status up on its thread at the top of the BeginPaint frame.

## Validation Steps Performed
- [x] Opened it up and toggled all the settings while staring at PowerShell
- [x] Opened it up and toggled all the settings while staring at something intensive like a `cacafire` fire",,,,True,True,False,61,11,3,3,miniksa@microsoft.com,noreply@github.com,"06/19/2020, 21:09:37",2020,"06/19/2020, 21:09:37",2020,4,3,3,4.2,1.8,0
,"Improve bitmap::_calculateArea performance (#6572)

`bitmap::_calculateArea` performance can be improved by leveraging the
optimized `find_first`/`find_next` methods instead of iterating through
the bitmap manually.",,,,False,False,False,18,9,2,2,leonard@hecker.io,noreply@github.com,"06/19/2020, 22:09:30",2020,"06/19/2020, 22:09:30",2020,4,1,3,3.7,1.0,0
,"Use D2DDeviceContext and friends over D2DRenderTarget (#6527)

I was told that the DeviceContext version supercedes the RenderTarget
one. This moves us to it so we can gain access to a higher level of
control over the various pieces in our pipeline as we continue to evolve
the renderer.

The underlying motivation here is to potentially use a
`ID2D1CommandList` to batch our commands and run them all later outside
the lock. That can only really be done with this more granular level of
control over the pipeline. So this moves to that in a single step that
is easily findable in history should we have problems

I discussed this with @NiklasBorson of the Direct2D/DirectWrite team as
well as with @DHowett before doing it.

## Validation
- [x] Checked docs to make sure that these work on Windows 7 with
  Platform Update
- [x] Manual smoke test real quick
- [ ] Try running on Win7 + Platform Update after change
- [x] Probably do more than just a smoke test manually or otherwise

Closes #6525",,,,True,True,False,110,63,2,2,miniksa@microsoft.com,noreply@github.com,"06/19/2020, 22:14:01",2020,"06/19/2020, 22:14:01",2020,4,3,3,3.2,2.4,0
,Always use the dark window borders (#6624),,,,False,False,False,5,31,2,2,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/22/2020, 15:38:07",2020,"06/22/2020, 15:38:07",2020,3,1,3,0.7,1.0,0
,"Recycle assorted rendering components to accelerate drawing (#6483)

This saves an awful lot of construction/destruction and memory
allocation, especially with text that changes a lot (see: cacafire).

Three things:
1. Recycling the text layouts. This holds onto the `CustomTextLayout` so
   all the things that don't change related to drawing targets and
   whatnot aren't freed and recreated every frame.
2. Reordering the runs in place. This saves a vector
   allocation/copy/delete every time OrderRuns is called. They can be
   rearranged in place.
3. Only clip once per row. This reduces the clip push/pop to only one
   time per row. Since we're always redrawing an entire row at a time,
   this saves a lot of alloc/free of the clip frame, dramatically
   reduces queued commands, and makes less work on the flush since
   clipping requires staging the drawing and then bringing it back to
   the main surface.",,,,False,False,False,200,99,6,6,miniksa@microsoft.com,noreply@github.com,"06/22/2020, 16:13:09",2020,"06/22/2020, 16:13:09",2020,3,3,3,3.3,3.0,0
,"Double-click a tab to rename it (#6628)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

When the user double clicks on a tab, show the tab rename box
as if they right clicked on the tab and clicked on ""Rename"".

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6600
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

I added a handler for the `DoubleTapped` event on the tab view item
when we are constructing it for the tab (in `Tab::_MakeTabViewItem`).

The code for that handler was copied the ""rename tab menu item"" click
handler.

I did not extract the code into a member function because it is very
short (only 2 lines of code) and only used twice so it is not worth
it IMO.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,9,0,1,1,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/22/2020, 16:17:25",2020,"06/22/2020, 16:17:25",2020,3,1,3,5.0,1.2,0
,"Spec for unified keybindings and commands, and synthesized action names (#6532)

## Summary of the Pull Request

This is another iteration on the Command Palette spec, from #5674. These were some ideas that were tossed around by @DHowett, @cinnamon-msft and myself, formalized here. I proposed this as an addendum to the original spec, since I think the first made sense atomically, and this only makes sense as a set of changes to the original. I didn't want to go hacking up the original doc to add this set of changes. 

**There are two proposals in this spec - they should be viewed as two atomic units. They can be accepted or rejected independently. I'm suggesting we approve both. They work _together_. I'm realizing now that this is worded confusingly, and it's on me to fix that.**

## PR Checklist
* [x] Another spec in the #2046 / #5400 saga
* [x] I work here
* [x] _is a doc_

> ## Abstract
> 
> This document is intended to serve as an addition to the [Command Palette Spec].
> While that spec is complete in it's own right, subsequent discussion revealed
> additional ways to improve the functionality and usability of the command
> palette. This document builds largely on the topics already introduced in the
> original spec, so readers should first familiarize themselves with that
> document.
> 
> One point of note from the original document was that the original specification
> was entirely too verbose when defining both keybindings and commands for
> actions. Consider, for instance, a user that wants to bind the action ""duplicate
> the current pane"". In that spec, they need to add both a keybinding and a
> command:
> 
> ```json
> {
>     ""keybindings"": [
>         { ""keys"": [ ""ctrl+alt+t"" ], ""command"": { ""action"": ""splitPane"", ""split"":""auto"", ""splitMode"": ""duplicate"" } },
>     ],
>     ""commands"": [
>         { ""name"": ""Duplicate Pane"", ""action"": { ""action"": ""splitPane"", ""split"":""auto"", ""splitMode"": ""duplicate"" }, ""icon"": null },
>     ]
> }
> ```
> 
> These two entries are practically the same, except for two key differentiators:
> * the keybinding has a `keys` property, indicating which key chord activates the
>   action.
> * The command has a `name` property, indicating what name to display for the
>   command in the Command Palette.
> 
> What if the user didn't have to duplicate this action? What if the user could
> just add this action once, in their `keybindings` or `commands`, and have it
> work both as a keybinding AND a command?
>",,,,True,False,False,616,1,2,2,migrie@microsoft.com,noreply@github.com,"06/22/2020, 20:41:45",2020,"06/22/2020, 20:41:45",2020,4,3,3,5.0,3.6,0
,"Optimize booleans (#6548)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Many places in this codebase has an equality comparison to the boolean FALSE. This adds unneeded complexity as C and C++ has a NOT operand for use of these in if statements. This makes the code more readable in those areas.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [X] Tests added/passed
* [ ] Requires documentation to be updated
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
One boolean being compared to FALSE was only used once, with the boolean name being ""b"", so it is better off not existing at all.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Unit Testing passed, compiler refactoring",,,,True,True,True,16,18,8,8,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"06/22/2020, 21:51:34",2020,"06/22/2020, 21:51:34",2020,4,0,3,2.9,1.8,0
,"Replace std::map with std::unordered_map (#6640)

Replace std::map with std::unordered_map when the order doesn't matter
and hash functions are provided. Simple optimizations, but I expect the
performance should be strictly better, especially for
CodepointWidthDetector.hpp.",,,,False,False,False,14,8,8,8,48666391+zhaomj@users.noreply.github.com,noreply@github.com,"06/23/2020, 20:49:07",2020,"06/23/2020, 20:49:07",2020,4,0,3,3.2,1.5,0
,"Update _TerminalCursorPositionChanged to use ThrottledFunc (#6492)

* Update _TerminalCursorPositionChanged to use ThrottledFunc.
* Rename previous ThrottledFunc to ThrottledArgFunc because now
  ThrottledFunc is for functions that do not take an argument.
* Update ThrottledFunc and ThrottledArgFunc to accept a CoreDispatcher
  on which the function should be called for convenience.
* Don't use coroutines/winrt::fire_and_forget in
  ThrottledFunc/ThrottledArgFunc because they are too slow (see PR).

_AdjustCursorPosition went from 17% of samples to 3% in performance
testing.",,,,False,False,False,180,164,7,6,56923875+greg904@users.noreply.github.com,noreply@github.com,"06/23/2020, 21:05:40",2020,"06/23/2020, 21:05:40",2020,4,1,3,2.8,3.0,0
,version: bump to 1.2 on master,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"06/24/2020, 01:12:00",2020,"06/24/2020, 01:12:00",2020,1,1,3,2.5,1.0,0
,"Add keybinding to rename tab (#6557)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Add keybinding for renaming a tab
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Fulfills format requirements set by #6567 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [X] Tests passed
* [X] Requires documentation to be updated
* [X] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #6567 and here (#6557)

This no longer c loses #6256, as the spec changed. 
<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,108,2,12,12,33883297+ggadget6@users.noreply.github.com,noreply@github.com,"06/24/2020, 20:07:41",2020,"06/24/2020, 20:07:41",2020,4,0,3,4.9,3.6,0
,"Revert ""Skip ... analysis when the ... text is simple (6206)"" (#6665)

This reverts commit 94eab6e391a099814ce8f9a08c8cccf9f588b7d1.

We'll reintroduce this again after making sure it plays nicely with
recycling and box drawing glyphs.

Fixes #6488
Fixes #6664",,,,True,False,False,9,90,2,2,duhowett@microsoft.com,noreply@github.com,"06/24/2020, 22:24:18",2020,"06/24/2020, 22:24:18",2020,4,1,3,0.5,1.8,0
,"Implement Shift+MultiClick Selection Expansion (#6322)

This pull request implements shift+double/triple click. Proper behavior
(as described in #4557) is to only expand one selection point, not both.

Adding the `bool targetStart` was a bit weird. I decided on this being
the cleanest approach though because I still want `PivotSelection` to be
its own helper function. Otherwise, the concept of ""pivoting"" gets kinda
messy.

## Validation Steps Performed
Manual testing as described on attached issue.
Tests were added for Shift+Click and pivoting the selection too.

Closes #4557",,,,False,False,False,219,24,4,4,carlos.zamora@microsoft.com,noreply@github.com,"06/25/2020, 00:47:13",2020,"06/25/2020, 00:47:13",2020,1,1,3,4.6,3.0,0
,"Add `setTabColor` and `openTabColorPicker` actions (#6567)

## Summary of the Pull Request

Adds a pair of `ShortcutAction`s for setting the tab color.
* `setTabColor`: This changes the color of the current tab to the provided color, or can be used to clear the color.
* `openTabColorPicker`: This keybinding immediately activates the tab color picker for the currently focused tab.

## References

## PR Checklist
* [x] scratches my own itch
* [x] I work here
* [x] Tests added/passed
* [x] https://github.com/MicrosoftDocs/terminal/pull/69

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed
* hey look there are tests
* Tested with the following:
```json

        // { ""command"": ""setTabColor"", ""keys"": [ ""alt+c"" ] },
        { ""keys"": ""ctrl+alt+c"", ""command"": { ""action"": ""setTabColor"", ""color"": ""#123456"" } },
        { ""keys"": ""alt+shift+c"", ""command"": { ""action"": ""setTabColor"", ""color"": null} },
        { ""keys"": ""alt+c"", ""command"": ""openTabColorPicker"" },
```",,,,False,False,False,207,13,15,15,migrie@microsoft.com,noreply@github.com,"06/25/2020, 13:06:21",2020,"06/25/2020, 13:06:21",2020,3,3,3,4.7,3.5,0
,"When we add a new tab in compact mode, re-enforce Compact mode (#6670)

This workaround was suggested by @chingucoding in
microsoft/microsoft-ui-xaml#2711

Fixes #6570

## References

microsoft/microsoft-ui-xaml#2711
#6570

## PR Checklist
* [x] Closes an issue
* [x] CLA
* [x] Tested
* [x] Docs not required
* [x] Schema not required",,,,True,False,False,10,0,1,1,duhowett@microsoft.com,noreply@github.com,"06/25/2020, 21:21:48",2020,"06/25/2020, 21:21:48",2020,4,1,3,5.0,1.2,0
,"Hardcode the paths to Windows PowerShell and CMD (#6684)

Occasionally, we get users with corrupt PATH environment variables: they
can't lauch PowerShell, because for some reason it's dropped off their
PATH. We also get users who have stray applications named
`powershell.exe` just lying around in random system directories.

We can combat both of these issues by simply hardcoding where we expect
PowerShell and CMD to live. %SystemRoot% was chosen over %WINDIR%
because apparently (according to Stack Overflow), SystemPath is
read-only and WINDIR isn't.

Refs #6039, #4390, #4228 (powershell was not found)
Refs #4682, Fixes #6082 (stray powershell.exe)",,,,True,False,False,2,2,1,1,duhowett@microsoft.com,noreply@github.com,"06/26/2020, 17:33:38",2020,"06/26/2020, 17:33:38",2020,3,1,3,2.5,1.2,0
,"Add support for the Command Palette (#6635)

## Summary of the Pull Request

![command-palette-001](https://user-images.githubusercontent.com/18356694/85313480-b6dbef00-b47d-11ea-8a8f-a802d26c2f9b.gif)


This adds a first iteration on the command palette. Notable missing features are:
* Commandline mode: This will be a follow-up PR, following the merge of #6537
* nested and iterable commands: These will additionally be a follow-up PR.

This is also additionally based off the addenda in #6532. 

This does not bind a key for the palette by default. That will be done when the above follow-ups are completed.

## References
* #2046 - The original command palette thread
* #5400 - This is the megathread for all command palette issues, which is tracking a bunch of additional follow up work 
* #5674 and #6532 - specs
* #6537 - related

## PR Checklist
* [x] Closes #2046
  - incidentally also closes #6645
* [x] I work here
* [x] Tests added/passed
* [ ] Requires documentation to be updated - delaying this until it's more polished.


## Detailed Description of the Pull Request / Additional comments

* There's a lot of code for autogenerating command names. That's all in `ActionArgs.cpp`, because each case is so _not_ boilerplate, unlike the rest of the code in `ActionArgs.h`.

## Validation Steps Performed

* I've been playing with this for months.
* Tests
* Selfhost with the team",,,,False,False,False,2209,74,34,33,migrie@microsoft.com,noreply@github.com,"06/26/2020, 20:38:02",2020,"06/26/2020, 20:38:02",2020,4,3,3,4.8,5.0,0
,"Restore simple text runs, correct for crashes (#6695)

Restores the simple text run analysis and skipping of most of the
shaping/layout steps. Corrects one of the fast-path steps to ensure that
offsets and clusters are assigned.

## References
- Bug #6488 
- Bug #6664
- Simple run PR #6206 
- Simple run revert PR #6665
- Recycle glyph runs PR #6483

The ""correction"" functions, by which box drawing analysis is one of
them, is dependent on the steps coming before it properly assigning the
four main vectors of the text layout glyphs: indices, advances, offsets,
and clusters. When the fast path is identified by the code from #6206,
only two of those are fully updated: indices and advances. The offsets
doesn't tend to cause a problem because offsets are rarely used so
they're pretty much always 0 already (but this PR enforces that they're
zero for the simple/fast path.) The clusters, however, were not mapped
for the fast path. This showed itself in one of two ways:
1. Before the recycled runs PR #6483, the cluster map had a 0 in every
   field for the stock initialized vector.
2. After the recycled runs PR #6483, the cluster map had the previous
   run's mapping in it.

This meant that when we reached the steps where glyph runs were
potentially split during the correction phase for box drawing
characters, unexpected values were present to map the glyph indices to
clusters and were corrected, adjusted, or split in an unexpected
fashion. 

For instance, the index out of range bug could appear when the default 0
values appended to the end of the clusters vector were decremented down
to a negative value during the run splitter as the true DWrite cluster
mapper doesn't generate that sort of pattern in the slow path case
without also breaking the run itself.

The resolution here is therefore to ensure that all of the fields
related to glyph layout are populated even in the fast path. This
doesn't affect the slow path because that one always populated all
fields by asking DWrite to do it. The fast path just skips a bunch of
DWrite steps because it can implicitly identify patterns and save a
bunch of time.

I've also identified a few vectors that weren't cleared on reset/reuse
of the layout. I'm clearing those now so the `.resize()` operations
performed on them to get to the correct lengths will fill them with
fresh and empty values instead of hanging on to ones that may have been
from the previous. This should be OK memory perf wise because the act of
`.clear()` on a vector shouldn't free anything, just mark it invalid.
And doing `.resize()` from an empty one should just default construct
them into already allocated space (which ought to be super quick).

## Validation
* [x] Far.exe doesn't crash and looks fine
* [x] ""\e[30;47m\u{2500} What \u{2500}\e[m"" from #6488 appears
  appropriately antialiased
* [x] Validate the ""\e[30;47m\u{2500} What \u{2500}\e[m"" still works
  when `FillGeometry` is nerfed as a quick test that the runs are split
  correctly.
* [x] Put `u{fffd} into Powershell Core to make a replacement char in
  the output. Then press enter a few times and see that shrunken initial
  characters on random rows. Verify this is gone.

Closes #6668
Closes #6669

Co-Authored-By: Chester Liu <skyline75489@outlook.com>",,,,True,True,False,103,11,2,2,miniksa@microsoft.com,noreply@github.com,"06/29/2020, 20:27:31",2020,"06/29/2020, 20:27:31",2020,4,3,3,4.5,2.4,0
,Update Cascadia Code to 2007.01 (#6721),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"06/30/2020, 00:56:32",2020,"06/30/2020, 00:56:32",2020,1,1,3,2.5,1.0,0
,"Add support for OSC 52 (copy-to-clipboard) (#5823)

With this commit, terminal will be able to copy text to the system
clipboard by using OSC 52 MANIPULATE SELECTION DAATA.

We chose not to implement the clipboard querying functionality offered
by OSC 52, as sending the clipboard text to an application without the
user's knowledge or consent is an immense security hole.

We do not currently support the clipboard specifier Pc to specify which
clipboard buffer should be filled

# Base64 encoded `foo`
$ echo -en ""\e]52;;Zm9v\a""

# Multiple lines
# Base64 encoded `foo\r\nbar`
$ echo -en ""\e]52;;Zm9vDQpiYXI=\a""

Closes #2946.",,,,False,False,False,499,4,27,27,mingxiangxue@gmail.com,noreply@github.com,"06/30/2020, 01:55:40",2020,"06/30/2020, 01:55:40",2020,1,0,3,5.0,4.5,0
,Replace old C headers (xxx.h) with modern ones (cxxx) (#5080),,,,False,False,False,71,64,32,32,49824824+pi1024e@users.noreply.github.com,noreply@github.com,"07/01/2020, 18:00:24",2020,"07/01/2020, 18:00:24",2020,4,0,3,2.6,3.5,0
,"Improve conpty rendering of default colors in legacy apps (#6698)

Essentially what this does is map the default legacy foreground and
background attributes (typically white on black) to the `IsDefault`
color type in the `TextColor` class. As a result, we can now initialize
the buffer for ""legacy"" shells (like PowerShell and cmd.exe) with
default colors, instead of white on black. This fixes the startup
rendering in conpty clients, which expect an initial default background
color. It also makes these colors update appropriately when the default
palette values change.

One complication in getting this to work, is that the console permits
users to change which color indices are designated as defaults, so we
can't assume they'll always be white on black. This means that the
legacy-to-`TextAttribute` conversion will need access to those default
values.

Unfortunately the defaults are stored in the conhost `Settings` class
(the `_wFillAttribute` field), which isn't easily accessible to all the
code that needs to construct a `TextAttribute` from a legacy value. The
`OutputCellIterator` is particularly problematic, because some iterator
types need to generate a new `TextAttribute` on every iteration.

So after trying a couple of different approaches, I decided that the
least worst option would be to add a pair of static properties for the
legacy defaults in the `TextAttribute` class itself, then refresh those
values from the `Settings` class whenever the defaults changed (this
only happens on startup, or when the conhost _Properties_ dialog is
edited).

And once the `TextAttribute` class had access to those defaults, it was
fairly easy to adapt the constructor to handle the conversion of default
values to the `IsDefault` color type. I could also then simplify the
`TextAttribute::GetLegacyAttributes` method which does the reverse
mapping, and which previously required the default values to be passed
in as a parameter 

VALIDATION

I had to make one small change to the `TestRoundtripExhaustive` unit
test which assumed that all legacy attributes would convert to legacy
color types, which is no longer the case, but otherwise all the existing
tests passed as is. I added a new unit test verifying that the default
legacy attributes correctly mapped to default color types, and the
default color types were mapped back to the correct legacy attributes.

I've manually confirmed that this fixed the issue raised in #5952,
namely that the conhost screen is cleared with the correct default
colors, and also that it is correctly refreshed when changing the
palette from the properties dialog. And I've combined this PR with
#6506, and confirmed that the PowerShell and the cmd shell renderings in
Windows Terminal are at least improved, if not always perfect.

This is a prerequisite for PR #6506
Closes #5952",,,,True,False,False,102,68,12,12,j4_james@hotmail.com,noreply@github.com,"07/01/2020, 18:08:30",2020,"07/01/2020, 18:08:30",2020,4,1,3,3.4,3.6,0
,"Improve the propagation of color attributes over ConPTY (#6506)

This PR reimplements the VT rendering engines to do a better job of
preserving the original color types when propagating attributes over
ConPTY. For the 16-color renderers it provides better support for
default colors and improves the efficiency of the color narrowing
conversions. It also fixes problems with the ordering of character
renditions that could result in attributes being dropped.

Originally the base renderer would calculate the RGB color values and
legacy/extended attributes up front, passing that data on to the active
engine's `UpdateDrawingBrushes` method. With this new implementation,
the renderer now just passes through the original `TextAttribute` along
with an `IRenderData` interface, and leaves it to the engines to extract
the information they need.

The GDI and DirectX engines now have to lookup the RGB colors themselves
(via simple `IRenderData` calls), but have no need for the other
attributes. The VT engines extract the information that they need from
the `TextAttribute`, instead of having to reverse engineer it from
`COLORREF`s.

The process for the 256-color Xterm engine starts with a check for
default colors. If both foreground and background are default, it
outputs a SGR 0 reset, and clears the `_lastTextAttribute` completely to
make sure any reset state is reapplied. With that out the way, the
foreground and background are updated (if changed) in one of 4 ways.
They can either be a default value (SGR 39 and 49), a 16-color index
(using ANSI or AIX sequences), a 256-color index, or a 24-bit RGB value
(both using SGR 38 and 48 sequences).

Then once the colors are accounted for, there is a separate step that
handles the character rendition attributes (bold, italics, underline,
etc.) This step must come _after_ the color sequences, in case a SGR
reset is required, which would otherwise have cleared any character
rendition attributes if it came last (which is what happened in the
original implementation).

The process for the 16-color engines is a little different. The target
client in this case (Windows telnet) is incapable of setting default
colors individually, so we need to output an SGR 0 reset if _either_
color has changed to default. With that out the way, we use the
`TextColor::GetLegacyIndex` method to obtain an approximate 16-color
index for each color, and apply the bold attribute by brightening the
foreground index (setting bit 8) if the color type permits that.

However, since Windows telnet only supports the 8 basic ANSI colors, the
best we can do for bright colors is to output an SGR 1 attribute to get
a bright foreground. There is nothing we can do about a bright
background, so after that we just have to drop the high bit from the
colors. If the resulting index values have changed from what they were
before, we then output ANSI 8-color SGR sequences to update them.

As with the 256-color engine, there is also a final step to handle the
character rendition attributes. But in this case, the only supported
attributes are underline and reversed video.

Since the VT engines no longer depend on the active color table and
default color values, there was quite a lot of code that could now be
removed. This included the `IDefaultColorProvider` interface and
implementations, the `Find(Nearest)TableIndex` functions, and also the
associated HLS conversion and difference calculations.

VALIDATION

Other than simple API parameter changes, the majority of updates
required in the unit tests were to correct assumptions about the way the
colors should be rendered, which were the source of the narrowing bugs
this PR was trying to fix. Like passing white on black to the
`UpdateDrawingBrushes` API, and expecting it to output the default `SGR
0` sequence, or passing an RGB color and expecting an indexed SGR
sequence.

In addition to that, I've added some VT renderer tests to make sure the
rendition attributes (bold, underline, etc) are correctly retained when
a default color update causes an `SGR 0` sequence to be generated (the
source of bug #3076). And I've extended the VT renderer color tests
(both 256-color and 16-color) to make sure we're covering all of the
different color types (default, RGB, and both forms of indexed colors).

I've also tried to manually verify that all of the test cases in the
linked bug reports (and their associated duplicates) are now fixed when
this PR is applied.

Closes #2661
Closes #3076
Closes #3717
Closes #5384
Closes #5864

This is only a partial fix for #293, but I suspect the remaining cases
are unfixable.",,,,True,False,False,613,795,34,33,j4_james@hotmail.com,noreply@github.com,"07/01/2020, 18:10:36",2020,"07/01/2020, 18:10:36",2020,4,1,3,2.8,5.0,0
,"Refactor TerminalDispatch (graphics) to match AdaptDispatch (#6728)

This is essentially a rewrite of the
`TerminalDispatch::SetGraphicsRendition` method, bringing it into closer
alignment with the `AdaptDispatch` implementation, simplifying the
`ITerminalApi` interface, and making the code easier to extend. It adds
support for a number of attributes which weren't previously implemented.

REFERENCES

* This is a mirror of the `AdaptDispatch` refactoring in PR #5758.
* The closer alignment with `AdaptDispatch` is a small step towards
  solving issue #3849.
* The newly supported attributes should help a little with issues #5461
  (italics) and #6205 (strike-through).

DETAILS

I've literally copied and pasted the `SetGraphicsRendition`
implementation from `AdaptDispatch` into `TerminalDispatch`, with only
few minor changes:

* The `SetTextAttribute` and `GetTextAttribute` calls are slightly
  different in the `TerminalDispatch` version, since they don't return a
  pointless `success` value, and in the case of the getter, the
  `TextAttribute` is returned directly instead of by reference.
  Ultimately I'd like to move the `AdaptDispatch` code towards that way
  of doing things too, but I'd like to deal with that later as part of a
  wider refactoring of the `ConGetSet` interface.
* The `SetIndexedForeground256` and `SetIndexedBackground256` calls
  required the color indices to be remapped in the `AdaptDispatch`
  implementation, because the conhost color table is in a different
  order to the XTerm standard. `TerminalDispatch` doesn't have that
  problem, so doesn't require the mapping.
* The index color constants used in the 16-color `SetIndexedForeground`
  and `SetIndexedBackground` calls are also slightly different for the
  same reason.

VALIDATION

I cherry-picked this code on top of the #6506 and #6698 PRs, since
that's only way to really get the different color formats passed-through
to the terminal. I then ran a bunch of manual tests with various color
coverage scripts that I have, and confirmed that all the different color
formats were being rendered as expected.

Closes #6725",,,,True,True,True,229,372,5,5,j4_james@hotmail.com,noreply@github.com,"07/01/2020, 18:13:42",2020,"07/01/2020, 18:13:42",2020,4,1,3,2.5,3.6,0
,"Add settings to warn about large or multiline pastes (#6631)

Before sending calling the `HandleClipboardData` member function on
the `PasteFromClipboardEventArgs` object when we receive a request
from the `TermControl` to send it the clipboard's text content, we
now display a warning to let the user choose whether to continue or
not if the text is larger than 5 KiB or contains the _new line_
character, which can be a security issue if the user is pasting the
text in a shell.

These warnings can be disabled with the `largePasteWarning` and
`multiLinePasteWarning` global settings respectively.

Closes #2349",,,,False,False,False,186,35,13,13,56923875+greg904@users.noreply.github.com,noreply@github.com,"07/01/2020, 19:43:28",2020,"07/01/2020, 19:43:28",2020,4,1,3,4.2,4.2,0
,"Add tooltip text to Color Buttons (#6498)

This commit adds tooltip text to every color button in the tab color
picker.",,,,False,False,False,64,16,2,2,garcia.olais@gmail.com,noreply@github.com,"07/01/2020, 19:58:53",2020,"07/01/2020, 19:58:53",2020,4,0,3,4.0,1.5,0
,"fix scheme name resolution, and schema load on WSL (#5327)

This PR fixes the scheme resolution bug outlined in #5326

The approach is as follows:

* In [SchemeManager.cs], find the first scheme parser that actually
  successfully parses the scheme, as opposed to the existing code, which
  finds the first scheme parser which _says it can parse the scheme_, as
  that logic spuriously returns `true` currently. 
* In [XmlSchemeParser.cs] and [JsonParser.cs], ensure that the contents
  of the file are read and the contents passed to XmlDocument.LoadXXX,
  as this fails with an UriException on WSL otherwise.
* Remove `CanParse` as it is superfluous. The check for a valid scheme
  parser should not just check an extension but also if the file exists
  - this is best done by the `ParseScheme` function as it already
  returns null on failure.
* Add `FileExtension` to the interface because we need it lifted now.

Closes #5326",,,,True,False,False,487,492,6,6,johnazariah@users.noreply.github.com,noreply@github.com,"07/01/2020, 20:15:09",2020,"07/01/2020, 20:15:09",2020,4,0,3,2.5,4.2,0
,"Add a ShortcutAction for toggling retro terminal effect (#6691)

Pretty straightforward. `toggleRetroEffect` will work to toggle the
retro terminal effect on/off. 

* Made possible by contributions from #6551, _and viewers like you_",,,,False,False,False,35,0,12,12,migrie@microsoft.com,noreply@github.com,"07/01/2020, 23:17:43",2020,"07/01/2020, 23:17:43",2020,4,3,3,5.0,2.0,0
,"Don't abort early in VT reset operations if one of the steps fails (#6763)

The VT reset operations `RIS` and `DECSTR` are implemented as a series
of steps, each of which could potentially fail. Currently these
operations abort as soon as an error is detected, which is particularly
problematic in conpty mode, where some steps deliberately ""fail"" to
indicate that they need to be ""passed through"" to the conpty client. As
a result, the reset won't be fully executed. This PR changes that
behaviour, so the error state is recorded for any failures, but the
subsequent steps are still run.

Originally the structure of these operations was of the form:

    bool success = DoSomething();
    if (success)
    {
        success = DoSomethingElse();
    }

But I've now changed the code so it looks more like this:

    bool success = DoSomething();
    success = DoSomethingElse() && success;

This means that every one of the steps should execute, regardless of
whether previous steps were successful, but the final _success_ state
will only be true if none of the steps has failed.

While this is only really an issue in the conhost code, I've updated
both the `AdaptDispatch` and `TerminalDispatch` classes, since I thought
it would be best to have them in sync, and in general this seems like a
better way to handle multi-step operations anyway.

VALIDATION

I've manually tested the `RIS` escape sequence (`\ec`) in the Windows
Terminal, and confirmed that it now correctly resets the cursor
position, which it wasn't doing before.

Closes #6545",,,,True,True,False,64,123,2,2,j4_james@hotmail.com,noreply@github.com,"07/06/2020, 14:09:03",2020,"07/06/2020, 14:09:03",2020,3,1,3,1.7,2.4,0
,"Add support for the ""overline"" graphic rendition attribute (#6754)

## Summary of the Pull Request

This PR adds support for the `SGR 53` and `SGR 55` escapes sequences,
which enable and disable the ANSI _overline_ graphic rendition
attribute, the equivalent of the console character attribute
`COMMON_LVB_GRID_HORIZONTAL`. When a character is output with this
attribute set, a horizontal line is rendered at the top of the character
cell.

## PR Checklist
* [x] Closes #6000
* [x] CLA signed. 
* [x] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [x] I've discussed this with core contributors already.

## Detailed Description of the Pull Request / Additional comments

To start with, I added `SetOverline` and `IsOverlined` methods to the
`TextAttribute` class, to set and get the legacy
`COMMON_LVB_GRID_HORIZONTAL` attribute. Technically there was already an
`IsTopHorizontalDisplayed` method, but I thought it more readable to add
a separate `IsOverlined` as an alias for that.

Then it was just a matter of adding calls to set and reset the attribute
in response to the `SGR 53` and `SGR 55` sequences in the
`SetGraphicsRendition` methods of the two dispatchers. The actual
rendering was already taken care of by the `PaintBufferGridLines` method
in the rendering engines.

The only other change required was to update the `_UpdateExtendedAttrs`
method in the `Xterm256Engine` of the VT renderer, to ensure the
attribute state would be forwarded to the Windows Terminal over conpty.

## Validation Steps Performed

I've extended the existing SGR unit tests to cover the new attribute in
the `AdapterTest`, the `OutputEngineTest`, and the `VtRendererTest`.
I've also manually tested the `SGR 53` and `SGR 55` sequences to confirm
that they do actually render (or remove) an overline on the characters
being output.",,,,False,False,False,69,5,12,12,j4_james@hotmail.com,noreply@github.com,"07/06/2020, 14:11:17",2020,"07/06/2020, 14:11:17",2020,3,1,3,4.7,2.5,0
,"Update the shape of our custom NewTab button to match MUX's TabView button (#6766)

The MUX TabView control has a uniquely-shaped [+] button.  TerminalApp
doesn't use it: instead, it has a SplitView button that is styled to
look like MUX's official button.  However, it doesn't get the button's
shape right.  This PR updates TerminalApp's custom button to look more
like MUX's.

The difference is that MUX only rounds the top two corners, and it uses
a bigger radius.  Without matching MUX's radius, the upper-left corner
of the button makes an awkward asymmetric divot with the abutting tab.
There's also a spot in the lower-left corner that just looks like
someone accidentally spilled a few pixels on the floor.

Current appearance before this PR:
![oldlight](https://user-images.githubusercontent.com/10259764/86410863-74ca5e80-bc70-11ea-8c15-4ae22998b209.png)

New appearance with this PR:
![newlight](https://user-images.githubusercontent.com/10259764/86410871-772cb880-bc70-11ea-972c-13332f1a1bdb.png)

Most important deltas highlighted with red circles:
![marklight](https://user-images.githubusercontent.com/10259764/86410877-78f67c00-bc70-11ea-8a6d-696cfbd89b1d.png)


Note that this PR does *not* attempt to fix the colors.  The colors are
also just slightly different from what MUX uses.  I'll save that for a
separate PR, since all those screenshots would clutter this up this PR.",,,,True,True,False,2,0,1,1,jtippet@users.noreply.github.com,noreply@github.com,"07/06/2020, 14:13:23",2020,"07/06/2020, 14:13:23",2020,3,1,3,5.0,1.2,0
,"Add some trace logging concerning which schemes are in use (#6803)

## Summary of the Pull Request

Let's try and figure out just how many people are actually using Solarized. I emailed @DHowett about this a week ago, but otherwise we don't really have any other tasks for this.

## PR Checklist
* [x] I work here
* [n/a] Requires documentation to be updated",,,,False,False,False,38,2,5,5,migrie@microsoft.com,noreply@github.com,"07/07/2020, 17:01:42",2020,"07/07/2020, 17:01:42",2020,3,3,3,4.8,1.0,0
,"Update colors of our custom NewTab button to match MUX's TabView (#6812)

Update colors of our custom NewTab button to match MUX's TabView button

MUX has a NewTab button, but Terminal uses a homemade lookalike.  The
version in Terminal doesn't use the same brush color resources as MUX's
button, so it looks very slightly different.  This PR updates Terminal's
button to use the exact same colors that MUX uses.  I literally copied
these brush names out of MUX source code.

## References
This is the color version of the layout fix #6766 
This is a prerequisite for fixing #5360

## Detailed Description of the Pull Request / Additional comments
The real reason that this matters is that once you flip on
`ApplicationHighContrastAdjustment::None`, the existing colors will not
work at all.  The existing brushes are themed to black foreground on a
black background when High Contrast (HC) Black theme is enabled.  The
only thing that's saving you is
`ApplicationHighContrastAdjustment::Auto` is automatically backplating
the glyphs on the buttons, which (by design) hides the fact that the
colors are poor.  The backplates are those ugly squares inside the
buttons on the HC themes.

Before I can push a PR that disables automatic backplating (set
`ApplicationHighContrastAdjustment` to `None`), we'll need to select
better brushes that work in HC mode.  MUX has already selected brushes
that work great in all modes, so it just makes sense to use their
brushes.

The one very subtle difference here is that, for non-HC themes, the
glyph's foreground has a bit more contrast when the button is in
hovered/pressed states.  Again this slight difference hardly matters
now, but using the correct brushes will become critical when we try to
remove the HC backplating.

Closes #6812",,,,True,False,False,12,12,1,1,jtippet@users.noreply.github.com,noreply@github.com,"07/07/2020, 20:40:01",2020,"07/07/2020, 20:40:01",2020,4,1,3,2.5,1.2,0
,"Add a spec for output snapping (#2529)

## Summary of the Pull Request

This proposes a change to how Terminal will scroll in response to newly
generated output. The Terminal will scroll upon receiving new output if
the viewport is at the bottom of the scroll history and no selection is
active.

This spec also explores the possibility of making this response
configurable with a `snapOnOutput` profile setting. It also discusses
the possibility of adding a scroll lock keybinding action.

## PR Checklist
* [X] Spec for #980",,,,False,False,False,124,0,2,2,carlos.zamora@microsoft.com,noreply@github.com,"07/07/2020, 21:45:16",2020,"07/07/2020, 21:45:16",2020,4,1,3,5.0,2.0,0
,"Add actions missing in schema, descriptions for `toggleRetroEffect` (#6806)

## Summary of the Pull Request

In the wake of #6635, a couple things got missed in merges:
* `toggleRetroEffect` didn't get into the schema, nor did `renameTab` or
  `commandPalette`.
* `toggleRetroEffect` also didn't get a name

Furthermore, I thought it might be a good idea to start sticking
commands into `bindings` even without `keys`. So I tried doing that for
`opentabColorPicker` and `toggleRetroEffect`, and found immediately that
the labels for the key chord still appear even when the text is empty.
So I added some XAML magic to hide those when the text is empty.

## References
* #6762 
* #6691
* #6557 
* #6635 

## PR Checklist
* [x] Closes #6762
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

* See also: https://docs.microsoft.com/en-us/windows/uwp/data-binding/data-binding-quickstart#formatting-or-converting-data-values-for-display
  - make sure to switch to C++/WinRT at the top!

## Validation Steps Performed
Removed all my manual actions, ran the Terminal:
![image](https://user-images.githubusercontent.com/18356694/86652356-f5a79400-bfa9-11ea-9131-5b7d3e835e19.png)",,,,False,False,False,113,3,10,10,migrie@microsoft.com,noreply@github.com,"07/07/2020, 21:46:16",2020,"07/07/2020, 21:46:16",2020,4,3,3,4.9,2.5,0
,"Update MUX to 2.5.0-prerelease.200609001 (#6819)

See: https://github.com/microsoft/microsoft-ui-xaml/releases/tag/v2.5.0-prerelease.200609001

> ### Notable Changes:
> 
>     Resize tab view items only once the pointer has left the TabViewItem strip (microsoft/microsoft-ui-xaml#2569)
>     Align TabView visuals with Edge (microsoft/microsoft-ui-xaml#2201)
>     Fix background of MenuFlyout in white high contrast (microsoft/microsoft-ui-xaml#2446)
>     TabView: Make TabViewItem consume the TabViewItemHeaderForeground theme resource (microsoft/microsoft-ui-xaml#2348)
>     TabView: Add tooltips to its scrolling buttons. (microsoft/microsoft-ui-xaml#2369)


* [x] Related to #5360 (@jtippet confirms that this alone does not close it.)
* [x] I work here",,,,True,False,False,18,18,11,11,migrie@microsoft.com,noreply@github.com,"07/07/2020, 23:29:30",2020,"07/07/2020, 23:29:30",2020,4,3,3,2.5,2.4,0
,"Add some logging regarding command palette usage (#6821)

## Summary of the Pull Request

Pretty straightforward. Logs three scenarios:
* The user opened the command palette (and which mode it was opened in)
* The user ran a command from the palette
* The user dismissed the palette without running an action.

We discussed this in team sync yesterday.

## PR Checklist
* [x] I work here
* [n/a] Requires documentation to be updated",,,,False,False,False,58,10,2,2,migrie@microsoft.com,noreply@github.com,"07/07/2020, 23:31:31",2020,"07/07/2020, 23:31:31",2020,4,3,3,4.3,1.5,0
,"Allow starting selections from padding area (#6343)

WinUI's `Margin` and `Padding` work very similarly. `Margin` distances
ourselves from our parent. Whereas `Padding` distances our children from
ourselves.

Terminal's `padding` setting is actually implemented by defining
`Margin` on the SwapChainPanel. This means that the ""padding"" that is
created is actually belongs to SwapChainPanel's parent: Grid (not to be
confused with its parent, ""RootGrid"").

When a user clicks on the padded area, input goes to Grid. But there's a
twist: you can't actually hit Grid. To be able to hit Grid, you can't
just set IsHitTestVisible. You need to set it's Visibility to Visible,
and it's Background to Transparent (not null) [2].

## Validation Steps Performed

- [X] Start a selection from the padding area
- [X] Click on a SearchBox if one is available
   - The SearchBox gets first dibs on the hit test so none gets through
     to the SwapChainPanel

## References
[1] https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.uielement.ishittestvisible
[2] https://docs.microsoft.com/en-us/windows/uwp/xaml-platform/events-and-routed-events-overview#hit-testing-and-input-events

Closes #5626",,,,False,False,False,11,8,2,2,carlos.zamora@microsoft.com,noreply@github.com,"07/07/2020, 23:42:42",2020,"07/07/2020, 23:42:42",2020,4,1,3,2.9,1.0,0
,"Make Terminal look great in High Contrast (#6833)

This PR enables `ApplicationHighContrastAdjustment::None`.  Doing this
disables a set of mitigations in XAML designed to band-aid apps that
were never explicitly designed for High Contrast (HC) modes.  Terminal
now has full control of and responsibility for its appearance in HC
mode.  This allows Terminal to look a lot better.

On paper, we should be able to set `HighContrastAdjustment=""None""` on
the `<Application>` element.  But that doesn't have any effect.  I don't
know if this is a bug in `<Toolkit:XamlApplication>` or somewhere else.
So instead I set the property in codebehind, which is not as ideal, but
does at least work.  I'd love to a way to move this into App.xaml.

The Find box had a couple stray styles to override the ToggleButton's
foreground color.  With backplating removed, these styles became
actively harmful (white foreground on highlight color background), so I
just removed them.  The built-in style for ToggleButton is perfect
as-is.

Closes #5360",,,,True,True,False,7,8,3,3,jtippet@users.noreply.github.com,noreply@github.com,"07/08/2020, 19:08:08",2020,"07/08/2020, 19:08:08",2020,4,1,3,2.3,1.2,0
,"Avoid copying the bitmap on the way into the tracing function (#6839)

## PR Checklist
* [x] Closes perf itch.
* [x] I work here.
* [x] Manual perf test.
* [x] Documentation irrelevant.
* [x] Schema irrelevant.
* [x] Am core contributor.

## Detailed Description of the Pull Request / Additional comments
Passes the bitmap by ref into the tracing function instead of making a copy on the way in. It's only read anyway for tracing (if enabled) so the copy was a pointless oversight.

## Validation Steps Performed
- Observed WPR trace before and after with `time cat big.txt` in WSL.",,,,False,False,False,2,2,2,2,miniksa@microsoft.com,noreply@github.com,"07/08/2020, 22:13:40",2020,"07/08/2020, 22:13:40",2020,4,3,3,2.5,1.0,0
,"Cache VT buffer line string to avoid (de)alloc on every paint (#6840)

A lot of time was spent between each individual line in the VT paint
engine in allocating some scratch space to assemble the clusters then
deallocating it only to have the next line do that again. Now we just
hold onto that memory space since it should be approximately the size of
a single line wide and will be used over and over and over as painting
continues.

## Validation Steps Performed
- Run `time cat big.txt` under WPR. Checked before and after perf
  metrics.",,,,False,False,False,15,12,3,3,miniksa@microsoft.com,noreply@github.com,"07/08/2020, 23:30:46",2020,"07/08/2020, 23:30:46",2020,4,3,3,2.8,1.0,0
,"Fix the build in VS 2019 16.7 (#6838)

The main change in 16.7 is the separation of `AppContainerApplication`
into `WindowsStoreApp` and `WindowsAppContainer`. There's been a bit of
interest in splitting packaging away from containment, and this is the
first step in that direction.

We're a somewhat unique application, but as WinUI3 becomes more
prevalent we will become _less_ unique.

Some of these things, I've looked at and wondered how they ever worked.

## PR Checklist
* [x] Closes nothing

## Validation Steps Performed
Built locally and in CI. Tested the generated package with the package tester. Built on 16.6 and seen that it still seems to work.",,,,True,True,False,15,9,5,5,duhowett@microsoft.com,noreply@github.com,"07/09/2020, 04:10:50",2020,"07/09/2020, 04:10:50",2020,1,1,3,3.1,1.2,0
,"Cache the size viewport structure inside TextBuffer (#6841)

Looking up the size of the viewport from the underlying dimensions of
the structures seemed like a good idea at the time (so it would only be
in one place), but it turns out to be more of a perf cost than we
expected. Not necessarily on any one hot path, but if we sort by
functions in WPR, it was the top consumer on the Terminal side. This
instead saves the size as a member of the `TextBuffer` and serves that
out. It only changes when it is constructed or resized traditionally, so
it's easy to update/keep track of. It impacted conhost/conpty to a
lesser degree but was still noticeable.

## Validation Steps Performed
- Run `time cat big.txt` under WPR. Checked before and after perf
  metrics.

## PR Checklist
* [x] Closes perf itch
* [x] I work here
* [x] Manual test
* [x] Documentation irrelevant.
* [x] Schema irrelevant.
* [x] Am core contributor.",,,,False,False,False,26,12,6,6,miniksa@microsoft.com,noreply@github.com,"07/09/2020, 11:18:25",2020,"07/09/2020, 11:18:25",2020,2,3,3,3.4,1.5,0
,"Implement preventing auto-scroll on new output (#6062)

## Summary of the Pull Request
Updates the Terminal's scroll response to new output. The Terminal will not automatically scroll if...
- a selection is active, or
- the viewport is at the bottom of the scroll history

## References
#2529 - Spec
#3863 - Implementation

## PR Checklist
* [X] Closes #980
* [X] Closes #3863
* [ ] Tests added/passed
* [ ] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments
Updates the `_scrollOffset` value properly in TerminalCore when the cursor moves. We calculate a new `_scrollOffset` based on if we are circling the buffer and how far below the mutable bottom is.

We specifically check for if a selection is active and if the viewport is at the bottom, then use that as a condition for deciding if we should update `_scrollOffset` to the new calculated value or 0 (the bottom of the scroll history).

## Validation Steps Performed
Manual testing. Though I should add automated tests.
- [X] new output
- [X] new output when circling
- [X] new output when circling and viewport is at the top",,,,False,False,False,10,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"07/09/2020, 11:24:20",2020,"07/09/2020, 11:24:20",2020,2,1,3,4.2,1.0,0
,"Add support for DECSCNM in Windows Terminal (#6809)

## Summary of the Pull Request

This PR adds full support for the `DECSCNM` reverse screen mode in the Windows Terminal to align with the implementation in conhost.

## References

* The conhost implementation of `DECSCNM` was in PR #3817.
* WT originally inherited that functionality via the colors being passed through, but that behaviour was lost in PR #6506.

## PR Checklist
* [x] Closes #6622
* [x] CLA signed.
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #6622

## Detailed Description of the Pull Request / Additional comments

The `AdaptDispatch::SetScreenMode` now checks if it's in conpty mode and simply returns false to force a pass-through of the mode change. And the `TerminalDispatch` now has its own `SetScreenMode` implementation that tracks any changes to the reversed state, and triggers a redraw in the renderer.

To make the renderer work, we just needed to update the `GetForegroundColor` and `GetBackgroundColor` methods of the terminal's `IRenderData` implementation to check the reversed state, and switch the colors being calculated, the same way the `LookupForegroundColor` and `LookupBackgroundColor` methods work in the conhost `Settings` class.

## Validation Steps Performed

I've manually tested the `DECSCNM` functionality for Windows Terminal in Vttest, and also with some of my own test scripts.",,,,False,False,False,60,7,8,8,j4_james@hotmail.com,noreply@github.com,"07/09/2020, 11:25:30",2020,"07/09/2020, 11:25:30",2020,2,1,3,4.5,2.4,0
,"Account for WHEEL_DELTA when dispatching VT mouse wheel events (#6843)

By storing up the accumulated delta in the mouse input handler, we can
enlighten both conhost and terminal about wheel events that are less
than one line in size. Previously, we had a workaround in conhost that
clamped small scroll deltas to a whole line, which made trackpad
scrolling unimaginably fast. Terminal didn't make this mistake, but it
also didn't handle delta accumulation . . . which resulted in the same
behavior.

MouseInput will now wait until it's received WHEEL_DELTA (well-known
constant, value 120) worth of scrolling delta before it dispatches a
single scroll event.

Future considerations may include sending multiple wheel button events
for every *multiple* of WHEEL_DELTA, but that would be a slightly larger
refactoring that I'm not yet ready to undertake.

There's a chance that we should be dividing WHEEL_DELTA by the system's
""number of lines to scroll at once"" setting, because on trackpads
conhost now scrolls a little _slow_. I think the only way to determine
whether this is palatable is to just ship it.

Fixes #6184.",,,,True,False,True,55,21,5,5,duhowett@microsoft.com,noreply@github.com,"07/09/2020, 23:24:17",2020,"07/09/2020, 23:24:17",2020,4,1,3,3.9,1.8,0
,"Reintroduce a color compatibility hack, but only for PowerShells (#6810)

There is going to be a very long tail of applications that will
explicitly request VT SGR 40/37 when what they really want is to
SetConsoleTextAttribute() with a black background/white foreground.
Instead of making those applications look bad (and therefore making us
look bad, because we're releasing this as an update to something that
""looks good"" already), we're introducing this compatibility quirk.
Before the color reckoning in #6698 + #6506, *every* color was subject
to being spontaneously and erroneously turned into the default color.
Now, only the 16-color palette value that matches the active console
background/foreground color will be destroyed, and only when received
from specific applications.

Removal will be tracked by #6807.

Michael and I discussed what layer this quirk really belonged in. I
originally believed it would be sufficient to detect a background color
that matched the legacy default background, but @j4james provided an
example of where that wouldn't work out (powershell setting the
foreground color to white/gray). In addition, it was too heavyhanded: it
re-broke black backgrounds for every application.

Michael thought that it should live in the server, as a small VT parser
that righted the wrongs coming directly out of the application. On
further investigation, however, I realized that we'd need to push more
information up into the server (so that it could make the decision about
which VT was wrong and which was right) than should be strictly
necessary.

The host knows which colors are right and wrong, and it gets final say
in what ends up in the buffer.

Because of that, I chose to push the quirk state down through
WriteConsole to DoWriteConsole and toggle state on the
SCREEN_INFORMATION that indicates whether the colors coming out of the
application are to be distrusted. This quirk _only applies to pwsh.exe
and powershell.exe._

NOTE: This doesn't work for PowerShell the .NET Global tool, because it
is run as an assembly through dotnet.exe. I have no opinion on how to
fix this, or whether it is worth fixing.

VALIDATION
----------
I configured my terminals to have an incredibly garish color scheme to
show exactly what's going to happen as a result of this. The _default
terminal background_ is purple or red, and the foreground green. I've
printed out a heap of test colors to see how black interacts with them.

Pull request #6810 contains the images generated from this test.

The only color lines that change are the ones where black as a
background or white as a foreground is selected out of the 16-color
palette explicitly. Reverse video still works fine (because black is in
the foreground!), and it's even possible to represent ""black on default""
and reverse it into ""default on black"", despite the black in question
having been `40`.

Fixes #6767.",,,,True,False,False,258,21,16,16,duhowett@microsoft.com,noreply@github.com,"07/10/2020, 22:25:39",2020,"07/10/2020, 22:25:39",2020,4,1,3,4.6,4.2,0
,"Refactor the renderer color calculations (#6853)

This is a refactoring of the renderer color calculations to simplify the
implementation, and to make it easier to support additional
color-altering rendition attributes in the future (e.g. _faint_ and
_conceal_).

## References

* This is a followup to PRs #3817 and #6809, which introduced additional
  complexity in the color calculations, and which suggested the need for
  refactoring. 

## Detailed Description of the Pull Request / Additional comments

When we added support for `DECSCNM`, that required the foreground and
background color lookup methods to be able to return the opposite of
what was requested when the reversed mode was set. That made those
methods unnecessarily complicated, and I thought we could simplify them
considerably just by combining the calculations into a single method
that derived both colors at the same time.

And since both conhost and Windows Terminal needed to perform the same
calculations, it also made sense to move that functionality into the
`TextAttribute` class, where it could easily be shared.

In general this way of doing things is a bit more efficient. However, it
does result in some unnecessary work when only one of the colors is
required, as is the case for the gridline painter. So to make that less
of an issue, I've reordered the gridline code a bit so it at least
avoids looking up the colors when no gridlines are needed.

## Validation Steps Performed

Because of the API changes, quite a lot of the unit tests had to be
updated. For example instead of verifying colors with two separate calls
to `LookupForegroundColor` and `LookupBackgroundColor`, that's now
achieved with a single `LookupAttributeColors` call, comparing against a
pair of values. The specifics of the tests haven't changed though, and
they're all still working as expected.

I've also manually confirmed that the various color sequences and
rendition attributes are rendering correctly with the new refactoring.",,,,False,False,True,170,328,22,22,j4_james@hotmail.com,noreply@github.com,"07/10/2020, 22:26:34",2020,"07/10/2020, 22:26:34",2020,4,1,3,2.4,4.2,0
,"Add support for DA2 and DA3 device attributes reports (#6850)

This PR adds support for the `DA2` (Secondary Device Attributes) and
`DA3` (Tertiary Device Attributes) escape sequences, which are standard
VT queries reporting basic information about the terminal.

The _Secondary Device Attributes_ response is made up of a number of
parameters:
1. An identification code, for which I've used 0 to indicate that we
   have the capabilities of a VT100 (using code 0 for this is an XTerm
   convention, since technically DA2 would not have been supported by a
   VT100).
2. A firmware revision level, which some terminal emulators use to
   report their actual version number, but I thought it best we just
   hardcode a value of 10 (the DEC convention for 1.0).
3. Additional hardware options, which tend to be device specific, but
   I've followed the convention of the later DEC terminals using 1 to
   indicate the presence of a PC keyboard.

The _Tertiary Device Attributes_ response was originally used to provide
a unique terminal identification code, and which some terminal emulators
use as a way to identify themselves. However, I think that's information
we'd probably prefer not to reveal, so I've followed the more common
practice of returning all zeros for the ID.

In terms of implementation, the only complication was the need to add an
additional code path in the `OutputStateMachine` to handle the `>` and
`=` intermediates (technically private parameter prefixes) that these
sequences require. I've done this as a single method - rather than one
for each prefix - since I think that makes the code easier to follow.

VALIDATION
----------

I've added output engine tests to make sure the sequences are dispatched
correctly, and adapter tests to confirm that they are returning the
responses we expect. I've also manually confirmed that they pass the
_Test of terminal reports_ in Vttest.

Closes #5836",,,,False,False,False,214,0,10,10,j4_james@hotmail.com,noreply@github.com,"07/10/2020, 22:27:47",2020,"07/10/2020, 22:27:47",2020,4,1,3,5.0,3.6,0
,"Build and ship an actual binary named wt that just launches WT (#6860)

Due to a shell limitation, Ctrl+Shift+Enter will not launch Windows
Terminal as Administrator. This is caused by the app execution alias and
the actual targeted executable not having the same name.

In addition, PowerShell has an issue detecting app execution aliases as
GUI/TUI applications. When you run wt from PowerShell, the shell will
wait for WT to exit before returning to the prompt. Having a shim that
immediately re-executes WindowsTerminal and then returns handily knocks
this issue out (as the process that PS was waiting for exits
immediately.)

This could cause a regression for anybody who tries to capture the PID
of wt.exe. Our process tree is not an API, and we have offered no
consistency guarantee on it.

VALIDATION
----------

Tested manual launch in a number of different scenarios:

* [x] start menu ""wtd""
* [x] start menu tile
* [x] powertoys run
* [x] powertoys run ctrl+shift (admin)
* [x] powershell inbox, ""core""
* [x] cmd
* [x] run dialog
* [x] run dialog ctrl+shift (admin)
* [x] run from a lnk with window mode=maximized

Fixes #4645 (PowerShell waits for wt)
Fixes #6625 (Can't launch as admin using C-S-enter)",,,,True,False,False,200,3,10,10,duhowett@microsoft.com,noreply@github.com,"07/10/2020, 22:41:37",2020,"07/10/2020, 22:41:37",2020,4,1,3,4.9,3.6,0
,"Add support for focus mode (#6804)

## Summary of the Pull Request

Add support for ""focus"" mode, which only displays the actual terminal content, no tabs or titlebar. The edges of the window are draggable to resize, but the window can't be moved in borderless mode.

The window looks _slightly_ different bewteen different values for `showTabsInTitlebar`, because switching between the `NonClientIslandWindow` and the `IslandWindow` is _hard_.

`showTabsInTitlebar` | Preview
-- | --
`true` | ![image](https://user-images.githubusercontent.com/18356694/86639069-f5090080-bf9d-11ea-8b29-fb1e479a078d.png)
`false` | ![image](https://user-images.githubusercontent.com/18356694/86639094-fafee180-bf9d-11ea-8fc0-6804234a5113.png)

## PR Checklist
* [x] Closes #2238 
* [x] I work here
* [ ] Tests added/passed
* [ ] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

* **KNOWN ISSUE**: Upon resizing the NCIW, the top frame margin disappears, making that border disappear entirely. 6356aaf has a bunch of WIP work for me trying to fix that, but I couldn't get it quite right.

## Validation Steps Performed
* Toggled between focus and fullscreen a _bunch_ in both modes.",,,,True,False,False,222,32,20,20,migrie@microsoft.com,noreply@github.com,"07/13/2020, 17:40:20",2020,"07/13/2020, 17:40:20",2020,3,3,3,4.4,4.2,0
,"Add support for the ""faint"" graphic rendition attribute (#6873)

## Summary of the Pull Request

This PR adds support for the `SGR 2` escape sequence, which enables the
ANSI _faint_ graphic rendition attribute. When a character is output
with this attribute set, it uses a dimmer version of the active
foreground color.

## PR Checklist
* [x] Closes #6703
* [x] CLA signed. 
* [x] Tests added/passed
* [ ] Documentation updated.
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. Issue number where discussion took place: #6703

## Detailed Description of the Pull Request / Additional comments

There was already an `ExtendedAttributes::Faint` flag in the
`TextAttribute` class, but I needed to add `SetFaint` and `IsFaint`
methods to access that flag, and update the `SetGraphicsRendition`
methods of the two dispatchers to set the attribute on receipt of the
`SGR 2` sequence. I also had to update the existing `SGR 22` handler to
reset _Faint_ in addition to _Bold_, since they share the same reset
sequence. For that reason, I thought it a good idea to change the name
of the `SGR 22` enum to `NotBoldOrFaint`.

For the purpose of rendering, I've updated the
`TextAttribute::CalculateRgbColors` method to return a dimmer version of
the foreground color when the _Faint_ attribute is set. This is simply
achieved by dividing each color component by two, which produces a
reasonable effect without being too complicated. Note that the _Faint_
effect is applied before _Reverse Video_, so if the output it reversed,
it's the background that will be faint.

The only other complication was the update of the `Xterm256Engine` in
the VT renderer. As mentioned above, _Bold_ and _Faint_ share the same
reset sequence, so to forward that state over conpty we have to go
through a slightly more complicated process than with other attributes.
We first check whether either attribute needs to be turned off to send
the reset sequence, and then check if the individual attributes need to
be turned on again.

## Validation

I've extended the existing SGR unit tests to cover the new attribute in
the `AdapterTest`, the `ScreenBufferTests`, and the `VtRendererTest`,
and added a test to confirm the color calculations  when _Faint_ is set
in the `TextAttributeTests`.

I've also done a bunch of manual testing with all the different VT color
types and confirmed that our output is comparable to most other
terminals.",,,,False,False,False,131,15,13,13,j4_james@hotmail.com,noreply@github.com,"07/13/2020, 17:44:09",2020,"07/13/2020, 17:44:09",2020,3,1,3,4.5,3.6,0
,Merged PR 4915530: Reflect OS Build fixes on top of 58f5d7c7,,,,True,True,False,2,2,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"07/13/2020, 23:00:53",2020,"07/13/2020, 23:00:53",2020,4,1,1,2.5,1.2,0
,"Merged PR 4915574: console: switch to /Zc:wchar_t (native wchar_t)

console: switch to /Zc:wchar_t (native wchar_t)

This matches what we use in OpenConsole and makes {fmt} play nice.

I've also removed the workaround we introduced into OutputCellIterator
to work around not using /Zc:wchar_t.

Fixes MSFT:27626309.
Fixes GH-2673.

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 1508f7c232ec58bebc37fedfdec3eb8f9bff5502",,,,True,True,False,9,17,5,5,duhowett@microsoft.com,duhowett@microsoft.com,"07/13/2020, 23:04:32",2020,"07/13/2020, 23:04:32",2020,4,1,1,1.7,1.2,0
,Add DFMT to the spelling expect list,,,,False,False,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"07/13/2020, 23:11:54",2020,"07/13/2020, 23:11:54",2020,4,1,1,5.0,1.0,0
,"Remove the rowsToScroll setting and just always use the system setting (#6891)

This parameter was added as a workaround for our fast trackpad
scrolling. Since that was fixed before 1.0 shipped, in #4554, it has
been largely vestigial. There is no reason for us to keep it around any
longer.

It was also the only ""logic"" in TerminalSettings, which is otherwise a
library that only transits data between two other libraries.

I have not removed it from the schema, as I do not want to mark folks'
settings files invalid to a strict schema parser.

While I was in the area, I added support for ""scroll one screen at a
time"" (which is represented by the API returning WHEEL_PAGESCROLL),
fixing #5610. We were also storing it in an int (whoops) instead of a
uint.

Fixes #5610",,,,True,False,False,33,68,15,15,duhowett@microsoft.com,noreply@github.com,"07/14/2020, 01:38:11",2020,"07/14/2020, 01:38:11",2020,1,1,3,1.6,3.6,0
,"Add support for the ""concealed"" graphic rendition attribute (#6907)

## Summary of the Pull Request

This PR adds support for the `SGR 8` and `SGR 28` escape sequences,
which enable and disable the _concealed/invisible_ graphic rendition
attribute. When a character is output with this attribute set, it is
rendered with the same foreground and background colors, so the text is
essentially invisible.

## PR Checklist
* [x] Closes #6876
* [x] CLA signed. 
* [x] Tests added/passed
* [ ] Documentation updated.
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. Issue number
  where discussion took place: #6876

## Detailed Description of the Pull Request / Additional comments

Most of the framework for this attribute was already implemented, so it
was just a matter of updating the `TextAttribute::CalculateRgbColors`
method to make the foreground the same as the background when the
_Invisible_ flag was set. Note that this has to happen after the
_Reverse Video_ attribute is applied, so if you have white-on-black text
that is reversed and invisible, it should be all white, rather than all
black.

## Validation Steps Performed

There were already existing SGR unit tests covering this attribute in
the `ScreenBufferTests`, and the `VtRendererTest`. But I've added to the
`AdapterTest` which verifies the SGR sequences for setting and resetting
the attribute, and I've extended the `TextAttributeTests` to verify that
the color calculations return the correct values when the attribute is
set.

I've also manually confirmed that we now render the _concealed text_
values correctly in the _ISO 6429_ tests in Vttest. And I've manually
tested the output of _concealed_ when combined with other attributes,
and made sure that we're matching the behaviour of most other terminals.",,,,False,False,False,37,1,3,3,j4_james@hotmail.com,noreply@github.com,"07/14/2020, 14:11:03",2020,"07/14/2020, 14:11:03",2020,3,1,3,4.9,1.2,0
,"Update {fmt} to 7.0.1 (#6906)

{fmt} 7.0.1 improves binary size, compile-time format string handling,
compile time improvements and named arguments.

In a test Windows build, it shrank our binary by ~14kb.

Closes #6905.

## PR Checklist
* [x] Closes #6905
* [x] CLA",,,,False,False,False,2349,2060,15,15,duhowett@microsoft.com,noreply@github.com,"07/14/2020, 16:16:43",2020,"07/14/2020, 16:16:43",2020,3,1,3,3.1,4.0,0
,"Tweak the Palette's KeyChord for High Contrast mode (#6910)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Update the Palette to be readable under High Contrast mode

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
Regressed in #6833

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #6892
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [X] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #6892

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
I pulled the styling of the KeyChord text into a Style, so we can give it a different style under High Contrast.  Under HC, I just left all the colors at their default, so ListView can do its thing.  (IMHO, the HC style now looks better than the non-HC mode, but maybe I'm biased ;) )

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
| | Old | New |
|---|:---:|:---:|
| Light | ![light](https://user-images.githubusercontent.com/10259764/87398203-6b8f9a80-c56a-11ea-99d0-2eeefcfea269.png) | ![newlight](https://user-images.githubusercontent.com/10259764/87399212-e3aa9000-c56b-11ea-9e94-c8fae8825cd1.png) |
| Dark | ![dark](https://user-images.githubusercontent.com/10259764/87398269-819d5b00-c56a-11ea-9180-5c6ec1071b95.png) | ![newdark](https://user-images.githubusercontent.com/10259764/87399227-ead19e00-c56b-11ea-996d-ad52bc2dcbf3.png) |
| HC White | ![oldwhite](https://user-images.githubusercontent.com/10259764/87398320-92e66780-c56a-11ea-9d52-e2f6e31ae487.png) | ![newwhite](https://user-images.githubusercontent.com/10259764/87398340-98dc4880-c56a-11ea-87e2-ed257ad89c4a.png) |
| HC Black | ![oldblack](https://user-images.githubusercontent.com/10259764/87398357-9f6ac000-c56a-11ea-848c-1ccef6a65442.png) | ![newblack](https://user-images.githubusercontent.com/10259764/87398370-a396dd80-c56a-11ea-9540-8aa9bb934791.png) |",,,,True,False,False,29,5,1,1,jtippet@users.noreply.github.com,noreply@github.com,"07/14/2020, 16:21:59",2020,"07/14/2020, 16:21:59",2020,3,1,3,4.3,1.2,0
,"Move to GSL 3.1.0 (#6908)

GSL 3, the next major version of GSL after the one we're using, replaced
their local implementation of `span` with one that more closely mimics
C++20's span. Unfortunately, that is a breaking change for all of GSL's
consumers.

This commit updates our use of span to comply with the new changes in
GSL 3.

Chief among those breaking changes is:

* `span::at` no longer exists; I replaced many instances of `span::at`
  with `gsl::at(x)`
* `span::size_type` has finally given up on `ptrdiff_t` and become
  `size_t` like all other containers

While I was here, I also made the following mechanical replacements:

* In some of our ""early standardized"" code, we used std::optional's
  `has_value` and `value` back-to-back. Each `value` incurs an
  additional presence test.
  * Change: `x.value().member` -> `x->member` (`optional::operator->`
    skips the presence test)
  * Change: `x.value()` -> `*x` (as above)
* GSL 3 uses `size_t` for `size_type`.
  * Change: `gsl::narrow<size_t>(x.size())` -> `x.size()`
  * Change: `gsl::narrow<ptrdiff_t>(nonSpan.size())` -> `nonSpan.size()`
    during span construction

I also replaced two instances of `x[x.size() - 1]` with `x.back()` and
one instance of a manual array walk (for comparison) with a direct
comparison.

NOTE: Span comparison and `make_span` are not part of the C++20 span
library.

Fixes #6251",,,,True,False,False,332,333,14,14,duhowett@microsoft.com,noreply@github.com,"07/14/2020, 18:30:59",2020,"07/14/2020, 18:30:59",2020,4,1,3,2.5,4.8,0
,"`wt.exe`: Add support for ""short"" sub-commands (#6576)

This adds `nt`, `sp`, and `ft` as aliases for `new-tab`, `split-pane`,
and `focus-tab`, respectively. These do exactly the same thing as their
long for counterparts, but are just shorter, for those of us who type
slower than a fifth grader 👀 

Now you can do
```
wt nt cmd.exe /k #work 15 ; sp cmd.exe /k #work 15 ; sp cmd.exe /k
media-commandline ; nt powershell dev\\symbols.ps1 ; nt -p \""Ubuntu\"" ;
nt -p \""Ubuntu\"" ; ft -t 0
``` 

instead of 

```
new-tab cmd.exe /k #work 15 ; split-pane cmd.exe /k #work 15 ;
split-pane cmd.exe /k media-commandline ; new-tab powershell
dev\\symbols.ps1 ; new-tab -p \""Ubuntu\"" ; new-tab -p \""Ubuntu\"" ;
focus-tab -t 0
```

The pattern I'm using here is that each of these subcommands now has a
little helper lambda that actually sets up the subcommand with the
required arguments, and we just call that lambda twice, once for the
long-form of the command, and again for the short.

I imagine that in the future, we won't necessarily have short-forms for
every subcommands, so if there are future conflicts we'd have to figure
that out pre-emptively, but these all seem like they'll need a short
form. 

Closes #5466",,,,False,False,False,189,111,4,4,migrie@microsoft.com,noreply@github.com,"07/14/2020, 18:50:32",2020,"07/14/2020, 18:50:32",2020,4,3,3,3.1,2.5,0
,"Add support for ""Always on top"" mode (#6903)

This PR adds support for always on top mode, via two mechanisms:
* The global setting `alwaysOnTop`. When set to true, the window will be
  created in the ""topmost"" group of windows.  Changing this value will
  hot-reload whether the window is in the topmost group.
* The action `toggleAlwaysOnTop`, which will toggle the `alwaysOnTop`
  property at runtime.

## Detailed Description of the Pull Request / Additional comments

All ""topmost"" windows maintain an internal z-ordering relative to one
another, but they're all always above all other ""non-topmost"" windows.
So multiple Windows Terminal windows which are both `alwaysOnTop` will
maintain a z-order relative to one another, but they'll all be on top of
all other windows.

## Validation Steps Performed

Toggled always on top mode, both in the settings and also at runtime,
and verified that it largely did what I expected.

Closes #3038",,,,False,False,False,209,51,21,21,migrie@microsoft.com,noreply@github.com,"07/14/2020, 21:02:18",2020,"07/14/2020, 21:02:18",2020,4,3,3,4.0,3.5,0
,"Add High Contrast image assets (#6915)

This commit adds image assets for High Contrast mode

Tagging this issue so it contains a nice list of all the recent HC
fixes: #5360

I made several changes to DHowett's script and added it to the repo:
* Add support for generating high contrast icons
* Add the ability to easily edit the ""intermediate"" (previously ""zbase"")
  files for manual hinting
* Appease the spellchecker

I created new SVGs for HC mode. There's one SVG for both Black and White
modes -- I just invert the colors. Then I manually hinted the generated
bitmaps for the production icons. I didn't bother hinting the Dev/Pre
ones, so the text does get unreadable at small sizes.

View the original images in #6915.

Co-authored-by: Jeffrey Tippet <jtippet@microsoft.com>
Co-authored-by: Dustin L. Howett <duhowett@microsoft.com>
Closes #6822",,,,True,False,False,238,0,414,6,jtippet@users.noreply.github.com,noreply@github.com,"07/14/2020, 21:45:30",2020,"07/14/2020, 21:45:30",2020,4,1,3,5.0,5.0,0
,"Replace the color table init code with two const arrays (#6913)

This results in smaller code and faster copying. I chose til::color even
though it results in slightly worse codegen (byteswapping in a tight
loop) than COLORREF (SSE-enlightened block copy) because eventually the
internal representations of the color tables will also be til::color and
_then_ it will become a block copy.",,,,False,False,False,280,276,1,1,duhowett@microsoft.com,noreply@github.com,"07/15/2020, 15:53:38",2020,"07/15/2020, 15:53:38",2020,3,1,3,2.5,3.0,0
,"Replace basic_string_view<T> with span<const T> (#6921)

We were using std::basic_string_view as a stand-in for std::span so that
we could change over all at once when C++20 dropped with full span
support. That day's not here yet, but as of 54a7fce3e we're using GSL 3,
whose span is C++20-compliant.

This commit replaces every instance of basic_string_view that was not
referring to an actual string with a span of the appropriate type.

I moved the `const` qualifier into span's `T` because while
`basic_string_view.at()` returns `const T&`, `span.at()` returns `T&`
(without the const). I wanted to maintain the invariant that members of
the span were immutable.

* Mechanical Changes
   * `sv.at(x)` -> `gsl::at(sp, x)`
   * `sv.c{begin,end}` -> `sp.{begin,end}` (span's iterators are const)

I had to replace a `std::basic_string<>` with a `std::vector<>` in
ConImeInfo, and I chose to replace a manual array walk in
ScreenInfoUiaProviderBase with a ranged-for. Please review those
specifically.

This will almost certainly cause a code size regression in Windows
because I'm blowing out all the PGO counts. Whoops.

Related: #3956, #975.",,,,False,False,False,280,280,65,65,duhowett@microsoft.com,noreply@github.com,"07/15/2020, 16:40:42",2020,"07/15/2020, 16:40:42",2020,3,1,3,2.5,5.0,0
,"Replace gsl::at with a new til::at(span) for pre-checked bounds (#6925)

The recent changes to use gsl::span everywhere added a few bounds checks
along codepaths where we were already checking bounds. Some of them may
be non-obvious to the optimizer, so we can now use til::at to help them
along.

To accomplish this, I've added a new overload of til::at that takes a
span and directly accesses its backing buffer.",,,,False,False,False,81,46,14,14,duhowett@microsoft.com,noreply@github.com,"07/15/2020, 17:29:36",2020,"07/15/2020, 17:29:36",2020,3,1,3,3.6,3.0,0
,"Added til::spsc, a lock-free, single-producer/-consumer FIFO queue (#6751)

## Summary of the Pull Request

This PR adds the `til::spsc` namespace, which implements a lock-free, single-producer, single-consumer FIFO queue (""channel""). The queue efficiently blocks the caller using Futexes if no data can be written to / read from the queue (e.g. using `WaitOnAddress` on Windows). Furthermore it allows batching of data and contains logic to signal the caller if the other side has been dropped/destructed.

## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Detailed Description of the Pull Request / Additional comments

`til::spsc::details::arc<T>` contains most of the queue's logic and as such has the relevant documentation for its design.

## Validation Steps Performed

The queue was tested on Windows, Linux and macOS using MSVC, gcc and llvm and each of their available runtime introspection utilities in order to ensure no race conditions or memory leaks occur.",,,,False,False,False,847,0,6,6,leonard@hecker.io,noreply@github.com,"07/16/2020, 20:49:06",2020,"07/16/2020, 20:49:06",2020,4,1,3,5.0,4.2,0
,Correct comment in this SPSC test as a quick follow up to merge.,,,,False,False,False,2,1,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"07/16/2020, 20:53:56",2020,"07/16/2020, 20:53:56",2020,4,3,3,3.3,1.0,0
,"Cache the viewport to make invalidation faster (#6918)

In `Renderer::TriggerRedraw`, the act of fetching the viewport from the
`pData` over and over is wasted time. We already have a cached variable
of the viewport that is updated on every scroll check (on
`TriggerScroll` and on `PaintFrame`.) Scrolling wouldn't be working
correctly if the clients weren't already notifying us that the viewport
has changed for scroll purposes, so we can just keep using that cached
value for the invalidation restriction to speed things up over fetching
it again.

## Validation Steps Performed
- Run `time cat big.txt`. Checked average time before/after, WPR traces
  before/after.

## PR Checklist
* [x] Closes perf itch
* [x] I work here
* [x] Manual test
* [x] Documentation irrelevant.
* [x] Schema irrelevant.
* [x] Am core contributor.",,,,False,False,False,150,10,3,3,miniksa@microsoft.com,noreply@github.com,"07/16/2020, 21:46:10",2020,"07/16/2020, 21:46:10",2020,4,3,3,4.7,2.0,0
,"Fix 'bcz exclusive' typo (#6938)

Without this fix, you'd end up with an empty target variable, and so
msbuild would complain and tell you to give it a target.",,,,True,True,False,5,1,1,1,danthom@microsoft.com,noreply@github.com,"07/16/2020, 23:58:48",2020,"07/16/2020, 23:58:48",2020,4,0,3,4.2,1.2,0
,"Smooth animation of command palette filtering (#6939)

The command palette is a ListView of commands.  As you type into the
search box, commands are added or removed from the ListView.  Currently,
each update is done by completely clearing the backing list, then adding
back any items that should be displayed.  However, this defeats the
ListView's built-in animations: upon every keystroke, ListView displays
its list-clearing animation, then animates the insertion of every item
that wasn't deleted.  This results in noticeable flickering.

This PR changes the update logic so that it updates the list using
(roughly) the minimum number of Insert and Remove calls, so the ListView
makes smoother transitions as you type.

I implemented it by keeping the existing code that builds the filtered
list, but I changed it to build into a scratch list.  Then I grafted on
a generic delta algorithm to make the real list look like the scratch
list.

To verify the delta algorithm, I tested all 360,000 permutations of
pairs of up to 5 element lists in a toy C# app.

## Validation
I'm not sure if my screen capture tool really caught all the flickering
here, but the screencasts below should give a rough idea of the
difference.  (All the flickering was becoming a nuisance while I was
testing out the HC changes.)

See the images in #6939 for more info.

Co-authored-by: Jeffrey Tippet <jtippet@microsoft.com>",,,,False,False,False,58,7,2,2,jtippet@users.noreply.github.com,noreply@github.com,"07/17/2020, 00:33:03",2020,"07/17/2020, 00:33:03",2020,1,1,3,4.5,1.5,0
,"Move to the TerminalDependencies NuGet feed (#6954)

After we stood up our own NuGet feed in Azure blob storage, Azure DevOps
came out with a public artifact feed feature. I've migrated all our
packages over, and the only thing left to do is switch our project's
NuGet config to use it.

Fixes #6952",,,,True,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"07/17/2020, 00:33:23",2020,"07/17/2020, 00:33:23",2020,1,1,3,2.5,1.2,0
,Update Cascadia Code to 2007.15 (#6958),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"07/17/2020, 01:14:57",2020,"07/17/2020, 01:14:57",2020,1,1,3,2.5,1.0,0
,version: bump to 1.3 on master,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"07/17/2020, 01:18:33",2020,"07/17/2020, 01:18:33",2020,1,1,3,2.5,1.0,0
,"Convert most of our JSON deserializers to use type-based conversion (#6590)

This pull request converts the following JSON deserializers to use the
new JSON deserializer pattern:

* Profile
* Command
* ColorScheme
* Action/Args
* GlobalSettings
* CascadiaSettingsSerialization

This is the completion of a long-term JSON refactoring that makes our
parser and deserializer more type-safe and robust. We're finally able to
get rid of all our manual enum conversion code and unify JSON conversion
around _types_ instead of around _keys_.

I've introduced another file filled with template specializations,
TerminalSettingsSerializationHelpers.h, which comprises a single unit
that holds all of the JSON deserializers (and eventually serializers)
for every type that comes from TerminalApp or TerminalSettings.

I've also moved some types out of Profile and GlobalAppSettings into a
new SettingsTypes.h to improve settings locality.

This does to some extent constitute a breaking change for already-broken
settings. Instead of parsing ""successfully"" (where invalid values are
null or 0 or unknown or unset), deserialization will now fail when
there's a type mismatch. Because of that, some tests had to be removed.

While I was on a refactoring spree, I removed a number of helpless
helpers, like GetWstringFromJson (which converted a u8 string to an
hstring to make a wstring out of its data pointer :|) and
_ConvertJsonToBool.

In the future, we can make the error types more robust and give them
position and type information such that a conformant application can
display rich error information (""line 3 column 3, I expected a string,
you gave me an integer"").

Closes #2550.",,,,True,True,True,877,1738,23,19,duhowett@microsoft.com,noreply@github.com,"07/17/2020, 01:31:09",2020,"07/17/2020, 01:31:09",2020,1,1,3,2.5,4.8,0
,"Tweaks: normalize TextAttribute method names (adjective form) (#6951)

## Summary of the Pull Request

Text can have various attributes, such as ""bold"", ""italic"", ""underlined"", etc.  The TextAttribute class embodies this. It has methods to set/query these attributes.

This change tweaks a few of the method names to make them match. I.e. for an imaginary text property ""Foo"", we should have methods along the lines of:

```
IsFoo
SetFoo(bool isFoo)
```

And variations should match: we should have ""Foo"" and ""OverFoo"", not ""Fooey"" and ""OverFoo"".

I chose to standardize on the adjective form, since that's what we are closest to already. The attributes I attacked here are:

SetItalic**s** --> SetItalic
SetUnderline --> SetUnderline**d**
SetOverline --> SetOverline**d**

(""italic"" is an adjective; ""italics"" is a plural noun, representing letters or words in an italic typeface)

And I also added methods for ""DoublyUnderlined"" for good measure.

I stopped short of renaming the GraphicsOptions enum values to match, too; but I'd be willing to do that in a follow-up change if people wanted it.

## Validation Steps Performed
It builds, and tests still pass.",,,,False,False,False,52,52,13,13,danthom@microsoft.com,noreply@github.com,"07/17/2020, 15:50:23",2020,"07/17/2020, 15:50:23",2020,3,0,3,2.5,3.0,0
,"Set memory order on slow atomics (#6920)

By default, the memory order on atomics is `seq_cst`. This is a relatively expensive ordering and it shows in situations where we're rapidly signaling a consumer to pick up something from a producer. I've instead attempted to switch these to `release` (producer) and `acquire` (consumer) to improve the performance of these signals. 

## Validation Steps Performed
- Run `time cat big.txt` and `time cat ls.txt` under VS Performance Profiler. 

## PR Checklist
* [x] Closes perf itch
* [x] I work here
* [x] Manual test
* [x] Documentation irrelevant.
* [x] Schema irrelevant.
* [x] Am core contributor.",,,,False,False,False,9,8,3,3,miniksa@microsoft.com,noreply@github.com,"07/17/2020, 17:11:45",2020,"07/17/2020, 17:11:45",2020,3,3,3,3.1,1.2,0
,"Commit attr runs less frequently by accumulating length of color run (#6919)

The act of calling `InsertAttrRuns` is relatively slow. Instead of
calling it a bunch of times to meddle with colors one cell at a time,
we'll accumulate a length of color and call it to make it act all at
once. This is great for when one color full line is getting replaced
with another color full line OR when a line is being replaced with the
same color all at once. There's significantly fewer checks to be made
inside `InsertAttrRuns` if we can help it out by accumulating the length
of each color before asking it to stitch it into the storage.

Validation
----------

- Run `time cat big.txt` and `time cat ls.txt` under VS Performance
  Profiler.",,,,False,False,False,77,45,1,1,miniksa@microsoft.com,noreply@github.com,"07/17/2020, 17:53:01",2020,"07/17/2020, 17:53:01",2020,3,3,3,3.2,2.0,0
,"Add gutter to Command Palette to avoid overlapping with scrollbar (#6965)

The command palette has some content that can overlap with its
scrollbar.  This PR adds a 16px gutter for the scrollbar, as recommended
[here](https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/scroll-controls#:~:text=leave%2016px%20of%20padding%20on%20the%20edge%20of%20the%20viewport).

## Detailed Description of the Pull Request / Additional comments
You can repro the overlap in the default configuration by grabbing the
scrollbar with the mouse pointer.  But there's an accessibility option
that makes this more obvious: Settings > Display > Automatically hide
scroll bars.  With that option enabled, the text is _always_
overlapping.

The gutter does look slightly larger than it needs to be when the
scrollbar is thin or completely hidden.  Dynamic reflow may help, but
unfortunately, I don't know enough XAML to wire that up.  MUX has a
promising visual state named `ScrollBarsSeparatorExpanded`, so the
scientists suggest we _could_, while the designers are still pondering
whether we _should_.

## Validation Steps Performed

Old appearance:
![image](https://user-images.githubusercontent.com/10259764/87817879-94d85100-c81e-11ea-956c-ca0e23576fef.png)

New appearance with fat scrollbars:
![image](https://user-images.githubusercontent.com/10259764/87817914-a4579a00-c81e-11ea-9e9d-195969e6da95.png)

New appearance with thin scrollbars:
![image](https://user-images.githubusercontent.com/10259764/87818061-dff26400-c81e-11ea-866e-088f72276343.png)

New appearance with no scrollbar:
![image](https://user-images.githubusercontent.com/10259764/87819674-7758b680-c821-11ea-98b7-dddd1573c242.png)",,,,False,False,False,4,3,1,1,jtippet@users.noreply.github.com,noreply@github.com,"07/17/2020, 19:27:32",2020,"07/17/2020, 19:27:32",2020,4,1,3,2.9,1.2,0
,"Skip DX invalidation if we've already scrolled an entire screen worth of height (#6922)

We spend a lot of time invalidating in the DX Renderer. This is a
creative trick to not bother invalidating any further if we can tell
that the bitmap is already completely invalidated. That is, if we've
scrolled at least an entire screen in height... then the entire bitmap
had to have been marked as invalid as the new areas were ""uncovered"" by
the `InvalidateScroll` command. So further setting invalid bits on top
of a fully invalid map is pointless. 

Note: I didn't use `bitmap::all()` here because it is significantly
slower to check all the bits than it is to just reason out that the
bitmap was already fully marked.

## Validation Steps Performed
- Run `time cat big.txt`. Checked average time before/after, WPR traces
  before/after.",,,,False,False,False,38,11,3,3,miniksa@microsoft.com,noreply@github.com,"07/17/2020, 19:32:36",2020,"07/17/2020, 19:32:36",2020,4,3,3,3.9,1.0,0
,"Add support for running a `wt` commandline in the curent window WITH A KEYBINDING (#6537)

## Summary of the Pull Request

Adds a execute commandline action (`wt`), which lets a user bind a key to a specific `wt` commandline. This commandline will get parsed and run _in the current window_. 

## References

* Related to #4472 
* Related to #5400 - I need this for the commandline mode of the Command Palette
* Related to #5970

## PR Checklist
* [x] Closes oh, there's not actually an issue for this.
* [x] I work here
* [x] Tests added/passed
* [ ] Requires documentation to be updated - yes it does

## Detailed Description of the Pull Request / Additional comments

One important part of this change concerns how panes are initialized at runtime. We've had some persistent trouble with initializing multiple panes, because they rely on knowing how big they'll actually be, to be able to determine if they can split again. 

We previously worked around this by ignoring the size check when we were in ""startup"", processing an initial commandline. This PR however requires us to be able to know the initial size of a pane at runtime, but before the parents have necessarily been added to the tree, or had their renderer's set up.

This led to the development of `Pane::PreCalculateCanSplit`, which is very highly similar to `Pane::PreCalculateAutoSplit`. This method attempts to figure out how big a pane _will_ take, before the parent has necessarily laid out. 

This also involves a small change to `TermControl`, because if its renderer hasn't been set up yet, it'll always think the font is `{0, fontHeight}`, which will let the Terminal keep splitting in the x direction. This change also makes the TermControl set up a renderer to get the real font size when it hasn't yet been initialized.

## Validation Steps Performed

This was what the json blob I was using for testing evolved into

```json
        {
            ""command"": {
                ""action"":""wt"",
                ""commandline"": ""new-tab cmd.exe /k #work 15 ; split-pane cmd.exe /k #work 15 ; split-pane cmd.exe /k media-commandline ; new-tab powershell dev\\symbols.ps1 ; new-tab -p \""Ubuntu\"" ; new-tab -p \""haunter.gif\"" ; focus-tab -t 0"",

            },
            ""keys"": [""ctrl+shift+n""]
        }
```

I also added some tests.

# TODO
* [x] Creating a `{ ""command"": ""wt"" }` action without a commandline will spawn a new `wt.exe` process?
  - Probably should just do nothing for the empty string",,,,False,False,False,582,115,29,28,migrie@microsoft.com,noreply@github.com,"07/17/2020, 21:05:29",2020,"07/17/2020, 21:05:29",2020,4,3,3,4.2,5.0,0
,"Swap brightBlack/black in the Solarized color schemes (#6985)

Original notes from @M-Pixel:

> Console applications assume that backgrounds are black, and that
> `lightBlack`/`DarkGrey` are lighter than `black`/`Black`.  This
> assumption is accounted for by all color schemes in `defaults.json`,
> except for the Solarized themes.
> 
> The Solarized Dark theme, in particular, makes `-Parameters` invisible
> against the background in PowerShell, which is obviously an unacceptable
> usability flaw.
> 
> This change makes `black` and `background` to the same (which is common
> throughout the color schemes), and makes `brightBlack` (`DarkGray` in
> .NET) lighter than black (which is obviously more correct given the
> meanings of those words).

Out of the box, we ship a pretty bad behavior.

If I look at all of the existing shipped color schemes--and that
includes things like Tango and One Half--we are universally following a
`background` == `black` rule.

If I consult gnome-terminal or xterm, they do the same thing; Xterm by
default, gnome-terminal for solarized. The background generally matches
color index `0` across all their **dark** schemes. Konsole and
lxterminal disagree and map background to `0 intense` for Solarized.

I want to put our Solarized schemes on a deprecation path, but
unfortunately we still need to ship _something_ for users who we're
going to strand on them.

I'm going to have to swallow my bitter and say that yes, we should
probably just change the index mapping and go with something that works
right out of the box while we figure out how to do perceptual color
nudging and eventually remove bad defaults (like Solarized).

From #6618.

Fixes #4047.
Closes #6618.",,,,True,False,False,4,4,1,1,duhowett@microsoft.com,noreply@github.com,"07/20/2020, 20:50:50",2020,"07/20/2020, 20:50:50",2020,4,1,3,2.5,1.2,0
,"UIA: use full buffer comparison in rects and endpoint setter (#6447)

In UiaTextRange, `_getBufferSize` returns an optimized version of the
size of the buffer to be the origin and the last character in the
buffer. This is to improve performance on search or checking if you are
currently on the last word/line.

When setting the endpoint and drawing the bounding rectangles, we should
be retrieving the true buffer size. This is because it is still possible
to create UiaTextRanges that are outside of this optimized size. The
main source of this is `ExpandToEnclosingUnit()` when the unit is
`Document`. The end _should_ be the last visible character, but it isn't
because that would break our tests.

This is an incomplete solution. #6986 is a follow up to completely test
and implement the solution.

The crash in #6402 was caused by getting the document range (a range of
the full text buffer),  then moving the end by one character. When we
get the document range, we get the optimized size of the buffer (the
position of the last character). Moving by one character is valid
because the buffer still has more to explore. We then crash from
checking if the new position is valid on the **optimized size**, not the
**real size**.

REFERENCES

#6986 - follow up to properly handle/test this ""end of buffer"" problem

Closes #6402",,,,True,True,False,8,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"07/20/2020, 23:10:55",2020,"07/20/2020, 23:10:55",2020,4,1,3,4.2,1.2,0
,"wpf: fix a handful of issues with the wpf control (#6983)

* send alt/F10 through the control
  We were not listening for WM_SYSKEY{UP,DOWN}
* extract the actual scancode during WM_CHAR, not the bitfield
  We were accidentally sending some of the additional keypress data in with
  the character event in Win32 Input Mode
* set default fg/bg to campbell
  The WPF control starts up in PowerShell blue even though it's not typically used
  in PowerShell blue.
* don't rely on the font to determine wideness
  This is a cross-port of #2928 to the WPF control
* deterministic shutdown
  In testing, I saw a handful of crashes on teardown because we were not shutting
  down the render thread properly.
* don't pass 10 for the font weight ...
  When Cascadia Code is set, it just looks silly.
* trigger render when selection is cleared, do it under lock

Fixes #6966.",,,,True,False,False,102,19,4,4,duhowett@microsoft.com,noreply@github.com,"07/20/2020, 23:13:20",2020,"07/20/2020, 23:13:20",2020,4,1,3,4.2,2.4,0
,"Merged PR 4947060: Migrate OS delayload changes

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/200720-1445 into official/rs_onecore_dep_uxp
Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 5e1509a00f1acdefe1e6392468ffc9ae44dc89cb

Related work items: MSFT:25731998",,,,False,False,False,5,2,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"07/22/2020, 23:29:15",2020,"07/22/2020, 23:29:15",2020,4,1,1,3.6,1.0,0
,"Expose text selection through terminal WPF control API (#7121)

We've been trying to improve the copy/paste experience with the terminal
in Visual Studio. Once of our problematic scenarios is when the terminal
is connected to a remote environment and the user attempts to
copy/paste. This gets forwarded to the remote shell that copy/paste into
the remote clipboard instead of the local one. 

So we opted to add ctrl+shift+c/v to the terminal and need access to the
selected text via the terminal control

VALIDATION
Tested with Visual Studio integrated terminal",,,,False,False,False,23,0,2,2,javier.delagarza@gmail.com,noreply@github.com,"07/30/2020, 16:55:07",2020,"07/30/2020, 16:55:07",2020,3,0,3,5.0,1.2,0
,"Fixed window title not updating with tab rename (#7119)

* Fixed window title not updating with tab rename

* pass the correct title to event handler instead",,,,True,True,False,1,1,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"07/30/2020, 18:58:28",2020,"07/30/2020, 18:58:28",2020,4,1,3,2.5,1.2,0
,"Implement SetCursorColor in Terminal (#7123)

This was never hooked up to the TerminalCore implementation.

Closes #7102",,,,False,False,False,18,0,5,5,pankaj.d.bhoj@gmail.com,noreply@github.com,"07/30/2020, 22:24:59",2020,"07/30/2020, 22:24:59",2020,4,1,3,5.0,1.0,0
,"Refactor grid line renderers with support for more line types (#7107)

This is a refactoring of the grid line renderers, adjusting the line
widths to scale with the font size, and optimising the implementation to
cut down on the number of draw calls. It also extends the supported grid
line types to include true underlines and strike-through lines in the
style of the active font.

The main gist of the optimisation was to render the horizontal lines
with a single draw call, instead of a loop with lots of little strokes
joined together. In the case of the vertical lines, which still needed
to be handled in a loop, I've tried to move the majority of static
calculations outside the loop, so there is bit of optimisation there
too.

At the same time this code was updated to support a variable stroke
width for the lines, instead of having them hardcoded to 1 pixel. The
width is now calculated as a fraction of the font size (0.025 ""em""),
which is still going to be 1 pixel wide in most typical usage, but will
scale up appropriately if you zoom in far enough.

And in preparation for supporting the SGR strike-through attribute, and
true underlines, I've extended the grid line renders with options for
handling those line types as well. The offset and thickness of the lines
is obtained from the font metrics (rounded to a pixel width, with a
minimum of one pixel), so they match the style of the font.

VALIDATION

For now we're still only rendering grid lines, and only the top and
bottom lines in the case of the DirectX renderer in Windows Terminal. So
to test, I hacked in some code to force the renderer to use all the
different options, confirming that they were working in both the GDI and
DirectX renderers.

I've tested the output with a number of different fonts, comparing it
with the same text rendered in WordPad. For the most part they match
exactly, but there can be slight differences when we adjust the font
size for grid alignment. And in the case of the GDI renderer, where
we're working with pixel heights rather than points, it's difficult to
match the sizes exactly.

This is a first step towards supporting the strike-through attribute
(#6205) and true underlines (#2915).

Closes #6911",,,,False,False,True,200,66,7,7,j4_james@hotmail.com,noreply@github.com,"07/30/2020, 22:43:37",2020,"07/30/2020, 22:43:37",2020,4,1,3,4.0,3.0,0
,"Merged PR 4963673: OS-side build fixes for 09471c375 (gsl-3.1.0 update)

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 29b1a1d663d0047dc0d2125dd05f75959bca27ef

Related work items: MSFT:27866336",,,,True,True,False,6,2,4,4,duhowett@microsoft.com,duhowett@microsoft.com,"07/30/2020, 22:48:48",2020,"07/30/2020, 22:48:48",2020,4,1,1,3.7,1.2,0
,"Merged PR 4988918: Reflect OS changes for LKG10

Reverts ""Merged PR 4670666: Workaround for LKG10 internal linker error""

Related work items: MSFT:25439646, MSFT:26598503",,,,True,True,False,0,4,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"07/30/2020, 22:55:57",2020,"07/30/2020, 22:55:57",2020,4,1,1,0.0,1.2,0
,"Implement split pane with new tab button (#7117)

Allows splitting pane (with default settings) by holding down ALT and pressing the new tab button ('+')

## PR Checklist
* [X] Closes #6757 
* [X] Works here.
* [X] Manual test (below)
* [X] Is core contributor. 

## More detailed description

Pretty much exactly the code added in #5928 (all credit to @carlos-zamora), but put at the new tab button event binding

## Validation steps

Seems to work - holding ALT while pressing '+' opens a pane instead of a tab. Holding ALT while starting up terminal for the first time does not seem to affect the behaviour.",,,,False,False,False,22,1,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"07/31/2020, 01:07:47",2020,"07/31/2020, 01:07:47",2020,1,1,3,4.8,1.2,0
,"Send ENHANCED_KEY in Win32 input mode in the wpf/uwp controls (#7106)

When we added support for win32 input mode, we neglected to pass
`ENHANCED_KEY` through the two surfaces that would generate events. This
broke arrow keys in much the same way was #2397, but in a different
layer.

While I was working on the WPF control, I took a moment to refactor the
message cracking out into a helper. It's a lot easier on the eyes than
four lines of bit shifting repeated three times.

Fixes #7074",,,,True,False,True,56,26,5,5,duhowett@microsoft.com,noreply@github.com,"07/31/2020, 17:16:27",2020,"07/31/2020, 17:16:27",2020,3,1,3,3.7,1.8,0
,"Add support for the ""crossed-out"" graphic rendition attribute (#7143)

This PR adds support for the ANSI _crossed-out_ graphic rendition
attribute, which is enabled by the `SGR 9` escape sequence.

* Support for the escape sequences and storage of the attribute was
  originally added in #2917.
* Support for drawing the strikethrough effect in the grid line renderer
  was added in #7107.

Since the majority of the code required for this attribute had already
been implemented, it was just a matter of activating the
`GridLines::Strikethrough` style in the `Renderer::s_GetGridlines`
method when the `CrossedOut` attribute was set.

VALIDATION

There were already some unit tests in place in `VtRendererTest` and the
`ScreenBufferTests`, but I've also now extended the SGR tests in
`AdapterTest` to cover this attribute.

I've manually confirmed the first test case from #6205 now works as
expected in both conhost and Terminal.

Closes #6205",,,,False,False,False,18,1,2,2,j4_james@hotmail.com,noreply@github.com,"08/01/2020, 08:09:37",2020,"08/01/2020, 08:09:37",2020,2,1,3,4.7,1.0,0
,"Render the SGR ""underlined"" attribute in the style of the font (#7148)

This PR updates the rendering of the _underlined_ graphic rendition
attribute, using the style specified in the active font, instead of just
reusing the grid line at the bottom of the character cell.

* Support for drawing the correct underline effect in the grid line
  renderer was added in #7107.

There was already an `ExtendedAttributes` flag defined for the
underlined state, but I needed to update the `SetUnderlined` and
`IsUnderlined` methods in the `TextAttribute`  class to use that flag
now in place of the legacy `LVB_UNDERSCORE` attribute. This enables
underlines set via a VT sequence to be tracked separately from
`LVB_UNDERSCORE` grid lines set via the console API.

I then needed to update the `Renderer::s_GetGridlines` method to
activate the `GridLines::Underline` style when the `Underlined`
attribute was set. The `GridLines::Bottom` style is still triggered by
the `LVB_UNDERSCORE` attribute to produce the bottom grid line effect.

Validation
----------

Because this is a change from the existing behaviour, certain unit tests
that were expecting the `LVB_UNDERSCORE` to be toggled by `SGR 4` and
`SGR 24` have now had to be updated to check the `Underlined` flag
instead.

There were also some UI Automation tests that were checking for `SGR 4`
mapping to `LVB_UNDERSCORE` attribute, which I've now substituted with a
test of the `SGR 53` overline attribute mapping to
`LVB_GRID_HORIZONTAL`. These tests only work with legacy attributes, so
they can't access the extended underline state, and I thought a
replacement test that covered similar ground would be better than
dropping the tests altogether.

As far as the visual rendering is concerned, I've manually confirmed
that the VT underline sequences now draw the underline in the correct
position and style, while grid lines output via the console API are
still displayed in their original form.

Closes #2915",,,,False,False,False,25,20,7,7,j4_james@hotmail.com,noreply@github.com,"08/03/2020, 12:49:25",2020,"08/03/2020, 12:49:25",2020,3,1,3,2.8,1.5,0
,"Add a spec for per-profile tab colors (#7134)

Co-authored-by: Mike Griese <zadjii@gmail.com>

## Summary of the Pull Request

This spec is a subset of #5772, but specific to per-profile tab colors. We've had enough requests for that in the last few days that I want to pull that feature out into it's own spec, so we can get that approved and implemented in a future-proof way.

> This spec describes a way to specify tab colors in a profile in a way that will
> be forward compatible with theming the Terminal. This spec will be largely
> dedicated to the design of a single setting, but within the context of theming.
> 

## PR Checklist
* [x] Specs: #1337
* [x] References: #5772 
* [x] I work here

## Detailed Description of the Pull Request / Additional comments
_\*<sup>\*</sup><sub>\*</sub> read the spec  <sub>\*</sub><sup>\*</sup>\*_",,,,False,False,False,146,0,2,1,migrie@microsoft.com,noreply@github.com,"08/03/2020, 20:01:36",2020,"08/03/2020, 20:01:36",2020,4,3,3,5.0,2.0,0
,Research how many characters users are typing before dismissing the cmdpal,,,,False,False,False,1,0,1,1,migrie@microsoft.com,migrie@microsoft.com,"08/03/2020, 20:32:53",2020,"08/03/2020, 20:32:53",2020,4,3,3,5.0,1.0,0
,"Update TAEF to 10.57.200731005-develop (#7164)

Updates TAEF to 10.57.200731005-develop

## PR Checklist
* [x] Helps #6992 by bringing `wttlog.dll` along with the rest of TAEF.
* [x] I work here.
* [x] Automated tests in CI
* [x] No doc/schema update necessary (checked for docs in this repo)
* [x] Am core contributor.",,,,False,False,False,38,26,10,10,miniksa@microsoft.com,noreply@github.com,"08/03/2020, 20:47:02",2020,"08/03/2020, 20:47:02",2020,4,3,3,3.0,2.0,0
,"Research how many characters users are typing before dismissing the cmdpal (#7165)

Add some user research to determine what the average number of characters a user types before executing a cmdpal action.

This might need to be modified when it merges with #6732",,,,False,False,False,3,2,1,1,migrie@microsoft.com,noreply@github.com,"08/03/2020, 21:13:30",2020,"08/03/2020, 21:13:30",2020,4,3,3,3.0,1.0,0
,"Move TerminalSettings object to TermApp Project (#7163)

Move TerminalSettings object from TerminalSettings project
(Microsoft.Terminal.Settings) to TerminalApp project. `TerminalSettings`
specifically operates as a bridge that exposes any necessary information
to a TerminalControl.

Closes #7139 
Related Epic: #885
Related Spec: #6904

## PR Checklist
* [X] Closes #7139 
* [X] CLA signed
* [X] Tests ~added~/passed (no additional tests necessary)
* [X] ~Documentation updated~
* [X] ~Schema updated~

## Validation Steps Performed
Deployed Windows Terminal and opened a few new tabs.",,,,False,False,False,45,54,21,20,carlos.zamora@microsoft.com,noreply@github.com,"08/03/2020, 22:54:22",2020,"08/03/2020, 22:54:22",2020,4,1,3,2.3,2.5,0
,"Fix VT mouse capture issues in Terminal and conhost (#7166)

This pull request fixes capture and event generation in VT mouse mode
for both conhost and terminal.

Fixes #6401.

[1/3] Terminal: clamp mouse events to the viewport, don't throw them away

 gnome-terminal (at least) sends mouse events whose x/y are at the
 extreme ends of the buffer when a drag starts inside the terminal and
 then exits it.

 We would previously discard any mouse events that exited the borders of
 the viewport. Now we will keep emitting events where X/Y=0/w/h.

[2/3] conhost: clamp VT mouse to viewport, capture pointer

 This is the same as (1), but for conhost. conhost wasn't already
 capturing the pointer when VT mouse mode was in use. By capturing, we
 ensure that events that happen outside the screen still result in events
 sent to an application (like a release after a drag)

[3/3] wpf: capture the pointer when VT mouse is enabled

 This is the same as (2), but for the WPF control. Clamping is handled
 in TerminalCore in (1), so we didn't need to do it in WPF.",,,,True,False,False,60,11,3,3,duhowett@microsoft.com,noreply@github.com,"08/04/2020, 01:43:17",2020,"08/04/2020, 01:43:17",2020,1,1,3,4.2,1.8,0
,"wpf: fixup mouse wheel events from screen coords (#7168)

I found this while crawling through conhost's WindowIo. Mouse wheel
events come in in screen coordinates, unlike literally every other mouse
event.

The WPF control was doing it wrong.",,,,True,True,False,8,3,1,1,duhowett@microsoft.com,noreply@github.com,"08/04/2020, 17:38:34",2020,"08/04/2020, 17:38:34",2020,3,1,3,3.6,1.2,0
,"Fix #7064: Ignore key events without scan code (#7145)

Up until #4999 we deferred all key events to the character event handler
for which `ToUnicodeEx` returned a valid character and alternatively
those who aren't a special key combination as listed in
`TerminalInput`'s implementation.

Since #4999 we started acknowledging/handling all key events no matter
whether they're actually a known key combination. Given non-ASCII inputs
the Win32 `SendInput()` method generates certain sequences that aren't
recognizable combinations though and if they're handled by the key event
handler no follow up character event is sent containing the unicode
character.

This PR adds another condition and defers all key events without scan
code (i.e. those not representable by the current keyboard layout) to
the character event handler.

I'm absolutely not certain that this PR doesn't have a negative effect
on other kinds of inputs.

Is it common for key events to not contain a scan code? I personally
haven't seen it happen before AutoHotKey/SendInput.

Before this PR is merged it'd be nice to have a good testing plan in
place in order to ensure nothing breaks.

## Validation Steps Performed

Remapped `AltGr+8` to `»` using AutoHotKey using `<^>!8::SendInput {Raw}»`.
Ensured `»` is printed if `AltGr+8` is pressed.

Closes #7064
Closes #7120",,,,True,False,False,24,0,2,2,leonard@hecker.io,noreply@github.com,"08/06/2020, 01:03:58",2020,"08/06/2020, 01:03:58",2020,1,1,3,5.0,1.2,0
,"Add a ""shell vs terminal"" section to Niksa.md (#7202)

I've typed this up way too many times now. I'm sticking this comment in Niksa.md, and if it's ever an insufficient explanation of the differences, we can elaborate.",,,,False,False,False,19,0,1,1,migrie@microsoft.com,noreply@github.com,"08/06/2020, 21:23:54",2020,"08/06/2020, 21:23:54",2020,4,3,3,5.0,1.0,0
,"Add `closeOtherTabs`, `closeTabsAfter` actions (#7176)

## Summary of the Pull Request

Adds support for two actions, `closeOtherTabs` and `closeTabsAfter`. Both these actions accept an `index` parameter.

* `closeOtherTabs`: Close tabs other than `index`
* `closeTabsAfter`: Close tabs after `index` (This is also ""Close tabs to the right"")

## References
* This PR is being made to unblock @RahulRavishankar in #1912
## PR Checklist
* [x] I work here
* [ ] Tests added/passed
* [x] Requires documentation to be updated
* [ ] We should file an issue for ""add an `index` param to `closeTab`"" to add similar support to the close tab action
* [ ] We should file an issue for ""make the `index` param to `closeOtherTabs`, `closeTabsAfter` optional"" to make them both work on the _active_ tab when there's no `index` provided

## Validation Steps Performed
* _Verified that_ closing all tabs when I have the `index`'th tab selected _works as expected_
* _Verified that_ closing all tabs when I have a tab other than the `index`'th tab selected _works as expected_
* _Verified that_ closing tabs to the right when I have the `index`'th tab selected _works as expected_
* _Verified that_ closing tabs to the right when I have a tab other than the `index`'th tab selected _works as expected_
    - This one has one caveat: for whatever reason, if you run this action when the tab that's currently focused is _before_ the `index` param, then the tabs will expand to fill the entire width of the tab row, until you mouse over them. Probably has something to do with tabs not resizing down until there's a mouse exit event.",,,,False,False,False,210,3,12,12,migrie@microsoft.com,noreply@github.com,"08/06/2020, 21:47:50",2020,"08/06/2020, 21:47:50",2020,4,3,3,4.9,4.2,0
,"Disable MinimalCoreWin when OpenConsoleUniversalApp is false (#7203)

This fixes the build the rest of the way in VS 16.7. Something about the
way we were using the Store/Container flags caused some of our projects
to end up linking kernel32.lib only (MinimalCoreWin==KernelOnly).
The best way to solve it once and for all is to make sure MinimalCoreWin
is always set.

References 313568d0e5c.",,,,True,True,False,9,1,1,1,duhowett@microsoft.com,noreply@github.com,"08/06/2020, 23:55:07",2020,"08/06/2020, 23:55:07",2020,4,1,3,4.5,1.2,0
,"Move ICore/ControlSettings to TerminalControl project (#7167)

## Summary of the Pull Request
Move `ICoreSettings` and `IControlSettings` from the TerminalSettings project to the TerminalCore and TerminalControl projects respectively. Also entirely removes the TerminalSettings project.

The purpose of these interfaces is unchanged. `ICoreSettings` is used to instantiate a terminal. `IControlSettings` (which requires an `ICoreSettings`) is used to instantiate a UWP terminal control.

## References
Closes #7140 
Related Epic: #885 
Related Spec: #6904 

## PR Checklist
* [X] Closes #7140 
* [X] CLA signed
* [X] Tests ~added~/passed (no additional tests necessary)
* [X] ~Documentation updated~
* [X] ~Schema updated~

## Detailed Description of the Pull Request / Additional comments
A lot of the work here was having to deal with winmd files across all of these projects. The TerminalCore project now outputs a Microsoft.Terminal.TerminalControl.winmd. Some magic happens in TerminalControl.vcxproj to get this to work properly.

## Validation Steps Performed
Deployed Windows Terminal and opened a few new tabs.",,,,False,False,False,197,309,68,63,carlos.zamora@microsoft.com,noreply@github.com,"08/07/2020, 14:46:52",2020,"08/07/2020, 14:46:52",2020,3,1,3,2.1,5.0,0
,"Batch RTL runs to ensure proper draw order (#7190)

Consecutive RTL GlyphRuns are drawn from the last to the first.

References
#538, #7149, all those issues asking for RTL closed as dupes.

As @miniksa suggested in a comment on #7149 -- handle the thingy on the
render side.

If we have GlyphRuns abcdEFGh, where EFG are RTL, we draw them now in
order abcdGFEh.

This has ransom-noting, because I didn't touch the font scaling at all.
This should fix the majority of RTL issues, except it *doesn't* fix
issues with colors, because those get split in the TextBuffer phase in
the renderer I think, so they show up separately by the GlyphRun phase.",,,,True,False,False,112,75,4,3,mosheraphael@gmail.com,noreply@github.com,"08/07/2020, 19:04:53",2020,"08/07/2020, 19:04:53",2020,4,0,3,3.0,2.4,0
,"Add support for per-profile tab colors (#7162)

This PR adds support for per-profile tab colors, in accordance with
#7134. This adds a single `tabColor` property, that when set, specifies
the background color for profile's tab. This color can be overridden by
the color picker, and clearing the color with the color picker will
revert to this default color set for the tab.

* Full theming is covered in #3327 & #5772 

Validation: Played with setting this color, both on launch and via
hot-reload

Specified in #7134
Closes #1337",,,,False,False,False,408,146,24,24,migrie@microsoft.com,noreply@github.com,"08/07/2020, 23:07:42",2020,"08/07/2020, 23:07:42",2020,4,3,3,3.7,4.8,0
,"Add a `togglePaneZoom` action for zooming a pane (#6989)

This PR adds the `togglePaneZoom` action, which can be used to make a
pane expand to fill the entire contents of the window.  A tab that
contains a zoomed pane will have a magnifying glass icon prepended
to its title. Any attempts to manage panes with one zoomed will force
the zoomed pane back to normal size.

VALIDATION
Zoomed in and out a bunch. Tried closing panes while zoomed. Tried
splitting panes while zoomed. Etc.

Closes #996",,,,False,False,False,244,15,12,12,migrie@microsoft.com,noreply@github.com,"08/07/2020, 23:11:44",2020,"08/07/2020, 23:11:44",2020,4,3,3,4.7,3.5,0
,"Pass mouse button state into HandleMouse instead of asking win32 (#6765)

MouseInput was directly asking user32 about the state of the mouse buttons,
which was somewhat of a layering violation. This commit makes all callers
have to pass the mouse state in themselves.

Closes #4869",,,,False,False,False,116,54,12,12,carlos.zamora@microsoft.com,noreply@github.com,"08/07/2020, 23:21:09",2020,"08/07/2020, 23:21:09",2020,4,1,3,3.4,3.0,0
,"Add support for changing the active color scheme with an action (#6993)

## Summary of the Pull Request

Adds the `setColorScheme` action, to change the color scheme of the active control to one given by the `name` parameter. `name` is required. If `name` is not the name of a color scheme, the action does nothing.

## References

* Being done as a stepping stone to #6689 

## PR Checklist
* [x] Closes #5401
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Technically, the action is being done by changing the settings of the current `TerminalSettings` of the `TermControl`. Frankly, it should be operating on a copy of the `TermControl`'s `IControlSettings`, then updating the control's settings, or the Control should just listen for changes to it's setting's properties, and update in real time (without a manual call to `UpdateSettings`. However, both those paths are somewhere unknowable beyond #6904, so we'll just do this for now.

## Validation Steps Performed

* tested manually with a scheme that exists
* tested manually with a scheme that doesn't exist",,,,False,False,False,146,2,19,19,migrie@microsoft.com,noreply@github.com,"08/10/2020, 16:21:56",2020,"08/10/2020, 16:21:56",2020,3,3,3,4.9,3.0,0
,"Add support for the ""doubly underlined"" graphic rendition attribute (#7223)

This PR adds support for the ANSI _doubly underlined_ graphic rendition
attribute, which is enabled by the `SGR 21` escape sequence.

There was already an `ExtendedAttributes::DoublyUnderlined` flag in the
`TextAttribute` class, but I needed to add `SetDoublyUnderlined` and
`IsDoublyUnderlined` methods to access that flag, and update the
`SetGraphicsRendition` methods of the two dispatchers to set the
attribute on receipt of the `SGR 21` sequence. I also had to update the
existing `SGR 24` handler to reset _DoublyUnderlined_ in addition to
_Underlined_, since they share the same reset sequence.

For the rendering, I've added a new grid line type, which essentially
just draws an additional line with the same thickness as the regular
underline, but slightly below it - I found a gap of around 0.05 ""em""
between the lines looked best. If there isn't enough space in the cell
for that gap, the second line will be clamped to overlap the first, so
you then just get a thicker line. If there isn't even enough space below
for a thicker line, we move the offset _above_ the first line, but just
enough to make it thicker.

The only other complication was the update of the `Xterm256Engine` in
the VT renderer. As mentioned above, the two underline attributes share
the same reset sequence, so to forward that state over conpty we require
a slightly more complicated process than with most other attributes
(similar to _Bold_ and _Faint_). We first check whether either underline
attribute needs to be turned off to send the reset sequence, and then
check individually if each of them needs to be turned back on again.

## Validation Steps Performed

For testing, I've extended the existing attribute tests in
`AdapterTest`, `VTRendererTest`, and `ScreenBufferTests`, to make sure
we're covering both the _Underlined_ and _DoublyUnderlined_ attributes.

I've also manually tested the `SGR 21` sequence in conhost and Windows
Terminal, with a variety of fonts and font sizes, to make sure the
rendering was reasonably distinguishable from a single underline.

Closes #2916",,,,False,False,False,195,15,19,19,j4_james@hotmail.com,noreply@github.com,"08/10/2020, 17:06:16",2020,"08/10/2020, 17:06:16",2020,3,1,3,4.6,3.5,0
,"Allow profile.padding to be an int (or any other type :|) (#7235)

## Summary of the Pull Request

We're expecting that people have treated `padding` as an integer, and the type-based converter is too strict for that. This PR widens its scope and explicitly allows for it in the schema.

## PR Checklist
* [x] Closes #7234",,,,False,False,False,33,3,3,3,duhowett@microsoft.com,noreply@github.com,"08/10/2020, 19:48:33",2020,"08/10/2020, 19:48:33",2020,4,1,3,4.6,1.0,0
,"Resolve the default profile during defaults load, don't crash on launch (#7237)

The ""default profile as name"" feature in 1.1 broke the loading of
default settings, as we would never get to the validation phase where
the default profile string was transformed into a guid.

I moved knowledge of the ""unparsed default profile"" optional to the
consumer so that we could make sure we only attempted to deserialize it
once (and only if it was present.)

Fixes #7236.

## PR Checklist
* [x] Closes #7236",,,,True,False,False,12,9,4,4,duhowett@microsoft.com,noreply@github.com,"08/10/2020, 21:48:27",2020,"08/10/2020, 21:48:27",2020,4,1,3,2.9,1.2,0
,"Advanced Tab Switcher (#6732)

![TabSwitchingv2](https://user-images.githubusercontent.com/57155886/88237962-5505d500-cc35-11ea-8384-d91699155067.gif)

## Summary of the Pull Request
This PR adds the Advanced Tab Switcher (ATS) to Terminal. It'll work
similarly to VSCode's tab switcher. Because this implementation rides
off a lot of the Command Palette's XAML code, it'll look just like the
Command Palette, and also have support for tab title search.

## References
#3753 - ATS Spec

Closes #1502",,,,False,False,False,644,86,23,23,lelian@microsoft.com,noreply@github.com,"08/11/2020, 14:03:12",2020,"08/11/2020, 14:03:12",2020,3,0,3,4.4,4.0,0
,"Display meaningful errors when JSON types don't match (#7241)

This pull request completes (and somewhat rewrites) the JsonUtils error
handling arc. Deserialization errors, no longer represented by trees of
exceptions that must be rethrown and caught, are now transformed at
catch time into a message explaining what we expected and where we
expected it.

Instead of exception trees, a deserialization failure will result in a
single type of exception with the originating JSON object from which we
can determine the contents and location of the failure.

Because most of the error message actually comes from the JSON schema
or the actual supported types, and the other jsoncpp errors are not
localized I've made the decision to **not** localize these messages.",,,,True,True,False,194,85,6,6,duhowett@microsoft.com,noreply@github.com,"08/11/2020, 19:50:13",2020,"08/11/2020, 19:50:13",2020,4,1,3,3.5,3.6,0
,"Fix viewport moving when we've scrolled up and circled the buffer (#7247)

If you scroll up to view the scrollback, then we want the viewport to
""stay in place"", as new output comes in (see #6062). This works fine up
until the buffer circles. In this case, the mutable viewport isn't
actually moving, so we never set `updatedViewport` to true. 

This regressed in #6062
Closes #7222",,,,True,False,False,101,1,2,2,migrie@microsoft.com,noreply@github.com,"08/11/2020, 19:57:45",2020,"08/11/2020, 19:57:45",2020,4,3,3,5.0,2.4,0
,"tools: add Get-OSSConhostLog (#7250)

This script takes a range of commits and generates a commit log with the
git2git-excluded file changes filtered out.

It also replaces GitHub issue numbers with GH-XXX so as to not confuse
Git2Git or Azure DevOps.  Community contributions are tagged with CC- so
they can be detected later.

The output looks like this:

```
Carlos Zamora (2)
* Pass mouse button state into HandleMouse instead of asking win32 (GH-6765)

Dustin L. Howett (6)
* Disable MinimalCoreWin when OpenConsoleUniversalApp is false (GH-7203)

James Holderness (1)
* Add support for the ""doubly underlined"" graphic rendition attribute (CC-7223)
```

Yes, the numbers are wrong. No, it doesn't really matter.",,,,True,True,False,73,3,2,2,duhowett@microsoft.com,noreply@github.com,"08/11/2020, 20:08:03",2020,"08/11/2020, 20:08:03",2020,4,1,3,4.8,1.8,0
,"Enable partial rebuilds of the TerminalControl project again (#7248)

This regressed around the #7163 timeframe.

We're discussing this on chat currently. It might break the intellisense
on the `#include <winrt/Microsoft.Terminal.TerminalControl.h>` line in
VS 16.7, but we're not _really_ sure? Intellisense has been notoriously
flaky for us.

I'm running 16.6.5, and it works for me. @lhecker is running 16.7 and
confirmed it worked there. If the CI build passes, then this definitely
will work for 16.7.",,,,False,False,False,4,0,1,1,migrie@microsoft.com,noreply@github.com,"08/11/2020, 23:56:58",2020,"08/11/2020, 23:56:58",2020,4,3,3,5.0,1.0,0
,"Always create a new environment block before we spawn a process (#7243)

This commit ensures that we always furnish a new process with the
cleanest, most up-to-date environment variables we can. There is a minor
cost here in that WT will no longer pass environment variables that it
itself inherited to its child processes.

This could be considered a reasonable sacrifice. It will also remove
somebody else's TERM, TERM_PROGRAM and TERM_PROGRAM_VERSION from the
environment, which could be considered a win.

I validated  that GetCurrentProcessToken returns a token we're
_technically able_ to use with this API; it is roughly equivalent to
OpenProcessToken(GetCurrentProcess) in that it returns the current
active _access token_ (which is what CreateEnvironmentBlock wants.)

There's been discussion about doing a 3-way merge between WT's
environment and the new one. This will be complicated and I'd like to
scream test the 0-way merge first ;P

Related to #1125 (but it does not close it or resolve any of the other
issues it calls out.)

Fixes #7239
Fixes #7204 (""App Paths"" value creeping into wt's environment)",,,,True,False,False,37,15,5,5,duhowett@microsoft.com,noreply@github.com,"08/11/2020, 23:58:45",2020,"08/11/2020, 23:58:45",2020,4,1,3,3.8,1.8,0
,"Spec for global action IDs (#7175)

## Summary of the Pull Request

⚠️ This spec has been moved from #6902. That version was branched off the new tab menu customization, and had a terribly convoluted git history. After discussion with the team, we've decided that it's best that this spec is merged atomically _first_, and used as the basis for #5888, as opposed to the other way around.

> This document is intended to serve as an addition to the [Command Palette Spec],
> as well as the [New Tab Menu Customization Spec].
> 
> As we come to rely more on actions being a mechanism by which the user defines
> ""do something in the Terminal"", we'll want to make it even easier for users to
> re-use the actions that they've already defined, as to reduce duplicated json as
> much as possible. This spec proposes a mechanism by which actions could be
> uniquely identifiable, so that the user could refer to bindings in other
> contexts without needing to replicate an entire json blob.
> 

## PR Checklist
* [x] Specs: #6899
* [x] References: #1571, #1912, #3337, #5025, #5524, #5633
* [x] I work here

## Detailed Description of the Pull Request / Additional comments
_\*<sup>\*</sup><sub>\*</sub> read the spec  <sub>\*</sub><sup>\*</sup>\*_



[Command Palette Spec]: https://github.com/microsoft/terminal/blob/master/doc/specs/%232046%20-%20Command%20Palette.md
[New Tab Menu Customization Spec]: https://github.com/microsoft/terminal/blob/master/doc/specs/%231571%20-%20New%20Tab%20Menu%20Customization.md",,,,False,False,False,228,0,6,1,migrie@microsoft.com,noreply@github.com,"08/12/2020, 13:39:21",2020,"08/12/2020, 13:39:21",2020,3,3,3,5.0,2.5,0
,"Mini-spec for New Tab Menu Customization (#5888)

* This is a mini-spec for how I see this working

* good bot

* These were some typos

* Addd a future consideration about the command palette and commands

* Update spec to reflect discussion with Carlos

* update spec to reflect investigations in Command Palette Addenda 1

* add references to #6899, and minor bits of review feedback

* add `remainingProfiles` as a way of adding all the user's other profiles quickly to the menu as well

* clarify why we're not doing it in the profiles list

* no two commits do not contain a misspelling of separate",,,,False,False,False,300,0,2,1,migrie@microsoft.com,noreply@github.com,"08/12/2020, 13:40:38",2020,"08/12/2020, 13:40:38",2020,3,3,3,5.0,2.5,0
,"Fixed #3799: Introduce sendInput command (#7249)

## Summary of the Pull Request

This PR enables users to send arbitrary text input to the shell via a keybinding.

## PR Checklist
* [x] Closes #3799
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [x] Schema updated.
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #3799

## Detailed Description of the Pull Request / Additional comments

## Validation Steps Performed

Added the following keybindings:
```json
{ ""keys"": ""p"", ""command"": { ""action"": ""sendInput"", ""input"": ""foobar"" } },
{ ""keys"": ""q"", ""command"": { ""action"": ""sendInput"", ""input"": ""\u001b[A"" } },
```
Ensured that when pressing <kbd>P</kbd> ""foobar"" is echoed to the shell and when pressing <kbd>Q</kbd> the shell history is being navigated backwards.",,,,True,False,False,175,29,21,20,leonard@hecker.io,noreply@github.com,"08/12/2020, 13:46:53",2020,"08/12/2020, 13:46:53",2020,3,1,3,4.3,4.2,0
,"doc: Add Pankaj to our README (#7266)

We have a new team member!",,,,False,False,False,1,0,1,1,cinnamon@microsoft.com,noreply@github.com,"08/12/2020, 22:05:04",2020,"08/12/2020, 22:05:04",2020,4,1,3,5.0,1.0,0
,"Default initialize a CmdPal mode (#7263)

Whoops, members are zero initialized in Debug builds but most likely not
in Release builds So, this PR adds a couple of default values to
`_currentMode` and its associated XAML strings to make cmdpal/ats work
deterministically on first use.  I also added a default value to
`_anchorKey` just to be safe.

Closes #7254",,,,False,False,False,22,16,1,1,lelian@microsoft.com,noreply@github.com,"08/12/2020, 23:25:50",2020,"08/12/2020, 23:25:50",2020,4,0,3,2.9,1.2,0
,"Don't zoom when there's only one pane (#7273)

This is a minor fix from #6989. If there's only one pane in the
Terminal, then we'd still ""zoom"" it and give it a border, but all the
borders would be black. 

A single pane is already ""zoomed"", so it doesn't really make sense to
try and zoom if there's only one.",,,,True,True,False,6,3,3,3,migrie@microsoft.com,noreply@github.com,"08/13/2020, 19:17:58",2020,"08/13/2020, 19:17:58",2020,4,3,3,3.3,1.2,0
,"Remove unnecessary check when updating ATS indices (#7280)

Removes the if-statement in `UpdateTabIndices` that blocks all scenarios where you delete the second to last tab. This fixes the issue where the ATS gets confused about which item in the ListView is associated with which tab.

Closes #7278",,,,True,False,False,3,6,1,1,lelian@microsoft.com,noreply@github.com,"08/13/2020, 20:35:29",2020,"08/13/2020, 20:35:29",2020,4,0,3,1.7,1.2,0
,"Add support for iterable, nested commands (#6856)

## Summary of the Pull Request

This PR adds support for both _nested_ and _iterable_ commands in the Command palette.
![nested-commands-000](https://user-images.githubusercontent.com/18356694/87072916-2d991c00-c1e2-11ea-8917-a70e8b8b9803.gif)

* **Nested commands**: These are commands that include additional sub-commands. When the user selects on of these, the palette will update to only show the nested commands.
* **Iterable commands**: These are commands what allow the user to define only a single command, which is repeated once for every profile. (in the future, also repeated for color schemes, themes, etc.)

The above gif uses the following json:

```json
        {
            ""name"": ""Split Pane..."",
            ""commands"": [
                {
                    ""iterateOn"": ""profiles"",
                    ""name"": ""Split with ${profile.name}..."",
                    ""commands"": [
                        { ""command"": { ""action"": ""splitPane"", ""profile"": ""${profile.name}"", ""split"": ""automatic"" } },
                        { ""command"": { ""action"": ""splitPane"", ""profile"": ""${profile.name}"", ""split"": ""vertical"" } },
                        { ""command"": { ""action"": ""splitPane"", ""profile"": ""${profile.name}"", ""split"": ""horizontal"" } }
                    ]
                }
            ]
        },
```

## References

## PR Checklist
* [x] Closes #3994
* [x] I work here
* [x] Tests added/passed
* [ ] Requires documentation to be updated - Sure does, but we'll finish polishing this first.

## Detailed Description of the Pull Request / Additional comments

We've now gotta keep the original json for a command around, so that once we know what all the profiles will be, we can expand the commands that need it. 

We've also got to parse commands recursively, because they might have any number of child commands.

These together made the command parsing a _lot_ more complicated, but it feels good so far.

## Validation Steps Performed
* wrote a bunch of tests
* Played with it a bunch",,,,False,False,False,2140,130,25,24,migrie@microsoft.com,noreply@github.com,"08/13/2020, 21:22:46",2020,"08/13/2020, 21:22:46",2020,4,3,3,4.7,4.0,0
,"Pass the scancode in our tunneled DirectKey event (#7298)

#7145 introduced a check so that we wouldn't dispatch keys unless they
actually had a scancode. Our synthetic events actually _didn't_ have
scancodes. Not because they couldn't--just because they didn't.

Fixes #7297",,,,True,False,False,16,18,9,9,duhowett@microsoft.com,noreply@github.com,"08/14/2020, 23:44:39",2020,"08/14/2020, 23:44:39",2020,4,1,3,2.4,1.8,0
,"Make ColorScheme a WinRT object (#7238)

ColorScheme is now a WinRT object.

All of the JSON stuff can't be exposed via the idl. So the plan here is
that we'll have the TerminalSettingsModel project handle all of the
serialization when it's moved over. These functions will be exposed off
of the `implementation` namespace, not projected namespace.

References #7141 - ColorScheme is a settings object
References #885 - this new settings object will be moved to a new
TerminalSettingsModel project

## Validation Steps Performed
- [x] Tests passed
- [x] Deployment succeeded",,,,False,False,False,186,137,15,15,carlos.zamora@microsoft.com,noreply@github.com,"08/15/2020, 00:54:35",2020,"08/15/2020, 00:54:35",2020,1,1,3,2.9,3.5,0
,"Add copyFormatting keybinding arg and array support (#6004)

Adds array support for the existing `copyFormatting` global setting.
This allows users to define which formats they would specifically like
to be copied.

A boolean value is still accepted and is translated to the following:
- `false` --> `""none""` or `[]`
- `true` --> `""all""` or `[""html"", ""rtf""]`

This also adds `copyFormatting` as a keybinding arg for `copy`. As with
the global setting, a boolean value and array value is accepted.

CopyFormat is a WinRT enum where each accepted format is a flag.
Currently accepted formats include `html`, and `rtf`. A boolean value is
accepted and converted. `true` is a conjunction of all the formats.
`false` only includes plain text.

For the global setting, `null` is not accepted. We already have a
default value from before so no worries there.

For the keybinding arg, `null` (the default value) means that we just do
what the global arg says to do. Overall, the `copyFormatting` keybinding
arg is an override of the global setting **when using that keybinding**.

References #5212 - Spec for formatted copying
References #2690 - disable html copy

Validated behavior with every combination of values below:
- `copyFormatting` global: { `true`, `false`, `[]`, `[""html""]` }
- `copyFormatting` copy arg:
  { `null`, `true`, `false`, `[]`, `[, ""html""]`}

Closes #4191
Closes #5262",,,,False,False,False,174,33,14,14,carlos.zamora@microsoft.com,noreply@github.com,"08/15/2020, 01:02:24",2020,"08/15/2020, 01:02:24",2020,1,1,3,4.2,4.2,0
,"Add initial support for VT DCS sequences (#6328)

As the title suggests, this commit adds initial support for the VT DCS
sequences. The parameters are parsed but not yet used. The pass through
data is yet to be handled. This effectively fixes #120 by making Sixel
graphics sequences *ignored* instead of printed.

* https://vt100.net/docs/vt510-rm/chapter4.html
* https://vt100.net/emu/dec_ansi_parser

Tests added.

References #448
Closes #120",,,,True,False,False,678,44,5,5,skyline75489@outlook.com,noreply@github.com,"08/17/2020, 17:30:07",2020,"08/17/2020, 17:30:07",2020,3,1,3,4.7,3.6,0
,"Disable parallel build (again) and keep TerminalApp PCHs (#7322)

The build now builds every project multiple times, so I figure, why not
try to fix it.",,,,True,True,False,2,2,2,2,duhowett@microsoft.com,noreply@github.com,"08/18/2020, 00:01:50",2020,"08/18/2020, 00:01:50",2020,1,1,3,2.5,1.2,0
,"Update colour picker buttons with round edges. (#7305)

![RoundedButtons](https://user-images.githubusercontent.com/41475767/90323225-39e96500-df56-11ea-9219-d386f74fc1b4.png)

## Validation Steps Performed
Deployed locally and verified that the colour picker's button has round edges.

Closes #7142",,,,False,False,False,2,2,1,1,41475767+michelletanpy@users.noreply.github.com,noreply@github.com,"08/18/2020, 00:21:11",2020,"08/18/2020, 00:21:11",2020,1,0,3,2.5,1.0,0
,"Add startOnUserLogin & fullscreen launchMode to schema (#7300)

Fixes #7294

Co-authored-by: Mike Griese <migrie@microsoft.com>",,,,True,False,False,7,1,1,1,jcabot21@gmail.com,noreply@github.com,"08/18/2020, 00:24:00",2020,"08/18/2020, 00:24:00",2020,1,0,3,4.4,1.2,0
,"Compensate for new warnings and STL changes in VS 16.7 (#7319)

New warnings were added in VS 16.7 and `std::map::erase` is now `noexcept`.
Update our code to be compatible with the new enforcement.

## PR Checklist
* [x] Closes broken audit in main after Agents updated over the weekend.
* [x] I work here.
* [x] Audit mode passes now
* [x] Am core contributor.

## Validation Steps Performed
* [x] Ran audit mode locally",,,,False,False,False,63,15,12,12,miniksa@microsoft.com,noreply@github.com,"08/18/2020, 16:59:31",2020,"08/18/2020, 16:59:31",2020,3,3,3,4.0,2.5,0
,"Add menu (also known as ""app"") as a bindable key (#7328)

- Add MENU key with ""menu"" ""app"" as key bindings.
- Updated profiles.schema.json and documentation.

## Validation Steps Performed
Ran tests locally.
Tested out the new key binding.
```{ ""command"": ""openNewTabDropdown"", ""keys"": ""app"" }```

Closes #7144",,,,False,False,False,5,3,3,3,41475767+michelletanpy@users.noreply.github.com,noreply@github.com,"08/18/2020, 17:21:50",2020,"08/18/2020, 17:21:50",2020,3,0,3,3.1,1.0,0
,"Add til::static_map, a constexpr key-value store (#7323)

This is based on (cribbed almost directly from) code written by the
inimitable @StephanTLavavej on one of our mailing lists.

This is a nice generic version of the approach used in
JsonUtils::EnumMapper and CodepointWidthDetector: a static array of
key-value pairs that we binary-search at runtime (or at compile time, as
the case may be.)

Keys are not required to be sorted, as we're taking advantage of
constexpr std::sort (VS 16.6+) to get the compiler to do it for us. How
cool is that?

static_map presents an operator[] or at much like
std::map/std::unordered_map does.

I've added some tests, but they're practically fully-solveable at compile
time so they pretty much act like `VERIFY_IS_TRUE(true)`.",,,,False,False,False,174,0,4,4,duhowett@microsoft.com,noreply@github.com,"08/18/2020, 18:05:14",2020,"08/18/2020, 18:05:14",2020,4,1,3,5.0,2.0,0
,Add Scoop (unofficial) installation method (#7303),,,,False,False,False,16,0,1,1,46838874+rashil2000@users.noreply.github.com,noreply@github.com,"08/18/2020, 18:08:22",2020,"08/18/2020, 18:08:22",2020,4,0,3,5.0,1.0,0
,"fix spell check, how did I miss that.",,,,True,True,False,1,0,1,1,miniksa@microsoft.com,miniksa@microsoft.com,"08/18/2020, 18:14:38",2020,"08/18/2020, 18:14:38",2020,4,3,3,5.0,1.2,0
,"Helix Testing (#6992)

Use the Helix testing orchestration framework to run our Terminal LocalTests and Console Host UIA tests.

## References
#### Creates the following new issues:
- #7281 - re-enable local tests that were disabled to turn on Helix
- #7282 - re-enable UIA tests that were disabled to turn on Helix
- #7286 - investigate and implement appropriate compromise solution to how Skipped is handled by MUX Helix scripts

#### Consumes from:
- #7164 - The update to TAEF includes wttlog.dll. The WTT logs are what MUX's Helix scripts use to track the run state, convert to XUnit format, and notify both Helix and AzDO of what's going on.

#### Produces for:
- #671 - Making Terminal UIA tests is now possible
- #6963 - MUX's Helix scripts are already ready to capture PGO data on the Helix machines as certain tests run. Presuming we can author some reasonable scenarios, turning on the Helix environment gets us a good way toward automated PGO.

#### Related:
- #4490 - We lost the AzDO integration of our test data when I moved from the TAEF/VSTest adapter directly back to TE. Thanks to the WTTLog + Helix conversion scripts to XUnit + new upload phase, we have it back!

## PR Checklist
* [x] Closes #3838
* [x] I work here.
* [x] Literally adds tests.
* [ ] Should I update a testing doc in this repo?
* [x] Am core contributor. Hear me roar.
* [ ] Correct spell-checking the right way before merge.

## Detailed Description of the Pull Request / Additional comments
We have had two classes of tests that don't work in our usual build-machine testing environment:
1. Tests that require interactive UI automation or input injection (a.k.a. require a logged in user)
2. Tests that require the entire Windows Terminal to stand up (because our Xaml Islands dependency requires 1903 or later and the Windows Server instance for the build is based on 1809.)

The Helix testing environment solves both of these and is brought to us by our friends over in https://github.com/microsoft/microsoft-ui-xaml.

This PR takes a large portion of scripts and pipeline configuration steps from the Microsoft-UI-XAML repository and adjusts them for Terminal needs.
You can see the source of most of the files in either https://github.com/microsoft/microsoft-ui-xaml/tree/master/build/Helix or https://github.com/microsoft/microsoft-ui-xaml/tree/master/build/AzurePipelinesTemplates

Some of the modifications in the files include (but are not limited to) reasons like:
- Our test binaries are named differently than MUX's test binaries
- We don't need certain types of testing that MUX does.
- We use C++ and C# tests while MUX was using only C# tests (so the naming pattern and some of the parsing of those names is different e.g. :: separators in C++ and . separators in C#)
- Our pipeline phases work a bit differently than MUX and/or we need significantly fewer pieces to the testing matrix (like we don't test a wide variety of OS versions).

The build now runs in a few stages:
1. The usual build and run of unit tests/feature tests, packaging verification, and whatnot. This phase now also picks up and packs anything required for running tests in Helix into an artifact. (It also unifies the artifact name between the things Helix needs and the existing build outputs into the single `drop` artifact to make life a little easier.)
2. The Helix preparation build runs that picks up those artifacts, generates all the scripts required for Helix to understand the test modules/functions from our existing TAEF tests, packs it all up, and queues it on the Helix pool.
3. Helix generates a VM for our testing environment and runs all the TAEF tests that require it. The orchestrator at helix.dot.net watches over this and tracks the success/fail and progress of each module and function. The scripts from our MUX friends handle installing dependencies, making the system quiet for better reliability, detecting flaky tests and rerunning them, and coordinating all the log uploads (including for the subruns of tests that are re-run.)
4. A final build phase is run to look through the results with the Helix API and clean up the marking of tests that are flaky, link all the screenshots and console output logs into the AzDO tests panel, and other such niceities.

We are set to run Helix tests on the Feature test policy of only x64 for now. 

Additionally, because the set up of the Helix VMs takes so long, we are *NOT* running these in PR trigger right now as I believe we all very much value our 15ish minute PR turnaround (and the VM takes another 15 minutes to just get going for whatever reason.) For now, they will only run as a rolling build on master after PRs are merged. We should still know when there's an issue within about an hour of something merging and multiple PRs merging fast will be done on the rolling build as a batch run (not one per).

In addition to setting up the entire Helix testing pipeline for the tests that require it, I've preserved our classic way of running unit and feature tests (that don't require an elaborate environment) directly on the build machines. But with one bonus feature... They now use some of the scripts from MUX to transform their log data and report it to AzDO so it shows up beautifully in the build report. (We used to have this before I removed the MStest/VStest wrapper for performance reasons, but now we can have reporting AND performance!) See https://dev.azure.com/ms/terminal/_build/results?buildId=101654&view=ms.vss-test-web.build-test-results-tab for an example. 

I explored running all of the tests on Helix but.... the Helix setup time is long and the resources are more expensive. I felt it was better to preserve the ""quick signal"" by continuing to run these directly on the build machine (and skipping the more expensive/slow Helix setup if they fail.) It also works well with the split between PR builds not running Helix and the rolling build running Helix. PR builds will get a good chunk of tests for a quick turn around and the rolling build will finish the more thorough job a bit more slowly.

## Validation Steps Performed
- [x] Ran the updated pipelines with Pull Request configuration ensuring that Helix tests don't run in the usual CI
- [x] Ran with simulation of the rolling build to ensure that the tests now running in Helix will pass. All failures marked for follow on in reference issues.",,,,True,True,False,2299,25,40,39,miniksa@microsoft.com,noreply@github.com,"08/18/2020, 18:23:24",2020,"08/18/2020, 18:23:24",2020,4,3,3,5.0,5.0,0
,"Refactor VT control sequence identification (#7304)

This PR changes the way VT control sequences are identified and
dispatched, to be more efficient and easier to extend. Instead of
parsing the intermediate characters into a vector, and then having to
identify a sequence using both that vector and the final char, we now
use just a single `uint64_t` value as the identifier.

The way the identifier is constructed is by taking the private parameter
prefix, each of the intermediate characters, and then the final
character, and shifting them into a 64-bit integer one byte at a time,
in reverse order. For example, the `DECTLTC` control has a private
parameter prefix of `?`, one intermediate of `'`, and a final character
of `s`. The ASCII values of those characters are `0x3F`, `0x27`, and
`0x73` respectively, and reversing them gets you 0x73273F, so that would
then be the identifier for the control.

The reason for storing them in reverse order, is because sometimes we
need to look at the first intermediate to determine the operation, and
treat the rest of the sequence as a kind of sub-identifier (the
character set designation sequences are one example of this). When in
reverse order, this can easily be achieved by masking off the low byte
to get the first intermediate, and then shifting the value right by 8
bits to get a new identifier with the rest of the sequence.

With 64 bits we have enough space for a private prefix, six
intermediates, and the final char, which is way more than we should ever
need (the _DEC STD 070_ specification recommends supporting at least
three intermediates, but in practice we're unlikely to see more than
two).

With this new way of identifying controls, it should now be possible for
every action code to be unique (for the most part). So I've also used
this PR to clean up the action codes a bit, splitting the codes for the
escape sequences from the control sequences, and sorting them into
alphabetical order (which also does a reasonable job of clustering
associated controls).

## Validation Steps Performed

I think the existing unit tests should be good enough to confirm that
all sequences are still being dispatched correctly. However, I've also
manually tested a number of sequences to make sure they were still
working as expected, in particular those that used intermediates, since
they were the most affected by the dispatch code refactoring.

Since these changes also affected the input state machine, I've done
some manual testing of the conpty keyboard handling (both with and
without the new Win32 input mode enabled) to make sure the keyboard VT
sequences were processed correctly. I've also manually tested the
various VT mouse modes in Vttest to confirm that they were still working
correctly too.

Closes #7276",,,,False,False,True,721,901,17,17,j4_james@hotmail.com,noreply@github.com,"08/18/2020, 18:57:52",2020,"08/18/2020, 18:57:52",2020,4,1,3,2.8,4.8,0
,"Add some polish to nested commands in the command palette (#7299)

## Summary of the Pull Request

![cmdpal-nested-command-polish](https://user-images.githubusercontent.com/18356694/90293616-1f29ca00-de4a-11ea-8942-00d255de929a.gif)


* Add a chevron for nested commands
* Add the text of the parent command when entering a child command

## References

## PR Checklist
* [x] Closes #7265
* [x] I work here
* [n/a] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed
_look at that gif_",,,,False,False,False,158,34,12,9,migrie@microsoft.com,noreply@github.com,"08/18/2020, 19:32:17",2020,"08/18/2020, 19:32:17",2020,4,3,3,3.9,3.0,0
,Fix broken localtests (#7333),,,,True,True,False,306,323,2,2,migrie@microsoft.com,noreply@github.com,"08/18/2020, 21:50:02",2020,"08/18/2020, 21:50:02",2020,4,3,3,2.4,3.6,0
,"Expose selection background and alpha through the WPF control (#7339)

Adds the ability to set the selection background opacity when setting the
selection background. This also exposes the selection background and alpha
through the terminal WPF container.",,,,False,False,False,18,4,5,5,javier.delagarza@gmail.com,noreply@github.com,"08/18/2020, 23:11:41",2020,"08/18/2020, 23:11:41",2020,4,0,3,4.1,1.0,0
,"Add support for commands iterable on color schemes (#7329)

## Summary of the Pull Request

![cmdpal-set-color-scheme](https://user-images.githubusercontent.com/18356694/90517094-8eddd480-e12a-11ea-8be4-8b6782d8d88c.gif)

Allows for creating commands that iterate over the user's color schemes. Also adds a top-level nested command to `defaults.json` that allows the user to select a color scheme (pictured above). I'm not sure there are really any other use cases that make sense, but it _really_ makes sense for this one.

## References
* #5400 - cmdpal megathread
* made possible by #6856, _and support from viewers like you._
* All this is being done in pursuit of #6689 

## PR Checklist
* [x] Closes wait what? I could have swore there was an issue for this one...
* [x] I work here
* [x] Tests added/passed
* [ ] Requires documentation to be updated - okay maybe now I'll write some docs

## Detailed Description of the Pull Request / Additional comments

Most of the hard work for this was already done in #6856. This is just another thing to iterate over.

## Validation Steps Performed
* Played with this default command. It works great.
* Added tests.",,,,False,False,False,258,43,9,9,migrie@microsoft.com,noreply@github.com,"08/19/2020, 17:33:19",2020,"08/19/2020, 17:33:19",2020,3,3,3,4.3,3.6,0
,"Set ProcessTestResults job to use conditions specified in parent (#7347)

Activating a template doesn't actually process conditions. Only jobs, stages, and tasks can process a condition. So specify the full condition in the parent template call as a parameter and ask the child job (who can actually evaluate the condition) to use that parameter to determine if it should run.",,,,False,False,False,3,2,2,2,miniksa@microsoft.com,noreply@github.com,"08/19/2020, 19:31:03",2020,"08/19/2020, 19:31:03",2020,4,3,3,3.0,1.0,0
,"Add `togglePaneZoom` to schema, defaults, and sort action names (#7346)

#6989 forgot to add `togglePaneZoom` to the schema, so this does that. 

WHILE I'M HERE:
* The action names in the schema and the actual source were both in _random_ order, so I sorted them alphabetically.
* I also added an unbound `togglePaneZoom` command to defaults.json, so users can use that command from the cmdpal w/o binding it manually.",,,,False,False,False,104,117,3,3,migrie@microsoft.com,noreply@github.com,"08/20/2020, 01:02:10",2020,"08/20/2020, 01:02:10",2020,1,3,3,2.4,3.0,0
,"Replace ""bindings"" with ""actions"" (#7332)

In #6532, we thought it would be a good idea to add ""bindings"" as an
overload for ""keybindings"", as we were no longer going to use the
keybindings array for just keybindings. We were going to add commands.
So we started secretly treating `""bindings""` the same as
`""keybindings""`.

Then, in #7175, we discussed using ""actions"" as the key for the list of
commands/keybindings/global actions, instead of using ""bindings"". We're
going to be using this array as the global list of all actions, so it
makes sense to just call it `""actions""`. 

This PR renames ""bindings"" to ""actions"". Fortunately, we never
documented the ""bindings"" overload in the first place, so we can get
away with this safely, and preferably before we ship ""bindings"" for too
long.

References #6899",,,,False,False,False,18,18,4,4,migrie@microsoft.com,noreply@github.com,"08/20/2020, 01:02:42",2020,"08/20/2020, 01:02:42",2020,1,3,3,2.5,1.0,0
,"Make sure we check to profile shortcuts with an index >9 (#7344)

Closes #7325",,,,False,False,False,15,18,1,1,41475767+michelletanpy@users.noreply.github.com,noreply@github.com,"08/20/2020, 21:58:13",2020,"08/20/2020, 21:58:13",2020,4,0,3,2.3,1.0,0
,"Fix intellisense errors by moving TerminalApp projects around (#6897)

The easiest fix was actually just moving all the source files from
`TerminalApp` to `TerminalApp/lib`, where the appropriate `pch.h`
actually resides.

Closes #6866",,,,True,False,False,278,270,23,22,migrie@microsoft.com,noreply@github.com,"08/20/2020, 22:44:37",2020,"08/20/2020, 22:44:37",2020,4,3,3,2.6,4.8,0
,"Add a pair of nested, iterable default commands (#7348)

## Summary of the Pull Request
![cmdpal-default-nested-commands](https://user-images.githubusercontent.com/18356694/90684483-e6b13400-e22d-11ea-8ca6-fe90ca8d9e82.gif)

Adds a pair of top-level commands that both have nested, iterable sub-commands. The ""New Tab..."" command has one child for each profile, and will open a new tab for that profile. The ""Split Pane..."" command similarly has a nested command for each profile, and also has a nested command for split auto/horizontal/vertical.

## References

* megathread: #5400 
* Would look better with icons from  #6644

## PR Checklist
* [x] Closes #7174 
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,42,0,2,2,migrie@microsoft.com,noreply@github.com,"08/21/2020, 14:54:43",2020,"08/21/2020, 14:54:43",2020,3,3,3,5.0,1.2,0
,"Provide global setting to use ATS for nextTab and prevTab (#7321)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This PR splits the anchored and unanchored tab switcher into two. The anchored tab switcher is now baked into `nextTab`/`prevTab`, and the unanchored tab switcher command is just named `tabSearch`. `tabSearch` takes no arguments. To reflect this distinction, `CommandPalette.cpp` now refers to one as `TabSwitchMode` and the other as `TabSearchMode`.

I've added a global setting named `useTabSwitcher` (name up for debate) that makes the Terminal use the anchored tab switcher experience for `nextTab` and `prevTab`. 

I've also given the control the ability to detect <kbd>Alt</kbd> KeyUp events and to dispatch keybinding events. By listening for keybindings, the ATS can react to `nextTab`/`prevTab` invocations for navigation in addition to listening for <kbd>tab</kbd> and the arrow keys.

Closes #7178 
<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] CLA signed.
* [x] Documentation updates: microsoftdocs/terminal#107
* [x] Schema updated.",,,,True,False,False,171,154,19,19,lelian@microsoft.com,noreply@github.com,"08/21/2020, 15:39:40",2020,"08/21/2020, 15:39:40",2020,3,0,3,2.6,4.2,0
,"Add icons to commands in the Command Palette (#7368)

## Summary of the Pull Request

![cmdpal-icons](https://user-images.githubusercontent.com/18356694/90916410-97dada00-e3a6-11ea-9fb0-755938a68a05.gif)

Adds support for setting a command's `icon`. This supports a couple different scenarios:
* setting a path to an image
* on `""iterateOn"": ""profiles""` commands, setting the icon to `${profile.icon}` (to use the profile's icon)
* setting the icon to a symbol from [Segoe MDL2 Assets](https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font)
* setting the icon to an emoji
* setting the icon to a character (what is an emoji other than a character, after all?)

## References
* Big s/o to @leonMSFT in #6732, who really did all the hard work here.

## PR Checklist
* [x] Closes #6644 
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

Importantly, the creation of these icons must occur on the UI thread. That's why it's done in a ""load the path from json"", then ""get the actual IconSource"" structure.

## Validation Steps Performed
see the gif",,,,False,False,False,109,31,5,5,migrie@microsoft.com,noreply@github.com,"08/21/2020, 18:08:02",2020,"08/21/2020, 18:08:02",2020,4,3,3,3.9,2.0,0
,"Compensate for VS 16.7, part 2 (#7383)

This is just the `noexcept` part of #7319, because the CI apparently got updated overnight.",,,,False,False,False,2,7,2,2,migrie@microsoft.com,noreply@github.com,"08/24/2020, 21:21:53",2020,"08/24/2020, 21:21:53",2020,4,3,3,1.1,1.0,0
,"Add support for Commandline Mode  to the CmdPal (#7293)

## Summary of the Pull Request

Adds support for ""commandline mode"" to the command palette. 
![cmdpal-commandline-mode](https://user-images.githubusercontent.com/18356694/90263053-bbd17500-de14-11ea-8726-fee48fec5888.gif)


This allows the user to start typing a `wt.exe` commandline directly in the command palette, to run that commandline directly in the current window. This allows the user input something like `> nt -p Ubuntu ; sp -p ssh` and open up a new tab and split it _in the current window_. 

## References

* cmdpal megathread: #5400
* Kinda related to #4472
* built with the `wt` action from #6537

## PR Checklist
* [x] Closes #6677
* [x] I work here
* [ ] Tests added/passed
* [ ] Requires documentation to be updated - sure does, when the cmdpal docs are written in the first place :P

## Validation Steps Performed

Tested manually",,,,False,False,False,155,11,3,3,migrie@microsoft.com,noreply@github.com,"08/24/2020, 21:39:07",2020,"08/24/2020, 21:39:07",2020,4,3,3,4.7,2.0,0
,"Bind the command palette by default (#7384)

Bind the command palette to Ctrl+Shift+P by default, to enable it for all users in v1.3",,,,False,False,False,2,0,2,2,migrie@microsoft.com,noreply@github.com,"08/24/2020, 22:44:36",2020,"08/24/2020, 22:44:36",2020,4,3,3,5.0,1.2,0
,"TermControl: set the scrollbar jump distance to one screenful (#7385)

Most applications with scrollable content seem to define the ""large
jump"" distance as about a screenful of content. You can see this in long
pages in Settings and documents in Notepad.

We just weren't configuring ScrollBar here.

Fixes #7367",,,,True,False,False,2,0,1,1,duhowett@microsoft.com,noreply@github.com,"08/24/2020, 22:54:02",2020,"08/24/2020, 22:54:02",2020,4,1,3,5.0,1.2,0
,"version: bump to 1.4 on master

Signed-off-by: Dustin Howett <duhowett@microsoft.com>",,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"08/24/2020, 23:16:10",2020,"08/24/2020, 23:16:10",2020,4,1,1,2.5,1.0,0
,"schema: swap `closeTabsAfter` and `closeOtherTabs` (#7386)

The descriptions were flipped, so I unflipped them.",,,,False,False,False,2,2,1,1,cinnamon@microsoft.com,noreply@github.com,"08/24/2020, 23:28:11",2020,"08/24/2020, 23:28:11",2020,4,1,3,2.5,1.0,0
,"Update clang-format to 10.0 (#7389)

This commit removes our local copy of clang-format 8 and replaces it
with a newly-built nuget package containing clang-format 10.

This resolves the inconsistency between our version of clang-format and
the one shipped in Visual Studio.

A couple minor format changes were either required or erroneously forced
upon us--chief among them is a redistribution of `*`s around SAL
annotations in inline class members of COM classes. Don't ask why; I
couldn't figure it out.

We had some aspirational goals for our formatting, which were left in
but commented out. Enabling them changes our format a little more than
I'm comfortable with, so I uncommented them and locked them to the
format style we've been using for the past year. We may not love it, but
our aspirations may not matter here any longer. Consistent formatting is
better than perfect formatting.",,,,False,False,False,32,20,9,8,duhowett@microsoft.com,noreply@github.com,"08/25/2020, 17:15:43",2020,"08/25/2020, 17:15:43",2020,3,1,3,3.1,2.0,0
,"Clear the last error before calling Mb2Wc in ConvertToW (#7391)

When the console functional tests are running on OneCoreUAP, the
newly-introduced (65bd4e327, #4309) FillOutputCharacterA tests will
actually fail because of radio interference on the return value of GLE.

Fixes MSFT-28163465",,,,True,True,False,7,0,1,1,duhowett@microsoft.com,noreply@github.com,"08/25/2020, 17:17:21",2020,"08/25/2020, 17:17:21",2020,3,1,3,5.0,1.2,0
,"Fixed #7372: Setting ""altGrAliasing"" to ""false"" disables AltGr (#7400)

## Summary of the Pull Request

Previously, if `altGrAliasing` was disabled, all `Ctrl+Alt` combinations were considered to be aliases of `AltGr` including `AltGr` itself and thus considered as key and not character events. But `AltGr` should not be treated as an alias of itself of course, as that prevents one from entering `AltGr` combinations entirely.

## PR Checklist
* [x] Closes #7372
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed

* Activate a German keyboard layout
* Run `showkey -a` in WSL
* **Ensure** that `AltGr+Q` produces `@`
* **Ensure** that `Ctrl+Alt+Q` produces `@`
* Disable `altGrAliasing`
* **Ensure** that `AltGr+Q` produces `@`
* **Ensure** that `Ctrl+Alt+Q` produces `^[^Q`",,,,True,False,False,1,1,1,1,leonard@hecker.io,noreply@github.com,"08/25/2020, 18:04:23",2020,"08/25/2020, 18:04:23",2020,4,1,3,2.5,1.2,0
,"Fix environment block creation (#7401)

This fixes a regression in environment variable loading introduced as part
of the new environment block creation that prevents some system-defined,
volatile environment variables from being defined.

## References
https://github.com/microsoft/terminal/pull/7243#discussion_r476603599

## Validation Steps Performed
Manually verified locally.

Closes #7399",,,,True,False,False,3,1,1,1,nathpete@microsoft.com,noreply@github.com,"08/25/2020, 18:16:48",2020,"08/25/2020, 18:16:48",2020,4,0,3,3.7,1.2,0
,"Make index in closeOtherTabs and closeTabsAfter optional (#7390)

## Summary of the Pull Request
The `index` action argument is now optional for `closeOtherTabs` and `closeTabsAfter`. When `index` is not defined, `index` is set to the focused tab's index.

Also, adds the non-index version of these actions to defaults.json.

## PR Checklist
* [X] Closes #7181 
* [X] CLA signed
* [X] Tests passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [X] Schema updated.

## Validation Steps Performed
Opened 4 tabs and ran closeOtherTabs/closeTabsAfter from command palette.",,,,False,False,False,75,27,8,8,carlos.zamora@microsoft.com,noreply@github.com,"08/25/2020, 19:25:25",2020,"08/25/2020, 19:25:25",2020,4,1,3,3.7,3.0,0
,Update Cascadia Code to 2008.25 (#7403),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"08/25/2020, 21:50:51",2020,"08/25/2020, 21:50:51",2020,4,1,3,2.5,1.0,0
,"Fix schema for `setColorScheme` (#7433)

`setColorScheme` should require `colorScheme` rather than `name`",,,,True,True,False,1,1,1,1,cinnamon@microsoft.com,noreply@github.com,"08/27/2020, 17:11:05",2020,"08/27/2020, 17:11:05",2020,3,1,3,2.5,1.2,0
,ci: run CI and triggered builds on feature/*,,,,False,False,False,2,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"08/28/2020, 00:29:14",2020,"08/28/2020, 00:29:14",2020,1,1,1,5.0,1.0,0
,"Make Profile a WinRT object (#7283)

Profile is now a WinRT object in the TerminalApp project.

As with ColorScheme, all of the serialization logic is not exposed via
the idl. TerminalSetingsModel will handle it when it's all moved over.

I removed the ""Get"" and ""Set"" prefixes from all of the Profile
functions. It just makes more sense to use the `GETSET_PROPERTY` macro
to do most of the work for us.

`CloseOnExitMode` is now an enum off of the Profile.idl.

`std::optional<wstring>` got converted to `hstring` (as opposed to
`IReference<hstring>`). `IReference<hstring>` is not valid to MIDL.

## References
#7141 - Profile is a settings object
#885 - this new settings object will be moved to a new TerminalSettingsModel project

## Validation Steps Performed
- [x] Tests passed
- [x] Deployment succeeded

Closes #7435",,,,False,False,False,1158,1223,33,32,carlos.zamora@microsoft.com,noreply@github.com,"08/28/2020, 01:09:22",2020,"08/28/2020, 01:09:22",2020,1,1,3,2.4,5.0,0
,"Make GlobalAppSettings a WinRT object (#7349)

GlobalAppSettings is now a WinRT object in the TerminalApp project.

## References
#7141 - GlobalAppSettings is a settings object
#885 - this new settings object will be moved to a new TerminalSettingsModel project

## PR Checklist
* [x] Tests passed

## Detailed Description of the Pull Request / Additional comments
This one was probably the easiest thus far.

The only weird thing is how we handle InitialPosition. Today, we lose a
little bit of fidelity when we convert from LaunchPosition (int) -->
Point (float) --> RECT (long). The current change converts
LaunchPosition (optional<long>) --> InitialPosition (long) --> RECT
(long).

NOTE: Though I could use LaunchPosition to go directly from TermApp to
AppHost, I decided to introduce InitialPosition because LaunchPosition
will be a part of TerminalSettingsModel soon.

## Validation Steps Performed
- [x] Tests passed
- [x] Deployment succeeded",,,,False,False,False,339,310,21,21,carlos.zamora@microsoft.com,noreply@github.com,"08/28/2020, 03:49:16",2020,"08/28/2020, 03:49:16",2020,1,1,3,2.6,4.0,0
,"OSC 8 support for conhost and terminal (#7251)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Conhost can now support OSC8 sequences (as specified [here](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)). Terminal also supports those sequences and additionally hyperlinks can be opened by Ctrl+LeftClicking on them. 

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#204 

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #204 
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Added support to:

- parse OSC8 sequences and extract URIs from them (conhost and terminal)
- add hyperlink uri data to textbuffer/screeninformation, associated with a hyperlink id (conhost and terminal)
- attach hyperlink ids to text to allow for uri extraction from the textbuffer/screeninformation (conhost and terminal)
- process ctrl+leftclick to open a hyperlink in the clicked region if present

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Open up a PowerShell tab and type
```PowerShell
${ESC}=[char]27
Write-Host ""${ESC}]8;;https://github.com/microsoft/terminal${ESC}\This is a link!${ESC}]8;;${ESC}\""
```
Ctrl+LeftClick on the link correctly brings you to the terminal page on github

![hyperlink](https://user-images.githubusercontent.com/26824113/89953536-45a6f580-dbfd-11ea-8e0d-8a3cd25c634a.gif)",,,,True,False,False,1040,15,48,48,pankaj.d.bhoj@gmail.com,noreply@github.com,"09/03/2020, 17:52:39",2020,"09/03/2020, 17:52:39",2020,3,1,3,4.9,5.0,0
,"Prevent crash when attempting to select an out-of-bounds UIA text range (#7504)

When attempting to select a text range from a different text buffer (such as a standard text range when in alt mode), conhost crashes. This PR checks for this case and returns `E_FAIL` instead, preventing this crash.

## PR Checklist
* [x] Closes unfiled crash issue
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Passes manual test below
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

## Validation Steps Performed
Ran the following lines in the NVDA Python console (NVDA+control+z) before and after this PR, and observed that Conhost no longer crashes after the change:

``` Python console
>>> # SSH to a remote Linux system
>>> ti=nav.makeTextInfo(""caret"")
>>> ti.move(""line"", -2)
-2
>>> # Switch away from the NVDA Python console, and run Nano in conhost. Then:
>>> ti.updateSelection() # Calls select() on the underlying UIA text range
Traceback (most recent call last):
  File ""<console>"", line 1, in <module>
  File ""NVDAObjects\UIA\__init__.pyc"", line 790, in updateSelection
  File ""comtypesMonkeyPatches.pyc"", line 26, in __call__
_ctypes.COMError: (-2147220991, 'An event was unable to invoke any of the subscribers', (None, None, None, 0, None))
```",,,,False,False,False,6,1,1,1,codeofdusk@gmail.com,noreply@github.com,"09/03/2020, 18:06:43",2020,"09/03/2020, 18:06:43",2020,4,0,3,4.3,1.2,0
,"Merged PR 5131018: [Git2Git] Migrate OS changes to console property sheet manifest

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp dd0c54d9abd94dea1ffe956373a4c20b30a6151e

Related work items: MSFT-26187783",,,,False,False,False,4,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"09/03/2020, 21:38:04",2020,"09/03/2020, 21:38:04",2020,4,1,1,4.0,1.0,0
,"Add profiles to the Jumplist (#7515)

This commit introduces Jumplist customization and an item for each
profile to the Jumplist. Selecting an entry in the jumplist will pretty
much just execute  `wt.exe -p ""{profile guid}""`, and so a new Terminal
will open with the selected profile.

Closes #576",,,,False,False,False,168,0,6,6,lelian@microsoft.com,noreply@github.com,"09/03/2020, 23:35:41",2020,"09/03/2020, 23:35:41",2020,4,0,3,5.0,2.5,0
,"Update to a newer MUX prerelease; remove workaround for compact sizing (#7447)

Update the WinUI version which allows us to remove the workaround.

Closes #6681",,,,False,False,False,16,26,11,11,marcel.alex.wagner@outlook.com,noreply@github.com,"09/04/2020, 20:00:40",2020,"09/04/2020, 20:00:40",2020,4,0,3,1.9,2.0,0
,"docs: use unlikely example versions in nuget package script (#7448)

* Update doc

* Change last digit",,,,False,False,False,3,3,1,1,marcel.alex.wagner@outlook.com,noreply@github.com,"09/04/2020, 20:01:51",2020,"09/04/2020, 20:01:51",2020,4,0,3,2.5,1.0,0
,"Add support for DECSCUSR ""0"" to restore cursor to user default  (#7379)

This PR is about the behavior of DECSCUSR. This PR changes the meaning
of DECSCUSR 0 to restore the cursor style back to user default. This
differs from what VT spec says but it’s used in popular terminal
emulators like iTerm2 and VTE-based ones. See #1604. 

Another change is that for parameter greater than 6, DECSCUSR should be
ignored, instead of restoring the cursor to legacy. This PR fixes it.
See #7382.

Fixes #1604.",,,,True,False,False,42,8,10,10,skyline75489@outlook.com,noreply@github.com,"09/04/2020, 20:36:09",2020,"09/04/2020, 20:36:09",2020,4,1,3,4.2,1.8,0
,"Keep degenerate UIA text ranges degenerate after movement (#7530)

Conhost expands UIA text ranges when moved. This means that degenerate
ranges become non-degenerate after movement, leading to odd behaviour
from UIA clients. This PR doesn't expand degenerate ranges, but rather
keeps them degenerate by moving `_end` to the newly-changed `_start`.

Tested in the NVDA Python console (cases with `setEndPoint` and
`compareEndPoints` described in #7342). Also ran the logic by
@michaeldcurran.

Closes #7342

Almost definitely addresses nvaccess/nvda#11288 (although I'll need to
test with my Braille display). Also fixes an issue privately reported to
me by @simon818 with copy/paste from review cursor which originally lead
me to believe the issue was with `moveEndPointByRange`.",,,,True,False,False,37,3,2,2,codeofdusk@gmail.com,noreply@github.com,"09/04/2020, 20:59:38",2020,"09/04/2020, 20:59:38",2020,4,0,3,4.6,1.2,0
,"Revert ""Update to a newer MUX prerelease; remove workaround for compact sizing (#7447)""

This reverts commit 5330759c0f3d98b92209813c48e781a664fe22eb.

Fixes #7553",,,,True,False,False,26,16,11,11,duhowett@microsoft.com,duhowett@microsoft.com,"09/08/2020, 16:25:30",2020,"09/08/2020, 16:25:30",2020,3,1,1,3.1,2.4,0
,"jumplist: prefer the app execution alias in %LOCALAPPDATA% (#7567)

By setting the jumplist entries to launch `WindowsTerminal.exe` out of
the package root, we've inadvertently made WindowsTerminalDev emit jump
list entries that launch the _unpackaged_ version of Terminal.

We can fix this by copying the code from the shell extension that
determines which version of the executable to launch -- wt, wtd or
WindowsTerminal -- depending on the context under which it was invoked.

Fixes #7554",,,,True,False,False,63,3,1,1,duhowett@microsoft.com,noreply@github.com,"09/08/2020, 19:19:12",2020,"09/08/2020, 19:19:12",2020,4,1,3,4.8,1.8,0
,"Remove AcrylicOpacity from AzureCloudShellGenerator (#7573)

Removed Acrylic Opacity from AzureCloudShellGenerator.

## PR Checklist
* [x] Closes #7245 
* [x] CLA signed
* [x] I've discussed this with core contributors already",,,,False,False,False,0,2,1,1,casper.verhaar@gmail.com,noreply@github.com,"09/09/2020, 00:13:53",2020,"09/09/2020, 00:13:53",2020,1,0,3,0.0,1.0,0
,"Make CascadiaSettings a WinRT object (#7457)

CascadiaSettings is now a WinRT object in the TerminalApp project.

## References
#7141 - CascadiaSettings is a settings object
#885 - this new settings object will be moved to a new TerminalSettingsModel project

This one _looks_ big, but most of it is really just propagating the
changes to the tests. In fact, you can probably save yourself some time
because the tests were about an hour of Find&Replace.

`CascadiaSettings::GetCurrentAppSettings()` was only being used in
Pane.cpp. So I ripped out the 3 lines of code and stuffed them in there.

Follow-up work:
- There's a few places in AppLogic where I `get_self` to be able to get
  the warnings out. This will go away in the next PR (wrapping up #885)

## Validation Steps Performed
- [x] Tests passed
- [X] Deployment succeeded

Closes #7141",,,,False,False,False,1297,1226,20,20,carlos.zamora@microsoft.com,noreply@github.com,"09/09/2020, 20:49:53",2020,"09/09/2020, 20:49:53",2020,4,1,3,2.6,4.0,0
,"Add initial settings UI spec (#6720)

## Summary of the Pull Request

This is the spec for the overall functionality of the settings UI - #1564.

There are proposals for the launch method and editing and saving settings that we should discuss.


## Detailed Description of the Pull Request / Additional comments

### [spec.md](https://github.com/microsoft/terminal/blob/cinnamon/spec-settings-ui/doc/specs/%231564%20-%20Settings%20UI/spec.md)
### [design.md](https://github.com/microsoft/terminal/blob/cinnamon/spec-settings-ui/doc/specs/%231564%20-%20Settings%20UI/design.md)",,,,False,False,False,234,0,9,2,cinnamon@microsoft.com,noreply@github.com,"09/09/2020, 23:11:27",2020,"09/09/2020, 23:11:27",2020,4,1,3,5.0,3.0,0
,"Destruct ConptyConnection on a background thread (#7575)

This commit leverages C++/WinRT's final_release [extension point] to
pull the final destruction of ConptyConnection off onto a background
thread.

We've been seeing some deadlocks during teardown where the output thread
(holding the last owning reference to the connection) was trying to
destruct the threadpool wait while the threadpool wait was
simultaneously running its callback and waiting for the output thread to
terminate. It turns out that trying to release a threadpool wait while
it's running a callback that's blocked on you will absolutely result in
a deadlock.

Fixes #7392.

[extension point]: https://devblogs.microsoft.com/oldnewthing/20191018-00/?p=103010",,,,True,False,False,20,0,2,2,duhowett@microsoft.com,noreply@github.com,"09/09/2020, 23:17:33",2020,"09/09/2020, 23:17:33",2020,4,1,3,5.0,1.2,0
,"Switch all DSR responses to appending instead of prepending (#7583)

This fixes an issue where two CPRs could end up corrupted in the input
buffer. An application that sent two CPRs back-to-back could
end up reading the first few characters of the first prepended CPR
before handing us another CPR. We would dutifully prepend it to the
buffer, causing them to overlap.

```
^[^[2;2R[1;1R
^^      ^^^^^ First CPR
  ^^^^^^ Second CPR
```

The end result of this corruption is that a requesting application
would receive an unbidden `R` on stdin; for vim, this would trigger
replace mode immediately on startup.

Response prepending was implemented in !997738 without much comment.
There's very little in the way of audit trail as to why we switched.
Michael believes that we wanted to make sure that applications got DSR
responses immediately. It had the unfortunate side effect of causing
subsequence CPRs across cursor moves to come out in the wrong order.

I discussed our options with him, and he suggested that we could
implement a priority queue in InputBuffer and make sure that ""response""
input was dispatched to a client application before any application- or
user-generated input. This was deemed to be too much work.

We decided that DSR responses getting top billing was likely to be a
stronger guarantee than most terminals are capable of giving, and that
we should be fine if we just switch it back to append.

Thanks to @k-takata, @tekki and @brammool for the investigation on the
vim side.

Fixes #1637.",,,,True,False,False,78,99,8,8,duhowett@microsoft.com,noreply@github.com,"09/09/2020, 23:55:22",2020,"09/09/2020, 23:55:22",2020,4,1,3,2.2,3.0,0
,"Display URI tooltip, render dashed/solid underline for links (#7420)

- Render hyperlinks with a dashed underline
- Render hovered hyperlinks with a solid underline
- Show URI tooltip on hover

TermControl now has a canvas that contains a tiny border to which a
tooltip is attached. When we hover over hyperlinked text, we move the
border to the mouse location and update the tooltip content with the
URI. 

Introduced a new underline type (HyperlinkUnderline), supports rendering
for it, and uses it to render hyperlinks. HyperlinkUnderline is usually
a dashed underline, but when a link is hovered, all text with the same
hyperlink ID is rendered with a solid underline. 

References #5001",,,,False,False,False,142,6,12,12,pankaj.d.bhoj@gmail.com,noreply@github.com,"09/10/2020, 21:59:56",2020,"09/10/2020, 21:59:56",2020,4,1,3,4.8,3.0,0
,"oss: add a manifest for x11's rgb database (#7600)

We will want to add support for the x11 color names.
The name table is are MIT-licensed by the X.org Foundation.",,,,False,False,False,20,0,2,2,duhowett@microsoft.com,noreply@github.com,"09/11/2020, 00:35:36",2020,"09/11/2020, 00:35:36",2020,1,1,3,5.0,1.0,0
,"Open up content dialogs for invalid URIs and unsupported schemes (#7523)

If a user clicks a link that is either invalid (cannot be parsed) or has
a scheme we do not support (like file or mailto (for now)), we open up a
dialog box telling them the issue.

References #5001",,,,False,False,False,81,28,4,4,pankaj.d.bhoj@gmail.com,noreply@github.com,"09/11/2020, 00:55:36",2020,"09/11/2020, 00:55:36",2020,1,1,3,3.7,2.4,0
,"Add serialization error handling to settings projection layer (#7576)

Now that CascadiaSettings is a WinRT object, we need to update the error
handling a bit. Making it a WinRT object limits our errors to be
hresults. So we moved all the error handling down a layer to when we
load the settings object.

- Warnings encountered during validation are saved to `Warnings()`.
- Errors encountered during validation are saved to `GetLoadingError()`.
- Deserialization errors (mainly from JsonUtils) are saved to
  `GetDeserializationErrorMessage()`.

## References
#7141 - CascadiaSettings is a settings object
#885 - this makes ripping out CascadiaSettings into
     TerminalSettingsModel much easier

## Validation Steps Performed
* [x] Tests passed
- [x] Deployment succeeded
   - tested with invalid JSON (deserialization error)
   - tested with missing DefaultProfile (validation error)",,,,True,True,False,358,297,19,19,carlos.zamora@microsoft.com,noreply@github.com,"09/11/2020, 00:57:02",2020,"09/11/2020, 00:57:02",2020,1,1,3,2.7,4.8,0
,"Fix OSC8 termination over the PTY after SGR 0 (#7608)

We were prematurely clearing the hyperlink ID by resetting the
_lastTextAttributes. We should only clear the fields we want
cleared.

Fixes #7597.",,,,True,False,False,14,4,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"09/11/2020, 18:00:31",2020,"09/11/2020, 18:00:31",2020,4,1,3,3.9,1.2,0
,"Make til::color's COLORREF conversion more optimal (#7619)

Clang (10) has no trouble optimizing the COLORREF conversion operator to
a simple 32-bit load with mask (!) even though it's a series of bit
shifts across multiple struct members.

MSVC (19.24) doesn't make the same optimization decision, and it emits
three 8-bit loads and some shifting.

In any case, the optimization only applies at -O2 (clang) and above.

In this commit, we leverage the spec-legality of using unions for type
conversions and the overlap of four uint8_ts and a uint32_t to make the
conversion very obvious to both compilers.

x86_64 msvc | O0 | O1 | O2
------------|----|----|--------------------
shifts      | 12 | 11 | 11 (fully inlined)
union       |  5 |  1 |  1 (fully inlined)

x86_64 clang | O0 | O1 | O2 + O3
-------------|----|----|--------------------
shifts       | 14 |  5 |  1 (fully inlined)
union        |  9 |  3 |  1 (fully inlined)

j4james brought up some concerns about til::color's minor wastefulness
in https://github.com/microsoft/terminal/pull/7578#discussion_r487355989.

This is a clear, simple transformation that saves us a few instructions
in a relatively common case, so I'm accepting a micro-optimization even
though we don't have data showing this to be a hot spot.",,,,False,False,False,27,7,2,2,duhowett@microsoft.com,noreply@github.com,"09/14/2020, 18:51:03",2020,"09/14/2020, 18:51:03",2020,4,1,3,4.0,1.0,0
,"Introduce KeyMapping and Move TerminalSettings construction (#7537)

`KeyMapping` was introduced to break up `AppKeyBindings`. `KeyMapping`
records the keybindings from the JSON and lets you query them.
`AppKeyBindings` now just holds a `ShortcutActionDispatcher` to run
actions, and a `KeyMapping` to record/query your existing keybindings.
This refactor allows `KeyMapping` to be moved to the
TerminalSettingsModel, and `ShortcutActionDispatcher` and
`AppKeyBindings` will stay in TerminalApp.

`AppKeyBindings` had to be passed down to a terminal via
`TerminalSettings`. Since each settings object had its own
responsibility to update/create a `TerminalSettings` object, I moved all
of that logic to `TerminalSettings`. This helps with the
TerminalSettingsModel refactor, and makes the construction of
`TerminalSettings` a bit cleaner and more centralized.

## References
#885 - this is all in preparation for the TerminalSettingsModel

## Validation Steps Performed
- [x] Tests passed
- [X] Deployment succeeded",,,,False,False,True,848,786,38,38,carlos.zamora@microsoft.com,noreply@github.com,"09/14/2020, 20:38:56",2020,"09/14/2020, 20:38:56",2020,4,1,3,2.9,4.5,0
,"Merged PR 5181334: OS build fixes on top of abf8805e0

til::color
It turns out that clang/gcc are okay with the anonymous
struct, but the CL we use in Windows was not.",,,,True,True,False,4,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"09/16/2020, 01:50:07",2020,"09/16/2020, 01:50:07",2020,1,1,1,5.0,1.2,0
,"Fix code format from inbox

It appears as though the pragma above broke the format below.",,,,True,True,False,3,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"09/16/2020, 17:19:49",2020,"09/16/2020, 17:19:49",2020,3,1,1,3.7,1.2,0
,"Preprocess and convert C1 controls to their 7 bit equivalent  (#7340)

C1 control characters are now first converted to their 7 bit equivalent.
This allows us to unify the logic of C1 and C0 escape handling. This
also adds support for SOS/PM/APC string.

* Unify the logic for C1 and C0 escape handling by converting C1 to C0
  beforehand. This adds support for various C1 characters, including
  IND(8/4), NEL(8/5), HTS(8/8), RI(8/13), SS2(8/14), SS3(8/15),
  OSC(9/13), etc. 
* Add support for SOS/PM/APC escape sequences. Fixes #7032
* Use ""Variable Length String"" logic to unify the string termination
  handling of OSC, DCS and SOS/PM/APC. This fixes an issue where OSC
  action is successfully dispatched even when terminated with non-ST
  character. Introduced by #6328, the DCS PassThrough is spared from
  this issue. This PR puts them together and add test cases for them.

References:
https://vt100.net/docs/vt510-rm/chapter4.html
https://vt100.net/emu/dec_ansi_parser

Closes #7032
Closes #7317",,,,True,False,False,388,106,4,4,skyline75489@outlook.com,noreply@github.com,"09/16/2020, 22:30:46",2020,"09/16/2020, 22:30:46",2020,4,1,3,3.9,3.0,0
,"Replace the ""user docs"" with references to the real docs (#7649)",,,,False,False,False,41,1029,6,5,duhowett@microsoft.com,noreply@github.com,"09/17/2020, 16:38:01",2020,"09/17/2020, 16:38:01",2020,3,1,3,0.2,3.5,0
,"Fix failing HyperlinkIdConsistency unit test (#7655)

## Summary of the Pull Request

This fixes a typo in the `HyperlinkIdConsistency` unit test which was causing that test to fail. It was mistakenly using a `/` instead of `\` for the string terminator sequences.

## References

The test initially worked because of a bug in the state machine parser, but that bug was recently fixed in PR #7340.

## PR Checklist
* [x] Closes #7654
* [x] CLA signed. 
* [x] Tests passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan.

## Validation Steps Performed

I've run the test again and it now passes.",,,,True,False,False,1,1,1,1,j4_james@hotmail.com,noreply@github.com,"09/17/2020, 16:52:42",2020,"09/17/2020, 16:52:42",2020,3,1,3,2.5,1.2,0
,"Update ColorScheme with Json Serializer and color table API (#7609)

Add `ToJson()` to the `ConversionTrait`s in JsonUtils. This can be used
to serialize settings objects into JSON.

As a proof of concept, `ToJson` and `UpdateJson` were added to
`ColorScheme`.

Getters and setters for members and colors in the color table were added
and polished.

## References
#1564 - Settings UI

`ColorScheme` is a particularly easy example of serialization because it
has _no fallback_.

Added a few tests for JSON serializers.",,,,False,False,False,326,99,10,10,carlos.zamora@microsoft.com,noreply@github.com,"09/17/2020, 18:27:46",2020,"09/17/2020, 18:27:46",2020,4,1,3,3.8,3.0,0
,"Update Cascadia Code to 2009.14 (#7648)

2009.14 brings support for the Salishan language family and some bug fixes.",,,,True,True,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"09/17/2020, 19:41:22",2020,"09/17/2020, 19:41:22",2020,4,1,3,2.5,1.2,0
,"Give Tab ownership of its SwitchToTab command (#7659)

Currently, `CommandPalette` creates and maintains the `SwitchToTab`
commands used for the ATS. When `Command` goes into the
TerminalSettingsModel, the palette won't be able to access `Command`'s
implementation type, making it difficult for `CommandPalette` to tell
`Command` to listen to `Tab` for changes.

This PR changes the relationship up so `Tab` now manages its
`SwitchToTab` command, and `CommandPalette` just plops the command from
`Tab` into its list.",,,,False,False,False,72,93,7,7,lelian@microsoft.com,noreply@github.com,"09/18/2020, 00:13:11",2020,"09/18/2020, 00:13:11",2020,1,0,3,2.2,2.5,0
,"Make sure we don't hide the cursor until the IME starts (#7673)

Some IME implementations do not produce composition strings, and their
users have come to rely on the cursor that conhost traditionally left on
until a composition string showed up. We shouldn't hide the cursor until
we get a string (as opposed to hiding it when composition begins) so as
to not break those IMEs.

Related to #6207.

Fixes MSFT:29219348",,,,True,True,False,11,2,3,3,duhowett@microsoft.com,noreply@github.com,"09/18/2020, 19:25:39",2020,"09/18/2020, 19:25:39",2020,4,1,3,4.2,1.2,0
,"Wrap the textblock containing the ""invalid"" URI (#7694)

It looks much better this way.",,,,False,False,False,1,1,1,1,duhowett@microsoft.com,noreply@github.com,"09/21/2020, 19:39:10",2020,"09/21/2020, 19:39:10",2020,4,1,3,2.5,1.0,0
,"Update userDefaults from ""keybindings"" to ""actions"" (#7692)

* Update userDefaults from ""keybindings"" to ""actions""

* dfgdsafretgjhfg",,,,False,False,False,3,3,1,1,duhowett@microsoft.com,noreply@github.com,"09/21/2020, 19:39:27",2020,"09/21/2020, 19:39:27",2020,4,1,3,2.5,1.2,0
,Update Cascadia Code to 2009.21 (#7693),,,,False,False,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"09/21/2020, 19:40:34",2020,"09/21/2020, 19:40:34",2020,4,1,3,2.5,1.0,0
,"Add support for the ""blink"" graphic rendition attribute (#7490)

This PR adds support for the _blink_ graphic rendition attribute. When a
character is output with this attribute set, it ""blinks"" at a regular
interval, by cycling its color between the normal rendition and a dimmer
shade of that color.

The majority of the blinking mechanism is encapsulated in a new
`BlinkingState` class, which is shared between the Terminal and Conhost
implementations. This class keeps track of the position in the blinking
cycle, which determines whether characters are rendered as normal or
faint. 

In Windows Terminal, the state is stored in the `Terminal` class, and in
Conhost it's stored in the `CONSOLE_INFORMATION` class. In both cases,
the `IsBlinkingFaint` method is used to determine the current blinking
rendition, and that is passed on as a parameter to the
`TextAttribute::CalculateRgbColors` method when these classes are
looking up attribute colors.

Prior to calculating the colors, the current attribute is also passed to
the `RecordBlinkingUsage` method, which keeps track of whether there are
actually any blink attributes in use. This is used to determine whether
the screen needs to be refreshed when the blinking cycle toggles between
the normal and faint renditions.

The refresh itself is handled by the `ToggleBlinkingRendition` method,
which is triggered by a timer. In Conhost this is just piggybacking on
the existing cursor blink timer, but in Windows Terminal it needs to
have its own separate timer, since the cursor timer is reset whenever a
key is pressed, which is not something we want for attribute blinking.

Although the `ToggleBlinkingRendition` is called at the same rate as the
cursor blinking, we actually only want the cells to blink at half that
frequency. We thus have a counter that cycles through four phases, and
blinking is rendered as faint for two of those four. Then every two
cycles - when the state changes - a redraw is triggered, but only if
there are actually blinking attributes in use (as previously recorded).

As mentioned earlier, the blinking frequency is based on the cursor
blink rate, so that means it'll automatically be disabled if a user has
set their cursor blink rate to none. It can also be disabled by turning
off the _Show animations in Windows_ option. In Conhost these settings
take effect immediately, but in Windows Terminal they only apply when a
new tab is opened.

This PR also adds partial support for the `SGR 6` _rapid blink_
attribute. This is not used by DEC terminals, but was defined in the
ECMA/ANSI standards. It's not widely supported, but many terminals just
it implement it as an alias for the regular `SGR 5` blink attribute, so
that's what I've done here too.

## Validation Steps Performed

I've checked the _Graphic rendition test pattern_ in Vttest, and
compared our representation of the blink attribute to that of an actual
DEC VT220 terminal as seen on [YouTube]. With the right color scheme
it's a reasonably close match.

[YouTube]: https://www.youtube.com/watch?v=03Pz5AmxbE4&t=1m55s

Closes #7388",,,,False,False,False,245,59,20,20,j4_james@hotmail.com,noreply@github.com,"09/21/2020, 23:21:33",2020,"09/21/2020, 23:21:33",2020,4,1,3,4.0,3.5,0
,"version: bump to 1.5 on master

Signed-off-by: Dustin Howett <duhowett@microsoft.com>",,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"09/22/2020, 15:19:08",2020,"09/22/2020, 15:19:08",2020,3,1,1,2.5,1.0,0
,"Add docs for creating a new DLL (#7661)

This PR adds a docs page for the gotchas and things to do when creating a new WinRT dll project.",,,,False,False,False,54,0,1,1,lelian@microsoft.com,noreply@github.com,"09/22/2020, 22:52:57",2020,"09/22/2020, 22:52:57",2020,4,0,3,5.0,1.5,0
,"Fix A11y EndExclusive Error for Move & Expand (#7677)

`EndExclusive` represents the end of the buffer. This is designed to not
point to any data on the buffer. UiaTextRange would point to this
`EndExclusive` and then attempt to move based on it. However, since it
does not point to any data, it could experience undefined behavior or
(inevitably) crash from running out of bounds.

This PR specifically checks for expansion and movement at that point,
and prevents us from moving beyond it. There are plans in the future to
define the ""end"" as the last character in the buffer. Until then, this
solution will suffice and provide correct behavior that doesn't crash.

## Validation Steps Performed
Performed the referenced bugs' repro steps and added test coverage.

Closes MSFT-20458595
Closes #7663
Closes #7664",,,,True,False,False,143,27,3,3,carlos.zamora@microsoft.com,noreply@github.com,"09/23/2020, 20:06:18",2020,"09/23/2020, 20:06:18",2020,4,1,3,4.2,2.4,0
,"Normalize file paths before handing them to the jumplist (#7711)

DestListLogoUri cannot handle paths that are separated with / unless
they're actually URLs. We have to guess somewhat whether something is a
file path and if it appears to be one, normalize it.

Fixes #7706",,,,True,False,False,36,1,1,1,duhowett@microsoft.com,noreply@github.com,"09/23/2020, 23:30:57",2020,"09/23/2020, 23:30:57",2020,4,1,3,4.9,1.2,0
,"When win32 is resizing the viewport, make sure Right > Left (#7768)

Sometimes when we were sliding the viewport to fit inside the buffer, we
would end up with left > right.

That would cause us to crash down the line when rendering.

Fixes MSFT:28387423
Fixes #7744",,,,True,False,False,8,1,1,1,duhowett@microsoft.com,noreply@github.com,"09/28/2020, 22:46:45",2020,"09/28/2020, 22:46:45",2020,4,1,3,4.4,1.2,0
,"Fix the ""visual representation"" optimization for hyperlinks (#7738)

Closes #7700",,,,True,False,False,2,0,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"09/28/2020, 23:49:25",2020,"09/28/2020, 23:49:25",2020,4,1,3,5.0,1.2,0
,"Introduce til::presorted_static_map (#7640)

til::static_map can't be constexpr until we move to C++20.
It can't be constexpr because std::sort isn't constexpr until then.
This poses a problem: if we start using it and treating it like a map,
we'll incur a potentially high cost in static initialization in both
code size in .text and runtime.

This commit introduces presorted_static_map, which is static_map except
that it doesn't automatically sort its keys. That's the only difference.

At this point, it's just a maplike interface to a constant array of
pairs that does a binary search. It should be used for small tables that
are used infrequently enough as to not warrant their cost in code size
or initialization time. It should also be used for tables that aren't
going to be edited much by developers (like the color table in #7578.)",,,,True,True,False,68,5,3,3,duhowett@microsoft.com,noreply@github.com,"09/29/2020, 19:01:50",2020,"09/29/2020, 19:01:50",2020,4,1,3,4.7,1.8,0
,"Fix and test TextBuffer::MoveToPreviousWord() (#7770)

This fixes a bug when moving backwards by word that resulted in #7742.

This also includes...
- a minor refactor that leverages `GetWordStart` in `MoveToPreviousWord`
- additional unit tests for movement by word
- a feature test comprised of the referenced bug report

`MoveToPreviousWord()` would...
- move backwards for each whitespace character
- then, move backwards for each regular character

This would actually result in moving to the beginning of the current ""word"" (as defined by a11y).

We actually need to do this process twice:
- the first time gets you to the beginning of the current word
- attempt to move back by one character
- the second time gets you to the beginning of the previous word

Rather than implementing 4 while loops, we leverage `GetWordStart()` to
attempt to move to the beginning of the previous word. We call it twice
(as described above). The logic is unchanged, but we instead reuse a
function that has already undergone more testing.

To make sure this works as expected, additional unit tests were
introduced covering ""MoveByWord"" in the TextBuffer.

## Validation Steps Performed
Added test for repro steps.
Added unit tests for movement by word.

Closes #7742",,,,True,False,True,131,30,3,3,carlos.zamora@microsoft.com,noreply@github.com,"09/30/2020, 18:13:22",2020,"09/30/2020, 18:13:22",2020,4,1,3,4.3,2.4,0
,"Fix parallel builds by specifying the application type for WAP (#7783)

The WAP packaging project is sensitive to including applications that it
thinks are UWPs. The changes we made to separate WindowsStoreApp and
WindowsAppContainer weren't comprehensive enough to convince WAP that we
were not still UWPs.

Because of that, it would run sub-builds of each of these projects (and
all their dependencies) with an additional `GenerateAppxPackageOnBuild`
property set. The existence of this property caused MSBuild to think the
projects needed to be built *again*.",,,,True,True,False,3,1,3,3,duhowett@microsoft.com,noreply@github.com,"09/30/2020, 20:25:50",2020,"09/30/2020, 20:25:50",2020,4,1,3,3.7,1.2,0
,"Add optimization to get a11y next word (#7789)

This performs a minor refactor on `TextBuffer::MoveToNextWord` that
relies more heavily on `TextBuffer::GetWordEnd`. Now, the logic is
simplified and looks more like `MoveToPreviousWord`.

This refactor required me to move the `lastCharPos` optimization down to
`GetWordEnd`. So word expansion gets this optimization for free now.

### WPR Traces
The percentages below represent the weight that a function call had. The
test scenario included moving by word on the CMD welcome message until
the last word was reached. Inspect.exe was used to limit any additional
calls that are generally performed by a screen reader.

| function   | current | branch |
| --         | --      | --     |
| `UIA:Move` | 34.55%  | 29.52% |

There is an improvement of about 5% in a release build of ConHost.

NOTE: `UIA::Move` already calls `Expand` after a move operation is
performed. I'm using this data to represent a performance improvement
across both functions.

Contributes to #5243",,,,False,False,True,22,36,2,2,carlos.zamora@microsoft.com,noreply@github.com,"09/30/2020, 21:11:46",2020,"09/30/2020, 21:11:46",2020,4,1,3,2.5,1.5,0
,"Add support for the BEL control in Windows Terminal (#7679)

This commit makes the Windows Terminal play an audible sound when the
`BEL` control character is output.

The `BEL` control was already being forwarded through conpty, so it was
just a matter of hooking up the `WarningBell` dispatch method to
actually play a sound. I've used the `PlaySound` API to output the sound
configured for the ""Critical Stop"" system event (aka _SystemHand_),
since that is the sound used in conhost.

## Validation

I've manually confirmed that the terminal produces the expected sound
when executing `echo ^G` in a cmd shell, or `printf ""\a""` in a WSL bash
shell.

References:
* There is a separate issue (#1608) to deal with configuring the `BEL`
  to trigger visual forms of notification.
* There is also an issue (#2360) requesting an option to disable the
  `BEL`.

Closes #4046",,,,False,False,False,52,0,11,11,j4_james@hotmail.com,noreply@github.com,"10/01/2020, 01:00:06",2020,"10/01/2020, 01:00:06",2020,1,1,3,5.0,3.0,0
,doc: Update roadmap with latest info (#7778),,,,False,False,False,24,14,1,1,cinnamon@microsoft.com,noreply@github.com,"10/01/2020, 03:14:45",2020,"10/01/2020, 03:14:45",2020,1,1,3,3.2,1.0,0
,"Properly handle and test a11y movement at end of buffer (#7792)

The `MovementAtExclusiveEnd` test was improperly authored for the
following reasons:
- it should have used `TEST_METHOD_PROPERTY` to cover all of the
  TextUnits
- TextUnit::Document (arguably one of the most important) was ommitted
  accidentally (`!= TextUnit_Document` was used instead of `<=`)
- The created range was not `EndExclusive`, but rather, the last cell in
  the buffer (`EndInclusive`)

The first half of this PR fixes the test.

The second half of this PR expands the test and fixes any related issues
to make the test pass (i.e. #7771):
- `TEST_METHOD_PROPERTY` was added for it to be degenerate (start/end at
  `EndExclusive`) or not (last cell of buffer)
- `utr->_start` is now also validated after moving backwards

NOTE: `utr->_start` was not validated when moving forwards because
moving forwards should always fail when at/past the last chell in the
buffer.

Closes #7771",,,,True,False,False,123,50,4,4,carlos.zamora@microsoft.com,noreply@github.com,"10/05/2020, 22:11:47",2020,"10/05/2020, 22:11:47",2020,4,1,3,3.6,2.4,0
,"Introduce TerminalSettingsModel project (#7667)

Introduces a new TerminalSettingsModel (TSM) project. This project is
responsible for (de)serializing and exposing Windows Terminal's settings
as WinRT objects.

## References
#885: TSM epic
#1564: Settings UI is dependent on this for data binding and settings access
#6904: TSM Spec

In the process of ripping out TSM from TerminalApp, a few other changes
were made to make this possible:
1. AppLogic's `ApplicationDisplayName` and `ApplicationVersion` was
   moved to `CascadiaSettings`
   - These are defined as static functions. They also no longer check if
     `AppLogic::Current()` is nullptr.
2. `enum LaunchMode` was moved from TerminalApp to TSM
3. `AzureConnectionType` and `TelnetConnectionType` were moved from the
   profile generators to their respective TerminalConnections
4. CascadiaSettings' `SettingsPath` and `DefaultSettingsPath` are
   exposed as `hstring` instead of `std::filesystem::path`
5. `Command::ExpandCommands()` was exposed via the IDL
   - This required some of the warnings to be saved to an `IVector`
     instead of `std::vector`, among some other small changes.
6. The localization resources had to be split into two halves.
   - Resource file linked in init.cpp. Verified at runtime thanks to the
     StaticResourceLoader.
7. Added constructors to some `ActionArgs`
8. Utils.h/cpp were moved to `cascadia/inc`. `JsonKey()` was moved to
   `JsonUtils`. Both TermApp and TSM need access to Utils.h/cpp.

A large amount of work includes moving to the new namespace
(`TerminalApp` --> `Microsoft::Terminal::Settings::Model`).

Fixing the tests had its own complications. Testing required us to split
up TSM into a DLL and LIB, similar to TermApp. Discussion on creating a
non-local test variant can be found in #7743.

Closes #885",,,,True,True,False,5350,4682,136,126,carlos.zamora@microsoft.com,noreply@github.com,"10/06/2020, 16:56:59",2020,"10/06/2020, 16:56:59",2020,3,1,3,2.3,5.0,0
,"Preview tab switching with the ATS (#7796)

## Summary of the Pull Request

![preview-ats-000](https://user-images.githubusercontent.com/18356694/94801728-18302a00-03ac-11eb-851d-760b92ebb46f.gif)

This PR enables the ATS to display the active tab as the user navigates the tab switcher. We do this by dispatching the tab switch actions as the user navigates the menu, and manually _not_ focusing the new tab when the tab switcher is open. 

## References

* #6732 - original tab switcher PR
* #6689 - That's a more involved, generic version of this, but this PR will be enough to stop most of the complaints hopefully


## PR Checklist
* [x] Closes #7409
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

Opened tabs, tabbed through the menu, verified that it did what I'd expect",,,,False,False,False,42,1,3,3,migrie@microsoft.com,noreply@github.com,"10/07/2020, 22:49:10",2020,"10/07/2020, 22:49:10",2020,4,3,3,4.9,1.0,0
,"Fix old reference to TermApp::Command (#7863)

#7796 and #7667 were being implemented concurrently. As a part of #7667, Command was moved from TermApp to TSM. This just applies that change to a line we missed in #7796 and fixes the build break.",,,,True,True,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"10/08/2020, 17:42:45",2020,"10/08/2020, 17:42:45",2020,3,1,3,2.5,1.2,0
,"Introduce IconConverter (#7830)

## Summary of the Pull Request
Introduce the `IconPathConverter` to `TerminalApp`. `Command` and `Profile` now both return the unexpanded icon path. `IconPathConverter` is responsible for expanding the icon path and retrieving the appropriate icon source.

This also removes `Profile`'s expanded icon path and uses the `IconPathConverter` when necessary. This allows users to set profile icons to emoji as well. However, emoji do not appear in the jumplist.

## References
Based on #7667 

## PR Checklist
* [X] Closes #7784 
* [x] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [x] Schema updated.

## Validation Steps Performed
Deploy succeeded.",,,,False,False,False,334,255,23,22,carlos.zamora@microsoft.com,noreply@github.com,"10/08/2020, 18:29:04",2020,"10/08/2020, 18:29:04",2020,4,1,3,3.0,4.0,0
,"BUILD: Disable parallel build

The build agents can't handle the size of our PCH files.

Signed-off-by: Dustin Howett <duhowett@microsoft.com>",,,,False,False,False,3,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"10/09/2020, 00:17:50",2020,"10/09/2020, 00:17:55",2020,1,1,1,3.7,1.0,0
,"Add Spec for winrt TerminalSettings (#6904)

## Summary of the Pull Request
This introduces a spec for (what I like to call) winrt TerminalSettings. Basically, we need to move over some of the code that resides in TerminalApp that relates to the settings model, then expose some of the settings objects as winrt objects. Doing so will allow us to access/modify settings across different project layers (a must-have for the Settings UI).

## References
#885 - winrt Terminal Settings issue
#1564 - spec for most of the backend work for Settings UI",,,,False,False,False,252,0,2,2,carlos.zamora@microsoft.com,noreply@github.com,"10/09/2020, 18:19:40",2020,"10/09/2020, 18:19:40",2020,4,1,3,5.0,3.0,0
,"From orbit, nuke the Telnet connection and all supporting infra. (#7840)

This is not going to be our plan of record for Universal going forward.

This updates the Universal configuration to 1) match non-universal and 2) switch to local applications",,,,False,False,False,116,535,19,16,duhowett@microsoft.com,noreply@github.com,"10/09/2020, 18:59:58",2020,"10/09/2020, 18:59:58",2020,4,1,3,1.4,4.0,0
,"Fix UIA ScrollIntoView at EndExclusive (#7868)

`ScrollIntoView` is responsible for scrolling the viewport to include
the UTR's start endpoint. The crash was caused by `start` being at the
exclusive end, and attempting to scroll to it. This is now fixed by
clamping the result to the bottom of the buffer.

Most of the work here is to allow a test for this. `ScrollIntoView`
relied on a virtual `ChangeViewport` function. By making that
non-virtual, the `DummyElementProvider` in the tests can now be a
`ScreenInfoUiaProviderBase`. This opens up the possibility of more
UiaTextRange tests in the future too.

Closes #7839",,,,True,False,False,89,37,7,7,carlos.zamora@microsoft.com,noreply@github.com,"10/09/2020, 20:27:13",2020,"10/09/2020, 20:27:13",2020,4,1,3,3.5,3.0,0
,"Hook up the WIL fallback error tracer in Terminal (#7864)

This pull request introduces (a very, very stripped-down copy of) the
WIL fallback error reporter.

It emits error records, usually immediately before the application
implodes, into the event stream.

This should improve diagnosability of issues that take Terminal down,
and allow us to give out a .wprp file to gather traces from users.",,,,True,True,False,72,0,7,7,duhowett@microsoft.com,noreply@github.com,"10/09/2020, 22:20:12",2020,"10/09/2020, 22:20:12",2020,4,1,3,5.0,2.4,0
,"wpf: Add AutoFill to control whether the connection/buffer resizes (#7853)

Adds the ability to manually handle the terminal renderer resizing
events by allowing different render size and WPF control size. This is
done by adding an `AutoFill` property to the control that prevents the
renderer from automatically resizing and tells the WPF control to fill
in the extra space with the terminal background as shown below:

This PR adds the following:
- Helper method in the DX engine to convert character viewports into
  pixel viewports
- `AutoFill` property that prevents automatic resizing of the renderer
- Tweaks and fixes that automatically fill in the empty space if
  `AutoFill` is set to false
- Fixes resizing methods and streamlines their codepath

## Validation Steps Performed
Manual validation with the Visual Studio Integrated Terminal tool
window.",,,,True,True,False,242,58,8,8,javier.delagarza@gmail.com,noreply@github.com,"10/09/2020, 22:25:18",2020,"10/09/2020, 22:25:18",2020,4,0,3,4.2,3.6,0
,"Add an animation to pane entrance/exit (#7364)

Adds an entrance animation when panes are created. This animation can be
disabled with the `disableAnimations` global setting. 

Although the XAML animation documentation was pretty heavy on the _do it
in XAML_ route, our panes are created pretty much entirely in code, so
we've got to create the animations in code as well. 

200ms as the duration of the animation was picked _super_ arbitrarily.
300ms felt too long, and 166ms felt like it was only visible for a
single frame. 

see also:
* [Motion in practice](https://docs.microsoft.com/en-us/windows/uwp/design/motion/motion-in-practice)
* [This example](https://docs.microsoft.com/en-us/uwp/api/Windows.UI.Xaml.Media.Animation.Storyboard?view=winrt-19041#examples) what what I ended up using, albeit ported to cppwinrt.
* [`Timeline.AllowDependentAnimations`](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.media.animation.timeline.allowdependentanimations?view=winrt-19041#Windows_UI_Xaml_Media_Animation_Timeline_AllowDependentAnimations)
* [easing functions](https://docs.microsoft.com/en-us/windows/uwp/design/motion/key-frame-and-easing-function-animations#easing-functions)

## Validation Steps Performed
Man have I been opening panes

Closes #1001
Closes #7366",,,,False,False,False,297,2,9,9,migrie@microsoft.com,noreply@github.com,"10/09/2020, 23:06:40",2020,"10/09/2020, 23:06:40",2020,4,3,3,5.0,3.0,0
,"Inform user that holding alt opens a new pane (#7866)

Adds a tooltip to the new tab button and menu  to let the user know
that holding alt will open a new pane instead.

Fixes #7851

Co-authored-by: Pankaj Bhojwani <pabhojwa@microsoft.com>",,,,True,False,False,30,2,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/13/2020, 00:14:02",2020,"10/13/2020, 00:14:02",2020,1,1,3,4.7,1.2,0
,Fix capitalization in hyperlink tooltip (#7901),,,,True,True,False,1,1,1,1,cinnamon@microsoft.com,noreply@github.com,"10/13/2020, 00:15:25",2020,"10/13/2020, 00:15:25",2020,1,1,3,2.5,1.2,0
,doc: add SUPPORT.md (#7902),,,,False,False,False,17,0,1,1,cinnamon@microsoft.com,noreply@github.com,"10/13/2020, 00:15:52",2020,"10/13/2020, 00:15:52",2020,1,1,3,5.0,1.0,0
,wpf: fix margin calculations and resize events (#7892),,,,True,True,False,142,85,3,3,javier.delagarza@gmail.com,noreply@github.com,"10/13/2020, 01:21:11",2020,"10/13/2020, 01:21:11",2020,1,0,3,3.1,3.0,0
,"7571: do not activate terminal window upon settings modificaion (#7887)

Took this as an easy starter. The method IslandWindow::SetAlwaysOnTop is
triggered once terminal settings are reloaded (in
TerminalPage::_RefreshUIForSettingsReload flow). This method calls
SetWindowPos without SWP_NOACTIVATE. As a result the window gets
activated, the focus is set and the cursor starts blinking.

Added SWP_NOACTIVATE in all SetWindowPos calls from IslandWindow and
NoClientIslandWindow (where it was missing). Please let me know if this
is an overkill - it is not required to fix the issue, however seems a
good practice, that might help if we decide to apply more settings
immediately.

## Validation Steps Performed
* Only manual testing - please guide me to the relevant UT framework, if
  exists. 
* Trying to reproduce this with VS attached doesn't work - the window
  gets the focus in any case.
* Tested as a standalone application, by modifying different settings
  (and comparing the results before and after the fix).
* Checked with Spy++ that no WM_ACTIVATE / WM_SETFOCUS is thrown upon
  settings modification
* Applied terminal resizing, toggling full screen and focus mode to
  check no regression was introduced.

Closes #7571",,,,True,False,False,6,6,2,2,khvitaly@gmail.com,noreply@github.com,"10/13/2020, 22:40:56",2020,"10/13/2020, 22:40:56",2020,4,0,3,2.5,1.2,0
,"7124: Add focus and maximizedFocus launch modes (#7873)

This commit introduces two new launch modes: focus and maximizedFocus. 
* Focused mode, behaves like a default mode, but with the Focus Mode
  enabled.
* Maximized focused mode, behaves like a Maximized mode, but with the
  Focus Mode enabled.

There two ways to invoke these new modes:
* In the settings file: you set the ""launchMode"" to either ""focus"" or
  ""maximizedFocus""
* In the command line options, you can path -f / --focus, which is
  mutually exclusive with the --fullscreen, but can be combined with the
  --maximized:
  * Passing -f / --focus will launch the terminal in the ""focus"" mode
  * Passing -fM / --focus --maximized will launch the terminal in the
    ""maximizedFocus"" mode

This should resolve a relevant part in the command line arguments
mega-thread #4632

Closes #7124
Closes #7825
Closes #7875",,,,False,False,False,128,11,8,8,khvitaly@gmail.com,noreply@github.com,"10/14/2020, 22:19:51",2020,"10/14/2020, 22:19:51",2020,4,0,3,4.6,3.0,0
,"Add support for more OSC color formats (#7578)

* Correct the behaviour of parsing `rgb:R/G/B`. It should be interpreted
  as `RR/GG/BB` instead of `0R/0G/0B`
* Add support for `rgb:RRR/GGG/BBB` and `rgb:RRRR/GGGG/BBBB`. The
  behaviour of 12 bit variants is to repeat the first digit at the end,
  e.g. `rgb:123/456/789` becomes `rgb:1231/4564/7897`.
* Add support for `#` formats. We are following the rules of
  [XParseColor] by interpreting `#RGB` as `R000G000B000`.
* Add support for XOrg app color names, which are supported by xterm, VTE
  and many other terminal emulators.
* Multi-parameter OSC 4 is now supported.
* The chaining of OSC 10-12 is not yet supported. But the parameter
  validation is relaxed by parsing the parameters as multi-params but
  only use the first one, which means `\e]10;rgb:R/G/B;` and
  `\e]10:rgb:R/G/B;invalid` will execute `OSC 10` with the first color
  correctly. This fixes some of the issues mentioned in #942 but not
  all of them.

[XParseColor]: https://linux.die.net/man/3/xparsecolor

Closes #3715",,,,True,False,False,2831,623,22,22,skyline75489@outlook.com,noreply@github.com,"10/15/2020, 00:29:10",2020,"10/15/2020, 00:29:10",2020,1,1,3,4.1,4.8,0
,"doc: address how to use TAEF (#7590)

This PR updates the doc in the repo to address how to use TAEF as part
of the development workflow.

Closes #1962",,,,False,False,False,41,4,2,2,skyline75489@outlook.com,noreply@github.com,"10/15/2020, 00:33:12",2020,"10/15/2020, 00:33:12",2020,1,1,3,4.6,1.0,0
,"doc: Update Notice emoji (#7424)

Just a simple update on the emoji so that it catch people attention as I
see many open issues about terminal not running on Windows Server 2016.",,,,False,False,False,2,2,1,1,quangkieu@users.noreply.github.com,noreply@github.com,"10/15/2020, 00:45:38",2020,"10/15/2020, 00:45:38",2020,1,0,3,2.5,1.2,0
,"Add Close... option to Tab context menu (#7728)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Add a ""Close..."" option to the tab context menu, with nested entries to close tabs to the right and close other tabs (actions already available)
![immagine](https://user-images.githubusercontent.com/1140981/94178005-c7e03600-fe9a-11ea-9f87-c6f4895d4cf3.png)

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#1912 

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #5524
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
First contribution :slightly_smiling_face:
Tried to follow some suggestions from https://github.com/microsoft/terminal/issues/1912#issuecomment-667079311

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,119,6,8,8,1140981+mpela81@users.noreply.github.com,noreply@github.com,"10/15/2020, 11:40:44",2020,"10/15/2020, 11:40:44",2020,2,0,3,4.8,3.0,0
,"Fix the linter for C++ files (#7930)

For whatever reason, the super linter seems to think that any file it doesn't recognize is an EDITORCONFIG file. That means all our `cpp`, `hpp`, `h`, `resw`, `xaml`, etc files are going to get linted with different rules than the clang-format ones we already use. 

This PR disables the EDITORCONFIG linter, and has a minimal change to a cpp file to ensure that it's no longer linted by the action.

See also: 
* #7637 added this
* #7799 is blocked by this
* #7924 is blocked by this",,,,True,True,False,1,1,2,1,migrie@microsoft.com,noreply@github.com,"10/15/2020, 16:05:54",2020,"10/15/2020, 16:05:54",2020,3,3,3,1.8,1.2,0
,"Auto detect background image (#7849)

##  Summary of the Pull Request
Added watch on desktopImagePath to check when the path equals ""DesktopWallpaper""
If it does equal ""DesktopWallpaper"" it replaces the path with a path to the desktop's wallpaper

*I am a student and this is my first pull request for Terminal so please give feedback no matter how small. It's the best way I can learn.

## PR Checklist
* [X] Closes #7295 
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [?] Tests added/passed
* [X] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: https://github.com/MicrosoftDocs/terminal/pull/155
* [?] Schema updated. (Not sure if this is needed, also not sure where this would be)
* [X] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #7295 (Have only talked with the people on the issue, which I don't think has any core contributors)

## Detailed Description of the Pull Request / Additional comments
I am using SystemParametersInfo for SPI_GETDESKWALLPAPER which puts the path into a WCHAR and that is then inserted as the BackgroundImagePath.

I do not think an additional test would add value. The SPI_GETDESKTOPWALLPAPER uses the computers local wallpaper path and puts it into a WCHAR, which then I feed into BackgroundImagePath() as it's new path. I don't think there adds value in making a static path of the desktop background and testing that, given that static tests are already done for ""BackgroundImage()"".

## Validation Steps Performed

(Manual Validation - Test False Value)
1. Ran Terminal
2. Set setting [""backgroundImage"": ""<some random img path>""] under profiles->defaults
3. Verified terminal's background is not the desktops wallpaper. 

(Manual Validation - Test True Value)
1. Ran Terminal
2. Set setting [""backgroundImage"": ""DesktopWallpaper""] under profiles->defaults
3. Verified the background image matches the desktop background image. 

(Manual Validation - Multiple Tabs True Value)
1. Ran Terminal
2. Set setting [""backgroundImage"": ""DesktopWallpaper""] under profiles->defaults
3. Verified the background image matches the desktop background image.  
4. Opened new tabs
5. Verified the background image matches the desktop background image for each tab.",,,,False,False,False,50,2,3,3,46642544+bennettnicholas@users.noreply.github.com,noreply@github.com,"10/15/2020, 16:09:20",2020,"10/15/2020, 16:09:20",2020,3,0,3,4.8,1.8,0
,"Refactor VT parameter handling (#7799)

This PR introduces a pair of classes for managing VT parameters that
automatically handle range checking and default fallback values, so the
individual operations don't have to do that validation themselves. In
addition to simplifying the code, this fixes a few cases where we were
mishandling missing or extraneous parameters, and adds support for
parameter sequences on commands that couldn't previously handle them.
This PR also sets a limit on the number of parameters allowed, to help
thwart DoS memory consumption attacks.

## References

* The new parameter class also introduces the concept of an
  omitted/default parameter which is not necessarily zero, which is a
  prerequisite for addressing issue #4417.

## Detailed Description of the Pull Request / Additional comments

There are two new classes provide by this PR: a `VTParameter` class,
similar in function to a `std::optional<size_t>`, which holds an
individual parameter (which may be an omitted/default value); and a
`VTParameters` class, similar in function to `gsl:span<VTParameter>`,
which holds a sequence of those parameters.

Where `VTParameter` differs from `std::optional` is with the inclusion
of two cast operators. There is a `size_t` cast that interprets omitted
and zero values as 1 (the expected behaviour for most numeric
parameters). And there is a generic cast, for use with the enum
parameter types, which interprets omitted values as 0 (the expected
behaviour for most selective parameters).

The advantage of `VTParameters` class is that it has an `at` method that
can never fail - out of range values simply return the a default
`VTParameter` instance (this is standard behaviour in VT terminals). It
also has a `size` method that will always return a minimum count of 1,
since an empty parameter list is typically the equivalent of a single
""default"" parameter, so this guarantees you'll get at least one value
when iterating over the list with `size()`.

For cases where we just need to call the same dispatch method for every
parameter, there is a helper `for_each` method, which repeatedly calls a
given predicate function with each value in the sequence. It also
collates the returned success values to determine the overall result of
the sequence. As with the `size` method, this will always make at least
one call, so it correctly handles empty sequences.

With those two classes in place, we could get rid of all the parameter
validation and default handling code in the `OutputStateMachineEngine`.
We now just use the `VTParameters::at` method to grab a parameter and
typically pass it straight to the appropriate dispatch method, letting
the cast operators automatically handle the assignment of default
values. Occasionally we might need a `value_or` call to specify a
non-standard default value, but those cases are fairly rare.

In some case the `OutputStateMachineEngine` was also checking whether
parameters values were in range, but for the most part this shouldn't
have been necessary, since that is something the dispatch classes would
already have been doing themselves (in the few cases that they weren't,
I've now updated them to do so).

I've also updated the `InputStateMachineEngine` in a similar way to the
`OutputStateMachineEngine`, getting rid of a few of the parameter
extraction methods, and simplifying other parts of the implementation.
It's not as clean a replacement as the output engine, but there are
still benefits in using the new classes.

## Validation Steps Performed

For the most part I haven't had to alter existing tests other than
accounting for changes to the API. There were a couple of tests I needed
to drop because they were checking for failure cases which shouldn't
have been failing (unexpected parameters should never be an error), or
testing output engine validation that is no longer handled at that
level.

I've added a few new tests to cover operations that take sequences of
selective parameters (`ED`, `EL`, `TBC`, `SM`, and `RM`). And I've
extended the cursor movement tests to make sure those operations can
handle extraneous parameters that weren't expected. I've also added a
test to verify that the state machine will correctly ignore parameters
beyond the maximum 32 parameter count limit.

I've also manual confirmed that the various test cases given in issues
#2101 are now working as expected.

Closes #2101",,,,True,False,True,734,1444,25,25,j4_james@hotmail.com,noreply@github.com,"10/15/2020, 16:12:52",2020,"10/15/2020, 16:12:52",2020,3,1,3,2.3,4.8,0
,"doc: Remove unnecessary link to VC redist, update md lint rules (#7926)

Terminal ships with this dependency embedded, and it is not required that you install it separately. Since the link is broken, let's just remove it entirely.

* [x] fixes #7889 
* [x] related to https://github.com/microsoft/terminal/issues/7917#issuecomment-707955335
* [x] I work here
* [x] is a docs update

Additionally, update the markdown linter rules in the wake of #7637, because apparently that was never actually applied to any files, so now the onus is on the first person to touch any of our markdown files.",,,,True,False,False,204,58,3,2,migrie@microsoft.com,noreply@github.com,"10/15/2020, 18:49:11",2020,"10/15/2020, 18:49:11",2020,4,3,3,3.9,3.0,0
,"conpty: fall back to conhost if OpenConsole is missing (#7741)

This commit is in support of WTU.

I initially added support for a new flag, `PSEUDOCONSOLE_UNDOCKED_PREFER_INBOX_CONHOST`,
which I liked because it was more explicit. We chose not to go that route.

### Automatic fallback
#### Pros
* It's easier on the consumer
* We can eventually expand it to support `$ARCH/openconsole.exe`
#### Cons
* Packaging the project wrong will result in a working-but-somewhat-broken experience (old conhost)
   * We ameliorated this by checking it in the packaging script.
* Implicit behavior may be bad",,,,True,True,False,20,5,2,2,duhowett@microsoft.com,noreply@github.com,"10/15/2020, 18:50:27",2020,"10/15/2020, 18:50:27",2020,4,1,3,4.0,1.2,0
,"Add a setting to configure the audible bell (#7793)

Adds a new setting, `bellStyle`, to be able to disable the audible bell
added in #7679. Currently, this setting accepts two values:
* `audible`: play a noise on a bell
* `none`: Don't play a noise.

In the future, we can add a `""bellStyle"": ""visible""` for flashing the
Terminal instead of making a noise on bell.

## Validation Steps Performed
Pressing <kbd>Ctrl+G</kbd> in cmd, and hitting enter is an easy way of
triggering a bell. I set the setting to `none`, and presto, the bell
stopped.

Closes #2360",,,,False,False,False,72,17,9,9,migrie@microsoft.com,noreply@github.com,"10/15/2020, 22:27:27",2020,"10/15/2020, 22:27:27",2020,4,3,3,4.0,2.0,0
,"Increase contrast ratio on the CmdPal shortcut text (#7937)

Related to #7915.",,,,False,False,False,2,2,1,1,migrie@microsoft.com,noreply@github.com,"10/15/2020, 22:49:20",2020,"10/15/2020, 22:49:20",2020,4,3,3,2.5,1.0,0
,"Add support for the DECREQTPARM report (#7939)

This PR adds support for the `DECREQTPARM` (Request Terminal Parameters)
escape sequence, which was originally used on the VT100 terminal to
report the serial communication parameters. Modern terminal emulators
simply hardcode the reported values for backward compatibility.

The `DECREQTPARM` sequence has one parameter, which was originally used
to tell the terminal whether it was permitted to send unsolicited
reports or not. However, since we have no reason to send an unsolicited
report, we don't need to keep track of that state, but the permission
parameter does still determine the value of the first parameter in the
response.

The response parameters are as follows:

| Parameter        | Value  | Meaning                  |
| ---------------- | ------ | ------------------------ |
| response type    | 2 or 3 | unsolicited or solicited |
| parity           | 1      | no parity                |
| data bits        | 1      | 8 bits per character     |
| transmit speed   | 128    | 38400 baud               |
| receive speed    | 128    | 38400 baud               |
| clock multiplier | 1      |                          |
| flags            | 0      |                          |

There is some variation in the baud rate reported by modern terminal
emulators, and 9600 baud seems to be a little more common than 38400
baud, but I thought the higher speed was probably more appropriate,
especially since that's also the value reported by XTerm.

## Validation Steps Performed

I've added a couple of adapter and output engine tests to verify that
the sequence is dispatched correctly, and the expected responses are
generated. I've also manually tested in Vttest and confirmed that we now
pass the `DECREQTPARM` test in the _Test of terminal reports_.

Closes #7852",,,,False,False,False,125,0,12,12,j4_james@hotmail.com,noreply@github.com,"10/15/2020, 22:50:02",2020,"10/15/2020, 22:50:02",2020,4,1,3,5.0,3.0,0
,"Swap the command palette modes for the prefix `>` (#7935)

VsCode uses `>` as its ""prefix"" for the equivalent of their ""action
mode"". This PR aligns the Terminal with their logic here. 

We have to be tricky - if we use the `>` in the actual input as the
indicator for action mode, we can't display any placeholder text in the
input to tell users to type a command. This wasn't an issue for the
commandline mode previously, because we'd stick the ""prompt"" in the ""no
matches text"" space. However, we can't do that for action mode. Instead,
we'll stick a floating text block over the input box, and when the
user's in action mode, we'll manually place a `>` into that space. When
the user backspaces the `>`, we'll remove it from that block, and switch
into commandline mode.

## Validation Steps Performed
Played with the cmdpal in lots of different modes, this finally feels
good

Closes #7736",,,,False,False,False,115,97,4,4,migrie@microsoft.com,noreply@github.com,"10/15/2020, 22:58:35",2020,"10/15/2020, 22:58:35",2020,4,3,3,2.7,3.0,0
,"7395: do not clear text selection upon PrintScreen (#7883)

When handling SendKey, preserve selection upon PrintScreen (VK_SNAPSHOT)

Closes #7395",,,,False,False,False,2,1,1,1,khvitaly@gmail.com,noreply@github.com,"10/16/2020, 00:01:01",2020,"10/16/2020, 00:01:01",2020,1,0,3,3.3,1.0,0
,"Optimize the binary size of the XOrg color table (#7929)

This optimizes the binary size of the xorg color table by replacing the
static lookup table with a table of variable colors (indexed """" (0)
through ""4""), calculated greys for gr[ae]y0-100, and a table of the
remaining unsuffixed colors.

78 variable colors ...
  8 bytes each for pointer+size
  5 variants, 4 bytes each for the color data
718 bytes for 0-terminated color names

plus

84 colors ...
  8 bytes each for pointer+size
  4 bytes each for the color data
955 bytes for 8-terminated color names

  2902 = (78 * 8) + (78 * 5 * 4) + 718
+ 1963 = (84 * 8) + (84   *   4) + 955
------
  4865 bytes (approximately)

""I couldn't sleep at night thinking that after years of accusing Windows
being bloated and literally making it even more bloated with my hands.
So here you go. The mediocre yet working solution. This reduces the
binary size to 1051k (1067k before) while keeping the code maintainable
for human beings.""",,,,False,False,False,150,596,2,2,skyline75489@outlook.com,noreply@github.com,"10/16/2020, 00:45:33",2020,"10/16/2020, 00:45:33",2020,1,1,3,1.8,3.6,0
,"Fix garbling when copying multibyte text via OSC 52 (#7870)

This commit adds a missing conversion utf8 to utf16 in decoding base64
for handling multibyte text in copying via OSC 52.

## Validation Steps Performed
* automatically
    * Tests w/ multibyte characters
* manually
    * case1
        * Executed `printf ""\x1b]52;;%s\x1b\\"" ""$(printf '👍👍🏻👍🏼👍🏽👍🏾👍🏿' | base64)""`
        * Verified `👍👍🏻👍🏼👍🏽👍🏾👍🏿` in my clipboard
    * case2
        * Copied `👍👍🏻👍🏼👍🏽👍🏾👍🏿` by tmux 2.6 default copy function (OSC 52)
        * Verified `👍👍🏻👍🏼👍🏽👍🏾👍🏿` in my clipboard

Closes #7819",,,,True,False,False,45,15,5,5,amaya382@users.noreply.github.com,noreply@github.com,"10/16/2020, 02:02:59",2020,"10/16/2020, 02:02:59",2020,1,0,3,3.7,1.8,0
,"Hash the URI as part of the hyperlink ID (#7940)

It turns out that we missed part of the OSC 8 spec which indicated that
_hyperlinks with the same ID but different URIs are logically distinct._

> Character cells that have the same target URI and the same nonempty id
> are always underlined together on mouseover.
> The same id is only used for connecting character cells whose URIs is
> also the same. Character cells pointing to different URIs should never
> be underlined together when hovering over.

This pull request fixes that oversight by appending the (hashed) URI to
the generated ID.

When Terminal receives one of these links over ConPTY, it will hash the
URL a second time and therefore append a second hashed ID. This is taken
as an acceptable cost.

Fixes #7698",,,,True,False,False,87,20,7,7,duhowett@microsoft.com,noreply@github.com,"10/16/2020, 22:08:59",2020,"10/16/2020, 22:08:59",2020,4,1,3,4.1,3.0,0
,"Implement CascadiaSettings::Copy() (#7877)

## Summary of the Pull Request
This implements the `Copy` function for `CascadiaSettings`. Copy performs a deep copy of a `CascadiaSettings` object. This is needed for data binding in the Terminal Settings Editor.

The `Copy` function was basically implemented in every settings model object. This was mostly just repetitive work.

## References
#7667 - TSM
#1564 - Settings UI

## PR Checklist
* [X] Tests added/passed",,,,False,False,False,374,6,18,18,carlos.zamora@microsoft.com,noreply@github.com,"10/16/2020, 22:14:11",2020,"10/16/2020, 22:14:11",2020,4,1,3,4.9,3.5,0
,"Fix crash when creating tab menu multiple times (#7961)

Fix for crash occurring when splitting a pane, due to tab context menu created multiple times.

## References
#7728 

## PR Checklist
* [x] Closes #7941 
* [x] CLA signed. 

## Detailed Description of the Pull Request / Additional comments
When splitting panes the `Tab::Initialize` function is called again. This rebuilt the context menu from scratch and appended the existing Close... sub-menu items to a new parent, thus causing the crash.
It is not necessary to re-create the context menu every time you split panes, it can be created only once.

## Validation Steps Performed
Manual verification:
- Play with the context menu, the Close... submenu is functioning
- Split panes (ALT + New tab), no crash occurs and context menu still functioning",,,,True,False,False,2,3,1,1,1140981+mpela81@users.noreply.github.com,noreply@github.com,"10/19/2020, 16:17:29",2020,"10/19/2020, 16:17:29",2020,3,0,3,2.0,1.2,0
,"Update GH Action Super-Linter and README (#7951)

Updates the GH Action and makes a small update to the README to test
changes.

A missing install step for Windows Terminal using Scoop has been added.
The versioning of Super-Linter was also switched to v3 to allow
auto-updates within the v3 series. This can be version-pinned again if a
breaking change comes later. The current updates fix some bugs and bump
the linters utilized. 

## Validation Steps Performed
Validation will be shown in the build steps.

Closes #7934",,,,True,False,False,6,2,2,1,33032910+wsluser@users.noreply.github.com,noreply@github.com,"10/19/2020, 20:08:37",2020,"10/19/2020, 20:08:37",2020,4,1,3,4.1,1.2,0
,"Make sure TSM pulls in the wildcard resource targets (#7966)

This import is required to make localized resources work.",,,,False,False,False,2,0,1,1,duhowett@microsoft.com,noreply@github.com,"10/19/2020, 22:31:09",2020,"10/19/2020, 22:31:09",2020,4,1,3,5.0,1.0,0
,"Fix #5784: Key bindings won't consume dead keys (#7686)

Let's assume the user has bound the dead key ^ to a sendInput command
that sends ""b"".  If the user presses the two keys ^a it'll produce ""bâ"",
despite us marking the key event as handled.  We can use `ToUnicodeEx`
to clear such dead keys from the keyboard state and should make use of
that for keybindings.  Unfortunately `SetKeyboardState` cannot be used
for this purpose as it doesn't clear the dead key state.

Validation
* Enabled a German keyboard layout
* Added the following two keybindings:
  { ""command"": { ""action"": ""sendInput"", ""input"": ""x"" }, ""keys"": ""q"" },
  { ""command"": { ""action"": ""sendInput"", ""input"": ""b"" }, ""keys"": ""^"" }
* Pressed the following keys → ensured that the given text is printed:
  * q → x
  * ´ → nothing
  * a → á
  * ^ → b
  * a → a (previously this would print: â)
  * ´ → nothing
  * ^ → b
  * a → a (unfortunately we cannot specifically clear only ^)

Closes #5784",,,,True,False,False,41,4,3,3,leonard@hecker.io,noreply@github.com,"10/19/2020, 23:55:56",2020,"10/19/2020, 23:55:56",2020,4,1,3,4.6,1.2,0
,"Display ATS tabs in MRU order (#7952)

This PR changes the ATS display order to _always_ be in most recently
used (MRU) order. I chose not to give ATS the option to be displayed
in-order because that order is better served through the traditional
left-right TabRow switching. 

_Note_: `TabSearch` will stay in-order.

This means that users can only choose one order or another in their
`nextTab/prevTab` bindings. Setting `useTabSwitcher` to true will make
nT/pT open the ATS in MRU order. If it's set to false, the ATS won't
open and nT/pT will simply go left and right on the TabRow.

I'm open to getting rid of the global and making ATS its own keybinding,
but for now I figured I would keep the current behavior and open the PR
to get eyes on the code that doesn't have anything to do with the
settings.

Closes #973",,,,False,False,False,72,63,6,6,lelian@microsoft.com,noreply@github.com,"10/21/2020, 19:37:28",2020,"10/21/2020, 19:37:28",2020,4,0,3,2.7,2.5,0
,"Fix slowdown on open/close tabs when the user has many profiles (#7993)

## Summary of the Pull Request
Just deleting an unnecessary call to `_UpdateCommandsForPalette`

**Note:** This only fixes slowdown when opening/closing a tab, but not upon first startup (we still need to call `_UpdateCommandsForPalette` there 

## References
Fixes the slowdown described in #7820 for opening and closing tabs, but doesn't improve startup time dramatically.

## Validation Steps Performed
Tested with ~100 profiles in my settings file",,,,True,False,False,0,4,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/21/2020, 19:37:58",2020,"10/21/2020, 19:37:58",2020,4,1,3,1.0,1.2,0
,"Fix `exit`ing a zoomed pane (#7973)

## Summary of the Pull Request

Fixes the bug where `exit`ing inside a closed pane would leave the Terminal blank.

Additionally, removes `Tab::GetRootElement` and replaces it with the _observable_ `Tab::Content`. This should be more resilient in the future.

Also adds some tests, though admittedly not for this exact scenario. This scenario requires a cooperating TerminalConnection that I can drive for the sake of testing, and _ain't nobody got time for that_.

## References
* Introduced in #6989 

## PR Checklist
* [x] Closes #7252
* [x] I work here
* [x] Tests added/passed 🎉 
* [n/a] Requires documentation to be updated

## Detailed Description of the Pull Request / Additional comments

From notes I had left in `Tab.cpp` while I was working on this:
```
OKAY I see what's happening here the ActivePaneChanged Handler in TerminalPage
doesn't re-attach the tab content to the tree, it just updates the title of the
window.

So when the pane is `exit`ed, the pane's control is removed and re-attached to
the parent grid, which _isn't in the XAML tree_. And no one can go tell the
TerminalPage that it needs to re set up the tab content again.

The Page _manually_ does this in a few places, when various pane actions are
about to take place, it'll unzoom. It would be way easier if the Tab could just
manage the content of the page.

Or if the Tab just had a Content that was observable, that when that changed,
the page would auto readjust. That does sound like a LOT of work though.
```

## Validation Steps Performed

Opened panes, closed panes, exited panes, zoomed panes, moved focus between panes, panes, panes, panes",,,,True,False,False,255,27,9,9,migrie@microsoft.com,noreply@github.com,"10/21/2020, 21:33:56",2020,"10/21/2020, 21:33:56",2020,4,3,3,4.5,3.6,0
,"Expose WindowsTerminalBranding to the preprocessor (optionally) (#7986)

Our build pipeline was originally set up such that we could take any
binaries from the Terminal build and seamlessly re-package them with the
release or preview livery. My initial plan was to stamp a stable and
preview build at the same time, out of the same bits, to make ring
promotion easier.

I've never done that. For the last five releases, we've just re-cut a
new stable build along with the new preview build, usually because we
want to backport some fixes to stable.

This commit introduces preprocessor defines, detectable through CL and
RC, for any project that wants them. Right now, that's just going to be
WindowsTerminal.vcxproj (since it hosts the icons and the app entry
point). This list may be extended to include wt (the shim executable)
and the shell extension at some future date.

This will greatly simplify the logic in #7971, as we'll no longer need
to detect if we're dev or preview at runtime. It may also simplify the
logic in the shell extension for determining whether we're Dev or not.",,,,True,True,False,19,0,2,2,duhowett@microsoft.com,noreply@github.com,"10/21/2020, 21:43:53",2020,"10/21/2020, 21:43:53",2020,4,1,3,5.0,1.2,0
,Prepare for the primary branch name to change to main (#7985),,,,False,False,False,26,26,12,11,duhowett@microsoft.com,noreply@github.com,"10/22/2020, 00:29:36",2020,"10/22/2020, 00:29:36",2020,1,1,3,2.5,2.5,0
,"Enable PgUp/PgDown and Home/End in the command palette (#7835)

Closes #7729",,,,False,False,False,71,0,2,2,yukawa_hidenori@icloud.com,noreply@github.com,"10/22/2020, 04:40:57",2020,"10/22/2020, 04:40:57",2020,1,0,3,5.0,1.5,0
,"Move jumplist creation to background thread (#7978)

Move jumplist creation to a background thread, as it
does not need to be on the main thread

Closes #7791",,,,False,False,False,12,9,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/23/2020, 00:17:26",2020,"10/23/2020, 00:17:26",2020,1,1,3,2.9,1.0,0
,"Display a warning for when we fail to write to the settings file (#7950)

We wrap the call to `_WriteSettings` in
`CascadiaSettingsSerialization.cpp` in a try/catch block, and if we
catch an error we append a warning telling the user to check the
permissions on their settings file. 

Closes #7727",,,,True,True,False,27,4,6,6,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/23/2020, 00:21:07",2020,"10/23/2020, 00:21:07",2020,1,1,3,4.4,1.8,0
,"Quick fix for ActionAndArgs::Copy() (#8016)

The copy wasn't checking for whether there were any args to copy,
causing memory access violations sometimes",,,,True,True,False,1,1,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/23/2020, 00:26:54",2020,"10/23/2020, 00:26:54",2020,1,1,3,2.5,1.2,0
,"Updating comments in CommandPalette.cpp (#8019)

Changed wrong comments from the last PR and also added new comments.

* [x] CLA signed",,,,True,True,False,9,7,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"10/23/2020, 08:27:25",2020,"10/23/2020, 08:27:25",2020,2,0,3,2.8,1.2,0
,"Show color slider in Tab color picker (#7963)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
Adds the color slider to the tab color picker

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #7948 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] ~Tests added/passed~
* [ ] ~Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx~
* [ ] ~Schema updated.~
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #7948 

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->


<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

*Not required*",,,,True,False,False,1,1,1,1,67918878+alannt777@users.noreply.github.com,noreply@github.com,"10/23/2020, 20:18:06",2020,"10/23/2020, 20:18:06",2020,4,0,3,2.5,1.2,0
,"Added Types project reference to the FuzzWrapper project (#8041)

The intent of this PR is to resolve the dependency errors reported in
#7931. The Types project has been added as a reference to the
FuzzWrapper project, which fixes the unresolved dependency errors
reported.

For validation steps, I:
1.) Pulled down main.
2.) Rebuilt the FuzzWrapper project and observed the unresolved
  dependency errors keeping it from building successfully.
3.) Added a project reference to the Types project.
4.) Rebuilt the FuzzWrapper project and verified that the dependency
  errors disappeared.

Closes #7931.",,,,True,False,False,8,2,2,2,sabatu@gmail.com,noreply@github.com,"10/26/2020, 22:42:16",2020,"10/26/2020, 22:42:16",2020,4,0,3,4.0,1.2,0
,"wpf: base margin height off Y dpi, not X dpi (#8039)

This PR resolves an issue I observed in
Microsoft.Terminal.Wpf.TerminalControl.CalculateMargins(). Specifically,
on line 194 in the project. In this example, the line: `height =
controlSize.Height - (this.TerminalRendererSize.Height /
dpiScale.DpiScaleX);` is associating the height margin with
dpiScale.DpiScaleX instead of dpiScale.DpiScaleY. This PR changes the
association to DpiScaleY.

Closes #8038",,,,False,False,False,1,1,1,1,sabatu@gmail.com,noreply@github.com,"10/26/2020, 22:43:04",2020,"10/26/2020, 22:43:04",2020,4,0,3,2.5,1.2,0
,"doc: Introduce Inheritance Addendum to TSM Spec (#7876)

This introduces an addendum to the Terminal Settings Model spec that
covers inheritance and fallback. Basically, settings objects will now
have a reference to a parent object. If the settings object does not
have a setting defined, it will ask its parent to resolve the value. A
parent is set using the `Clone()` function. `Copy()` is used to copy the
value and structure of the settings model, whereas `Clone()` is used to
copy a reference to the settings model and build an inheritance tree.

## References
#6904 - Terminal Settings Model Spec
#1564 - Settings UI",,,,False,False,False,176,2,5,3,carlos.zamora@microsoft.com,noreply@github.com,"10/26/2020, 23:22:47",2020,"10/26/2020, 23:22:47",2020,4,1,3,4.9,2.0,0
,"add rowsToScroll to scrollUp/Down w/ fallback to system default (#7924)

- The number of lines to move upon scroll up scroll down can be defined
  in ScrollUp and ScrollDown commands (parameter is called
  ""rowsToScroll"").
- If the number are not provided, use the system default (the one we are
  using for mouse scrolls), rather than 1 line.

## Validation Steps Performed
* Manual testing
* Added custom bindings for scroll commands with different values,
  verified they and the default appear and behave as expected
* Checked that invalid values are not allowed

Closes #5078",,,,False,False,False,327,23,10,10,khvitaly@gmail.com,noreply@github.com,"10/27/2020, 01:19:52",2020,"10/27/2020, 01:19:52",2020,1,0,3,4.7,3.6,0
,"wpf: add width/height checks when resizing the terminal (#7983)

We are getting some watson crash reports that the terminal is attempting
to resize to `(0, 0)`. This change makes it so that we prevent such
resizing and if so, throw an exception before we reach native code.

This commit adds resizing checks that prevent resizing the terminal WPF
control to a size of `(0, 0)`",,,,False,False,False,20,2,1,1,javier.delagarza@gmail.com,noreply@github.com,"10/27/2020, 01:57:13",2020,"10/27/2020, 01:57:13",2020,1,0,3,4.5,1.2,0
,"Close tab context menu on titlebar click (#8010)

Close the tab context menu when clicking on the title bar

## Detailed Description of the Pull Request / Additional comments
Following #2438, hide the tabs context menu on `TerminalPage::TitlebarClicked()`. 
We don't know which of the tabs is showing the context menu, do it on all tabs.

## Validation Steps Performed
Open the context menu from any tab, click on title bar and see the context menu disappear.

Closes #7988",,,,False,False,False,9,0,1,1,1140981+mpela81@users.noreply.github.com,noreply@github.com,"10/27/2020, 02:24:54",2020,"10/27/2020, 02:24:54",2020,1,0,3,5.0,1.0,0
,"Make Global and Profile settings inheritable (#7923)

## Summary of the Pull Request
Introduces `IInheritable` as an interface that helps move cascading settings into the Terminal Settings Model. `GlobalAppSettings` and `Profile` both are now `IInheritable`. `CascadiaSettings` was updated to `CreateChild()` for globals and each profile when we are loading the JSON data.

IInheritable does most of the heavy lifting. It introduces a two new macros and the interface. The macros help implement the fallback functionality for nullable and non-nullable settings.

## References
#7876 - Spec Addendum
#6904 - TSM Spec
#1564 - Settings UI

#7876 - `Copy()` needs to be updated to include _parent",,,,False,False,False,1050,296,20,20,carlos.zamora@microsoft.com,noreply@github.com,"10/27/2020, 17:35:09",2020,"10/27/2020, 17:35:09",2020,3,1,3,3.9,4.0,0
,"Fully regenerate CodepointWidthDetector from Unicode 13.0 (#8035)

This commit also adds an override UCD and migrates all of the overrides
from GetQuickCharWidth into it.

GetQuickCharWidth
-----------------

The removal of overrides from GQCW reduces the number of comparisons
required for looking up a single character's width from 41 (32
individual ranged comparisons from GQCW + 8+1 from the binary search in
CPWD) to 11 (2 from GQCW, 8+1 from CPWD).

GQCW also incorrectly marked 67 reserved codepoints as `Wide` when they
should have been `Narrow`.

The codepoints whose definitions have changed from `Wide` to `Narrow` are:

```
2E9A 2EF4 2EF5 2EF6 2EF7 2EF8 2EF9 2EFA 2EFB 2EFC 2EFD 2EFE 2EFF 2FD6
2FD7 2FD8 2FD9 2FDA 2FDB 2FDC 2FDD 2FDE 2FDF 2FE0 2FE1 2FE2 2FE3 2FE4
2FE5 2FE6 2FE7 2FE8 2FE9 2FEA 2FEB 2FEC 2FED 2FEE 2FEF 2FFC 2FFD 2FFE
2FFF 31E4 31E5 31E6 31E7 31E8 31E9 31EA 31EB 31EC 31ED 31EE 31EF 321F
A48D A48E A48F FE1A FE1B FE1C FE1D FE1E FE1F FE53 FE67
```

All of them are reserved, but those reserved regions are marked as narrow
in the UCD.

This change also offers us the chance to document exactly why we're
overriding a specific character range. Comments from the override
document will be copied to the generated CPWD table.

New in Unicode 13.0
------------------

Some widths have changed due to previously-reserved characters becoming
_used_ such as U+32FF SQUARE ERA NAME REIWA, the Tangut components
756-768, the entire Khitan Small Script character set, and the Tangut
Ideographs.

A number of the changes in this diff are due to better/worse comment
tracking and the removal of the Emoji/EPres comments. The script once
mistakenly applied comments to packed regions (and it has been updated
to not do so.)

Validation
----------

I build a test application that compared codepoints 0-FFFF for GQCW
against their new registered widths.",,,,False,False,False,116,289,5,5,duhowett@microsoft.com,noreply@github.com,"10/27/2020, 17:36:28",2020,"10/27/2020, 17:36:28",2020,3,1,3,1.4,2.5,0
,"Fix SendInput handling (#7900)

While not explicitly permitted, a wide range of software (including
Windows' own touch keyboard) sets the `wScan` member of the `KEYBDINPUT`
structure to 0, resulting in `scanCode` being 0 as well.  In these
situations we'll now use the `vkey` to get a `scanCode`.

Validation
----------
* AutoHotkey
  * Use a keyboard layout with `AltGr` key
  * Execute the following script:
    ```ahk
    #NoEnv
    #Warn
    SendMode Input
    SetWorkingDir %A_ScriptDir%
    <^>!8::SendInput {Raw}»
    ```
  * Press `AltGr+8` while the Terminal is in the foreground
  * Ensure » is being echoed ✔️
* PowerToys
  * Add a `Ctrl+I -> ↑ (up arrow)` keyboard shortcut
  * Press `Ctrl+I` while the Terminal is in the foreground
  * Ensure the shell history is being navigated backwards ✔️
* Windows Touch Keyboard
  * Right-click or tap and hold the taskbar and select ""Show touch
    keyboard"" button
  * Open touch keyboard
  * Ensure keyboard works like a regular keyboard ✔️
  * Ensure unicode characters are echoed on the Terminal as well (except
    for Emojis) ✔️

Closes #7438
Closes #7495
Closes #7843",,,,True,False,False,23,43,4,3,leonard@hecker.io,noreply@github.com,"10/27/2020, 19:06:29",2020,"10/27/2020, 19:06:29",2020,4,1,3,1.6,1.8,0
,"Update C++/WinRT to 2.0.201017.1 (#8061)

We cannot use the most recent version of C++/WinRT due to
microsoft/cppwinrt#780 (or similar).",,,,False,False,False,23,23,15,14,duhowett@microsoft.com,noreply@github.com,"10/27/2020, 20:15:30",2020,"10/27/2020, 20:15:30",2020,4,1,3,2.5,2.0,0
,doc: add a link to MSYS2's WT profiles page (#8060),,,,False,False,False,3,1,1,1,migrie@microsoft.com,noreply@github.com,"10/27/2020, 20:27:00",2020,"10/27/2020, 20:27:00",2020,4,3,3,3.7,1.0,0
,"Remove all our path antics; force native projects to bin/, obj/ (#8062)

This commit fixes our longstanding build artifact output issues and
finally unifies all C++ project output into bin/ and obj/.

In light of that, I've removed NoOutputRedirection.

I've also updated WTU and U8U16Test to use our common build props and
fixed any warnings/compilation errors that popped out.

I validated this change by running repeated incremental builds after
changing individual .cpp files in many of our C++/WinRT projects.",,,,True,True,False,70,422,27,24,duhowett@microsoft.com,noreply@github.com,"10/27/2020, 22:00:41",2020,"10/27/2020, 22:00:41",2020,4,1,3,0.7,4.8,0
,"UIA: throw E_FAIL for out-of-bounds text (#8052)

In https://github.com/nvaccess/nvda/issues/11428#issuecomment-715893846,
Andre9642 reported a Conhost crash when switching to/from the alt buffer
a few times with a Braille display connected. Upon further
investigation, @carlos-zamora and I discovered that the FailFast was in
`GetText`: more checks similar to #7677 were needed for this case.

Tested with NVDA using a [Focus](https://www.freedomscientific.com/products/blindness/focus40brailledisplay/) Braille display.

Improves nvaccess/nvda#11428",,,,False,False,False,12,8,3,3,codeofdusk@gmail.com,noreply@github.com,"10/27/2020, 22:45:23",2020,"10/27/2020, 22:45:23",2020,4,0,3,3.4,1.2,0
,"Update WT's icon at runtime to match high-contrast as applicable (#7971)

This commit introduces 8 more variants of the .ICO file, embeds the
right ones into WindowsTerminal.exe, and adds code that will select the
most appropriate icon at runtime.

Since we're a Centennial application, the ""application"" icon inside our
package isn't used by the shell for the taskbar thumbnails or the
Alt-Tab window.

To quote J. Tippet,
> I believe there are two possible fixes:
>
> 1. Fix the OS shell to prefer the MRT icon instead of preferring the
>    win32 icon
> 2. Add alternate versions of /res/terminal.ico
> The 1st fix is clearly better, since it benefits any hybrid app. But
> the 2nd fix is much easier, since it'd just take about an hour to gin up
> a new .ico file and hack the .RC file to refer to it when building the
> preview flavor.

... and to quote Michael Ratanapintha,

> Basically, if your MSIX-packaged desktop app's image resources are
> separate files or even separate MSIX packages, they may be loaded by
> MRT. If they're embedded in the .exe, they're the old-fashioned Win32
> resources Mr. Tippet is referring to.

This is the ""2nd fix.""

Fixes #6777

Co-authored-by: Jeffrey Tippet <jtippet@ntdev.microsoft.com>",,,,True,False,False,114,4,220,8,duhowett@microsoft.com,noreply@github.com,"10/28/2020, 00:39:38",2020,"10/28/2020, 00:39:38",2020,1,1,3,4.8,4.8,0
,"Fix the WINRT_NO_MAKE_DETECTION build break (#8067)

C++/WinRT added a feature where it will detect a mismatch in some of its
build flags.

Because we build XAML projects and non-XAML projects, and try to link
them together in static libraries, we need those flags to always match.

C++/WinRT only respects this flag when `DEBUG` is set, so our CI missed
this.

With thanks to @carlos-zamora for letting me build/test/commit this on
his computer.",,,,True,True,False,8,0,2,2,duhowett@microsoft.com,noreply@github.com,"10/28/2020, 00:56:09",2020,"10/28/2020, 00:56:09",2020,1,1,3,5.0,1.2,0
,"Shell extension: Use WT's icon as our icon (#8068)

This is cheaper than storing another icon in another resource fork.

Eventually, we could support high contrast just by varying the icon ID.

Fixes #6246. Looks pretty good, too.

![image](https://user-images.githubusercontent.com/189190/97379930-38f08000-1883-11eb-8d37-a7741ea55b29.png)",,,,True,False,False,9,4,1,1,duhowett@microsoft.com,noreply@github.com,"10/28/2020, 10:31:45",2020,"10/28/2020, 10:31:45",2020,2,1,3,3.5,1.2,0
,"Store and expose hidden profiles (#8070)

## Summary of the Pull Request
This PR replaces `CascadiaSettings::_profiles` with...
- `_allProfiles`: the list of all available profiles in the settings model (i.e. settings.json, dynamic profiles, etc...)
- `_activeProfiles`: the list of all non-hidden profiles (used for the new tab dropdown)

## References
#8018: maintaining a list of all profiles allows us to serialize hidden profiles
#1564: Settings UI can link to `AllProfiles()` instead of `ActiveProfiles()` to expose hidden profiles

## PR Checklist
* [x] Closes #4139 
* [x] Tests added/passed

## Validation Steps Performed
Deploy and testing succeeded",,,,False,False,False,595,578,10,10,carlos.zamora@microsoft.com,noreply@github.com,"10/28/2020, 16:22:26",2020,"10/28/2020, 16:22:26",2020,3,1,3,2.5,3.5,0
,"Copy _currentHyperlinkId when copying the buffer (#8074)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Realized that we don't copy the current hyperlink id when we copy buffers, quick fix for that

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I work here",,,,True,True,False,3,1,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/28/2020, 16:23:45",2020,"10/28/2020, 16:23:45",2020,3,1,3,3.7,1.2,0
,"Add `openTabRenamer` action (#7462)

Adds a `ShortcutAction` to allow editing the tab title via the TextBox
(just like double-clicking the tab, but triggered from a key binding or
command palette).

* This implements ""scenario 3"" outlined in zadjii-msft's comment:
  https://github.com/microsoft/terminal/pull/6557#issuecomment-646153274

* The `openTabRenamer` action name is taken from the discussion in this
  PR:
  https://github.com/microsoft/terminal/pull/6567#issuecomment-646319010

Related to #6256 (but doesn't address pane renaming)",,,,False,False,False,58,5,14,13,coridyn@gmail.com,noreply@github.com,"10/28/2020, 19:36:30",2020,"10/28/2020, 19:36:30",2020,4,0,3,4.6,3.0,0
,"Add support for autodetecting URLs and making hyperlinks (#7691)

This pull request is the initial implementation of hyperlink auto
detection

Overall design:
- Upon startup, TerminalCore gives the TextBuffer some patterns it
  should know about
- Whenever something in the viewport changes (i.e. text
  output/scrolling), TerminalControl tells TerminalCore (through a
  throttled function for performance) to retrieve the visible pattern
  locations from the TextBuffer
- When the renderer encounters a region that is associated with a
  pattern, it paints that region differently 

References #5001
Closes #574",,,,False,False,False,968,17,25,25,pankaj.d.bhoj@gmail.com,noreply@github.com,"10/28/2020, 20:24:43",2020,"10/28/2020, 20:24:43",2020,4,1,3,4.9,4.0,0
,"Move CI and audit build to the WinDev scale set pool (#8080)

This pull request switches us to the new WinDev scaleset agent pool. It
should be faster than the hosted pool, and the larger disks allow us to
get rid of our PCH cleanup step.",,,,False,False,False,8,6,4,4,duhowett@microsoft.com,noreply@github.com,"10/28/2020, 20:49:13",2020,"10/28/2020, 20:49:13",2020,4,1,3,3.3,1.0,0
,"Fire and forget Hyperlink handling to break deadlock (#8087)

Fire and forget on the hyperlink handler inside the TermControl. 

## PR Checklist
* [x] Closes #7994 
* [x] Tested manually
* [x] Hi, I work here.

## Detailed Description of the Pull Request / Additional comments
In `TermControl`, `_HyperlinkHandler` is called by
`_PointerPressedHandler` which has taken a write lock for all its
friends. However, `_HyperlinkHandler` downstreams to `ShellExecute`
which can pump the message queue looking for something. That pumping of
the queue can trigger messages that also want the write lock to update
state. They get stuck. Everything hangs. 

`_HyperlinkHandler` really only needs read lock and really only for as
long as it takes to fill up its parameters before it's invoked... but
the simpler and more contained solution is to just fire and forget the
rest of the method that causes the deadlock to a continuation at the
tail of the dispatcher queue so `_PointerPressedHandler` can complete
and naturally drop the write lock.

## Validation Steps Performed
- Launched `main` manually on my box and clicked the hyperlink that is
  detected when Powershell starts and it froze.
- Launched this change manually on my box and clicked the hyperlink that
  is detected when Powershell starts and it did not freeze.",,,,False,False,False,14,4,2,2,miniksa@microsoft.com,noreply@github.com,"10/29/2020, 14:03:30",2020,"10/29/2020, 14:03:30",2020,3,3,3,3.9,1.0,0
,"Double middle click on taskbar preview closes application (#7871)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
A second close command (middle click on taskbar preview) overrides the warning dialog and closes the application.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #7451 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
When a close command is invoked (middle click on taskbar preview or 'X' button), a new flag is set. When the user wants to close again (this time only via the taskbar preview, as the 'X' button is disabled), the application is closed. If the user cancels the dialog, the flag is reset to prevent accidental closing on a subsequent close command.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
I am developing with a [Windows 10 virtual machine](https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/) provided by Microsoft. I tested manually. I considered the 'X' button, middle click on taskbar preview, and Alt+F4. Only a middle click on the taskbar preview does override the dialog.",,,,True,False,False,20,2,3,3,raphael.horber@gmail.com,noreply@github.com,"10/29/2020, 16:32:12",2020,"10/29/2020, 16:32:12",2020,3,0,3,4.5,1.2,0
,"7996: Always on Top setting does not persist (#8125)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/7996
* [x] CLA signed.
* [ ] Documentation updated - irrelevant
* [ ] Schema updated - irrelevant
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Currently the value of AlwaysOnTop is read by the AppHost from AppLogic that takes this value from the root TerminalPage. However at this stage neither AppLogic nor TerminalPage are initialized, and thus the return value is always false.

This PR introduces a ""GetInitialAlwaysOnTop"" method to AppLogic that returns a value that is configured in the settings.
In addition, the TerminalPage creation was fixed to read the configuration value upon creation (and not just after settings reload).

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
* Only manual testing
* Starting the system with both initial value set to true and false
* Verifying that dynamic toggling on / off is not affected",,,,True,True,False,16,1,5,5,khvitaly@gmail.com,noreply@github.com,"11/02/2020, 18:51:29",2020,"11/02/2020, 18:51:29",2020,4,0,3,4.7,1.2,0
,"7012: top margin disappears upon resize in focus mode (#8140)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
In the focus mode the top border disappears upon resize. While this behavior is expected in the maximized / full screen mode, it should not happen in the focus mode.
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/7012
* [x] CLA signed
* [ ] Tests added/passed - nope, only manual testing
* [ ] Documentation updated - irrelevant
* [ ] Schema updated - irrelevant
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
_GetTopBorderHeight method returns 0 when maximized or no title bar is visible. However the existence of top border has nothing to do with whether the title bar is visible. We want to leave the border as long as the window is not in some form of maximizing (maximized / full screen)
<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
* Manual - dragging, resizing, maximizing both in focus and non focus modes + full screen testing",,,,True,True,False,3,3,1,1,khvitaly@gmail.com,noreply@github.com,"11/03/2020, 17:40:02",2020,"11/03/2020, 17:40:02",2020,3,0,3,2.5,1.2,0
,"Consider the GlyphWidth when calculate the postion of matched word in URL detecting (#8124)

Fix #8121
![image](https://user-images.githubusercontent.com/1068203/97811235-2081ca80-1cb4-11eb-82bd-1ddaf15c757c.png)


<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

When calculating the position of the matched pattern, consider the width of the characters.

However, if there are some wide glyphs in the detected hyperlink(not possible for now, for the existing regex will not match wide-character?). The repeated character in the tooltip is not fixed by this PR.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #8121
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

When calculating the coordinate of the match in #7691, it simply uses the `prefix.size()` as the total prefix width on the screen.

This PR fixes that behavior.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Manually Verified",,,,True,False,False,13,2,1,1,comzyh@users.noreply.github.com,noreply@github.com,"11/03/2020, 20:40:58",2020,"11/03/2020, 20:40:58",2020,4,0,3,4.3,1.2,0
,"Use LanguageStandard over explicit compiler flag for C++17 (#8150)

Turns out there's an actual way to specify C++17 for MSBuild purposes
besides just passing the compile flag.

## References
* Future C++20 support (modules)

## PR Checklist
* [x] Closes random fact found while exploring VS16.8 preview C++20
  modules.
* [x] I work here.
* [x] It still builds.

## Detailed Description of the Pull Request / Additional comments
* We've been setting C++17 with just the flag passed to the compiler
  `cl.exe`. But it turns out that this particular `LanguageStandard`
  option will need to be set appropriately one day for us to use C++20
  modules (as evidenced by the latest VS16.8 preview that I tried out to
  explore modules.) The `AdditionalOption` alone isn't enough to ensure
  that modules can be ""seen"" by other projects after production, but
  `LanguageStandard` is (and will set the compiler option as appropriate
  as well as whatever internal goo that MSBuild needs to hook up other
  stuff.)

## Validation Steps Performed
* Built with it changed.",,,,False,False,False,3,1,2,2,miniksa@microsoft.com,noreply@github.com,"11/03/2020, 23:20:48",2020,"11/03/2020, 23:20:48",2020,4,3,3,3.7,1.0,0
,"Make the link underline less obtrusive; don't use it for pattern (#8148)

This pull request switches up the treatment we use for pattern-detected
links and OSC 8 hyperlinks:

* Links generated via OSC 8 have a sparse dotted underline instead of a
  thick dashed one
* Links generated by pattern detection _are not underlined until they've
  hovered_
   * This papers over a visual glitch that is a result of us updating
     the pattern matches every ~500ms (on change)

Closes #8123",,,,False,False,False,17,12,2,2,duhowett@microsoft.com,noreply@github.com,"11/03/2020, 23:22:59",2020,"11/03/2020, 23:22:59",2020,4,1,3,2.9,1.0,0
,"Make Tab an unsealed runtimeclass (and rename it to TabBase) (#8153)

In preparation for the Settings UI, we needed to make some changes to
Tab to abstract out shared, common functionality between different types
of tab. This is the result of that work. All code references to the
settings have been removed or reverted.

Contains changes from #8053, #7802.

The messages below only make sense in the context of the Settings UI,
which this pull request does not bring in. They do, however, provide
valuable information.

From #7802 (@leonMSFT):

> This PR's goal was to add an option to the `OpenSettings` keybinding to
> open the Settings UI in a tab. In order to implement that, a couple of
> changes had to be made to `Tab`, specifically:
>
> - Introduce a tab interface named `ITab`
> - Create/Rename two new Tab classes that implement `ITab` called
>   `SettingsTab` and `TerminalTab`
>

From #8053:

> `TerminalTab` and `SettingsTab` share some implementation details. The
> close submenu introduced in #7728 is a good example of functionality
> that is consistent across all tabs. This PR transforms `ITab` from an
> interface, into an [unsealed runtime class] to de-duplicate some
> functionality. Most of the logic from `SettingsTab` was moved there
> because I expect the default behavior of a tab to resemble the
> `SettingsTab` over a `TerminalTab`.
>
> ## References
> Verified that Close submenu work was transferred over (#7728, #7961, #8010).
>
> ## Validation Steps Performed
> Check close submenu on first/last tab when multiple tabs are open.
>
> Closes #7969
>
> [unsealed runtime class]: https://docs.microsoft.com/en-us/uwp/midl-3/intro#base-classes

Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>

Co-authored-by: Leon Liang <lelian@microsoft.com>
Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>",,,,False,False,False,674,521,17,16,duhowett@microsoft.com,noreply@github.com,"11/04/2020, 18:15:05",2020,"11/04/2020, 18:15:05",2020,4,1,3,2.8,4.8,0
,"Warn the user if the keyboard service is disabled (#8095)

## Summary of the Pull Request

![kb-service-disabled](https://user-images.githubusercontent.com/18356694/97578533-eb792d80-19be-11eb-9b13-b771327a72a0.png)

With this PR, the Terminal will check to make sure the ""Touch, Keyboard and Handwriting Panel Service"" is enabled at startup. If it isn't, then the Terminal won't be able to receive keyboard input (see #4448 and the 20 linked issues to that one).

## References

* See #4448 for more details

## PR Checklist
* [x] Closes #7886 
* [ ] Should this make #4448 not-open as well?
* [x] I work here
* [n/a] Tests added/passed
* [x] Docs: https://github.com/MicrosoftDocs/terminal/pull/168

## Validation Steps Performed

I manually set the service to ""Disabled"", restarted the machine, verified the dialog opens (and that I'm unable to type in the Terminal), then re-set the service to automatic and rebooted, and the dialog doesn't appear.",,,,False,False,False,178,28,8,8,migrie@microsoft.com,noreply@github.com,"11/04/2020, 21:44:53",2020,"11/04/2020, 21:44:53",2020,4,3,3,4.3,3.6,0
,"Update active profiles when loading defaults (#8156)

## Summary of the Pull Request
When we get a serialization error, we ""catch"" it in `AppLogic` and only
`LoadDefaults()`. Since `LoadDefaults()` doesn't perform a full
validation of `CascadiaSettings`, we need to manually update our list of
active profiles (similar to how we manually resolve the default
profile).

## Validation Steps Performed
Repro steps fixed:
1. add deserialization error to settings.json (i.e. ""fontWeight"": ""wumbo"")
2. launch WT
3. verify that dropdown is populated with active profiles

Closes #8146",,,,True,False,False,12,0,2,2,carlos.zamora@microsoft.com,noreply@github.com,"11/04/2020, 23:57:15",2020,"11/04/2020, 23:57:15",2020,4,1,3,5.0,1.2,0
,"Enable moving back to the root level in the command palette (#8051)

This commit adds functionality so that users can move back from sub menu
whenever they want. As a result, users no longer have to close command
palette and open it again to get all commands again.

Closes #7910",,,,False,False,False,57,10,4,4,yukawa_hidenori@icloud.com,noreply@github.com,"11/05/2020, 00:19:52",2020,"11/05/2020, 00:19:52",2020,1,0,3,4.3,1.5,0
,"Configure the options available in the issue list (#8114)

Closes #7953",,,,False,False,False,12,0,1,1,67918878+alannt777@users.noreply.github.com,noreply@github.com,"11/05/2020, 01:18:24",2020,"11/05/2020, 01:18:24",2020,1,0,3,5.0,1.2,0
,"Allow the user to use the tab switcher with in-order tab switching (#8076)

## Summary of the Pull Request

Changes the way the `useTabSwitcher` setting works. It now accepts either a boolean or a string:
* `true`, `""mru""`: Use the tab switcher with MRU tab switching
* `""inOrder""`: Use the tab switcher, with in-order tab switching
* `false`, `""disabled""`: Don't use the tab switcher. Tabs will switch in-order.

This is following the discussion chronicled in #8025, as well as the follow-up investigation in that thread.

## References

* #7952 introduced MRU tab switching

## PR Checklist
* [x] Closes #8025 - there's also discussion of using a parameter in an action to override this setting, but that should get punted to a follow-up task
* [x] I work here
* [x] Tests added/passed - YOU BET THEY WERE
* [ ] Requires documentation to be updated

## Validation Steps Performed

I've been switching tabs all day and all night, with different settings values, and hot-reloading the setting.

I also _ran the test_ I added.",,,,False,False,False,339,39,13,13,migrie@microsoft.com,noreply@github.com,"11/05/2020, 14:28:16",2020,"11/05/2020, 14:28:16",2020,3,3,3,4.5,3.5,0
,"8167: Fix TabTests - use tab 0 rather than value 0 (#8168)

A fix for UTs crashing due to bad memory access (accessing page 0).
Regression from #8153
Closes #8167",,,,True,False,False,10,10,1,1,khvitaly@gmail.com,noreply@github.com,"11/05/2020, 18:44:44",2020,"11/05/2020, 18:44:44",2020,4,0,3,2.5,1.2,0
,"Prevent leftover cursor fragments when scrolling in PowerShell (#8173)

There are certain cursor movement operations (in conhost) that can
result in ""ghost"" cursor instances being left behind, if the move causes
the viewport to scroll while the cursor is blinking off. Pressing enter
in a PowerShell prompt when at the bottom of the screen was one example
of this. This PR fixes that problem.

Whenever the cursor renders with an `InvertRect`, the affected areas of
the screen are saved in the `cursorInvertRects` variable. If the screen
is then scrolled while the cursor is visible, those rects are
""uninverted"" in the `GdiEngine::ScrollFrame` method before the scrolling
takes place.

When the cursor has blinked off, though, the `GdiEngine::PaintCursor`
method won't set the `cursorInvertRects` variable, but it also doesn't
clear it. So if the screen is scrolled at that point, the `ScrollFrame`
method tries to ""uninvert"" the area where the cursor had previously been
painted. And since the cursor is no longer there, this has the opposite
effect, leaving an unwanted mark on the screen.

I've fixed this by clearing the `cursorInvertRects` at the start of the
paint cycle, in the the `GdiEngine::PaintBackground` method. Since this
occurs after the `ScrollFrame` step, it still allows for legitimate
cursor instances to be cleaned up when scrolling, but makes sure that
the variable will be cleared for the next cycle if the cursor is no
longer visible.

## Validation Steps Performed

I've manually verified that I no longer see ghost cursor fragments when
scrolling in PowerShell.

Closes #804",,,,True,False,False,7,0,1,1,j4_james@hotmail.com,noreply@github.com,"11/05/2020, 19:21:34",2020,"11/05/2020, 19:21:34",2020,4,1,3,5.0,1.2,0
,"Proto extensions spec (#7584)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Proto-extensions spec

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Is documentation
* [x] I work here
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx",,,,True,True,False,387,0,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/05/2020, 21:43:16",2020,"11/05/2020, 21:43:16",2020,4,1,3,5.0,3.0,0
,"Bold matching text in the command palette (#7977)

* Created a ViewModel class in the Command Palette called
  FilteredCommand, aggregating the Command, the filter and the
  highlighted presentation of the command name
* This ListView of the filtered commands is bound to the vector of
  FilteredCommands
* Introduced HighlightedTextControl user control with HighlightedText
  view model
* Added this control to the ListView Item's grid
* Bound the FilteredCommand's highlighted command name to the user
  control

## Validation Steps Performed
* UT for matching algorithm
* Only manual tests
* Searching in CommandLine, SwitchTab and Nested Command modes
* Checking for bot matching an non matching filters
* Dogfooding

Closes #6646",,,,False,False,False,975,260,19,19,khvitaly@gmail.com,noreply@github.com,"11/06/2020, 01:37:45",2020,"11/06/2020, 01:37:45",2020,1,0,3,3.9,4.0,0
,"Express dependencies in TestHostApp to help rebuild (#8184)

By adding these target Inputs/Outputs to TestHostApp's AfterBuild, we
can ensure that new versions of the test libraries are properly
detected. No longer will we have to delete them from disk and rebuild
TestHostApp and hope that it picks up the latest test binaries.

Oh, and I turned on a couple other optimizations (hard links, skipping
unchanged files) that were really just low-hanging fruit.",,,,False,False,False,14,9,1,1,duhowett@microsoft.com,noreply@github.com,"11/08/2020, 13:14:42",2020,"11/08/2020, 13:14:42",2020,3,1,3,3.0,1.0,0
,"8185: do not sort commands by name in tabswitcher mode (#8188)

In introduced a bug in #8185, due to which Command Palette sorts items
alphabetically in the tab switcher mode. This PR fixes it.

Validation:
Created tabs with different names and verified that the MRU order is
preserved

Closes #8185",,,,True,False,False,74,4,3,3,khvitaly@gmail.com,noreply@github.com,"11/09/2020, 18:37:19",2020,"11/09/2020, 18:37:19",2020,4,0,3,4.7,1.8,0
,"Teach the command palette to clamp its indices on page up/down (#8190)

This commit will teach CommandPalette to clamp the scroll page up and
scroll page down navigation so as to not wrap.

Closes #8189",,,,False,False,False,74,31,2,2,khvitaly@gmail.com,noreply@github.com,"11/09/2020, 21:55:11",2020,"11/09/2020, 21:55:11",2020,4,0,3,3.5,2.0,0
,"Fix desktopWallpaper background image casing (#8206)

- Change `DesktopWallpaper` to `desktopWallpaper` for `backgroundImage`
  to match our other settings
- Add `desktopWallpaper` to json schema",,,,True,True,False,12,3,2,2,cinnamon@microsoft.com,noreply@github.com,"11/09/2020, 22:50:29",2020,"11/09/2020, 22:50:29",2020,4,1,3,4.0,1.2,0
,"Azure: fall back to powershell when no preferred shell is set (#8197)

I am still not sure what is the full set of scenarios that the problem
might occur, but for me it occurred for an ""old"" cloud shell account,
and didn't reproduce since I have reconfigured it. These behavior might
be explained by the fact that ""preferred shell type"" did not exist in
the API originally and thus was not set. In such case, Terminal
succeeds to retrieve to the settings but then crashes when reading the
missing field.  To fix it, I handle the case where the field is missing
and fallback to PowerShell.

## Validation Steps Performed
* Tested manually, only once.

Closes #7056",,,,True,False,False,23,2,2,2,khvitaly@gmail.com,noreply@github.com,"11/09/2020, 22:55:45",2020,"11/09/2020, 22:55:45",2020,4,0,3,4.6,1.2,0
,"Rework JsonUtils' optional handling to let Converters see null (#8175)

The JsonUtils changes in #8018 revealed that we need more robust,
configurable optional handling. We learned that there's a class of
values that was previously underrepresented in our API: _strings that
have an explicit empty value_.

The Settings model supports starting directory, icon, background image
et al values that are empty. That emptiness _overrides_ a value set in a
lower layer, so it is not sufficient to represent the empty value for
any one of those fields as an unset optional.

There are a couple other settings for which we've implemented a
hand-rolled option type (for roughly the same reason): foreground,
background, any color fields that override values from the color scheme
_or_ the lower layer profile.

These requirements are best fulfilled by better optional support in
JsonUtils. Where the library would originally detect known types of
optional and pre-filter them out during `GetValue` and `SetValue`, it
will now defer to another conversion trait.

This commit introduces a helper conversion trait and an ""option oracle"".
The conversion trait will use the option oracle to detect emptiness,
generate empty option values, and read values out of option types. In so
doing, the trait is insulated from the implementation details of any
specific option type.

Any special logic for handling JSON null and option types has been
stripped from GetValue. Due to this, there is an express change in
behavior for some converters:

* `GetValue<T>(jsonNull)` where `T` is **not** an option type[1] has
  been upgraded from a silent no-op to an exception.

Further, I took the opportunity to replace NullableSetting with
std::optional<std::optional<T>>, which accurately represents ""setting
that the user might explicitly clear"". I've added a test to
JsonUtilsTests to make sure it can serialize/deserialize double
optionals the way we expect it to.

Tests (Local, Unit for TerminalApp/SettingsModel):
Summary: Total=140, Passed=140, Failed=0, Blocked=0, Not Run=0, Skipped=0

[1]: Explicitly, if `T` is not an option type _and the converter does
not support null_.",,,,True,True,False,276,137,8,8,duhowett@microsoft.com,noreply@github.com,"11/09/2020, 23:13:02",2020,"11/09/2020, 23:13:02",2020,4,1,3,3.3,3.6,0
,version: bump to 1.6 on main,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"11/09/2020, 23:17:16",2020,"11/09/2020, 23:17:40",2020,4,1,1,2.5,1.0,0
,"Fix test for desktopWallpaper (#8208)

This fixes the test for when we switched `""DesktopWallpaper""` to `""desktopWallpaper""`",,,,True,True,False,2,2,1,1,cinnamon@microsoft.com,noreply@github.com,"11/09/2020, 23:41:31",2020,"11/09/2020, 23:41:31",2020,4,1,3,2.5,1.2,0
,"Avoid an access violation in pane animation if the child is closed (#8218)

Some UTs crash with access violation, that occurs during pane animation.
The reason for this is a race, upon which the pane is closed (set to
nullptr) before the parent is animated.  Added a simple check against
null.  Doubt it can happen in production, yet worth taking care!",,,,False,False,False,19,14,1,1,khvitaly@gmail.com,noreply@github.com,"11/10/2020, 23:25:57",2020,"11/10/2020, 23:25:57",2020,4,0,3,2.9,1.2,0
,"Fix potential over/underflow as noted by ""TODO:"" comment (#8081)

Fixed potential errors caused by overflow or underfow in
SectionInput.cpp

## PR Checklist
* [x] CLA signed
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
In selectionInput.cpp, there is both a potential overflow and potential
underflow. To address this issue, I casted the calculation up to int,
which is then checked because of integer promotion. Underflow and
underflow is therefore impossible because now if the calculation exceeds
SHORT_MAX, it will have exceeded bufferSize.BottomInclusive() or
bufferSize.Top() anyway, and be set to them.

## Validation Steps Performed
Passed Unit Testing
Manual Validation",,,,True,True,False,2,2,1,1,71219152+pokecodec@users.noreply.github.com,noreply@github.com,"11/11/2020, 02:20:58",2020,"11/11/2020, 02:20:58",2020,1,0,3,2.5,1.2,0
,"Warn when font isn't found and another is chosen (#8207)

Display a warning message when the DirectX renderer resolves a font that
isn't the one you selected to warn that it couldn't be found.

Also I wrote the dialog event chain out of `TermControl` to be reusable
in the future for other messages the control might want to tell a host
about and various levels. 

## Validation Steps Performed
- Manual validation, setting bad font name, fixing font name with
  `settings.json`.

Closes #1017",,,,True,True,False,199,58,10,9,miniksa@microsoft.com,noreply@github.com,"11/11/2020, 02:24:06",2020,"11/11/2020, 02:24:06",2020,1,3,3,3.9,3.6,0
,"Combine the parsing & dispatch blocks for OSC actions (#8202)

In `ActionOscDispatch()` in `OutputStateMachineEngine.cpp`, we had a
section for parsing and another section for dispatching. This PR
combines those two blocks since they do not need to be distinct. 

## Validation Steps Performed
TerminalApiTests still pass",,,,False,False,False,69,76,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/11/2020, 02:27:00",2020,"11/11/2020, 02:27:00",2020,1,1,3,2.4,2.0,0
,"Merged PR 5289766: [Git2Git] Reflect OS changes for ARM64 build

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 8bbacf82e9da4627096ff2c2b1b4c5b183db75d4",,,,False,False,False,4,0,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"10/28/2020, 01:03:21",2020,"11/11/2020, 18:03:28",2020,4,1,1,5.0,1.0,14
,"doc: Update roadmap with 1.5 release info (#8248)

Added 1.6 milestone and 1.5 release blog post to the roadmap",,,,False,False,False,4,3,1,1,cinnamon@microsoft.com,noreply@github.com,"11/13/2020, 01:32:52",2020,"11/13/2020, 01:32:52",2020,1,1,3,2.9,1.0,0
,"8247: Custom key bindings are broken for tab navigation (#8250)

There are two code paths for Ctrl+Tab and for everything else:

Ctrl + Tab is working perfectly
* On the first tab navigation TerminalPage::_SelectNextTab resets the
  tab commands, and since palette is not visible selects the relevant
  tab index
* On the second navigation Ctrl+Tab is intercepted by
  CommandPalette::_previewKeyDownHandler and everything works fine

But with custom binding things are screwed:
* On the first tab navigation TerminalPage::_SelectNextTab resets the
  tab commands, and since palette is not visible selects the relevant
  tab index
* On the second navigation keys are not intercepted and thus
  TerminalPage::_SelectNextTab is called again. It resets the commands,
  but now since the palette is visible we simply invoke
  CommandPalette::SelectNextItem. Which in turn misbehaves because no
  item is selected.

The approach for the solution is not to reset anything if the command
palette is already open.

## Validation Steps Performed
* Manual testing of both custom and non-custom bindings with different
  amount of tabs.

Closes #8247",,,,False,False,False,12,13,1,1,khvitaly@gmail.com,noreply@github.com,"11/13/2020, 01:33:50",2020,"11/13/2020, 01:33:50",2020,1,0,3,2.4,1.0,0
,"Make sure to disable pane entrance animation if user requests (#8237)

We were only checking app animations during pane _exit_.",,,,False,False,False,2,1,1,1,khvitaly@gmail.com,noreply@github.com,"11/13/2020, 01:34:38",2020,"11/13/2020, 01:34:38",2020,1,0,3,3.3,1.0,0
,"Prevent resizing terminal to a lower-than-minimum width (#8066)

Until now, we relied on WM_SIZING to ensure that the island is not
downsized below minimal allowed dimensions. However, on some occasions
WM_WINDOWPOSCHANGED, e.g. when anchoring a window to the top/bottom of
the screen. This message will use dimensions obtained from
WM_GETMINMAXINFO. Until now we didn't override this value, falling back
to the defaults. As a result we got an inconsistent behavior (at least
when attaching the anchor).

I added logic very similar to the one we use in IslandWindow::_OnSizing
to the MINMAXINFO handler: snap the client area, add non client
exclusive are, consider DPI along the computation.

## Validation Steps Performed
* Manual testing of minimizing, maximizing, resizing, attaching
  different anchors, etc.

Closes #8026",,,,False,False,False,79,2,5,5,khvitaly@gmail.com,noreply@github.com,"11/13/2020, 03:15:46",2020,"11/13/2020, 03:15:46",2020,1,0,3,4.9,1.8,0
,"initial draft of VT function support spec (#1884)

conhost and windows terminal

renamed files; updated script to do summary output only, also quiet mode and option file path for output (else stdout)

added -quiet and fixed -summaryonly parameters

added hyperlink directly to soruce implementation for conhost and terminal seqs

Update doc/reference/master-sequence-list.csv

Co-Authored-By: James Holderness <j4_james@hotmail.com>

Apply suggestions from code review

Co-Authored-By: James Holderness <j4_james@hotmail.com>

Co-authored-by: James Holderness <j4_james@hotmail.com>",,,,True,True,False,478,0,3,3,oising@gmail.com,noreply@github.com,"11/13/2020, 11:39:33",2020,"11/13/2020, 11:39:33",2020,2,2,3,5.0,3.0,0
,"8249: Remove trailing commas in profiles.schema.json (#8257)

Fixes https parsing of the latest version of `profiles.schema.json`, particularly by VS Code Intellisense.

* [x] Closes #8249 

The VS Code parsing warning below is a known and unrelated existing issue due to VS Code only supporting JSON Schema Draft 7. It does not prevent Intellisense from functioning.

> Draft 2019-09 schemas are not yet fully supported.

## Validation Steps Performed

Manually tested and successfully validated by fixing a local copy of `profiles.schema.json` and defining it as `$schema` in `settings.json`",,,,True,False,False,2,2,1,1,734673+slopra@users.noreply.github.com,noreply@github.com,"11/13/2020, 16:27:27",2020,"11/13/2020, 16:27:27",2020,3,0,3,2.5,1.2,0
,Fix the spellbot (#8259),,,,True,True,False,22,16,4,4,migrie@microsoft.com,noreply@github.com,"11/13/2020, 17:45:08",2020,"11/13/2020, 17:45:08",2020,3,3,3,2.9,1.2,0
,"Merged PR 5409981: [Git2Git] Reflect OS build changes on top of d5bfd237e5

Some sources files changes were necessary to retain build continuity in OS.

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 7ff895ff770838526b6d1d9e7d582f3c1e36d85b",,,,False,False,False,4,0,4,4,duhowett@microsoft.com,duhowett@microsoft.com,"11/16/2020, 19:28:35",2020,"11/16/2020, 19:28:35",2020,4,1,1,5.0,1.0,0
,"align command palette prefix > to left when visible (#8279)

Fixes the clear button to clear the typed command not clickable in the
command palette.

- From the primary investigation it looked like the `TextBlock` element
  introduced in #7935 was somehow blocking (appearing on top of) the
  clear button.
- It was also blocking the command palette input field from being able
  to access which was preventing the text in the input field from being
  selected and the cursor would still show as `pointer` cursor instead
  of a `text selection` cursor
- Adding `HorizontalAlignment=""Left""` property to the above-mentioned
  `TextBlock` element fixed the issue.

## Validation Steps Performed
- Created the Dev build for `x64` in Visual Studio and verified the
  functionality manually.

Closes #8220",,,,True,False,False,31,30,1,1,bhasky93@gmail.com,noreply@github.com,"11/16/2020, 22:38:33",2020,"11/16/2020, 22:38:33",2020,4,0,3,2.5,1.8,0
,"Fix default backgroundImageStretch to be `uniformToFill` (#8280)

This commit fixes the default value to comply with documentation.

Closes #8256",,,,True,False,False,1,1,1,1,khvitaly@gmail.com,noreply@github.com,"11/16/2020, 22:48:47",2020,"11/16/2020, 22:48:47",2020,4,0,3,2.5,1.2,0
,"Add Serializer to CascadiaSettings (#8018)

##  Summary of the Pull Request
This adds `ToJson` functions to `Profile`, `GlobalAppSettings`, and `ColorScheme`. They are used in `CascadiaSettings` to completely serialize an instance of the settings model. Thanks to #7923, all of the settings are `std::optional`, and `JsonUtils` only writes out values that are actually populated.

`CascadiaSettings::WriteSettingsToDisk` serializes the current settings and writes them to the settings.json. A backup file is created with your old contents.

#### Limitations:
- all of the color schemes are serialized regardless of them coming from defaults.json or settings.json
- keybindings/actions are copied/pasted

## References
#1564 - Settings UI
TSM Specs (#6904 and #7876)

## PR Checklist
* [x] Tests added/passed",,,,False,False,False,562,77,20,20,carlos.zamora@microsoft.com,noreply@github.com,"11/17/2020, 00:37:19",2020,"11/17/2020, 00:37:19",2020,1,1,3,4.4,4.8,0
,"Fix out-of-bounds exceptions in Set...{Buffer,Screen}Size (#8309)

This fixes a number of exceptions that can cause conhost to crash when
the buffer is resized in such a way that the viewport or cursor position
end up out of bounds.

Technically this is a fix for issue #256, although that has been closed
as ""needs-repro"".

The main fix was to add checks in the `SetConsoleScreenBufferSizeImpl`
and `SetConsoleScreenBufferInfoExImpl` methods, to make sure the
viewport doesn't extend past the bottom or right of the buffer after a
resize. If it has overflowed, we move the viewport back up or left until
it's back within the buffer boundaries. We also check if the cursor
position has ended up out of bounds, and if so, clamp it back inside the
buffer.

The `SCREEN_INFORMATION::SetViewport` was also a source of viewport
overflow problems, because it was mistakenly using inclusive coordinates
in its range checks, which resulted in them being off by one. That has
now been corrected to use exclusive coordinates.

Finally, the `IsCursorDoubleWidth` method was incorrectly marked as
`noexcept`, which was preventing its exceptions from being caught.
Ideally it shouldn't be throwing exceptions at all any more, but I've
removed the `noexcept` specifier, so if it does throw an exception,
it'll at least have more chance of recovering without a crash.

## Validation Steps Performed

I put together a few test cases (based on the reports in issues #276 and
#1976) which consistently caused conhost to crash, or to generate an
exception visible in the debug output. With this PR applied, those test
cases are no longer crashing or triggering exceptions.

Closes #1976",,,,True,False,False,41,7,4,4,j4_james@hotmail.com,noreply@github.com,"11/17/2020, 21:17:51",2020,"11/17/2020, 21:17:51",2020,4,1,3,4.3,1.2,0
,"Fix close button not using the tab's text color (#8046) (#8209)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This sets the tab close button color to match the tab text color.
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
#8046
<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #8046  
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #8046 

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
This sets the tab close button color to match the tab text color.
<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Test light theme white tab mouse hover effect:
![Screenshot_2020-11-07_152110_3](https://user-images.githubusercontent.com/7143383/98640319-ec735e80-22de-11eb-8d35-08188405b566.png)

Test dark theme white tab mouse hover effect:
![Screenshot_2020-11-07_153021_2](https://user-images.githubusercontent.com/7143383/98640377-f006e580-22de-11eb-9bb5-dde9fe9b81b6.png)",,,,True,False,False,2,0,1,1,7143383+dcheatha@users.noreply.github.com,noreply@github.com,"11/18/2020, 18:02:53",2020,"11/18/2020, 18:02:53",2020,4,0,3,5.0,1.2,0
,"Fix combining wt args and ""wt new-tab"" args in implicit context (#8315)

Currently when implicit tab command is specified (i.e., we have
parameters for new-tab, but don't have the explicit subcommand name) we
fallback to parsing the entire arg list as new tab command.

However, if we also have a launch profile (or anything else that might in
the future belong to the upper scope) it is passed as a parameter to the
new tab command, failing the parsing.

The idea behind my solution is to run the parser as a prefix command -
i.e., as long as we succeed to parse [options] / [subcommand] we will
parse them (populating the fields like a launch mode), but once we will
discover something unfamiliar, like profile, we will know that the
prefix is over and will handle the remaining suffix as a new tab
command.

## Validation Steps Performed
* UT added
* Manual run of different options

Closes #7318",,,,True,False,False,74,33,2,2,khvitaly@gmail.com,noreply@github.com,"11/18/2020, 21:04:35",2020,"11/18/2020, 21:04:35",2020,4,0,3,3.5,2.4,0
,"Fix a race condition in pane animation completion that broke sizing (#8241)

Fixes a race in pane entrance animation, where the animation
completion routine processes wrong children.

Validated w/ manual testing

Closes #8230",,,,True,False,False,18,33,1,1,khvitaly@gmail.com,noreply@github.com,"11/18/2020, 21:31:37",2020,"11/18/2020, 21:31:37",2020,4,0,3,1.8,1.8,0
,"Implement ConEmu's OSC 9;4 to set the taskbar progress indicator (#8055)

This commit implements the OSC 9;4 sequence per the [ConEmu style].

| sequence                   | description                                       |
| ------------               | ------------                                      |
| `ESC ] 9 ; 4 ; st ; pr ST` | Set progress state on taskbar and tab.            |
|                            | When `st` is:                                     |
|                            |                                                   |
|                            | `0`: remove progress.                             |
|                            | `1`: set progress value to `pr` (number, 0-100).  |
|                            | `2`: set the taskbar to the ""Error"" state         |
|                            | `3`: set the taskbar to the ""Indeterminate"" state |
|                            | `4`: set the taskbar to the ""Warning"" state       |

We've also extended this with:
* st 3: set indeterminate state
* st 4: set paused state

We handle multiple tabs sending the sequence by using the the last focused
control's taskbar state/progress.

Upon receiving the sequence in `TerminalApi`, we send an event that gets caught
by `TerminalPage`. `TerminalPage` then fires another event that gets caught by
`AppHost` and that's where we set the taskbar progress. 

Closes #3004 

[ConEmu style]: https://conemu.github.io/en/AnsiEscapeCodes.html#ConEmu_specific_OSC",,,,True,True,False,403,1,30,30,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/18/2020, 22:24:11",2020,"11/18/2020, 22:24:11",2020,4,1,3,5.0,4.8,0
,"Add a setting to flash the taskbar when the terminal emits BEL (#8215)

The terminal taskbar icon can now flash when the BEL sequence is
emitted, to let the user know something needs their attention. 

The `BellStyle` setting can now be set to `audible`, `visual` or both or
none. When the pane receives a BEL event and the `bellStyle` includes
`visual`, we bubble the event up all the way to `AppHost` to handle
flashing the taskbar. 

Closes #1608",,,,False,False,False,117,13,15,15,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/18/2020, 22:55:10",2020,"11/18/2020, 22:55:10",2020,4,1,3,4.5,3.0,0
,"Merged PR 5421982: Reflect OS build changes

[Git2Git] Git Train: Merge of building/rs_onecore_dep_uxp/201117-2002 into official/rs_onecore_dep_uxp Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 526043ab6050397506b3cdb77e6a43b5ca9a2e9a

Related work items: MSFT-29990377",,,,False,False,False,10,116,7,7,duhowett@microsoft.com,duhowett@microsoft.com,"11/19/2020, 23:21:37",2020,"11/19/2020, 23:21:37",2020,4,1,1,0.4,2.5,0
,"Merged PR 5425054: [Git2Git] conhost: explicitly set /utf-8 on the compiler commandline

One of our test files has some raw Emoji in it. I expect that as time
goes by, more and more files will have UTF-8 in them.

Fixes MSFT-30289536

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp d828ae0f6c209259019934711c587ea075eab77e",,,,True,True,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"11/19/2020, 23:25:34",2020,"11/19/2020, 23:25:34",2020,4,1,1,5.0,1.2,0
,"Change the default tab switch mode back to inOrder (#8326)

We changed the default to ""mru"", and that was unkind to all our existing users.",,,,False,False,False,3,3,3,3,migrie@microsoft.com,noreply@github.com,"11/19/2020, 23:57:35",2020,"11/19/2020, 23:57:35",2020,4,3,3,2.5,1.2,0
,"Add support for setting tabColor on the command line (#8102)

* Add a tabColor parameter to the `new-tab` and `split-panes` command
* Add --tabColor to the command line, to allow bootstrapping with tabs
  of different colors

Add another field to NewTerminalArgs. Use this field to set
StartingTabColor in Terminal. This color gets overridden by the color
defined by the profile / VT, however can be overridden with the color
picker.

Since the color is the property of the Terminal, when defined for the
tab this color is associated only with the first pane/terminal of the
tab. Additional panes will not inherit this color (to prevent advanced
resolution, where we need to resolve between the inherited color and the
one specified for the pane).

## Validation Steps Performed
* UT for parameters parsing
* Running system with several tabs of different colors.
* Adding custom actions with colors
* Performing operations like split pane, duplicate and so on

Closes #8075",,,,False,False,False,146,43,16,16,khvitaly@gmail.com,noreply@github.com,"11/20/2020, 04:36:18",2020,"11/20/2020, 04:36:18",2020,1,0,3,3.9,3.0,0
,"Make tab header a custom control (#8227)

This PR makes the Header of TabViewItem a custom user control.

## Validation Steps Performed
Manual testing

Closes #8201",,,,False,False,False,205,168,8,8,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/20/2020, 17:16:38",2020,"11/20/2020, 17:16:38",2020,3,1,3,2.7,3.0,0
,"tools: update bcz.cmd to use the progress bar VT sequence (#8335)

## Summary of the Pull Request

Does what the title says. Now while you're building terminal projects,
the taskbar will show indeterminate progress. If the build fails, it'll
blink the error state for 500ms before returning to normal.

## References
* Made possible by #8055 _and viewers like you_

## PR Checklist
* [x] scratches an itch I've had since at least 2018
* [x] I work here
* [x] this is a build script

## Validation Steps Performed
tested manually",,,,True,True,False,33,0,1,1,migrie@microsoft.com,noreply@github.com,"11/20/2020, 17:26:50",2020,"11/20/2020, 17:26:50",2020,3,3,3,5.0,1.2,0
,"Make CloseWarningDialog async (#8117)

The CloseWarningDialog is now ""awaitable""/async, as suggested in PR #7871.

As opening the dialog is async, the flag can be reset in the same
method. This way the flag operations occur in the same method.  The
event handlers of the buttons became obsolete and are removed.

## Validation Steps Performed
Tested manually.",,,,False,False,False,16,43,3,3,raphael.horber@gmail.com,noreply@github.com,"11/20/2020, 17:40:33",2020,"11/20/2020, 17:40:33",2020,3,0,3,1.4,1.5,0
,"doc: Make minor grammatical fixes to AddASetting.md (#8351)

(Add some capital letters here and there)",,,,True,True,False,3,3,1,1,50775297+meghnas21@users.noreply.github.com,noreply@github.com,"11/25/2020, 20:01:37",2020,"11/25/2020, 20:01:37",2020,4,0,3,2.5,1.2,0
,"Add ""recent commands"" to Command Palette in commandline mode (#8317)

## Summary of the Pull Request
Add a history to command palette in the command line mode.
Few considerations/limitations
1. In-memory, 10 entries hard-coded
2. MRU
3. List rather than set
4. The user needs explicitly select command from the history

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/8296
* [x] CLA signed. 
* [x] Tests added/passed
* [ ] Documentation updated - irrelevant
* [ ] Schema updated - irrelevant
* [ ] I've discussed this with core contributors already. 

## Validation Steps Performed
* Manual testing",,,,False,False,False,53,43,2,2,khvitaly@gmail.com,noreply@github.com,"11/25/2020, 20:30:36",2020,"11/25/2020, 20:30:36",2020,4,0,3,2.8,1.8,0
,"Change backslashes in include statements to forward slashes (#8205)

Many include statements use forward slashes, while others use backwards
slashes. This is inconsistent formatting. For this reason, I changed the
backward slashes to forward slashes since that is the standard.",,,,False,False,False,374,373,197,196,71219152+pokecodec@users.noreply.github.com,noreply@github.com,"11/25/2020, 21:02:10",2020,"11/25/2020, 21:02:10",2020,4,0,3,2.5,5.0,0
,"Teach Terminal to move tabs with key bindings (#8338)

## Summary of the Pull Request
Introduces a new command called `moveTab`
This command has a single mandatory argument with values of `forward` and `backward`

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/3593
* [x] CLA signed. 
* [x] Tests added/passed
* [x] Documentation updated here: https://github.com/MicrosoftDocs/terminal/pull/198
* [x] Schema updated
* [x] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
Went for the straightforward solution of moving the tab and the tabViewItem.

## Validation Steps Performed
* Manual testing",,,,False,False,False,234,1,16,16,khvitaly@gmail.com,noreply@github.com,"11/25/2020, 22:09:27",2020,"11/25/2020, 22:09:27",2020,4,0,3,5.0,4.2,0
,"Fix sending a title change event when the renamer is dismissed (#8393)

Fix for #8365 

Adds a `_renameCancelled` bool that determines whether we raise the event for a title change. We do this because the lost focus handler for the rename box will be called _both_ when the renamer is dismissed by clicking somewhere else and by pressing enter/escape. So, the lost focus handler needs to conditionally raise the event. 
 
Closes #8365",,,,True,False,False,10,9,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"11/26/2020, 00:20:12",2020,"11/26/2020, 00:20:12",2020,1,1,3,2.6,1.2,0
,"Fix the xterm and SGR mouse encodings for CTRL, ALT, SHIFT (#8379)

We had the xterm and SGR codings for meta/ctrl backwards. Oops.

This commit also fixes an observed issue in Windows Terminal where we
were passing in a console-style modifiers enum when MouseInput is
expecting MK_ constants.

I decided to unify MouseInput around the console-style modifier
constants because they have support for META (which MK_ does not) and
can differentiate between left/right alt/ctrl.

Our tests are fundamentally flawed here: they use a copy of the
modifier key generating logic _themselves_, so we got a bit of ""error
carried forward.""

I did not fix the tests to use known-good control sequences, I simply
replaced the character generator with another copy of the modifier code.
I did, however, extend them to test ctrl|meta and left/right modifiers.

Fixes #8291",,,,True,False,False,33,25,3,3,duhowett@microsoft.com,noreply@github.com,"11/30/2020, 03:45:53",2020,"11/30/2020, 03:45:53",2020,1,1,3,2.8,1.8,0
,"Disable Home and End keys in Command Palette search box (#8194)

Home/End will only navigate the command palette list when the user holds down Ctrl.

Closes #8191",,,,False,False,False,19,12,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"11/30/2020, 16:50:11",2020,"11/30/2020, 16:50:11",2020,3,0,3,3.1,1.0,0
,schema: make rowsToScroll deprecation message mention bindings (#8439),,,,False,False,False,1,1,1,1,khvitaly@gmail.com,noreply@github.com,"11/30/2020, 18:13:51",2020,"11/30/2020, 18:13:51",2020,4,0,3,2.5,1.0,0
,"Teach tab renamer to truncate tab title input (#8433)

If we try set a very long title, ""rename box"" UI changes max height,
corrupting the layout.  There are several ways to fix it, e.g. by
limiting the MaxHeight (e.g. by binding it to the actual height of the
title bar).

However, I went for the most straightforward approach - truncating.  I
don't think we should allow long titles (though it can be a nice hidden
storage :blush:)

I considered to truncate it to the tab header width, but we can actually
see more data in tab-switcher, so I simply went for a hard-coded value
which should be large enough.

If this approach makes sense we need to consider updating the
documentation. 

Closes #8428",,,,True,False,False,1,0,1,1,khvitaly@gmail.com,noreply@github.com,"11/30/2020, 19:56:36",2020,"11/30/2020, 19:56:36",2020,4,0,3,5.0,1.2,0
,"Retain horizontal viewport offset when moving to bottom (#8434)

When the viewport is moved to the ""virtual bottom"" of the buffer (via
the `MoveToBottom` method), it is important that the horizontal viewport
offset be left as it is, otherwise that can result in some undesirable
side effects.

Since the VT coordinate system is relative to the top of the viewport,
many VT operations call the `MoveToBottom` method to make sure the
viewport is correctly positioned before proceeding. There is no need for
the horizontal position to be adjusted, though, since the X coordinates
are not constrained by the viewport, but are instead relative to the
underlying buffer.

Setting the viewport X coordinate to 0 in `MoveToBottom` (as we were
previously doing) could result in the cursor being pushed off screen.
And if the operation itself was moving the cursor, that would then
trigger another viewport move to bring the cursor back into view. These
conflicting movements meant the viewport was always forced as far left
as possible, and could also result in cursor ""droppings"" as the cursor
lost track of where it had been.

I've now fixed this by updating the `GetVirtualViewport` method to match
the horizontal offset of the active viewport, instead of having the X
coordinate hardcoded to 0. 

## Validation Steps Performed

I've manually confirmed that this fixes the cursor ""droppings"" test case
reported in issue #8213.

I've also added a screen buffer test that makes sure the `MoveToBottom`
method is working as expected, and not changing the horizontal viewport
offset when it moves down.

Closes #8213",,,,True,False,False,40,1,2,2,j4_james@hotmail.com,noreply@github.com,"11/30/2020, 19:58:03",2020,"11/30/2020, 19:58:03",2020,4,1,3,4.9,1.2,0
,"Teach command palette to ignore case when sorting items (#8432)

Closes #8430",,,,False,False,False,37,1,3,3,khvitaly@gmail.com,noreply@github.com,"11/30/2020, 20:19:49",2020,"11/30/2020, 20:19:49",2020,4,0,3,4.9,1.0,0
,"Propagate IslandWindow's HWND into any component that needs it (#8391)

This fixes the issue with the settings UI where clicking the browse
buttons would cause an exception to be thrown when we tried to display a
picker without an originating HWND.

It turns out that pickers need a hosting/parent window, and Xaml Islands
doesn't furnish us with a CoreWindow that's set up for that use case.
Alas!

Raymond Chen's [blog post on the matter] suggests that we should
hand the HWND off through some classic COM interface. To do that
properly, Terminal's various components need to implement that interface
and propagate the HWND down where it's needed.

Thanks to a [Xaml compiler issue], we can't actually do that. To work
around that, we've begged and borrowed different methods for pushing
HWNDs around:

1. Using IInitializeWithWindow in secret
2. A member that takes a uint64
3. An interface that offers a function that will ""wire up"" the HWND.

I chose (1) because AppHost can implement IInitializeWithWindow, but
TerminalPage cannot. We're just pretending that TerminalPage _can_.

I chose (2) because none of the Xaml types in TerminalSettingsEditor can
implement the interface thanks to the aforementioned compiler issue, but
we don't have an escape hatch like AppHost that lives in the same module
and can help us do the propagation.

I chose (3) because I didn't want to commit the same sin as (2) _seven
times_ for every different type of settings page that exists. (3) is
backed by ""IHostedInWindow"", and anybody who knows they have to use
IInitializeWithWindow to tie an HWND to an object can call
IHostedInWindow.TryPropagateHostingWindow() on that object.

House of cards.

[Xaml compiler issue]: https://github.com/microsoft/microsoft-ui-xaml/issues/3331
[blog post on the matter]: https://devblogs.microsoft.com/oldnewthing/20190412-00/?p=102413

(cherry picked from commit f9fc9861a111925347f0362ba0fd9a14fb0765c9)",,,,True,True,False,34,2,8,8,duhowett@microsoft.com,duhowett@microsoft.com,"11/30/2020, 19:51:42",2020,"11/30/2020, 22:28:44",2020,4,1,1,4.7,1.8,0
,"Always create and link profiles.defaults object (#8445)

The Settings UI exposes the `profiles.defaults` (PD) object. Today, we
remove PD if there's nothing in it. However, that causes problems with
the Settings UI, because we have no `Profile` object to bind to
(resulting in a crash). Rather than making the Settings UI create a PD,
and link it in the inheritance tree, it's much easier to just _always_
create and link the PD object.

## References
#1564 - Settings UI (fixes a crash for this)
#7923 - Introduces inheritance

## PR Checklist
* [X] Tests added/passed

## Validation Steps Performed
* [x] repro steps for crash in Settings UI (copied changes over to that
      branch for testing)
* [x] tests passed",,,,True,False,False,22,26,2,2,carlos.zamora@microsoft.com,noreply@github.com,"12/01/2020, 14:11:26",2020,"12/01/2020, 14:11:26",2020,3,1,3,2.3,1.2,0
,"Add a template for discussing a settings change (#8376)

## Summary of the Pull Request

I think we all agree that the current spec template doesn't always work. I
thought this layout might be better for the kinds of settings discussions we
have (more and more frequently now).

This is largely for discussion with the team - if there are other things we want
added, changed, or if we just want to merge this in with the primary spec
template, I'm all ears.

## References

* An example of using this spec: #8375",,,,False,False,False,76,0,1,1,migrie@microsoft.com,noreply@github.com,"12/01/2020, 20:16:24",2020,"12/01/2020, 20:16:24",2020,4,3,3,5.0,1.5,0
,"Fix crash in SelectNextItem when list is empty or no item selected (#8422)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/8421
* [x] CLA signed. 
* [x] Tests added/passed

## Detailed Description of the Pull Request / Additional comments
Skip further computations if:
* The list is empty
* No item is selected and we press ""up"" key 
(we do want to handle ""down"" key for CommandLineMode)

## Validation Steps Performed
* Manual testing + UT",,,,True,True,False,13,6,1,1,khvitaly@gmail.com,noreply@github.com,"12/01/2020, 22:20:07",2020,"12/01/2020, 22:20:07",2020,4,0,3,3.4,1.2,0
,"Raise warning on invalid color scheme in commands (#8147)

Show a validation warning when someone sets a `setColorScheme` action
with an invalid scheme

In the setting validation phase, scan all commands for all the ""set
color scheme"" actions, and check each of them has a valid scheme. If any
of them has an invalid scheme name, raise a warning. Do not check
iterable commands that will be expanded to valid color schemes.

## Validation Steps Performed
- Added tests to LocalTests_SettingsModel
- Manual tests, add commands to settings.json with invalid color scheme
  and check the warning pops up. Try simple and nested commands.

Closes #7221",,,,False,False,False,206,1,6,6,1140981+mpela81@users.noreply.github.com,noreply@github.com,"12/01/2020, 22:28:00",2020,"12/01/2020, 22:28:00",2020,4,0,3,5.0,3.0,0
,"Represent BackgroundImageAlignment as ConvergedAlignment (#8468)

`backgroundImageAlignment` is exposed as 1 setting in the JSON, but
stored as two separate settings (`HorizontalAlignment` and
`VerticalAlignment`). This PR introduces `ConvergedAlignment` as a flag
enum that can be a combination of horizontal and vertical Alignments.
TSM now solely uses this `ConvergedAlignment`, and TerminalSettings
performs a conversion from this new enum to the traditional
`HorizontalAlignment` and `VerticalAlignment` for consumption.

## Validation Steps Performed
Manually tested changing the `backgroundImageAlignment` in my
settings.json and checking if the image updated appropriately.",,,,False,False,False,63,95,5,5,carlos.zamora@microsoft.com,noreply@github.com,"12/02/2020, 23:14:11",2020,"12/02/2020, 23:14:11",2020,4,1,3,2.0,2.0,0
,"Improve clipboard handling in ""drag and drop"" scenario  (#8461)

This PR improves the clipboard handling logic of ""drag and drop"" in
TermControl, making it more useful and less likely to crash.

* Added support for two more categories of content, `ApplicationLink`
  and `WebLink`.
* Reordered the ifs, making `StorageItem` the last clause. With WT being
  a text-oriented application, I think we can safely assume that the
  content being pasted is likely to be text/links.
* Catch possible exceptions during
  `e.DataView().GetStorageItemsAsync()`.

Closes #7804",,,,False,False,False,39,11,1,1,skyline75489@outlook.com,noreply@github.com,"12/02/2020, 23:30:52",2020,"12/02/2020, 23:30:52",2020,4,1,3,4.1,1.2,0
,"Improve OSC 8 Hyperlink parsing logic (#7962)

This PR improves the OSC 8 Hyperlink parsing logic, by adding support to
`:` in params.

## Validation Steps Performed

Tests added & passed.",,,,False,False,False,77,8,5,5,skyline75489@outlook.com,noreply@github.com,"12/03/2020, 00:33:29",2020,"12/03/2020, 00:33:29",2020,1,1,3,4.6,1.5,0
,"Add launchMode parameter to ToggleCommandPalette action (#8382)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/8322
* [x] CLA signed. 
* [x] Tests added/passed
* [x] Documentation updated - https://github.com/MicrosoftDocs/terminal/pull/202
* [x] Schema updated.
* [x] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
Added an optional launchMode parameter to ""commandPalette"" command. 
The values of the launchMode are either ""action"" (default) or ""command line"".

## Validation Steps Performed
* Manual tests",,,,False,False,False,164,12,12,12,khvitaly@gmail.com,noreply@github.com,"12/03/2020, 16:15:31",2020,"12/03/2020, 16:15:31",2020,3,0,3,4.7,3.6,0
,"Correct paths in the the runut and runft test scripts (#8488)

This corrects the path to `Terminal.Core.Unit.Tests.dll` in the `runut`
unit test script and makes the `runft` feature test script capable of
working with _Release_ builds as well as _Debug_ builds.

The path to `Terminal.Core.Unit.Tests.dll` changed when the project was
restructured, and the `runut` script was never updated to reflect that
change. That has now been corrected.

And the `runft` script used to be hard coded to look for tests in the
_Debug_ directory, but it has now been updated to use the
`%_LAST_BUILD_CONF%` environment variable, so it should work for both
_Debug_ and _Release_ builds.

## Validation Steps Performed
I've manually confirmed that the `runut` and `runft` scripts now work as
expected.

Closes #8485",,,,False,False,True,2,2,2,2,j4_james@hotmail.com,noreply@github.com,"12/03/2020, 18:38:18",2020,"12/03/2020, 18:38:18",2020,4,1,3,3.0,1.2,0
,"Add a bunch of my specs to the roadmap (#8487)

I've opened a bunch of specs for features on the roadmap. 
It's probably best if I actually updated the roadmap to reflect them.",,,,False,False,False,11,4,1,1,migrie@microsoft.com,noreply@github.com,"12/03/2020, 19:01:02",2020,"12/03/2020, 19:01:02",2020,4,3,3,3.7,1.0,0
,"Refactor DEC/ANSI modes to avoid duplication when we add SM/RM (#8469)

I was about to add `SetAnsiMode`/`ResetAnsiMode` for `SM` and `RM` when I
realized that we probably don't need yet another enum of mode types, set and
reset functions, and a mode helper for ANSI standard modes when we already have
one for DEC Private modes.

This commit:

1. Changes the enum `PrivateModeParams` to just be `ModeParams`
2. Differentiates ANSI Standard modes (IRM, KAM, SRM, ...) from DEC
   Private modes (DECCOLM, DECCKM, ...) using a flag bit set in the enum
   value.
3. Introduces a helper class for constructing these values much like
   `VTID`. That helper takes a bitmask and applies it to an input to
   produce the final enum value.
4. Dispatches all mode set/reset through a common Set/Reset and
   `_ModeHelper` that uses the existing enum values.

[1] These modes are in separate namespaces with some overlap. We want to
differentiate them at dispatch time to ensure that `\e[2h` and `\e[?2h` are
given different treatment, and ensure that `\e[1000h` doesn't activate xterm
mouse mode.

Fixes #8457.",,,,True,False,True,137,85,9,9,duhowett@microsoft.com,noreply@github.com,"12/03/2020, 21:51:59",2020,"12/03/2020, 21:51:59",2020,4,1,3,3.5,3.6,0
,"Correct horizontal coordinates in viewport overflow test (#8456)

When resizing the buffer in the `SetConsoleScreenBufferSize` and
`SetConsoleScreenBufferInfoEx` APIs, we have tests in place to make sure
that the resize doesn't result in the viewport extending past the bottom
or right of the buffer (since that can eventually result in exceptions
being thrown). Unfortunately these tests were using the wrong X
coordinate, so they failed to detect an overflow along the horizontal
axis. This PR corrects that mistake.

PR #8309 was where the overflow detection was initially added.

The original code was using the `Viewport::EndExclusive` method to
determine the extent of the viewport, mistakenly thinking that it
returned the bottom right coordinates (it actually returns the left
coordinate). So I've now added a `BottomRightExclusive` method to the
`Viewport` class, that actually does return the coordinates we need, and
have updated the overflow tests to use that method instead.

## Validation Steps Performed
I've manually confirmed that the test case is issue #8453 is no longer
throwing an exception. 

Closes #8453",,,,True,True,False,14,2,3,3,j4_james@hotmail.com,noreply@github.com,"12/03/2020, 21:53:16",2020,"12/03/2020, 21:53:16",2020,4,1,3,4.4,1.2,0
,"Fix rendering of DBCS characters when partially off screen (#8438)

When the renderer is called on to render part of a line starting halfway
through a DBCS character (as can occur in conhost when the viewport is
offset horizontally), it could result in the character not being
displayed, and/or with following the characters drawn in the wrong
place. This PR is an attempt to fix those problems. 

The original code for handling the trailing half of fullwidth glyphs was
introduced in PR #4668 to fix issue #2191.

When the content being rendered starts with the trailing half of a DBCS
character, the renderer tries to move the `screenPoint` back a position,
so it can instead render the full character, but instructing the render
engine to trim off the left half of it.

If the X position was already in column 0, though, it would instead move
forward one position, intending to skip that character. At best this
would mean the half character wouldn't be rendered, but since the
iterator wasn't incremented correctly, it actually just ended up
rendering the character in the wrong place.

The fix for this was simply to drop the check for the X position being
in column 0, and allow it go negative. The rendering engine would then
just start rendering the character partially off screen, and only the
second half of it would be displayed, which is exactly what is needed.

The second problem was that the code incrementing the iterator was using
the `columnCount` variable rather than the `it->Columns()` value for the
current position. When dealing with the trailing half of a DBCS
character, the `columnCount` is 2, but the `Columns()` value is 1. If
you use the former rather than the later, then the renderer may skip the
following character.

## Validation Steps Performed
I've developed a more easily reproducible version of the test case
described in #8390, and confirmed that the problem no longer occurs when
this PR is applied.

I've also manually confirmed that the problem described in #2191 that
was fixed by PR #4668 is still working correctly now.

Closes #8390",,,,True,False,False,8,18,1,1,j4_james@hotmail.com,noreply@github.com,"12/04/2020, 00:39:23",2020,"12/04/2020, 00:39:23",2020,1,1,3,1.5,1.2,0
,"doc: Add a spec for Application State (#7972)

This commit introduces a specification for ""cross-session"" app state
that isn't stored in the user's settings.json.

Specs #8324",,,,False,False,False,99,0,1,1,duhowett@microsoft.com,noreply@github.com,"12/04/2020, 01:52:03",2020,"12/04/2020, 01:52:03",2020,1,1,3,5.0,1.5,0
,"Fix the path to the local unittests in `runut` (#8499)

This is the same root cause as #8485. We moved the output of a bunch
of projects to be unified. We forgot to update all the test scripts.

In this case, the LocalTests were still using the old path that's
_not_ under `bin/`",,,,True,False,False,2,2,1,1,migrie@microsoft.com,noreply@github.com,"12/04/2020, 18:08:40",2020,"12/04/2020, 18:08:40",2020,4,3,3,2.5,1.2,0
,"wpf: target netcoreapp3.1, clean up test project path (#8491)

There were some minor annoyances with the WPF projects.

1. WpfTerminalTestNetCore was in an unnecessary same-named subdirectory
2. The build started throwing deprecation warnings because `netcoreapp3.0` is not LTS and is going away.",,,,False,False,False,2,2,10,10,duhowett@microsoft.com,noreply@github.com,"12/04/2020, 18:17:25",2020,"12/04/2020, 18:17:25",2020,4,1,3,3.0,1.5,0
,"Update to Microsoft.UI.Xaml 2.5 ""stable"" (#8500)

This commit moves us to the Xaml prerelease (201202003) that is
equivalent to public stable release 2.5.

Remember, we need to use prereleases for some silly reason.",,,,False,False,False,22,44,15,15,duhowett@microsoft.com,noreply@github.com,"12/04/2020, 23:49:45",2020,"12/04/2020, 23:49:45",2020,4,1,3,1.7,2.5,0
,"Add a keybinding to break straight into the debugger (#8498)

Have you ever wanted to debug the Terminal, but weren't sure which of
your Terminal windows was the one you needed to attach to? Now you don't
need to worry! Simply execute the `breakIntoDebugger` action, and the
Terminal will `DebugBreak()` for you!

This requires that the user has set `""debugFeatures"": true`

Validated by adding a command:
{
    ""command"": ""breakIntoDebugger"",
    ""keys"": ""ctrl+alt+shift+f1"",
    ""name"": ""DebugBreak()""
},

...and verifying that it pops open the post-mortem debugger (windbg).",,,,False,False,False,55,28,9,9,migrie@microsoft.com,noreply@github.com,"12/04/2020, 23:54:59",2020,"12/04/2020, 23:54:59",2020,4,3,3,3.3,2.4,0
,"Add a subset of boost (#8492)

In my #8489 we want to use boost's small_vector type, but that PR is
kinda messy by adding boost and also making a meaningful change.  So
here I'm splitting out the boost addition to its own PR so that one can
be more focused on the allocation improvement and consumption of boost.",,,,False,False,False,119834,0,449,449,austin.lamb@microsoft.com,noreply@github.com,"12/05/2020, 01:25:55",2020,"12/05/2020, 01:25:55",2020,1,0,3,5.0,5.0,0
,"Add ScrollHome and ScrollEnd (#8459)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
This PR adds shortcut action so that users can scroll.
I used `UINT16_MAX` for `rowsToScroll`.
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #7542
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,61,1,10,10,yukawa_hidenori@icloud.com,noreply@github.com,"12/08/2020, 17:28:41",2020,"12/08/2020, 17:28:41",2020,3,0,3,4.9,2.4,0
,"Fix the feature tests with a retry (#8534)

A bunch of our feature tests don't work reliably in CI. They rely on
creating a new `OpenConsole.exe` window, then running the test _in that
console_. As a part of that test setup, the test runner used to wait a
second to attach to the newly created console. Then the test goes on
it's merry way, assuming the console is ready to go. However, in CI,
that might take more than a second. If it does, then the test would fail
pretty immediately, as soon as it tries to get at the buffer of the new
console.

This PR introduces a little retry loop to the test init. After attaching
to the new console, we'll try and get at the screen buffer. If that
fails, we'll wait a second and try again. We'll try 5 times total,
before bailing entirely. Hopefully, this should mitigate most of the
random CI failures we get in the feature tests.

Closes #8495",,,,True,False,False,39,11,1,1,migrie@microsoft.com,noreply@github.com,"12/09/2020, 19:02:23",2020,"12/09/2020, 19:02:23",2020,4,3,3,3.9,1.2,0
,"Make command palette ephemeral (#8377)

So the implementation is somewhat dirty.
The ideas was nice - add lostFocusHandler

However it broke few things:
* In the TabSwitcher the ListItem must be focusable since otherwise 
the SingleSelectionMode behavior breaks. 
To address this I had to put the lostFocusHandler on the items as well
 
* When you click the flyout, the palette loses focus, 
which makes the terminal page to set the focus on the tab, closing the flyout. 
To address this I had to ensure the tab won't get focused once the flyout is open.
In addition, flyout should fix the focus before opening, 
otherwise alt+tab will put a focus on a tab row rather than on tab

* I also had to close the palette if the tab order changes.
To prevent inconsistencies.

Closes #8355",,,,True,False,False,70,28,4,4,khvitaly@gmail.com,noreply@github.com,"12/09/2020, 22:01:08",2020,"12/09/2020, 22:01:08",2020,4,0,3,3.6,1.8,0
,"Teach CommandPalette model to natively support tabs and command lines (#8420)

First step towards #8415:
* Introduce `PaletteItem` and derive from it to provide native support
  for tabs and command lines (`ActionPaletteItem` / `TabPaletteItem`,
  `CommandLinePaltteItem`)
* Remove business logic behind PaletteItem from palette (aka dispatch
  commands and preview tabs externally)",,,,False,False,False,585,327,31,30,khvitaly@gmail.com,noreply@github.com,"12/10/2020, 00:36:28",2020,"12/10/2020, 00:36:28",2020,1,0,3,3.2,4.5,0
,"Teach Find command to populate the search box with selected text  (#8521)

If a single line of text is selected, use it to populate the search box.

Closes #8307",,,,False,False,False,32,0,4,4,khvitaly@gmail.com,noreply@github.com,"12/10/2020, 01:24:16",2020,"12/10/2020, 01:24:16",2020,1,0,3,5.0,1.0,0
,"Change tab close and rename icons to better fit the UI (#8424)

Closes #8419

Co-authored-by: KiminoriKaburagi <heipo_nogu@outlook.jp>",,,,False,False,False,2,2,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"12/10/2020, 01:25:50",2020,"12/10/2020, 01:25:50",2020,1,0,3,2.5,1.0,0
,"Update Win32 Toolkit (6.1.2) and VCRT Forwarders (1.0.4) (#8501)

There's a handful of small changes in these updates:

The Win32 Toolkit is now built with CFG (I think), and
the VCRT forwarders are now the (second) non-RC version.",,,,False,False,False,21,21,8,8,duhowett@microsoft.com,noreply@github.com,"12/10/2020, 01:30:00",2020,"12/10/2020, 01:30:00",2020,1,1,3,2.5,1.5,0
,"Add some logging around tab renamer usage (#8520)

We've got similar logging around the command palette, we really should have the same logging on the tab renamer as well.

## PR Checklist
* [x] I work here
* [ ] Tests added/passed
* [n/a] Requires documentation to be updated

## Validation Steps Performed

![image](https://user-images.githubusercontent.com/18356694/101487414-c237af80-3923-11eb-9997-81549e4f1a1b.png)
Look, it works",,,,False,False,False,19,0,1,1,migrie@microsoft.com,noreply@github.com,"12/10/2020, 17:12:50",2020,"12/10/2020, 17:12:50",2020,3,3,3,5.0,1.0,0
,"Make schema compliant by fixing CloseTab* index definitions (#8547)

* The index field should be of type `""null""` and not `null`.
* The default value should be `null` and not `""""`

Closes #8024",,,,True,True,False,4,4,1,1,khvitaly@gmail.com,noreply@github.com,"12/11/2020, 04:26:56",2020,"12/11/2020, 04:26:56",2020,1,0,3,2.5,1.2,0
,"Fix SA for Visual Studio 16.8 (#8551)

I added `enum class` to one thing and decided that that was quite enough
before disabling the `enum class` warning.

Looks like 16.8 made more map/vector operations noexcept, so we have to
re-annotate to remain compliant.",,,,True,True,False,43,40,13,13,duhowett@microsoft.com,noreply@github.com,"12/11/2020, 05:04:30",2020,"12/11/2020, 05:04:30",2020,1,1,3,2.6,3.0,0
,"Support for navigating panes by MRU (#8183)

Adds a ""move to previous pane"" and ""move to next pane"" keybinding, which
navigates to the last/first focused pane

We assign pane IDs on creation and maintain a vector of active pane IDs
in MRU order. Navigating panes by MRU then requires specifying which
pane ID we want to focus. 

From our offline discussion (thanks @zadjii-msft for the concise
description):

> For the record, the full spec I'm imagining is:
> 
> { command"": { ""action"": ""focus(Next|Prev)Pane"", ""order"": ""inOrder""|""mru"", ""useSwitcher"": true|false } },
> 
> and order defaults to mru, and useSwitcher will default to true, when
> there is a switcher. So 
> 
> { command"": { ""action"": ""focusNextPane"" } },
> { command"": { ""action"": ""focusNextPane"", ""order"": ""mru"" } },
> 
> these are the same action. (but right now we don't support the order
> param)
>  
> Then there'll be another PR for ""focusPane(target=id)""
> 
> Then a third PR for ""focus(Next|Prev)Pane(order=inOrder)""

> for the record, I prefer this approach over the ""one action to rule
> them all"" version with both target and order/direction as params,
> because I don't like the confusion of what happens if there's both
> target and order/direction provided. 

References #1000 
Closes #2871",,,,False,False,False,210,79,15,15,pankaj.d.bhoj@gmail.com,noreply@github.com,"12/11/2020, 18:36:05",2020,"12/11/2020, 18:36:05",2020,4,1,3,3.6,4.2,0
,"Settings UI inheritance spec (#8269)

Spec on how we display profile inheritance inside the settings UI.

[Markdown View](https://github.com/microsoft/terminal/blob/dev/cazamor/spec/sui-inheritance/doc/specs/%231564%20-%20Settings%20UI/cascading-settings.md)

## References
#1564 - Settings UI",,,,False,False,False,146,0,7,1,cinnamon@microsoft.com,noreply@github.com,"12/11/2020, 18:42:57",2020,"12/11/2020, 18:42:57",2020,4,1,3,5.0,2.0,0
,"Fix next tab activation in focus mode upon tab closing (#8549)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/7916
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
Upon tab close the tabview is responsible to issue tab selection for the next active tab.
However this doesn't happen when tabview is hidden.
There was a special treatment for this scenario for full screen mode.
Added the same treatment to focus mode (as the tabview is not visible in this case as well).

## Validation Steps Performed
Manual tests",,,,True,True,False,4,1,1,1,khvitaly@gmail.com,noreply@github.com,"12/11/2020, 18:58:48",2020,"12/11/2020, 18:58:48",2020,4,0,3,4.0,1.2,0
,"Exclude more rarely-used stuff from Windows headers (#8513)

This PR defines a series of `NOSOMETHING` macros in PCHs, in order to
prevent `windows.h` from bringing a lot of rarely used things into the
project. 

Theoretically this should make PCH generation and overall complication
faster, but I didn't really benchmark the speed. 

Another benefit would be reducing the symbol noises caused by
`windows.h`.",,,,False,False,False,37,0,12,12,skyline75489@outlook.com,noreply@github.com,"12/11/2020, 19:35:23",2020,"12/11/2020, 19:35:23",2020,4,1,3,5.0,2.0,0
,"Move IconSourceConverter from TerminalApp to TSM

The Settings UI will need to take a dependency on IconSourceConverter.",,,,False,False,False,21,15,9,9,lelian@microsoft.com,duhowett@microsoft.com,"11/05/2020, 00:55:16",2020,"12/11/2020, 21:17:22",2020,4,0,1,2.9,1.5,36
,"Introduce public enum name<->value mappings to TSM

The settings UI will eventually need to know about the available enum
values for a given field. This offers that capability.",,,,False,False,False,138,0,5,5,lelian@microsoft.com,duhowett@microsoft.com,"11/03/2020, 17:56:04",2020,"12/11/2020, 21:19:03",2020,4,0,1,5.0,2.0,38
,"Introduce ProfileDefaults, CreateNewProfile, default icon

This commit is an amalgamation of some of the TSM changes in PR #8048.
It:
* Introduces CascadiaSettings.CreateNewProfile to add a new profile
* Introduces CascadiaSettings.ProfileDefaults, which returns the
  ""defaults"" object as a profile
* Fixes the font weight deserializer to work on uint16_ts
* Fixes a property getter in ColorScheme to not be a property getter
* Fixes a reserialization error with default profiles
* Sets a default icon for all profiles (to the C:\ Segoe MDL2 icon)",,,,True,True,False,53,14,7,7,carlos.zamora@microsoft.com,duhowett@microsoft.com,"11/06/2020, 18:34:14",2020,"12/11/2020, 21:22:16",2020,4,1,1,4.0,2.4,35
,"Introduce the Terminal Settings Editor (#8048)

This commit introduces the terminal settings editor (to wit: the
Settings UI) as a standalone project. This project, and this commit, is
the result of two and a half months of work.

TSE started as a hackathon project in the Microsoft 2020 Hackathon, and
from there it's grown to be a bona-fide graphical settings editor.

There is a lot of xaml data binding in here, a number of views and a
number of view models, and a bunch of paradigms that we've been
reviewing and testing out and designing and refining.

Specified in #6720, #8269
Follow-up work in #6800
Closes #1564
Closes #8048 (PR)

Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>
Co-authored-by: Kayla Cinnamon <cinnamon@microsoft.com>
Co-authored-by: Alberto Medina Gutierrez <almedina@microsoft.com>
Co-authored-by: John Grandle <jograndl@microsoft.com>
Co-authored-by: xerootg <xerootg@users.noreply.github.com>
Co-authored-by: Scott <sarmiger1@gmail.com>
Co-authored-by: Vineeth Thomas Alex <vineeththomasalex@gmail.com>
Co-authored-by: Leon Liang <lelian@microsoft.com>
Co-authored-by: Dustin L. Howett <duhowett@microsoft.com>
Signed-off-by: Dustin L. Howett <duhowett@microsoft.com>",,,,False,False,False,4280,0,57,53,duhowett@microsoft.com,dustin@howett.net,"12/11/2020, 21:34:21",2020,"12/11/2020, 21:47:10",2020,4,1,1,5.0,5.0,0
,"Add a keybinding option to Terminal to open the Settings UI (#8048)

This commit iontroduces another `target` to the `openSettings` binding:
`settingsUI`. It opens the settings UI introduced in the previous
commit.

Closes #1564
Closes #8048 (PR)

Co-authored-by: Carlos Zamora <carlos.zamora@microsoft.com>
Co-authored-by: Leon Liang <lelian@microsoft.com>",,,,False,False,False,285,25,15,15,duhowett@microsoft.com,dustin@howett.net,"12/11/2020, 21:34:57",2020,"12/11/2020, 21:47:10",2020,4,1,1,4.6,3.5,0
,"Enable shortcut while CommandPalette is open (#8044)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
It is maybe not the best way since I had to get all the cases for key handling so I just created for each of them. As a result the code get longer(not optimized). Most difficult thing was Next tab and Previous tab I just could not solve it.

### 9 commands that couldn't enabled > <
     1. Increase font size               -> could not find VirtualKey for ""-""
     2. Decrease font size             -> could not find VirtualKey for ""+""
     3. Split pane, split:horizontal -> could not find VirtualKey for ""-""
     4. Split pane, split:vertical     -> could not find VirtualKey for ""+""
     5. Open default settings        -> could not find VirtualKey for "",""
     6. Open settings file               -> could not find VirtualKey for "",""
     7. Open new tab dropdown    -> could not resolve keybindings
     8. Next tab                               -> could not resolve keybindings
     9. Previous tab                        -> could not resolve keybindings
 
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6679
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,20,6,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"12/14/2020, 17:11:24",2020,"12/14/2020, 17:11:24",2020,3,0,3,4.1,1.2,0
,"Replace the KB Dialog with a InfoBar (#8524)

This changes the keyboard warning from a dialog to an `InfoBar`, which
we just got in MUX 2.5. Some users were unhappy that we'd always display
the dialog. We learned from the input team that this service _should_
always be enabled. We're also learing from users that they don't always
want it enabled. 

We're working with the Input team to help us figure out how this service
can be disabled _and the Terminal work just fine_. They're confident
that it _shouldn't_. For 99% of our users, they're right. So we don't
want to get rid of the dialog entirely, we want to understand how this
is possible. While we wait, let's make the message less aggressive.

This is instead of making a `iKnowWhatImDoingDisableTheKeyboardWarning`
setting to disable the dialog. Props to @cornem for suggesting the less
aggressive solution. 

## Validation Steps Performed
Tested manually, but by forcing the message to always display. Disabling
the service requires two full reboots, and _ain't nobody got time for
that_.

Closes #8228
Closes #4448, for now",,,,False,False,False,12,18,2,2,migrie@microsoft.com,noreply@github.com,"12/14/2020, 17:37:33",2020,"12/14/2020, 17:37:33",2020,3,3,3,2.0,1.0,0
,"Revert ""Enable shortcut while CommandPalette is open (#8044)""

This reverts commit 1965fb5e735730b00e274b1882a2a13cd1a2fbba.",,,,False,False,False,6,20,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"12/14/2020, 19:35:50",2020,"12/14/2020, 19:35:50",2020,4,1,1,1.2,1.0,0
,"Fix color selection operations in conhost (#8577)

In conhost there is a keyboard shortcut that applies colors to the
selected range of text, and another shortcut that searches for the
selected text, and applies colors to any matching content. The former
operation doesn't work correctly when the selection is wrapped, and both
have problems when the selected text spans DBCS characters. This PR
attempts to fix those issues.

The problem with the color section was that it applied the color to a
simple rect spanning the start and end points of the selection. I've now
updated it to use the `Selection::GetSelectionRects` method, which
correctly handles a wrapped range of lines, and makes sure that double
width characters are fully covered.

The problem with the ""find-and-color"" operation was in the way it
obtained the search text from the selected screen cells. Since it
retrieved one cell at a time, and a DBCS character can span two cells,
that resulted in some characters being repeated in the search text. I've
now corrected that code to take the width of the characters into
account.

## Validation Steps Performed
I've manually verified that the test cases described in #8572 and #8574
are now working correctly.

Closes #8572
Closes #8574",,,,True,False,False,10,5,1,1,j4_james@hotmail.com,noreply@github.com,"12/14/2020, 19:45:49",2020,"12/14/2020, 19:45:49",2020,4,1,3,3.3,1.2,0
,"Fix Copy to Clipboard to preserve visual structure of block selection (#8579)

There are two issue with copy to clipboard when block is selected:
* We don't add new lines for lines that were wrapped
* We remove trailing whitespaces which is not intuitive in block selection.

Fixed the copy logic to always add newlines and not to remove
whitespaces when block is selected.

Even if shift is pressed!

## Detailed Description of the Pull Request / Additional comments
* Added optional parameter to `TextBuffer::GetText` 
that allows to apply formatting (includeCRLF / trimming) 
to lines that were wrapped
* Changed `Terminal::RetrieveSelectedTextFromBuffer` 
to apply the following parameters when block is selected:
  * includeCRLF = true
  * trimTrailingWhitespaces = false
  * apply the formatting above to all rows, including the ones 
that were wrapped 

## Validation Steps Performed
* Manual tests for both block and standard selection
* Copy with both right-click and command
* Added UT

Closes #6740",,,,True,False,False,98,40,4,4,khvitaly@gmail.com,noreply@github.com,"12/14/2020, 23:32:44",2020,"12/14/2020, 23:32:44",2020,4,0,3,3.6,2.4,0
,"Fix deserialization failure message of combined types (#8558)

Closes #7690",,,,True,False,False,13,6,4,4,khvitaly@gmail.com,noreply@github.com,"12/15/2020, 19:33:52",2020,"12/15/2020, 19:33:52",2020,4,0,3,3.4,1.2,0
,"Calculate initial height properly (#8584)

Closes #8527",,,,False,False,False,3,3,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"12/15/2020, 20:29:08",2020,"12/15/2020, 20:29:08",2020,4,0,3,2.5,1.0,0
,"Implement user-specified pixel shaders, redux (#8565)

Co-authored-by: mrange <marten_range@hotmail.com>

I loved the pixel shaders in #7058, but that PR needed a bit of polish
to be ready for ingestion. This PR is almost _exactly_ that PR, with
some small changes.

* It adds a new pre-profile setting `""experimental.pixelShaderPath""`,
  which lets the user set a pixel shader to use with the Terminal.
    - CHANGED FROM #7058: It does _not_ add any built-in shaders.
    - CHANGED FROM #7058: it will _override_
      `experimental.retroTerminalEffect`
* It adds a bunch of sample shaders in `samples/shaders`. Included: 
    - A NOP shader as a base to build from.
    - An ""invert"" shader that inverts the colors, as a simple example
    - An ""grayscale"" shader that converts all colors to grayscale, as a
      simple example
    - An ""raster bars"" shader that draws some colored bars on the screen
      with a drop shadow, as a more involved example
    - The original retro terminal effects, as a more involved example
    - It also includes a broken shader, as an example of what heppens
      when the shader fails to compile
    - CHANGED FROM #7058: It does _not_ add the ""retroII"" shader we were
      all worried about.
* When a shader fails to be found or fails to compile, we'll display an
  error dialog to the user with a relevant error message.
    - CHANGED FROM #7058: Originally, #7058 would display ""error bars""
      on the screen. I've removed that, and had the Terminal disable the
      shader entirely then.
* Renames the `toggleRetroEffect` action to `toggleShaderEffect`.
  (`toggleRetroEffect` is now an alias to `toggleShaderEffect`). This
  action will turn the shader OR the retro effects on/off. 

`toggleShaderEffect` works the way you'd expect it to, but the mental
math on _how_ is a little weird. The logic is basically:

```
useShader = shaderEffectsEnabled ? 
                (pixelShaderProvided ? 
                    pixelShader : 
                    (retroEffectEnabled ? 
                        retroEffect : null
                    )
                ) : 
                null
```

and `toggleShaderEffect` toggles `shaderEffectsEnabled`.

* If you've got both a shader and retro enabled, `toggleShaderEffect`
  will toggle between the shader on/off.
* If you've got a shader and retro disabled, `toggleShaderEffect` will
  toggle between the shader on/off.

References #6191
References #7058

Closes #7013

Closes #3930 ""Add setting to retro terminal shader to control blur
radius, color"" 
Closes #3929 ""Add setting to retro terminal shader to enable drawing
scanlines"" 
     - At this point, just roll your own version of the shader.",,,,True,True,False,843,116,36,36,migrie@microsoft.com,noreply@github.com,"12/15/2020, 20:40:22",2020,"12/15/2020, 20:40:22",2020,4,3,3,4.4,5.0,0
,"Convert DeviceComm into an interface and add handle exchange (#8367)

This commit replaces DeviceComm with the interface IDeviceComm and the
concrete implementation type ConDrvDeviceComm. This work is done in
preparation for different device backends.

In addition to separating out ConDrv-specific behavior, I've introduced
a ""handle exchange"" interface.

HANDLE EXCHANGE
---------------

There are points where we give ConDrv opaque handle identifiers to our
input buffer, output buffer and process data. The exact content of the
opaque identifier is meaningless to ConDrv: the driver's only
interaction with these identifiers is to hold onto them and send back
whichever are pertinent for each API call.

Because of that, we used the raw register-width pointer value of the
input buffer, output buffer or process data _as_ the opaque handle
value.

This works very well for ConDrv <-> conhost using the ConDrvDeviceComm.
It works less well for something like the ""logging"" DeviceComm that will
log packets to a file: those packets *cannot* contain pointer values (!)

To address this, and to afford flexibility to DeviceComm implementers,
I've introduced a two-member complement of handle management functions:

* `ULONG_PTR PutHandle(void*)` registers an object with the DeviceComm
  and returns an opaque identifier.
* `void* GetHandle(ULONG_PTR)` takes an opaque identifier and returns
  the original object.

ConDrvDeviceComm implements PutHandle and GetHandle by casting the
object pointer to the ""opaque handle value"", which maintains wire format
compatibility[1] with revisions of conhost prior to this change.

Simpler DeviceComm implementations that require handle tracking but
cannot bear raw pointers can implement these functions by returning an
autoincrementing ID (or similar) and registering the raw object pointer
in a mapping.

I've audited all existing handle exchanges with the driver and updated
them to use Put/GetHandle.

(I intended to add DestroyHandle, but we are not equipped for handle
removal at the moment. ConsoleHandleData/ConsoleProcessHandle are
destroyed during wait routine completion, on client disconnect, etc.
This does mean that an id<->pointer mapping will grow without bound, but
at a cost of ~8 bytes per entry and a short-lived console session I am
not too concerned about the cost.)

[1] Wire format compatibility is not required, and later we may want to
switch ConDrvDeviceComm to `EncodePointer` and `DecodePointer` just to
insulate us against a spurious ConDrv packet allowing for an arbitrary
4/8-byte read and subsequent liftoff into space.",,,,False,False,False,131,55,14,14,duhowett@microsoft.com,noreply@github.com,"12/15/2020, 23:07:43",2020,"12/15/2020, 23:07:43",2020,4,1,3,3.3,3.0,0
,"Merged PR 5445070: [Git2Git] Update the Windows build for some shell changes

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_onecore_dep_uxp 91dff13f6953441afe9e28bfe3da9d5bff27bb05

Related: MSFT-26196390

Related work items: #26196390",,,,False,False,False,8,0,4,4,duhowett@microsoft.com,duhowett@microsoft.com,"12/16/2020, 01:32:35",2020,"12/16/2020, 01:32:35",2020,1,1,1,5.0,1.0,0
,"Introduce parsed command line text to command palette (#8515)

This commit introduces another optional text block in palette that will
be shown in the command line mode (above the history). This text block
will either contain a list of parsed command lines or a description why
the parsing failed

Closes #8344
Closes #7284",,,,True,True,False,166,32,8,8,khvitaly@gmail.com,noreply@github.com,"12/16/2020, 02:03:13",2020,"12/16/2020, 02:03:13",2020,1,0,3,4.2,3.0,0
,"Add a progress ring indicator to the tab header (#8133)

This commit adds a [progress ring] to the tab header when we receive an
OSC 9 sequence. 

Adds an event handler in `Tab.cpp` for the event we raise when we get a
request to set the taskbar state/progress. This event handler updates
the tab header with the active control's state/progress. 

When we want to show the progress ring, we hide the tab icon and place
the progress ring over it. 

[progress ring]: https://docs.microsoft.com/en-us/uwp/api/Microsoft.UI.Xaml.Controls.ProgressRing?view=winui-2.4

References #6700",,,,False,False,False,92,1,5,5,pankaj.d.bhoj@gmail.com,noreply@github.com,"12/16/2020, 02:45:15",2020,"12/16/2020, 02:45:15",2020,1,1,3,4.9,1.5,0
,"Greatly reduce allocations in the conhost/OpenConsole startup path (#8489)

I was looking at conhost/OpenConsole and noticed it was being pretty
inefficient with allocations due to some usages of std::deque and
std::vector that didn't need to be done quite that way.

So this uses std::vector for the TextBuffer's storage of ROW objects,
which allows one allocation to contiguously reserve space for all the
ROWs - on Desktop this is 9001 ROW objects which means it saves 9000
allocations that the std::deque would have done.  Plus it has the
benefit of increasing locality of the ROW objects since deque is going
to chase pointers more often with its data structure.

Then, within each ROW there are CharRow and ATTR_ROW objects that use
std::vector today.  This changes them to use Boost's small_vector, which
is a variation of vector that allows for the so-called ""small string
optimization.""  Since we know the typical size of these vectors, we can
pre-reserve the right number of elements directly in the
CharRow/ATTR_ROW instances, avoiding any heap allocations at all for
constructing these objects.

There are a ton of variations on this ""small_vector"" concept out there
in the world - this one in Boost, LLVM has one called SmallVector,
Electronic Arts' STL has a small_vector, Facebook's folly library has
one...there are a silly number of these out there.  But Boost seems like
it's by far the easiest to consume in terms of integration into this
repo, the CI/CD pipeline, licensing, and stuff like that, so I went with
the boost version.

In terms of numbers, I measured the startup path of OpenConsole.exe on
my dev box for Release x64 configuration.  My box is an i7-6700k @ 4
Ghz, with 32 GB RAM, not that I think machine config matters much here:

|        | Allocation count    | Allocated bytes    | CPU usage (ms) |
| ------ | ------------------- | ------------------ | -------------- |
| Before | 29,461              | 4,984,640          | 103            |
| After  | 2,459 (-91%)        | 4,853,931 (-2.6%)  | 96 (-7%)       |

Along the way, I also fixed a dynamic initializer I happened to spot in
the registry code, and updated some docs.

## Validation Steps Performed
- Ran ""runut"", ""runft"" and ""runuia"" locally and confirmed results are
  the same as the main branch
- Profiled the before/after numbers in the Visual Studio profiler, for
  the numbers shown in the table

Co-authored-by: Austin Lamb <austinl@microsoft.com>",,,,True,True,False,158,222,24,23,austin.lamb@microsoft.com,noreply@github.com,"12/16/2020, 18:40:30",2020,"12/16/2020, 18:40:30",2020,4,0,3,2.2,4.2,0
,"Set Tab tooltip explicitly (#8298)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
The tab tooltip is no longer empty when it was toggle zoomed.
<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #8199 
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,10,1,2,2,yukawa_hidenori@icloud.com,noreply@github.com,"12/17/2020, 14:22:19",2020,"12/17/2020, 14:22:19",2020,3,0,3,4.5,1.2,0
,"Cleanup extraneous local leftover from #8194 (#8605)

Cleanup extraneous local leftover from #8194

## PR Checklist
* [x] Closes leftover from #8194
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA.",,,,False,False,False,0,1,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"12/17/2020, 23:06:50",2020,"12/17/2020, 23:06:50",2020,4,0,3,1.0,1.0,0
,"Minor grammatical fix (#8603)

Merely fixed the capitalization of a word.

## Detailed Description of the Pull Request / Additional comments
- Inside `doc/AddASetting.md`, on line 14, the sentence previously began with the verb ""add"" with a lowercase alphabet.
- I replaced ""add"" with ""Add"".
  ``` md
  [12] ...  
  [13]   2. Add matching fields to Settings.hpp
  [14]     - Add getters, setters, the whole drill.
  [15] ...
  ```",,,,True,True,False,1,1,1,1,30315706+paramsiddharth@users.noreply.github.com,noreply@github.com,"12/17/2020, 23:12:36",2020,"12/17/2020, 23:12:36",2020,4,0,3,2.5,1.2,0
,"Add UI for adding, renaming, and deleting a color scheme (#8403)

Introduces the following UI controls to the ColorSchemes page:
- ""Add new"" button
  - next to dropdown selector
  - adds a new color scheme named (""Color Scheme #"" where # is the number of color schemes you have)
- ""Rename"" Button
  - next to the selector
  - replaces the ComboBox with a TextBox and the accept/cancel buttons appear
- ""Delete"" button
  - bottom of the page
  - opens flyout, when confirmed, deletes the current color scheme and selects another one

This also adds a Delete button to the Profiles page. The Hide checkbox was moved above the Delete button.

## References
#1564 - Settings UI
#6800 - Settings UI Completion Epic

## Detailed Description of the Pull Request / Additional comments

**Color Schemes:**
- Deleting a color scheme selects another one from the list available
- Rename replaces the combobox with a textbox to allow editing
- The Add New button creates a new color scheme named ""Color Scheme X"" where X is the number of schemes defined
- In-box color schemes cannot be deleted

**Profile:**
- Deleting a profile selects another one from the list available
- the rename button does not exist (yet), because it needs a modification to the NavigationView's Header Template
- The delete button is disabled for in-box profiles (CMD and Windows Powershell) and dynamic profiles

## Validation Steps Performed
**Color Schemes - Add New**
✅ Creates a new color scheme named ""Color Scheme X"" (X being the number of color schemes)
✅ The new color scheme can be renamed/deleted/modified

**Color Schemes - Rename**
✅ You cannot rename an in-box color scheme
✅ The rename button has a tooltip
✅ Clicking the rename button replaces the combobox with a textbox
✅ Accept --> changes name
✅ Cancel --> does not change the name
✅ accepting/cancelling the rename operation updates the combo box appropriately

**Color Schemes - Delete**
✅ Clicking delete produces a flyout to confirm deletion
✅ Deleting a color scheme removes it from the list and select the one under it
✅ Deleting the last color scheme selects the last available color scheme after it's deleted
✅ In-box color schemes have the delete button disabled, and a disclaimer appears next to it

**Profile- Delete**
✅ Base layer presents a disclaimer at the top, and hides the delete button
✅ Dynamic and in-box profiles disable the delete button and show the appropriate disclaimer next to the disabled button
✅ Clicking delete produces a flyout to confirm deletion
✅ Regular profiles have a delete button that is styled appropriately
✅ Clicking the delete profile button opens a content dialog. Confirmation deletes the profile and navigates to the profile indexed under it (deleting the last one redirects to the last one)


## Demo
Refer to this post [here](https://github.com/microsoft/terminal/pull/8403#issuecomment-747545651.
Confirmation flyout demo: https://github.com/microsoft/terminal/pull/8403#issuecomment-747657842",,,,False,False,False,1162,517,26,25,carlos.zamora@microsoft.com,noreply@github.com,"12/17/2020, 23:14:07",2020,"12/17/2020, 23:14:07",2020,4,1,3,3.5,5.0,0
,"doc: document how to add a setting to Windows Terminal (#8566)

This guide serves as a reference on how to add a setting to Windows Terminal. It covers...
- Terminal Settings Model changes
- Settings UI changes
- `TerminalSettings` changes
- Actions and action arguments

As a part of #6800 (Settings UI Follow Up Tasks)",,,,False,False,False,395,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"12/18/2020, 02:09:16",2020,"12/18/2020, 02:09:16",2020,1,1,3,5.0,2.5,0
,"Add `size` param to `splitPane` action, `split-pane` subcommand (#8543)

## Summary of the Pull Request

Adds a `size` parameter to `splitPane`. This takes a `float`, and specifies the portion of the parent pane that should be used to create the new one. 

This also adds the param to the `split-pane` subcommand.

### Examples
 
| commandline | result |
| -- | -- |
| `wt ; sp -s .25` | ![image](https://user-images.githubusercontent.com/18356694/101784317-fb595680-3ac0-11eb-8248-782dc61957cf.png) | 
| `wt ; sp -s .8` | ![image](https://user-images.githubusercontent.com/18356694/101784442-20e66000-3ac1-11eb-8f9b-fb45a73c9334.png) |
| `wt ; sp -s .8 ; sp -H -s .3` | ![image](https://user-images.githubusercontent.com/18356694/101784552-470c0000-3ac1-11eb-9deb-df37aaa36f01.png) |

## PR Checklist
* [x] Closes #6298
* [x] I work here
* [x] Tests added/passed
* [x] Docs PR: MicrosoftDocs/terminal#208

## Detailed Description of the Pull Request / Additional comments

I went with `size`, `--size,-s` rather than `percent`, because the arg is the (0,1) version of the size, not the (0%,100%) version. 

## Validation Steps Performed

Added actions, played with the commandline, ran tests",,,,False,False,False,186,139,19,19,migrie@microsoft.com,noreply@github.com,"12/18/2020, 03:51:53",2020,"12/18/2020, 03:51:53",2020,1,3,3,2.9,3.5,0
,"Prevent tab icon from blinking upon tab gaining focus (#8609)

Looks like recent regression:
1. Every time the tab gains focus (e.g., upon tab switching) we trigger `TaskbarProgressChanged`
2. This call results in `HideIcon` call
3. This call resets the value of Icon even if hide=false
4. This triggers reload of the image resulting in blinking",,,,False,False,False,12,10,1,1,khvitaly@gmail.com,noreply@github.com,"12/18/2020, 08:49:22",2020,"12/18/2020, 08:49:22",2020,2,0,3,2.7,1.0,0
,"Teach terminal page to go to the last used tab in MRU mode (#8610)

## PR Checklist
* [x] Closes #8550
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [x] I've discussed this with core contributors already.",,,,False,False,False,54,38,2,2,khvitaly@gmail.com,noreply@github.com,"12/18/2020, 10:11:25",2020,"12/18/2020, 10:11:25",2020,2,0,3,2.9,1.5,0
,"Enable shortcut while CommandPalette is open  (#8586)

This commit introduces direct shortcut dispatch to TerminalPage, which
allows it to respond to key bindings before the command palette.

This allows the user to use shortcuts from the command palette while
it's open.

Closes #6679",,,,False,False,False,30,0,3,3,yukawa_hidenori@icloud.com,noreply@github.com,"12/18/2020, 17:09:30",2020,"12/18/2020, 17:09:30",2020,3,0,3,5.0,1.0,0
,"Allow single cell selection with Shift+Click (#8611)

Closes https://github.com/microsoft/terminal/issues/5766",,,,False,False,False,1,1,1,1,khvitaly@gmail.com,noreply@github.com,"12/18/2020, 17:16:46",2020,"12/18/2020, 17:16:46",2020,3,0,3,2.5,1.2,0
,"Add support for the ""italic"" graphic rendition attribute (#8580)

This PR adds support for the ANSI _italic_ graphic rendition attribute,
which is enabled by the `SGR 3` escape sequence.

For the GDI renderer, I've just created an additional italic variant of
the font, and then the `UpdateDrawingBrushes` method selects the
appropriate font variant into the device context based on the requested
text attributes.

It's a bit more complicated in the DX renderer, because we need both an
italic variant of the font, and a variant of the text format object. The
`CustomTextLayout` class also had to be updated to hold the two font and
format instances, and decide which of the variants to use based on a
`useItalicFont` property in the drawing context, initially set in the
`UpdateDrawingBrushes` method.

## Validation Steps Performed
I've created some test content using a range of different character sets
(e.g. CJK, block characters, emoji, etc.), then applied the italic
attribute mixed with various other SGR attributes to see how they
interact. The output isn't always perfect, but I think it seems
reasonable given the constraints of a cell-based terminal renderer.

Closes #5461",,,,False,False,False,132,22,7,7,j4_james@hotmail.com,noreply@github.com,"12/18/2020, 19:23:54",2020,"12/18/2020, 19:23:54",2020,4,1,3,4.3,2.5,0
,"Fix margins and box width in SUI (#8616)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Fixed some of the margin alignments and increased the standard box width.

![image](https://user-images.githubusercontent.com/48369326/102658433-67c0ff00-412c-11eb-8deb-cf00593169a3.png)

![image](https://user-images.githubusercontent.com/48369326/102658447-6e4f7680-412c-11eb-8371-d4dfdc63b80a.png)",,,,True,True,False,10,6,2,2,cinnamon@microsoft.com,noreply@github.com,"12/24/2020, 00:22:18",2020,"12/24/2020, 00:22:18",2020,1,1,3,3.1,1.2,0
,Use inclusive language in the spellcheck docs (#8677),,,,False,False,False,1,1,1,1,clint@rutkas.com,noreply@github.com,"12/29/2020, 22:13:44",2020,"12/29/2020, 22:13:44",2020,4,0,3,2.5,1.0,0
,"Fix VT parser memory leak in tracing (#8618)

Fix memory leak that occurs from not dispatching the end of sequences on all actions (since it is buffering up all characters for trace reasons.) Also don't bother storing if no one is listening.

## PR Checklist
- [x] Closes #8283
* [x] Fixes leak found while bumbling around.
* [x] I work here.

## Detailed Description of the Pull Request / Additional comments
- We trace all the things leading up to the Action phase in the VT parser for ETW tracing to make debugging the parser easier, but we made two mistakes.
- At some point, three of the actions (related to print/execute) weren't dispatching the stored up sequence to tracing and not clearing it. So printing/executing in a giant run over and over caused the vector to bloat and bloat and bloat forever.
- We're storing things even when no one is listening. That's a waste.

## Validation Steps Performed
- Watched it grow every time I did `type big.txt` under `taskman.exe`. Then watched it not do that after.
- I did technically WPR it to figure out this was the culprit.",,,,True,False,False,19,4,2,2,miniksa@microsoft.com,noreply@github.com,"01/04/2021, 17:14:08",2021,"01/04/2021, 17:14:08",2021,3,4,4,4.1,1.2,0
,"Simplify TerminalPage by introducing _GetFocusedTabImpl (#8655)

A part of the https://github.com/microsoft/terminal/issues/8415.
Very technical commit to simplify the terminal page code
towards additional steps of simplifying tab management.
No business logic should change.

A firs step in splitting https://github.com/microsoft/terminal/pull/8427",,,,False,False,False,118,166,3,3,khvitaly@gmail.com,noreply@github.com,"01/04/2021, 19:32:53",2021,"01/04/2021, 19:32:53",2021,4,1,4,2.7,3.0,0
,"Prevent Tab Switcher from increasing Tab refcount (#8653)

Fix `TabPaletteItem` to hold only a weak reference to a tab.
This way we guarantee that the refcount of the closed tab 
gets to 0 immediately
(and that command palette cannot ""raise it from the dead"").

While this seems a correct thing to do, 
it is still not clear why the `FilteredCommand` itself 
(the one holding the `TabPaletteItem`) doesn't get released
until the UI is refreshed.

There is an impact of not registering to PropertyChanged event:
if the tab title changes during Tab Switcher navigation
the Tab Switcher item won't be updated immediately
(the change will apply next time the Tab Switcher is open).

Due to this change we need to make sure that the tabs binding
in https://github.com/microsoft/terminal/pull/8427
doesn't break the title / icon update.

## Validation Steps Performed
* Manual testing

Closes #8651",,,,True,False,False,10,3,3,3,khvitaly@gmail.com,noreply@github.com,"01/04/2021, 19:59:22",2021,"01/04/2021, 19:59:22",2021,4,1,4,3.8,1.2,0
,"Fix Korean IME to display a character being composed in conhost (#8632)

## Summary of the Pull Request
This PR fixes Korean IME to display a character being composed in conhost.

### Before
![before](https://user-images.githubusercontent.com/58393346/102745310-03f23c80-439f-11eb-9f86-263da2dbddbb.gif)

### After
![after](https://user-images.githubusercontent.com/58393346/102745343-14a2b280-439f-11eb-853c-42b52bf442f4.gif)

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6227
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,1,1,1,1,taet777@naver.com,noreply@github.com,"01/04/2021, 21:05:24",2021,"01/04/2021, 21:05:24",2021,4,0,4,2.5,1.2,0
,"Polish OpenSettings action for Settings UI and Profile page navigation on refresh (#8670)

Performs a number of minor bugfixes related to the Settings UI:
- b5370a1 Dropdown bug:
  - the dropdown would display the keybinding for the first
    `openSettings` found. So it would accidentally present and bind the
    one for the Settings UI.
- 91eb49e autogenerated name for opening Settings UI:
  - the Settings UI keybinding would display ""open settings file"". This
    was updated to say ""Open Settings UI"".
- 1cadbf4 Profile Page navigation crash:
  - the selected item off of a MUX navigation view returns a MUX
    NavViewItem (as opposed to WUX)
-  dd2f3e5 Hookup delete for Profile page navigation:
   - missed a spot where we were manually navigating to the Profile
     page. So it wasn't hooked up properly
- 9fea6de Properly cast NavViewItem tags
  - When we update the NavigationView's menu items, we were casting the
    tags to `Model::Profile` instead of `Editor::ProfileViewModel`.

## References
#6800 - Settings UI epic

Fixes the following bug:
> - [ ] JSON change --> crash
>   - open SUI --> open JSON --> edit retro effects in JSON --> save file --> cry because the app crashed

## Additional comments
This was a part of some manual testing I performed on the Settings UI.
More intricate bugs are being reported on #6800 and will be fixed in
their own PR.",,,,True,False,False,17,6,6,6,carlos.zamora@microsoft.com,noreply@github.com,"01/04/2021, 22:14:51",2021,"01/04/2021, 22:14:51",2021,4,2,4,3.7,1.8,0
,"Reduce Transient Allocations during Bulk Text Output (#8617)

Make a few changes to memory usage throughout the application to reduce transient allocations from the `big.txt` test from ~213,000 to ~53,000.

## PR Checklist
* [x] Supports #3075
* [x] I work here.
* [x] Tested manually and WPR'd. Test suite should still pass.
* [x] Am core contributor

## Detailed Description of the Pull Request / Additional comments

Transient allocations are those that are new'd, used, then delete'd. Going back and forth to the system allocator for things we're just going to throw away or use rapidly again is a performance detriment. Not only is it a bunch of time to go ask the system with a syscall, it also hits a whole bunch of locks on the allocators. This PR identifies a few places where we were accidentally allocating and didn't mean to or were allocating and freeing just to turn around and allocate again. I chose other strategies to avoid this.

## Validation Steps Performed
- Ran `big.txt` sample (~6MB file) before and after. Observed heap allocations with WPR.",,,,False,False,False,65,35,12,12,miniksa@microsoft.com,noreply@github.com,"01/05/2021, 18:06:06",2021,"01/05/2021, 18:06:06",2021,4,4,4,3.2,2.5,0
,"Use memory pool for PolyTextOut items in GDI Renderer (#8619)

Converts the poly text out string and width buffers to use a memory pool since we free/alloc those every frame and are just going to reuse them over and over. 

## PR Checklist
* [x] Supports #3075
* [x] I work here.
* [x] Profiled memory before/after. Tested manually with `big.txt`.

## Detailed Description of the Pull Request / Additional comments
- Sets up a PMR memory pool for the GDI Engine. It tends to alloc and free a bunch of little buffers during painting frames. The pool will likely hold onto that memory frame over frame, but we'd just be using it again and again and again anyway. So this way we avoid all the system memory allocator locks and syscalls.

## Validation Steps Performed
- Ran `big.txt` about 10x in the window. Checked WPR/WPA profile output before/after.",,,,False,False,False,28,28,5,5,miniksa@microsoft.com,noreply@github.com,"01/05/2021, 22:10:06",2021,"01/05/2021, 22:10:06",2021,4,4,4,2.5,1.5,0
,"Initialize stack variables. check return code from shell lnk loading (#8712)

## References
* Commit f273aa679d4d9fb516678fc7ed5fc6495a8e8532 from os repository.

## PR Checklist
* [x] Closes #7650 
* [x] I work here.
* [x] Tests passed

## Detailed Description of the Pull Request / Additional comments
* We found and fixed this in November 2017, but I fumbled the replication and accidentally overwrote the commit. This digs it up from history and puts it back in our code.
* When the shortcut file cannot be read for whatever reason, we are setting the hotkey value to uninitialized data as we never initialize several members on the stack in this function. It just so happens that the one in the `dwHotkey` field is commonly `0x4c` or the letter `L` which is then sent into the window procedure to tell the OS to capture it as a global hotkey and foreground the `conhost.exe` that was started. We should realize the load failure and not set any hotkey at all and we should initialize the stack variables. This does both.

## Validation Steps Performed
* [x] Manual scenario running LNK file that cannot be loaded from customer report (make LNK to cmd.exe, make it inaccessible to conhost so it can't load/read it.)
* [x] Manual scenario with `mklink`'d link that makes the shortcut parser attempt to load (and fail because it isn't a LNK at all from #7650)",,,,True,False,False,17,15,1,1,miniksa@microsoft.com,noreply@github.com,"01/06/2021, 12:03:45",2021,"01/06/2021, 12:03:45",2021,3,4,4,2.7,1.2,0
,"make ""open terminal here"" context menu work for directory background (#8638)

This commit makes ""Open in Windows Terminal"" Context menu work again for
directory background even on system that OS fix is not applied.

This is a fallback solution to OS fixes mentioned in #6414.
While OS fix is on its way, we need a fallback that works on existing OS
versions.

The approach to this is: when no item is selected (nullptr for
IShellItemArray*), we use shell api to query the path of current active
Explorer window. A special case is handled for Windows Desktop. Once
we are able to obtain the path, we launch Windows Terminal with it.

## Validation Steps Performed
1. Right click on desktop to bring up the Context menu, pick ""Open in
   Windows Terminal"", verify that a terminal is opened with correct
   initial path.

2. Open a few File Explorer windows, pick any window, navigate to a
   folder, click on ""Background"" to bring up the context menu, click
   ""Open in Windows Terminal"" verify that a terminal is opened with
   correct initial path.

Closes #6414",,,,True,False,False,135,72,9,8,hereafter.tu@gmail.com,noreply@github.com,"01/06/2021, 19:59:30",2021,"01/06/2021, 19:59:30",2021,4,0,4,3.2,3.6,0
,"Fix color animation bug of title bar buttons (#8649)

In dark mode (and high contrast mode), color animation of title bar
button uses wrong color.  Cause of this issue is using invalid data in
`ColorAnimation`.  I fixed this bug by changing `ColorAnimation` value
in XAML layout file.

According to a [forum post], `To` value of `ColorAnimation` must be
frozen. But original source code uses ""color binding"" which makes this
value dynamic.  As a result, the value set by default is always used,
that means, light mode.

So I added new resource named `CaptionButtonStrokeColor` and
`CaptionButtonBackgroundColor` which has static color value.

In light mode and dark mode, I set `SystemBaseHighColor` in the color
resource.  `SystemBaseHighColor` is the same as
`SystemControlForegroundBaseHighBrush.Color` which is originally used in
animation.

The background color animation happened to work correctly because its
value is the same between light mode and dark mode.  But I also fixed
background color animation.

## Validation Steps Performed

There is no need to add new test with this fix.

- I changed the `theme` value in `settings.json` and confirmed that the
  correct color values were used.
- I confirmed that it works correctly even if the Windows theme is
  changed.

[forum post]: https://social.msdn.microsoft.com/Forums/vstudio/en-US/027c364f-5d75-424f-aafd-7fb76b10b676/templatebinding-on-storyboard?forum=wpf

Closes #7314",,,,True,False,False,8,2,1,1,33207653+satken2@users.noreply.github.com,noreply@github.com,"01/07/2021, 21:12:29",2021,"01/07/2021, 21:12:29",2021,4,0,4,4.0,1.2,0
,"Enable underlining hyperlink on hover even if not focused (#8615)

Closes #8475",,,,False,False,False,10,10,1,1,yukawa_hidenori@icloud.com,noreply@github.com,"01/07/2021, 22:18:10",2021,"01/07/2021, 22:18:10",2021,4,1,4,2.5,1.0,0
,"Add `Microsoft.Terminal.Remoting.dll`  (#8607)

Adds a `Microsoft.Terminal.Remoting.dll` to our solution. This DLL will
be responsible for all the Monarch/Peasant work that's been described in
#7240 & #8135. 

This PR does _not_ implement the Monarch/Peasant architecture in any
significant way. The goal of this PR is to just to establish the project
layout, and the most basic connections. This should make reviewing the
actual meat of the implementation (in a later PR) easier. It will also
give us the opportunity to include some of the basic weird things we're
doing (with `CoRegisterClass`) in the Terminal _now_, and get them
selfhosted, before building on them too much.

This PR does have windows registering the `Monarch` class with COM. When
windows are created, they'll as the Monarch if they should create a new
window or not. In this PR, the Monarch will always reply ""yes, please
make a new window"".

Similar to other projects in our solution, we're adding 3 projects here:
* `Microsoft.Terminal.Remoting.lib`: the actual implementation, as a
  static lib.
* `Microsoft.Terminal.Remoting.dll`: The implementation linked as a DLL,
  for use in `WindowsTerminal.exe`.
* `Remoting.UnitTests.dll`: A unit test dll that links with the static
  lib. 

There are plenty of TODOs scattered about the code. Clearly, most of
this isn't implemented yet, but I do have more WIP branches. I'm using
[`projects/5`](https://github.com/microsoft/terminal/projects/5) as my
notation for TODOs that are too small for an issue, but are part of the
whole Process Model 2.0 work.

## References

* #5000 - this is the process model megathread
* #7240 - The process model 2.0 spec.
* #8135 - the window management spec. (please review me, I have 0/3
  signoffs even after the discussion we had 😢)
* #8171 - the Monarch/peasant sample. (please review me, I have 1/2)

## PR Checklist
* [x] Closes nothing, this is just infrastructure
* [x] I work here
* [x] Tests added/passed
* [n/a] Requires documentation to be updated",,,,False,False,False,1457,48,42,42,migrie@microsoft.com,noreply@github.com,"01/07/2021, 22:59:37",2021,"01/07/2021, 22:59:37",2021,4,4,4,4.8,5.0,0
,"Completely remove action dispatching from Command Palette (#8628)

Following up https://github.com/microsoft/terminal/pull/8586 by @Hegunumo,
fully remove the command dispatching logic from Command Palette.

Currently Command Palette might dispatch command in Tab Switcher mode.
This leads to several inconsistencies:
* Only the commands with the same key modifier as an ATS anchor will be issued
* This command will not close the TabSwitcher 
(while commands issued from TerminalPage do).

Implementation details:
* Pass KeyMapping rather than binding to CommandPalette
* Use this mapping inside previewKeyDownHandler of ATS to detect
if previous tab or next tab bindings were engaged. 
No need to handle Ctrl+Tab explicitly anymore - 
it is handled as any other binding.
* Cleanup the logic in TerminalPage::_SelectNextTab 
that checks if CommandPalette is visible.
It is not required anymore, as visible palette would intercept the call.
* Remove dependency of TerminalPage on AppLogic
that was introduced lately .",,,,False,False,False,26,54,4,4,khvitaly@gmail.com,noreply@github.com,"01/07/2021, 23:09:16",2021,"01/07/2021, 23:09:16",2021,4,1,4,2.3,1.8,0
,"Improvements to the tab renamer box (#8589)

Basically, just impose a height on both the renamer box and the overall
tab header control. However, to ensure that the text in the tab renamer
box does not get clipped by its own border, we also need to set its font
size, which is slightly smaller than it was before but it _is_ the same
as the text block that it is trying to rename so I'd say its more
consistent now.

We also improve the tab renamer box so that it scrolls as more text is
added instead of getting truncated (when the tabWidthMode is anything
other than titleLength). When the tabWidthMode _is_ set to titleLength,
the renamer box can increase in length much more (see GIFs below).

Closes #8519",,,,False,False,False,55,3,5,5,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/08/2021, 02:30:05",2021,"01/08/2021, 02:30:05",2021,1,2,4,4.8,1.5,0
,"winconpty: close the pty host handle after terminating it (#8707)

It rather raises the question as to how we missed this.

Closes #8706",,,,False,False,False,6,4,2,2,duhowett@microsoft.com,noreply@github.com,"01/08/2021, 10:18:27",2021,"01/08/2021, 10:18:27",2021,2,2,4,3.0,1.0,0
,"Fix multi line paste detection and filtering (#8634)

- Detect `\r` when warning about multi line paste
- Translate `\n` to `\r` on paste

## PR Checklist
* [x] Closes #8601
* [x] Closes #5821

## Validation Steps Performed
Manual testing",,,,True,False,False,42,9,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/08/2021, 10:44:16",2021,"01/08/2021, 10:44:16",2021,2,2,4,4.1,1.8,0
,"Implement ConEmu's OSC 9;9 to set the CWD (#8330)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

This PR implement the OSC 9;9 

|Sequence|Descriptoin|
| :------------- | :----------: |
|ESC ] 9 ; 9 ; “cwd” ST | Inform ConEmu about shell current working directory.|


<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

#8214

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [X] Closes #8166
* [X] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,74,23,8,8,skyline75489@outlook.com,noreply@github.com,"01/11/2021, 18:01:38",2021,"01/11/2021, 18:01:38",2021,4,2,4,3.8,2.4,0
,"Add a spec for pane navigation (#8375)

## Summary of the Pull Request

This is a spec for ""pane navigation"", as we've already got a bit of an implementation in #8183. We've also had a heated discussion in Teams, and I wanted to capture a bit of that in a more formal doc. I suppose that ""informal Teams chat"" didn't work out in the end 😆.

Also, this is @PankajBhojwani's feature so I'm gonna let him drive. I mostly wrote this to test out a new spec template.

After discussion, we landed on proposal D, with a minor change of `last` to `prev`. This is how it was in #8183 before I started meddling 😝 

## PR Checklist
* [x] spec for #2871
* [x] I work here

## Detailed Description of the Pull Request / Additional comments

This is not my best spec ever - again, mostly just trying to spawn discussion, and prototype the new spec template.",,,,False,False,False,302,0,1,1,migrie@microsoft.com,noreply@github.com,"01/11/2021, 18:16:44",2021,"01/11/2021, 18:16:44",2021,4,4,4,5.0,2.5,0
,"Add a `move-focus` subcommand (#8546)

## Summary of the Pull Request

Adds support for the `move-focus` subcommand to `wt.exe`. This subcommand works _exactly_ like `moveFocus(up|down|left|right)`. 

## References
* Will surely conflict with #8183
* Is goodness even in the world where #5464 exists

## PR Checklist
* [x] Closes #6580 
* [x] I work here
* [x] Tests added/passed
* [x] Docs PR: MicrosoftDocs/terminal#209

## Detailed Description of the Pull Request / Additional comments

Bear with me, I wrote this before paternity leave, so code might be a bit stale.

Oddly, after startup, this _does not_ leave the focus on the pane you moved to. If you `move-focus` during startup, at the end of startup, we'll still focus a _random_ pane. This is because the terminal still auto-focus a TermControl when it's done with layout. While we'll maintain the active control just fine during the startup, at the end of startup, all the controls will complete layout in a random order. 

This is no different than the startup right now. `wt sp ; sp ; sp` will focus a random pane at the end. This is left for a future someone to fix

This is also subject to #2398 / #4692. Moving in a direction isn't _totally_ reliable currently. `focus-pane -t ID` will certainly be more reliable, but this will work in the meantime?

## Validation Steps Performed

Opened probably 100 terminals, confirmed that the layout was always correct. Final focused pane was random, but the layout was right.",,,,True,False,False,217,0,5,5,migrie@microsoft.com,noreply@github.com,"01/11/2021, 18:37:05",2021,"01/11/2021, 18:37:05",2021,4,4,4,5.0,3.0,0
,"Teach flyouts and palette to prefer user bindings over defaults (#8725)

Store the order of the bindings and upon lookup prefer the binding
that was added last.
The defaults will always ""loose"" to user overrides.

Closes #2991",,,,False,False,False,19,2,2,2,khvitaly@gmail.com,noreply@github.com,"01/12/2021, 20:23:40",2021,"01/12/2021, 20:23:40",2021,4,1,4,4.5,1.2,0
,"Fix right-click paste to clear current selection (#8742)

Closes #8729",,,,True,False,False,1,0,1,1,khvitaly@gmail.com,noreply@github.com,"01/12/2021, 22:31:59",2021,"01/12/2021, 22:31:59",2021,4,1,4,5.0,1.2,0
,"Show clipboard contents in multiple line paste warning dialog (#8744)

When we display a dialog to warn the user that they are doing a
multi-line paste, we show the clipboard contents

The contents are shown in a scroll viewer with a fixed maximum height.

Closes #7997",,,,True,False,False,34,1,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/12/2021, 23:00:27",2021,"01/12/2021, 23:00:27",2021,4,2,4,4.9,1.2,0
,"Reset the `size` param between `split-pane` subcommands (#8753)

## Summary of the Pull Request

I forgot to reset the `--size` argument to `split-pane` when I added it. This PR fixes that, and adds a test so I don't regress it again.

## References
* Missed in #8543


## PR Checklist
* [x] I work here
* [x] Tests added/passed",,,,True,True,False,118,0,2,2,migrie@microsoft.com,noreply@github.com,"01/12/2021, 23:19:55",2021,"01/12/2021, 23:19:55",2021,4,4,4,5.0,2.4,0
,"Enforce a min/max on the Profile page's FontSize input (#8772)

Closes #8759",,,,False,False,False,4,1,1,1,migrie@microsoft.com,noreply@github.com,"01/13/2021, 00:13:28",2021,"01/13/2021, 00:13:28",2021,1,4,4,4.0,1.0,0
,"Fix the duplicate .xbf error after a TerminalControl build (#8754)

Whenever you'd make a change to anything in the Terminal Control
project, then tried deploying the package, you'd get errors like
""Package contains two files with the same name and different content,
files are `Thing.xbf` and
`.../bin/x64/debug/TSM/TerminalControl/Thing.xbf`"". It seems like
`GetPackagingOutputs` was double counting these xbfs as being both from
TerminalControl and also TSM&TSE. So if you'd change TerminalControl,
it'd change the xbf files, but not the ones in TSM/TSE, and then
eventually the wapproj would fail to put it all together.

This combination of flags seems to
* make mdmerge work
* make the packaging project work
* make a partial rebuild of TerminalControl followed by a deploy work

I'm hoping that this PR build will confirm that this works in CI as well.

## PR Checklist
* [x] Fixes this minor annoyance I've been having for the past 2 months
* [x] I work here

## Validation Steps Performed
Validated locally on VS 16.8.3. Sure to break by 16.9 🙃.",,,,True,True,False,44,4,2,2,migrie@microsoft.com,noreply@github.com,"01/13/2021, 01:23:17",2021,"01/13/2021, 01:23:17",2021,1,4,4,4.6,1.2,0
,"Move the window settings below the acrylic settings (#8775)

![image](https://user-images.githubusercontent.com/18356694/104447754-d6de1780-5561-11eb-8d99-71f4ec5ad429.png)


Put some settings below the acrylic & background image settings. Those groups have controls that will become visible when the user enables the setting. If there's other controls below them, then it's less likely that the user has _exactly scrolled to the checkbox_. That means it's more likely that the newly visible controls will be on-screen.

* [x] closes one checkbox in #8764
* [x] I work here",,,,False,False,False,37,36,3,3,migrie@microsoft.com,noreply@github.com,"01/13/2021, 18:08:40",2021,"01/13/2021, 18:08:40",2021,4,4,4,2.5,1.5,0
,"sui: hide commandline and hidden option in base layer (#8782)

Referenced #8764.",,,,False,False,False,4,2,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 01:33:08",2021,"01/14/2021, 01:33:08",2021,1,2,4,3.3,1.0,0
,"Polish Global settings a bit (#8783)

Polish for global settings in SUI

- Launch size can no longer be negative
- Reorder appearance options

## PR Checklist
* [x] Closes #8766",,,,False,False,False,8,7,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 01:34:43",2021,"01/14/2021, 01:34:43",2021,1,2,4,2.7,1.0,0
,"Remove setting for close all tabs pop up (#8779)

Remove the setting for enabling/disabling the dialog that
shows up to confirm the closing of all tabs in the SUI

Closes #8757",,,,False,False,False,0,13,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 03:01:17",2021,"01/14/2021, 03:01:17",2021,1,2,4,0.0,1.0,0
,"Order enum settings according to enum values (#8784)

Sorts the list of `EnumEntry`s that is used to create combo boxes and
radio buttons in the Settings UI. `INITIALIZE_BINDABLE_ENUM_SETTING`
sorts the list in increasing order of the enum values, whereas
`INITIALIZE_BINDABLE_ENUM_SETTING_REVERSE_ORDER` does so in decreasing
order.

## References
#6800 - Settings UI Epic

I attempted sorting the `IObservableVector<EnumEntry>` using
`std::sort`, but I would get an error in
`winrt::Windows::Foundation::swap` (`C2665`). So instead, I did the
following approach:
- (unchanged) we're converting the `IMap` from EnumMappings into (1) a
  map of localized strings and (2) the list for XAML controls
- instead of storing `EnumEntry`s to the `IObservableVector` directly,
  store it to a `std::vector`
- sort the vector using `std::sort`
- _now_ initialize the `IObservableVector` using the sorted
  `std::vector`

This uses the value of the associated enum to determine a sorting order.
Since we want the ""negative"" value (i.e. ""none"" or ""hidden"") to be last,
I use `EnumEntryComparator` and `EnumEntryReverseComparator` to
determine whether we want increasing or decreasing order respectively.
`INITIALIZE_BINDABLE_ENUM_SETTING_REVERSE_ORDER` is a copy of
`INITIALIZE_BINDABLE_ENUM_SETTING`, except it uses
`EnumEntryReverseComparator` to sort in decreasing order.

Closes #8758",,,,True,True,False,41,7,3,3,carlos.zamora@microsoft.com,noreply@github.com,"01/14/2021, 11:47:33",2021,"01/14/2021, 11:47:33",2021,2,2,4,4.3,1.2,0
,"Show cursor shape in SUI (#8780)

Show the cursor shape next to the text for it

References #8764 

<img width=""413"" alt=""cursorshape"" src=""https://user-images.githubusercontent.com/26824113/104498936-36075080-5591-11eb-8403-608e6ae3fac7.png"">",,,,False,False,False,10,5,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 13:34:52",2021,"01/14/2021, 13:34:52",2021,3,2,4,3.3,1.0,0
,"Add missing functionality to SUI (#8786)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Add checkbox for 'inherit from parent process' for starting directory
When checked, the textbox and browse button are disabled
If the starting directory is empty, the checkbox is automatically checked

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #8761 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I work here

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
<img width=""328"" alt=""pardir1"" src=""https://user-images.githubusercontent.com/26824113/104529798-64038980-55bf-11eb-93fd-75e6cf1e2547.png"">
<img width=""317"" alt=""pardir2"" src=""https://user-images.githubusercontent.com/26824113/104529803-66fe7a00-55bf-11eb-89b6-5b35c8ab89b8.png"">",,,,True,False,False,42,3,4,4,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 19:06:10",2021,"01/14/2021, 19:06:10",2021,4,2,4,4.7,1.2,0
,"Add missing settings to the settings UI (#8774)

Adds the tab switcher mode setting and copy format setting to the SUI

Closes #8755",,,,False,False,False,94,1,10,10,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/14/2021, 23:57:59",2021,"01/14/2021, 23:57:59",2021,4,2,4,4.9,2.0,0
,"Added negative value check for resize newsize (#8792)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Adds a negative value check for when the terminal window is hidden/show in VS

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References
[Bug 1265984](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1265984): [Terminal] VS crashes when clicking the hidden terminal tab

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [ ] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Manual validation.",,,,True,True,False,8,3,1,1,javier.delagarza@gmail.com,noreply@github.com,"01/15/2021, 17:48:14",2021,"01/15/2021, 17:48:14",2021,3,1,4,3.6,1.2,0
,"Introduce startupActions in settings (#8770)

Procedural solution for https://github.com/microsoft/terminal/issues/756.

Introduces a `startupActions` global setting. 

This setting is as string with the same format as actions in command line arguments.
It is used only if command line arguments were not provided
(aka running pure wt.exe).

The setting allows implicit new-tabs.
In the case of invalid syntax we show the warning dialog and ignore the setting.

The documentation PR is here: https://github.com/MicrosoftDocs/terminal/pull/217",,,,False,False,False,67,4,9,9,khvitaly@gmail.com,noreply@github.com,"01/15/2021, 18:30:11",2021,"01/15/2021, 18:30:11",2021,4,1,4,4.7,2.4,0
,"Add some tests for TextBuffer::Reflow (#8715)

This is by no means comprehensive. It will be unmarked as draft when it
is more comprehensive.

This pull request adds some tests for resizing a TextBuffer and
reflowing its contents. Each test takes the form of an initial state and
a number of buffers of different sizes. The initial state is used to
seed the first TextBuffer, and the subsequent buffers are only used to
compare.

I manually reimplemented some of the DBCS logic to ensure that the
buffers contain _exactly_ what they're supposed to. I know this is
non-ideal. After some of the CharRow changes in #8446 land, this will
need to be updated.

There's a cool bit of TAEF gore in here: the IDataSource. An IDataSource
allows us to programmatically return test cases. It's a code-only
version of its support for parameterized tests of the form `Data:x = {0,
1, 2}` . 

The only downsides are...

1. It looks like COM (it is not using COM under the hood, just the COM
   ABI)
2. Property values must be returned as strings.

To best support rich test types, I used IDataSource to produce _a lit of
array indices_ and nothing more. The test is run once for array member,
and it is the test's responsibility to look up the object to which that
index refers.

Works great though! Each reflow test is its own unit, and a failure in
an earlier reflow test will not tank a later one.",,,,True,True,False,888,7,5,5,duhowett@microsoft.com,noreply@github.com,"01/18/2021, 21:51:29",2021,"01/18/2021, 21:51:29",2021,4,2,4,5.0,3.6,0
,"Polish the Background Image settings (#8778)

## Summary of the Pull Request

Two parts:
* Hide the BG image settings when no image is specified
* Add a checkbox for ""Use desktop wallpaper"". When that's checked, the BG image path input is hidden. Unchecking that box restores the path to what it was before.

## PR Checklist
* [x] Closes #8763
* [x] I work here

## Validation Steps Performed
Tested manually",,,,False,False,False,332,121,18,13,migrie@microsoft.com,noreply@github.com,"01/18/2021, 22:34:07",2021,"01/18/2021, 22:34:07",2021,4,4,4,3.8,3.5,0
,"Fix #8695: til::spsc assignment operators don't return anything (#8811)

The following code didn't previously work as the assignment operators
didn't return a self reference:

```cpp
auto channel = til::spsc::channel<QueueItem>(100);
auto producer = std::move(channel.first);
channel.first = std::move(producer);
```

## Validation Steps Performed

I've added a basic smoke test for `til::spsc`.

Closes #8695",,,,True,False,False,34,0,2,2,leonard@hecker.io,noreply@github.com,"01/19/2021, 11:41:08",2021,"01/19/2021, 11:41:08",2021,2,2,4,5.0,1.2,0
,"Teach tab tool tips to show key bindings (#8810)

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/2886
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
Currently the tab tool tip is the tab's title.
The PR teaches the TabBase to check if there is a switch to tab command 
associated with the current tab index,
if so concatenates the the relevant mapping to the too tip.

Of course, prefers user defined bindings to the default ones.

Moved tool tip logic to TabBase so SettingsTab has tooltip as well.

![TabToolTip](https://user-images.githubusercontent.com/4639110/104823154-a1cb1100-5850-11eb-9dbd-bf23f5e6979d.gif)",,,,False,False,False,78,9,5,5,khvitaly@gmail.com,noreply@github.com,"01/19/2021, 11:44:04",2021,"01/19/2021, 11:44:04",2021,2,1,4,4.5,1.8,0
,"Update tooltips and setting names in SUI (#8777)

Change wording for some settings and tooltips to make them clearer.

Closes #8746",,,,False,False,False,37,57,1,1,cinnamon@microsoft.com,noreply@github.com,"01/19/2021, 12:14:13",2021,"01/19/2021, 12:14:13",2021,3,2,4,2.0,1.5,0
,"Give til::bitmap custom allocator support and add til::pmr::bitmap (#8787)

`til::details::bitmap<Allocator>` will use `Allocator` for its
`dynamic_bitset`, and it will use a rebound allocator for its run storage.

Allocator should be an allocator type storing `unsigned long long`, the
backing store type for `dynamic_bitset`.

I've introduced a type alias, `til::bitmap`, which papers over the
allocator choice for all existing code. I've also introduced a second
type alias, `til::pmr::bitmap`, which lets a consumer use the C++
polymorphic allocator system.

I chatted with @miniksa about whether to keep the ""full"" allocator
version in `details` or not. We decided that for the simplicity of the
`til` namespace, we would. If anybody has a compelling reason to use
`til::details::bitmap<Allocator>` directly, we can re-evaluate this
decision.",,,,False,False,False,494,266,2,2,duhowett@microsoft.com,noreply@github.com,"01/19/2021, 18:24:39",2021,"01/19/2021, 18:24:39",2021,4,2,4,3.2,3.0,0
,"Persist selected color scheme on navigation; Don't gray-out color swatches (#8799)

## Summary of the Pull Request

This PR fixes two of the components of #8765. 

> * [ ] Edit a color scheme -> Hit 'apply' -> the selected color scheme resets to the first color scheme in the list (instead of the one just edited)

This was fixed by storing the navigation state as a singleton in MainPage, and having the color schemes page update the selected scheme on that singleton. That way, a subsequent navigation to the schemes page could re-use the existing state.

> * [ ] The buttons turn gray on rollover covering up what color I'm looking at (I have dark mode)

This one was tricky. We're binding the resource for this button, to the color the button is bound to. We're also running a converter on that color, as to change the alpha slightly. This allows us to still have visual feedback on pointerover, without obscuring the color entirely. 

## PR Checklist
* [x] I work here
* [x] Tested manually",,,,True,False,False,166,1,10,10,migrie@microsoft.com,noreply@github.com,"01/19/2021, 19:18:07",2021,"01/19/2021, 19:18:07",2021,4,4,4,5.0,3.0,0
,"Maintain current Pivot selection when saving on the Profiles page (#8803)

This PR Makes sure that after you save the settings, we stay on the same part of the profiles pivot. We do this by having a singleton `ProfilesNavigationState`, a bit like the color scheme one in #8799. Hence why this PR is targeting the other.

## PR Checklist
* [x] I work here
* [x] Tested manually
* [x] Fixes the first point in #8769",,,,True,False,False,66,10,6,6,migrie@microsoft.com,noreply@github.com,"01/19/2021, 21:55:06",2021,"01/19/2021, 21:55:06",2021,4,4,4,4.3,2.4,0
,"Add a Monarch/Peasant sample app (#8171)

This PR adds a sample monarch/peasant application. This is a type of
application where a single ""Monarch"" can coordinate the actions of multiple
other ""Peasant"" processes, as described by the specs in #7240 and #8135.

This project is intended to be a standalone sample of how the architecture would
work, without involving the entirety of the Windows Terminal build. Eventually,
this architecture will be incorporated into `wt.exe` itself, to enable scenarios
like:
* Run `wt` in the current window (#4472)
* Single Instance Mode (#2227)

For an example of this sample running, see the below GIF:

![monarch-peasant-sample-001](https://user-images.githubusercontent.com/18356694/98262202-f39b1500-1f4a-11eb-9220-4af4d922339f.gif)

This sample operates largely by printing to the console, to help the reader
understand how it's working through its logic.

I'm doing this mostly so we can have a _committed_ sample of this type of application, kinda like how VtPipeTerm is a sample ConPTY application. It's a lot easier to understand (& build on) when there aren't any window shenanigans, settings loading, Island instantiation, or anything else that the whole of `WindowsTerminal.exe` needs

* [x] I work here
* [x] This is sample code, so I'm not shipping tests for it.
* [x] Go see the doc over in #8135",,,,False,False,False,1556,2,30,22,migrie@microsoft.com,noreply@github.com,"01/19/2021, 21:55:30",2021,"01/19/2021, 21:55:30",2021,4,4,4,5.0,4.5,0
,"Fix refresh-related crashes in Settings UI (#8773)

Removes the visibility hack in `UpdateSettings` where we were hiding
Profile menu items instead of removing them. This hack was removed using
`ReplaceAll`. For an unknown reason, calling `Remove()` would result in
an out-of-bounds error in XAML code.

The ""Discard"" button would improperly refresh the Settings UI. Both of
the bugs were caused by holding a reference to a hidden menu item then
trying to set the `SelectedItem` to that menu item. 

Additionally, 9283375 adds a check for the selected item in
`SettingsNav_ItemInvoked()`. This prevents navigation to an already
selected item. This was the heuristic used by the XAML Controls Gallery.

References #6800 - Settings UI Epic

## Validation Steps Performed
(Repeated for each menu item)
1. Select the menu item
2. click ""Discard changes""
3. Verify navigated to same page

Also performed repro steps for #8747 and #8748.

Closes #8747
Closes #8748",,,,True,False,False,68,41,2,2,carlos.zamora@microsoft.com,noreply@github.com,"01/19/2021, 22:14:07",2021,"01/19/2021, 22:14:07",2021,4,2,4,3.1,2.4,0
,"Move Tab Switcher mode handling into CommandPalette (#8656)

A part of the #8415.
Includes:
* Moving `TabSwitcherMode` related decisions into `CommandPalette`
(simplifying the logic of `TerminalPage::SelectNextTab`)
* Fix a bug where the index of first tab switch is incorrect
(since bindings are not updated)
* Removing redundant `CommandPalette` updates
* Preparations for tabs binding",,,,True,False,False,105,114,6,6,khvitaly@gmail.com,noreply@github.com,"01/19/2021, 22:18:10",2021,"01/19/2021, 22:18:10",2021,4,1,4,2.9,3.6,0
,"Fix tab selection to bring the tab into view (#8832)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/3638
* [x] CLA signed.
* [ ] Tests added/passed
* [ ] Documentation updated.
* [ ] Schema updated.
* [x] I've discussed this with core contributors already.

##Detailed Description of the Pull Request / Additional comments
A workaround for https://github.com/microsoft/microsoft-ui-xaml/issues/3945.
Thanks to @michael-hawker and @chingucoding for the suggested solution.",,,,True,True,False,2,0,1,1,khvitaly@gmail.com,noreply@github.com,"01/20/2021, 17:37:47",2021,"01/20/2021, 17:37:47",2021,3,1,4,5.0,1.2,0
,"Cleanup NuGet.Config file. (#8829)

Cleans up a ton of competing and outdated sources from our NuGet.Config to improve reliability and maintainability.

## PR Checklist
* [x] Closes an overdue-to-clean mess.
* [x] I work here.
* [x] Tests covered below.
* [x] I've discussed this with @DHowett already.

## Validation Steps Performed
- [x] - NuGet restored everything I could get my hands on (all `packages.config`) in our project before and after the change.
- [x] - The build and tests still run fine. (PR automation should check this one)",,,,False,False,False,5,15,1,1,miniksa@microsoft.com,noreply@github.com,"01/20/2021, 19:00:36",2021,"01/20/2021, 19:00:36",2021,4,4,4,2.0,1.0,0
,"Add `doubleUnderscore` cursor style (#7827)

Adds a new cursor type ""doubleUnderscore"". Tested manually.

Closes #6786",,,,False,False,False,47,12,8,8,raphael.horber@gmail.com,noreply@github.com,"01/20/2021, 19:36:07",2021,"01/20/2021, 19:36:07",2021,4,1,4,4.0,2.0,0
,"ROW: clean up in preparation to hide CharRow & AttrRow (#8446)

Moving things out of CharRow into ROW helps us hide it as an implementation detail.
This is part one of many.

### CharRow: Hide ClearCell, use ROW::ClearColumn

### CharRow: Hide GetText, use ROW::GetText

### CharRowBaseTests: remove dead file (never used!)

### CharRow: Move DoubleBytePadded into ROW

### CharRow: Move WrapForced into ROW

### Char/AttrRow: Hide Reset, use ROW::Reset

### Remove RowCellIterator (dead code)

RCI was unused; it was replaced by TextBufferCellIterator shortly after its creation

### Move AttrRowTests to ut_textbuffer from ut_host

It had no reliance on the host.",,,,False,False,False,156,923,27,24,duhowett@microsoft.com,noreply@github.com,"01/20/2021, 21:16:56",2021,"01/20/2021, 21:16:56",2021,4,2,4,2.0,4.5,0
,"Include UWP styling guidance in settings UI (#8831)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
The settings UI was _close_ to looking just right, it just needed some tweaks to adhere to the proper guidance: https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/forms

This PR changes the font sizes, spacing, and layout of all of the pages to align with guidance.

Some pics:
![image](https://user-images.githubusercontent.com/48369326/105241313-58194980-5b22-11eb-9f18-524cc988ec33.png)

![image](https://user-images.githubusercontent.com/48369326/105241331-60718480-5b22-11eb-8698-b9fadf3c3016.png)

![image](https://user-images.githubusercontent.com/48369326/105244413-57ce7d80-5b25-11eb-87c3-ee5f19417318.png)

![image](https://user-images.githubusercontent.com/48369326/105241384-73845480-5b22-11eb-9517-4010b145ffc2.png)

Min width:
![image](https://user-images.githubusercontent.com/48369326/105241406-7aab6280-5b22-11eb-9c59-ffc72f66509d.png)

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #8816 
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
* Removed custom font sizing, WinUI adheres to guidance anyway
* 24px spacing between controls and 48px between groupings
* Controls shouldn't be next to each other (see Launch size)
* Technically Launch size is a grouping, so it gets upgraded to subtitle status
* Left margins for pages have been fixed to left align with the page titles
* Single checkboxes have been changed to toggle switches

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed",,,,True,False,False,546,606,9,9,cinnamon@microsoft.com,noreply@github.com,"01/20/2021, 22:42:39",2021,"01/20/2021, 22:42:39",2021,4,2,4,2.4,4.2,0
,"Bugfix: navigate to new profile ref on settings reload (#8835)

Upon a settings reload, we would select the correct navigation item for
a profile, but navigate to the old one. As a result, you would navigate
to the old page that points to a dead profile object. This would make it
appear like you did not discard/save the changes.

This bugfix navigates to the newly created profile, ensuring that your
changes are actually applied to the settings model's clone in use.

## References
#8773 - Introduced the bug
#6800 - Settings UI Epic

## Validation Steps Performed
- Navigate to ""powershell"" profile
- edit ""tab title"" value
- discard changes

Before: changes would persist unless you discarded changes again
Now: changes are discarded

Also verified expected behavior occurs when you click ""save"" instead of
""discard""",,,,True,True,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"01/21/2021, 00:54:59",2021,"01/21/2021, 00:54:59",2021,1,2,4,2.5,1.2,0
,"Teach terminal to hide mouse while typing (#8629)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/5699
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
* Use SPI_GETMOUSEVANISH setting
* Hide upon CharacterReceived
* Unhide upon PointerMoved, PointerMoved, MouseWheel, LoseFocus",,,,False,False,False,60,0,6,6,khvitaly@gmail.com,noreply@github.com,"01/21/2021, 01:17:59",2021,"01/21/2021, 01:17:59",2021,1,1,4,5.0,2.4,0
,"Revert ""Maintain current Pivot selection... (#8803)"" (#8838)

This reverts commit a7d7362b958 introduced by #8803.

Reverting this commit fixes #8836 at the expense of the profile page
remembering the last Pivot selection. The 

## References
#6800 - Settings UI Epic

#8803 maintained a `ProfilePageNavigationState` in `MainPage` to remember
the pivot position. However, the two-way binding on the TextBoxes
now seem to happen too late (after the navigation occurs),
resulting in the text being applied to the wrong profile.  In other
words, the sequence of events probably looks something like this:

1. user types text (_state.profile = old profile)
2. user moves to new profile
3. navigation completes (_state.profile = new profile)
4. textbox two-way binding fires, setting _state.profile.WHATEVER = value

## Validation Steps Performed
Performed repro sets from #8836. Bug no longer occurs. 

Reopens #8769
Closes #8836",,,,True,False,False,10,66,6,6,carlos.zamora@microsoft.com,noreply@github.com,"01/21/2021, 10:50:49",2021,"01/21/2021, 10:50:49",2021,2,2,4,0.7,2.4,0
,"Merged PR 5598201: Reflect OS build changes atop a8b404463

The Windows build system doesn't support PMR yet, so we had to add a workaround. :(

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_wdx_dxp_windev 1614b27830a07484c18628ec7d9abc5f9d9b8a0b

Related work items: MSFT-31337042",,,,False,False,False,60,2,5,5,duhowett@microsoft.com,duhowett@microsoft.com,"01/22/2021, 04:57:26",2021,"01/22/2021, 04:57:26",2021,1,2,2,4.8,1.5,0
,"Add skeleton code for bracketed paste mode (#8840)

This adds the skeleton code for ""bracketed paste mode"" to the Windows
Terminal. No actual functionality is implemented yet, just the wiring
for handling DECSET/DECRST 2004.

References #395
Supersedes #7508",,,,False,False,False,60,0,12,12,skyline75489@outlook.com,noreply@github.com,"01/22/2021, 05:11:11",2021,"01/22/2021, 05:11:11",2021,1,2,4,5.0,2.5,0
,"Bugfix: sync color scheme rename with profile reference (#8793)

## Summary of the Pull Request
This fixes a bug where renaming/deleting a color scheme would not update profiles that referenced it.

This also adds detection for renaming a color scheme to a name that is already in use, and adds appropriate UI for that.

## References
#6800 - Settings UI Epic

## PR Checklist
* [X] Closes #8756 

## Detailed Description of the Pull Request / Additional comments
`Model::CascadiaSettings` was updated to have a `UpdateColorSchemeReferences()` function that updates all profiles referencing the newly renamed color scheme.

`Editor::ColorSchemesPageNavigationState` now takes and exposes a `Model::CascadiaSettings`.

When a color scheme is renamed or deleted, we use `CascadiaSettings` to update our list of color schemes appropriately, then call `UpdateColorSchemeReferences()` to update the profiles.

The tricky part is that `Profile` does not store a direct reference to `ColorScheme`, but rather the name of the color scheme. See [this tread](https://github.com/microsoft/terminal/issues/8756#issuecomment-760375027) for a discussion on this topic.

## Validation Steps Performed
Repro steps from #8756 when renaming/deleting a referenced color scheme.

## Demo
![Scheme Name Already In Use Demo](https://user-images.githubusercontent.com/11050425/105431427-6e023980-5c0a-11eb-894a-42152fc77f05.gif)",,,,True,False,False,74,10,9,9,carlos.zamora@microsoft.com,noreply@github.com,"01/22/2021, 18:21:18",2021,"01/22/2021, 18:21:18",2021,4,2,4,4.4,2.4,0
,"[Settings UI] Allow renaming a profile (#8837)

This adds a ""Name"" text box to the Profile page in the Settings UI.
Any changes to the name/icon are propagated to the relevant
NavigationViewItem.

Base Layer does not have a ""Name"".

## References
#6800 - Settings UI Epic",,,,False,False,False,29,0,2,2,carlos.zamora@microsoft.com,noreply@github.com,"01/22/2021, 23:43:54",2021,"01/22/2021, 23:43:54",2021,4,2,4,5.0,1.0,0
,"sui: Improve the ""use parent process directory"" checkbox (#8827)

Make the ""use parent process directory"" checkbox rely on a computed
property in the ProfileViewModel. It will be enabled when the starting
directory is empty and disabled when it's not. When it's unchecked, the
last-used value will be restored. If there is no last-used value, it
will be set to %USERPROFILE%.

Closes #8805",,,,False,False,False,69,22,4,4,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/22/2021, 23:46:41",2021,"01/22/2021, 23:46:41",2021,4,2,4,4.0,1.5,0
,"Show indicator of bell in tab (#8637)

When we emit a BEL (visual or audible), show an indicator in the tab
header

If the tab the BEL is coming from is not focused when the BEL is raised,
the indicator in its header will be removed when the tab gains focus. If
the tab was already focused when the BEL was emitted, then the indicator
goes away after 2 seconds.

Closes #8106",,,,False,False,False,142,15,7,7,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/22/2021, 23:48:20",2021,"01/22/2021, 23:48:20",2021,4,2,4,4.5,2.5,0
,"Add support for the DECID report (#8864)

This PR adds support for the `DECID` (Identify Device) escape sequence,
which allows for querying the terminal type in a way that is backwards
compatible with VT52 terminals.

This simply checks for the `ESC Z` sequence in the `ActionEscDispatch`
method of output state machine, and forwards the query to the existing
`DeviceAttributes` dispatch method, since the expected response is
identical to a `DA` report.

## Validation Steps Performed
I've added an output engine test that verifies that the `ESC Z` sequence
is correctly interpreted as a `DA` query when in ANSI mode, and as a
VT52 identification query when in VT52 mode.

Closes #8857",,,,False,False,False,27,1,3,3,j4_james@hotmail.com,noreply@github.com,"01/25/2021, 18:11:33",2021,"01/25/2021, 18:11:33",2021,4,2,4,4.8,1.0,0
,Add DECID to spellbot,,,,False,False,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"01/25/2021, 19:38:33",2021,"01/25/2021, 19:38:33",2021,4,2,2,5.0,1.0,0
,"Teach tab tool tip to show profile name (#8883)

Closes #4478",,,,False,False,False,36,1,4,4,khvitaly@gmail.com,noreply@github.com,"01/25/2021, 22:50:21",2021,"01/25/2021, 22:50:21",2021,4,1,4,4.9,1.0,0
,"Fix crash in command palette in high-contrast mode (#8886)

Fixing a typo I made (affecting only high contrast mode)

Closes #8884",,,,True,False,False,1,1,1,1,khvitaly@gmail.com,noreply@github.com,"01/25/2021, 22:51:11",2021,"01/25/2021, 22:51:11",2021,4,1,4,2.5,1.2,0
,"Teach SUI tab to respect close / prev / next tab bindings (#8885)

A temporary solution for #8882",,,,False,False,False,27,0,2,2,khvitaly@gmail.com,noreply@github.com,"01/25/2021, 22:52:12",2021,"01/25/2021, 22:52:12",2021,4,1,4,5.0,1.0,0
,"Fix the Profiles pivot selection, again (#8844)

This reverts the revert in #8838.

The problem was that the `Profile` in the singleton nav state would be
updated before the binding fired, so we'd end up modifying the _new_
profile, because both the old page and the new page would be pointing at
the _new_ profile already.

Instead of using a singleton instance of the profile nav state, we'll
create a new one each time. The new nav state attempt to steal the
selected pivot from the last instance of the nav state, if the profiles
are the same. This means that 

This means that we won't end up modifying the new profile. The old
page's nav state will still have the old profile, so it'll still end up
modifying the old `ProfileViewModel`.

## PR Checklist
* [x] I work here
* [x] Tested manually
* [x] Fixes the first point in #8769, again",,,,True,False,False,53,7,6,6,migrie@microsoft.com,noreply@github.com,"01/25/2021, 23:06:33",2021,"01/25/2021, 23:06:33",2021,4,4,4,4.4,2.4,0
,"Add a slider for the padding setting in the SUI (#8851)

Replaces the textbox used for the padding setting with a slider

References #8764",,,,False,False,False,107,4,6,6,pankaj.d.bhoj@gmail.com,noreply@github.com,"01/26/2021, 02:22:24",2021,"01/26/2021, 02:22:24",2021,1,2,4,4.8,2.5,0
,"Fix the erroneous TargetRuntime causing a warning in VS (#8895)

## Summary of the Pull Request

Apparently, we don't need this `TargetRuntime`. That's what was causing VS to think that we were a C# project, and give us that warning. This is the solution we got from the owner of the `.wapproj` plugin.

## References
* Introduced in c33883d8520e2efee233d4af0addff0775327e22, in PR #8062

## PR Checklist
* [x] Closes #8301
* [x] I work here


Build and ran it fine. Changed TermControl, built and ran it fine. Now let's hope CI likes it.",,,,True,False,False,1,2,1,1,migrie@microsoft.com,noreply@github.com,"01/26/2021, 19:13:59",2021,"01/26/2021, 19:13:59",2021,4,4,4,1.7,1.2,0
,"Allow ClosePane to close the Settings UI (#8903)

This is an extension of #8885. A lot of users have grown accustomed to
using `closePane` to close a tab. This adds `closePane` to the list of
keybindings accepted by #8885, and modifies the `closePane` code to
close the Settings UI if we are in a `SettingsTab`.

## References

#6800: Settings UI Epic
#8885: PR - Settings UI should respect key bindings (temporary solution)
#8882: Issue - Settings UI should respect key bindings",,,,False,False,False,8,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"01/26/2021, 19:14:28",2021,"01/26/2021, 19:14:28",2021,4,2,4,4.4,1.2,0
,"wpf: Add a TerminalControlSize emptiness check (#8906)

Watson reports show that an ""ArgumentException"" is being thrown due to `renderSize`
not being valid. Added a check for renderSize before attempting to resize.",,,,False,False,False,1,1,1,1,javier.delagarza@gmail.com,noreply@github.com,"01/26/2021, 21:57:30",2021,"01/26/2021, 21:57:30",2021,4,1,4,2.5,1.0,0
,verison: bump to 1.7 on main,,,,False,False,False,2,2,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"01/27/2021, 20:48:29",2021,"01/27/2021, 20:48:29",2021,4,2,2,2.5,1.0,0
,"Add `scrollToTop` and `scrollToBottom` actions to JSON schema (#8923)

Closes #8992.",,,,False,False,False,2,0,1,1,cinnamon@microsoft.com,noreply@github.com,"01/28/2021, 17:38:06",2021,"01/28/2021, 17:38:06",2021,3,2,4,5.0,1.0,0
,"shaders: fix setting name in README.md (#8926)

Example shows attribute `experimental.pixelShaderEffect`, should be `experimental.pixelShaderPath`",,,,True,True,False,1,1,1,1,powell.mike@gmail.com,noreply@github.com,"01/28/2021, 20:21:30",2021,"01/28/2021, 20:21:30",2021,4,0,4,2.5,1.2,0
,"Fix pixel shader typo in README (#8949)

Fixes a typo in the README regarding pixel shaders.",,,,True,True,False,1,1,1,1,jantari@outlook.de,noreply@github.com,"01/29/2021, 18:06:36",2021,"01/29/2021, 18:06:36",2021,4,0,4,2.5,1.2,0
,"Prevent context menu of tab renamer text box from canceling edit (#8979)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/8975
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
* We dismiss the edit each time `HeaderRenamerTextBox` loses focus
* Unfortunately, this applies also to scenario where the context menu
(copy, paste, select, etc.) is open with the right-click
* The fix is to ignore focus loss if `HeaderRenamerTextBox().ContextFlyout()` is open.
* We can do it as upon the fly-out dismiss the text box regains the focus.

![RenamerContextMenu](https://user-images.githubusercontent.com/4639110/106394866-90b10100-6407-11eb-8e92-627be4f70500.gif)",,,,True,True,False,8,0,1,1,khvitaly@gmail.com,noreply@github.com,"02/01/2021, 16:37:15",2021,"02/01/2021, 16:37:15",2021,3,1,4,5.0,1.2,0
,"Bind LaunchMode and TabSwitcherMode properly in SUI (#8956)

## Summary of the Pull Request
Properly binds `CurrentLaunchMode` and `CurrentTabSwitcherMode` in the Settings UI. The default mode is `OneTime`, resulting in the setting never being set.

I performed a regex search of all ""SelectedItem"" bindings and these were the only two that were not properly bound.

## References
#6800 - Settings UI Epic

## Validation Steps Performed
Modified tab switcher mode and launch mode via the settings UI. Then saved. Before, the settings would revert back and not get applied. Now they got applied.

Closes #8947",,,,False,False,False,2,2,2,2,carlos.zamora@microsoft.com,noreply@github.com,"02/01/2021, 16:38:52",2021,"02/01/2021, 16:38:52",2021,3,2,4,2.5,1.2,0
,"Fix crash in explorer background context menu logic (#8977)

Fix a bug brought in with PR: #8638 


see,
#8936 
#8638

* [x] Closes #8936
* [x] CLA signed
* [x] Tests passed


With the help from @nc-x, the issue is reproduced and fixed by this patch.

CLSCTX_IN_PROCESS is not good enough for all cases to create IShellWindows interface.
Put a CLSCTX_ALL fixes the issue.


Another debugging warning dialogs  for reusing not null com_ptr in the loop is fixed too.
(This was shown in debug builds only)",,,,True,False,False,14,1,1,1,hereafter.tu@gmail.com,noreply@github.com,"02/01/2021, 17:30:54",2021,"02/01/2021, 17:30:54",2021,3,0,4,4.7,1.2,0
,"Added some example images for the pixel shader feature (#8962)

I added some sample screenshots on the README for the pixel shader feature

Fixes #8960

## Detailed Description of the Pull Request / Additional comments
I created 4 screenshots using preview windows terminal, one for the default look, and three for the shaders mentioned in the readme. 

For the first shader, `Invert.hlsl`, I put it in a table and placed a screenshot of the default next to it. I don't think it would be clear what the shader did without being able to compare it against the default.

For `Rasterbars.hlsl` I put a screenshot right after the code sample for it. I added a screenshot for `Retro.hlsl` just before the last sentence

I also created a folder named Screenshots in `terminal/samples/Pixelshaders` to hold all of the screenshots.",,,,True,False,False,13,1,5,1,cybermobius@users.noreply.github.com,noreply@github.com,"02/01/2021, 20:39:47",2021,"02/01/2021, 20:39:47",2021,4,0,4,4.6,1.2,0
,"Fix crash in terminal when tab closed while data is being output (#8982)

If there is data being output when a tab is closed, that can sometimes
result in the application crashing, because the renderer may still be in
use at the time is it destroyed. This PR attempts to prevent that from
happening by adding a lock in the `TermControl::Close` method.

What we're trying to prevent is the connection thread still being
active, and potentially accessing the renderer, after it has been
destroyed. So by acquiring the terminal lock in `TermControl::Close`,
after we've stopped accepting new output, we can be sure that the
connection thread is no longer active (it holds the lock while it is
processing output). So once we've acquired and released the lock, it
should be safe to tear down and destroy the renderer.

## Validation Steps Performed

While this crash is difficult to reproduce in general usage, it occurred
quite frequently when testing my `DECPS` implementation (there is some
tricky thread synchronisation, which seems more likely to trigger the
issue). With this patch applied, though, those crashes have stopped
occurring.

I've also stepped through the shutdown code in the debugger, manually
freezing threads to get them aligned in the right way to trigger the
crash (as explained in issue #8734). Again with the patch applied, I can
no longer get the crash to occur.

Closes #8734",,,,True,False,False,11,0,1,1,j4_james@hotmail.com,noreply@github.com,"02/01/2021, 21:28:47",2021,"02/01/2021, 21:28:47",2021,4,2,4,5.0,1.2,0
,"Manually initialize the warnings vector to prevent a crash on launch (#8995)

## Summary of the Pull Request

Oops, winrt `IVector`s need to be manually initialized, when default-constructed `std::vector`s didn't. Simple oversight.

## PR Checklist
* [x] Closes #8986
* [x] I work here
* [x] A test would be great but ain't nobody got time for that.
* [n/a] Requires documentation to be updated

## Validation Steps Performed
Ran the terminal with 
```json

    ""schemes"" :
    [ {} ]
```
First the crash repro'd, now it doesn't.",,,,False,False,False,1,1,1,1,migrie@microsoft.com,noreply@github.com,"02/02/2021, 06:50:31",2021,"02/02/2021, 06:50:31",2021,2,4,4,2.5,1.2,0
,"Fix shader time input (#8994)

Correctly sets the time input on the pixelShaderSettings struct, which was previously hard-coded to `0.0f`. 

## PR Checklist
* [x] Closes #8935
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #8935

## Detailed Description of the Pull Request / Additional comments
I added a private field to `DxEngine` to store the timestamp for when a custom shader is first loaded. The field is initialized in `_SetupTerminalEffects()`, and the calculated time value (seconds since the timestamp) passed to the actual shader is set in `_ComputePixelShaderSettings()`. 

There remains an issue with with jerky animation due to the renderer not repainting when the window contents are not updated (see discussion in the original issue).

This is basically my first time writing C++; constructive review is enthusiastically welcomed 🙂

## Validation Steps Performed
I manually tested using a variety of simple shaders that rely on time input for animation.",,,,True,False,False,6,3,2,2,nacimota@users.noreply.github.com,noreply@github.com,"02/02/2021, 17:12:04",2021,"02/02/2021, 17:12:04",2021,3,0,4,3.3,1.2,0
,"Fix the spellcheck bot (#9004)

@jsoref said to do this, so I'm doing it to fix the bot.",,,,True,True,False,1,1,1,1,migrie@microsoft.com,noreply@github.com,"02/02/2021, 17:21:43",2021,"02/02/2021, 17:21:43",2021,3,4,4,2.5,1.2,0
,"Fix #8458: Handle all Ctrl-key combinations (#8870)

Pressing Ctrl+\ produces `^\` using the US keyboard layout, thanks to Ctrl-key mappings inside the keyboard layout, whereas some layouts, like the UK extended layout, don't contain those. This causes the character value to be zero and previously caused no VT sequence to be generated under these situations. This PR employs `MapVirtualKeyW` to infer the missing characters.
As a side effect this PR effectively causes _all_ major keys on the keyboard to produce Ctrl+combinations now.

## PR Checklist
* [x] Closes #8458
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests passed

## Validation Steps Performed

Compared all major keys in combination with Ctrl with the app store version of Terminal using `showkey` in WSL. All keys that previously worked still appear to continue to work.",,,,True,False,False,19,0,1,1,leonard@hecker.io,noreply@github.com,"02/02/2021, 17:26:48",2021,"02/02/2021, 17:26:48",2021,3,2,4,5.0,1.2,0
,"Nit: update string in cursor shape (#8852)

This should technically be a lowercase 'u'. We don't have to merge this until after 1.6 because of localization, but I figured I'd make the PR for it.",,,,False,False,False,2,2,1,1,cinnamon@microsoft.com,noreply@github.com,"02/02/2021, 17:29:17",2021,"02/02/2021, 17:29:17",2021,3,2,4,2.5,1.0,0
,"Generate settings.json if deleted while WT is open (#9012)

The settings.json was not regenerated if WT was already open. This resulted in the `ShellExecute` from trying to open the settings to pop up Notepad and say that this file didn't exist. We now detect if the settings.json was deleted to kick off loading the settings.

Closes #8955",,,,False,False,False,2,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/03/2021, 10:45:11",2021,"02/03/2021, 10:45:11",2021,2,2,4,3.3,1.0,0
,"ci: update to Spell check to 0.0.17a (#9014)

### Plurals and paste tenses
In the past, plurals `foo`+`s` and past tenses `foo`+`ed` were
automatically tolerated. This turned out to be a bad design choice on my
part.

The basic example is that `potatos` would sometimes be treated as a
mistake and sometimes not (depending on the presence of `potato`).

You can see in this PR, that this logic resulted in `Applys` being
accepted as a word along with `AppContainered` -- there's nothing
intrinsically wrong w/ the latter, but unfortunately in order to screen
out the former, my shortcut just couldn't stick around. This means that
the `dictionary`/`expect` files will grow perhaps by a tiny bit, but as
you can see, not really by much.

This is also why `thereses` (a user) was accepted as a word in the past
(therese is in the base dictionary, so `therese` + `s` was acceptable).

### Pull requests

When GitHub initially introduced GitHub Actions, the event for
`pull_request` was created without enough permission for a tool like
this to work properly. I worked around that by using the `schedule`
event. In 2020, they introduced a replacement event
`pull_request_target` which has enough permission. This means that I can
stop relying on the `schedule` event.

### Miscellaneous

* I've folded together some `expect/` files since now is as good a time
  as any.
* I've included a hint about `excludes.txt` (I added a similar one for
  our primary repo recently, and it came up this week in
  `microsoft/terminal` -- @zadjii-msft)
* I've standardized on a default of `.github/actions/spelling` to make
  the out of the box experience easier for new adopters, so I'm applying
  that change here -- if you're attached to the old directory name,
  specifying it is still supported. -- note the directory rename may
  cause a merge conflict for people with open PRs and changes to the
  contents, this shouldn't be a big problem.",,,,True,True,False,67,56,28,24,jsoref@users.noreply.github.com,noreply@github.com,"02/03/2021, 19:17:38",2021,"02/03/2021, 19:17:38",2021,4,1,4,2.9,4.2,0
,"doc: add UWP docs link to AddASetting.md (#9025)

Since we're following the UWP design guidance, we should recommend the community use it as well when adding new settings to the settings UI.",,,,False,False,False,2,0,1,1,cinnamon@microsoft.com,noreply@github.com,"02/04/2021, 00:54:27",2021,"02/04/2021, 00:54:27",2021,1,2,4,5.0,1.0,0
,"Add support for chaining OSC 10-12 (#8999)

This adds the support for chaining OSC 10-12, allowing users to set all
of them at once.

**BREAKING CHANGE**
Before this PR, the OSC 10/11/12 command will only be dispatched iff the
first color is valid. This is no longer true. The new implementation
strictly follows xterm's behavior. Each color is treated independently.
For example, `\e]10;invalid;white\e\\` is effectively `\e]11;white\e\\`.

## Validation Steps Performed

Tests added. Manually tested.

Main OSC color tracking issue: #942
OSC 4 & Initial OSC 10-12 PR: #7578

Closes one item in #942",,,,False,False,False,122,50,2,2,skyline75489@outlook.com,noreply@github.com,"02/04/2021, 00:59:25",2021,"02/04/2021, 00:59:25",2021,1,2,4,3.5,2.4,0
,"Fix issues in tests.xml and OpenConsole.psm1 (#9011)

* Fix the incorrect terminalCore path in tests.xml
* Change the -TaefArgs argument of Invoke-OpenConsoleTests and
  Invoke-TaefInNewWindow to be []string, allowing
  multiple arguments to be passed to TAEF",,,,True,True,False,3,4,2,2,leonard@hecker.io,noreply@github.com,"02/04/2021, 01:05:50",2021,"02/04/2021, 01:05:50",2021,1,2,4,2.1,1.2,0
,"Improve OSC 9;9 parsing logic & add tests (#8934)

This PR fixes the parsing of OSC 9;9 sequences with path surrounded by
quotation marks.

Original OSC 9;9 PR: #8330 

Unit test added. Manually tested with oh-my-posh.

Closes #8930",,,,True,False,False,70,1,2,2,skyline75489@outlook.com,noreply@github.com,"02/04/2021, 01:10:21",2021,"02/04/2021, 01:10:21",2021,1,2,4,4.9,1.8,0
,"Add animated shader samples (#9026)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
- Adds two simple animated shaders to the pixel shaders sample folder
- Updates the readme in the pixel shaders sample folder to add a section explaining the animated shaders
- Modifies some comments in existing shader samples

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #8994

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
The two shaders I wrote are not especially pretty or interesting, but they should hopefully serve as simple examples for anyone looking to do animated effects. One simply draws a line of inverted pixels that scrolls down the screen, and the other fades the background back and forth between two colors.

I've added a new section to the readme explaining how the shaders work to achieve animated effects.

I've also updated the comments on the existing shaders to clear up a couple of things:
1. Be more explicit that `Time` represents seconds since the shader loaded. Though obvious in hindsight, this was not clear to me when I was first learning/experimenting
2. Explain that `tex` ranges from 0,0 to 1,1. This is important because, when trying to port GLSL shaders from shadertoy, I at first assumed `fragCoord` and `tex` are the same thing but the former actually ranges from 0,0 to the resolution of the canvas, so some of the math doesn't work out if you just substitute it with `tex`.

Any and all feedback welcome.

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
I ran the shaders manually in a dev build of the Terminal. I auto-spellchecked and manually proofread my additions to the readme and verifed the markdown rendering on github.",,,,True,True,False,177,15,7,6,nacimota@users.noreply.github.com,noreply@github.com,"02/04/2021, 13:53:21",2021,"02/04/2021, 13:53:21",2021,3,0,4,4.6,3.0,0
,"Fix crash when closing multiple splits from the tab context menu (#9028)

## Summary of the Pull Request
Fix for #9021 

Turns out that what was happening is that the _parent_ pane's `Closed` event was being caught by the tab, and parent panes always have `nullopt` as their id. So now the `Pane::Id()` call always returns an optional, allowing us to check if it has a value before we access it. 

## PR Checklist
* [x] Closes #9021 

## Validation Steps Performed
No more crash",,,,True,False,False,24,12,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/04/2021, 18:13:26",2021,"02/04/2021, 18:13:26",2021,4,2,4,3.3,1.2,0
,"Fix hyperlink not de-underlined in unfocused pane (#9039)

Ensures that:
* All hyperlink related logic is running on unfocused pane
* All unrelated logic is not running on unfocused pane

Closes #8925",,,,True,False,False,3,9,1,1,khvitaly@gmail.com,noreply@github.com,"02/05/2021, 00:41:47",2021,"02/05/2021, 00:41:47",2021,1,1,4,1.2,1.2,0
,"Serialize 'disabledProfileSources' (#9038)

""disabledProfileSources"" is saved to `CascadiaSettings` _not_
`GlobalAppSettings` (and, even then, it's only read when it's used,
never saved). This PR specifically detects if it was defined in
settings.json, and copies it over when the settings are serialized.

## Validation Steps Performed
1. Added ""disabledProfileSources"" to settings.json, then serialized. -->
   ""disabledProfileSources"" is now maintained.
2. Updated `CascadiaSettings` serialization test

Closes #9032",,,,False,False,False,6,1,2,2,carlos.zamora@microsoft.com,noreply@github.com,"02/05/2021, 00:42:53",2021,"02/05/2021, 00:42:53",2021,1,2,4,4.3,1.0,0
,"Fix cursor restore to happen on the tab row (#8952)

Closes #8918",,,,True,False,False,2,0,1,1,khvitaly@gmail.com,noreply@github.com,"02/05/2021, 00:44:17",2021,"02/05/2021, 00:44:17",2021,1,1,4,5.0,1.2,0
,"Spec for Windows Terminal Process Model 2.0 (#7240)

### ⇒ [doc link](https://github.com/microsoft/terminal/blob/dev/migrie/s/5000/doc/specs/%235000%20-%20Process%20Model%202.0/%235000%20-%20Process%20Model%202.0.md) ⇐

## Summary of the Pull Request

This spec is _exceptionally long_, and is currently a work in progress. There are a few more things I'd like to have experimentally verified (though, I'm fairly certain they _will_ work, with the right combination of flags and such). Additionally, a few sections have remaining TODOs before the spec is finished. However, this spec is already fairly long, and I want to give people as much time to get their eyes on it as possible.

### Abstract

> 
> The Windows Terminal currently exists as a single process per window, with one
> connection per terminal pane (which could be an additional conpty process and
> associated client processes). This model has proven effective for the simple
> windowing we've done so far. However, in order to support scenarios like
> dragging tabs into other windows, or having one top-level window with different
> elevation levels within it, this single process model will not be sufficient.
> 
> This spec outlines changes to the Terminal process model in order to enable the
> following scenarios:
> 
> * Tab Tearoff/ Reattach ([#1256])
> * Run `wt` in the current window ([#4472])
> * Single Instance Mode ([#2227])
> * Quake Mode ([#653])
> * Mixed Elevation ([#1032] & [#632])


## PR Checklist
* [x] Specs: #5000
* [x] References: #1256, #4472, #2227, #653, #1032, #632, #492
* [x] I work here

## Detailed Description of the Pull Request / Additional comments
_\*<sup>\*</sup><sub>\*</sub> read the spec  <sub>\*</sub><sup>\*</sup>\*_",,,,False,False,False,1189,2,13,4,migrie@microsoft.com,noreply@github.com,"02/05/2021, 12:19:32",2021,"02/05/2021, 12:19:32",2021,3,4,4,5.0,3.5,0
,"Spec for Windows Terminal Window Management (#8135)

### ⇒ [doc link](https://github.com/microsoft/terminal/blob/dev/migrie/s/4472-window-management/doc/specs/%235000%20-%20Process%20Model%202.0/%234472%20-%20Windows%20Terminal%20Session%20Management.md) ⇐

## Summary of the Pull Request

This is a more detailed spec for two parts of the ""Process Model 2.0"" work that's being tracked in #5000. In particular, this spec focuses on the management of Windows Terminal windows, including opening new tabs in existing windows. 

Largely, the reader is expected to have already read the spec in progress in #7240, and already be familiar with the concept of ""Monarch"" and ""Peasant"" windows as introduced by that spec. For that reason, ⚠ **THIS PR IS TARGETING THE BRANCH FOR #7240** ⚠. 

### Abstract

> This document is intended to serve as an addition to the [Process Model 2.0
> Spec]. That document provides a big-picture overview of changes to the entirety
> of the Windows Terminal process architecture, including both the split of
> window/content processes, as well as the introduction of monarch/peasant
> processes. The focus of that document was to identify solutions to a set of
> scenarios that were closely intertwined, and establish these solutions would
> work together, without preventing any one scenario from working. What that
> document did not do was prescribe specific solutions to the given scenarios.
>
> This document offers a deeper dive on a subset of the issues in [#5000], to
> describe specifics for managing multiple windows with the Windows Terminal. This
> includes features such as:
>
> * Run `wt` in the current window ([#4472])
> * Single Instance Mode ([#2227])


## PR Checklist
* [x] Specs: #4472, Specs #2227
* [x] References: #5000, #4472, #2227, #7240
* [x] I work here

## Detailed Description of the Pull Request / Additional comments
_\*<sup>\*</sup><sub>\*</sub> read the spec  <sub>\*</sub><sup>\*</sup>\*_

### Why are these two separate documents?

I felt that the spec that is currently in review in #7240 and this doc should remain separate, yet closely related documents. #7240 is more about showing how this large set of problems discussed in #5000 can all be solved technically, and how those solutions can be used together. It establishes that none of the proposed solutions for components of #5000 will preclude the possibility of other components being solved. What it does _not_ do however is drill too deeply on the user experience that will be built on top of those architectural changes. 

This doc on the other hand focuses more closely on a pair of scenarios, and establishes how those scenarios will work technically, and how they'll be exposed to the user. 

### TODO:

* [x] A thought - How will we handle arguments like `--fullscreen`, `--initialSize r,c`? They only apply when creating a new window, right?
* [x] When a `wt -s 1 split-pane` command is executed, we'll need to make sure to not _also_ create a new tab",,,,True,True,False,573,1,4,4,migrie@microsoft.com,noreply@github.com,"02/05/2021, 12:30:02",2021,"02/05/2021, 12:30:02",2021,3,4,4,5.0,3.6,0
,"fix tab title propagation issues (#9054)

- Fixes empty app title when  `showTerminalTitleInTitlebar` is false
- Fixes Tab title propagation to Window title when
  `showTerminalTitleInTitlebar` is false
- Fixes Tab title propagation to Window - title doesn't update when
  Window is unfocused

1. There were a missing
   `_settings.GlobalSettings().ShowTitleInTitlebar()` check. Because of
   this Title update event was being fired even when
   `showTerminalTitleInTitlebar` is false. This results in empty tab
   title to propagate to Window title. Also then after switching tabs
   back and forth, tab title propagates to window title. These shouldn't
   propagate when `showTerminalTitleInTitlebar` is false. I added the
   `showTerminalTitleInTitlebar` check in relevant logic to fix the
   behavior. 

2. Code was checking `tab.FocusState() != FocusState::Unfocused` , but
   when the whole terminal window is not in focus, the active tab is
   also in Unfocused state. This was preventing tab title to propagate
   to window title when application is unfocused. I added the logic of
   checking matching selected tabs' index. This fixes the issue.

## Validation Steps Performed
I did the reproduce steps descripted in the issue to reproduce the bugs.
After applying the fixes, the bugs don't appear anymore while doing the
reproduce steps.

Closes #8704",,,,True,False,False,5,3,1,1,sarim2005@gmail.com,noreply@github.com,"02/05/2021, 23:34:40",2021,"02/05/2021, 23:34:40",2021,4,0,4,3.1,1.2,0
,"Spec: Appearance configuration objects for profiles (#8345)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Spec for #3062

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [x] Is documentation
* [ ] Schema updated.
* [x] I work here

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments
Read the spec",,,,True,False,False,130,0,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/06/2021, 00:05:17",2021,"02/06/2021, 00:05:17",2021,1,2,4,5.0,2.4,0
,"Prevent command palette from closing on right click (#9057)

The command palette is ephemeral and is dismissed if the focus
moves to an element which is not the palette's descendant.

Unfortunately, this breaks the (right-click) context menu,
as it  is not a child of the palette
(popups are hosted on a separate root element).",,,,False,False,False,6,0,1,1,khvitaly@gmail.com,noreply@github.com,"02/06/2021, 00:36:47",2021,"02/06/2021, 00:36:47",2021,1,1,4,5.0,1.0,0
,"Add support for paste filtering and bracketed paste mode (#9034)

This adds ""paste filtering"" & ""bracketed paste mode"" to the Windows
Terminal.

I've moved the paste handling code in `TerminalControl` to
`Microsoft::Console::Util` to be able to easily test it, and the paste
transformer from `TerminalControl` to `TerminalCore`.

Supersedes #7508
References #395 (overall bracketed paste support request)

Tests added. Manually tested.",,,,False,False,False,202,55,7,7,skyline75489@outlook.com,noreply@github.com,"02/08/2021, 13:11:01",2021,"02/08/2021, 13:11:01",2021,3,2,4,3.9,3.0,0
,"Fixed #5205: Ctrl+Alt+2 doesn't send ^[^@ (#5272)

## Summary of the Pull Request

Fixes #5205, by replacing another use of `MapVirtualKeyW` with `ToUnicodeEx`.
The latter just seems to be much more consistent at translating key combinations in general.
In this particular case though it fixes the issue, because there's no differentiation in `MapVirtualKeyW` for whether it failed to return a character (`'\0'`) or succeeded in turning `^@` into `'\0'`.
`ToUnicodeEx` on the other hand returns the success state separately from the translated character.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #5205
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [x] Tests added/passed
* [ ] Requires documentation to be updated
* [x] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #5205

## Detailed Description of the Pull Request / Additional comments

This PR changes the behavior of the `Ctrl+Alt+Key` handling slightly:
⚠️ `ToUnicodeEx` returns unshifted characters. ⚠️
For instance `Ctrl+Alt+a` is now turned into `^[^a`. Due to how ASCII works this is essentially the same though because `'A' & 0b11111` and `'a' & 0b11111` are the same.

## Validation Steps Performed

* Run `showkey -a`
* Ensured `Ctrl+Alt+Space` as well as `Ctrl+Alt+Shift+2` are turned into `^[^@`
* Ensured other, random `Ctrl+Alt+Key` combination behave identical to the current master",,,,True,False,False,22,12,2,2,leonard@hecker.io,noreply@github.com,"02/08/2021, 15:33:38",2021,"02/08/2021, 15:33:38",2021,3,2,4,3.2,1.2,0
,"Introduce zoom, bell and progress indicators to ATS (#9041)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/8912
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated.
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already.

## Detailed Description of the Pull Request / Additional comments
* Introduced separate DataTemplate for rendering TabPaletteItem
* Introduced DataTemplateSelector assigning this template
* Introduced indicators as observable properties of the terminal Tab
* Bound TabPaletteItem to these properties
* Ensured that BindingUpdate is always called on CmdPal to avoid races",,,,False,False,False,302,78,11,11,khvitaly@gmail.com,noreply@github.com,"02/08/2021, 17:37:58",2021,"02/08/2021, 17:37:58",2021,3,1,4,3.9,4.2,0
,"Introduce read-only panes (#8867)

## Summary of the Pull Request
Introduces read-only panes.
When pane is marked as read-only:
1. Attempt to provide user input results in a warning
2. Attempt to close pane - shows dialog
3. Attempt to close hosting tab shows dialog
4. The hosting tab has no close button

## PR Checklist
* [x] Closes #6981
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated - not yet.
* [x] Schema updated.
* [ ] I've discussed this with core contributors already. 

## Detailed Description of the Pull Request / Additional comments
1. The readonly  logic implemented in `TermControl`
(and prevents any send input)
2. Special handling is required to allow key-bindings
3. The ""close-readonly"" protections are in TerminalPage.
4. The indication that the pane is readonly is done using lock glyph
5. The indication that the tab contains readonly pane
is done by hiding the close button of the tab
6. The readonly mode is enabled by keyboard shortcut
(the followup might add this to the context menu)

## Validation Steps Performed",,,,False,False,False,293,37,26,26,khvitaly@gmail.com,noreply@github.com,"02/08/2021, 18:03:55",2021,"02/08/2021, 18:03:55",2021,4,1,4,4.4,4.0,0
,"Represent inheritance in Settings UI (#8919)

## Summary of the Pull Request
Introduces the `SettingContainer`. `SettingContainer` is used to wrap a setting in the settings UI and provide the following functionality:
- a reset button next to the header
- tooltips and automation properties for the setting being wrapped
- a comment stating if you are currently overriding a setting

## References
[Spec - Inheritance in Settings UI](https://github.com/microsoft/terminal/blob/main/doc/specs/%231564%20-%20Settings%20UI/cascading-settings.md)
#8804 - removes the ambiguity of leaving a setting blank
#6800 - Settings UI Epic
#8899 - Automation properties for Settings UI
#8768 - Keyboard Navigation

## PR Checklist
* [X] Closes #8804

## Detailed Description of the Pull Request / Additional comments
A few highlights in this PR:
- CommonResources.xaml:
  - we need to merge the SettingContainerStyle.xaml in there. Otherwise, XAML doesn't merge these files properly and can't apply the template.
- Profiles.cpp:
  - view model checks if the starting directory and background image were reset, to determine which value to show when unchecking the special value
  - `Profiles::OnNavigatedTo()` needs a property changed handler to update its own ""Current<Setting>"" and update the UI properly
- Profiles.xaml:
  - basically wrapped all of the settings we want to be inheritable in there
  - `Binding` is used instead of `x:Bind` in some places because `x:Bind` can't find the parent `SettingContainer` and gives you a compiler error.
- Resources.resw:
  - had to set the ""HeaderText"" and ""HelpText"" on each setting container. Does a decent localization burden, unfortunately.
- `SettingContainer` files
  - This operates by creating a template and applying that template over other settings. This allows you to inject the existing controls inside of this. This means that we need to provide our UIElements names and access/modify them via `OnApplyTemplate`
  - We had to remove the header from each individual control, and have `SettingContainer` be in charge of it. This allows us to add the reset button in there.
  - Due to the problem mentioned earlier about CommonResources.xaml, we can't reference anything from CommonResources.xaml.
  - Using `DependencyProperty` to let us set a few properties in the XML files. Particularly, `Has<Setting>` and `Clear<Setting>` are what do all the heavy lifting of interacting with the inheritance model.

## Demo
![Inheritance Demo](https://user-images.githubusercontent.com/11050425/106192086-92a56680-6160-11eb-838c-4ec0beb54965.gif)

## Validation Steps Performed
- Verified correct binding behavior with the following generic setting controls:
  - radio buttons
  - toggle switch
  - text block
  - slider
  - settings with browse buttons
  - the background image alignment control
  - controls with special check boxes (starting directory and background image)

## Next Steps
- The automation properties have been verified using NVDA. This is a part of resolving #8899.
- The override text is currently ""Overrides a setting"". According to #8269, we actually want to add a hyperlink in there that navigates to the parent profile object. This will be a follow-up task as it requires settings model changes.",,,,True,True,False,1004,608,17,17,carlos.zamora@microsoft.com,noreply@github.com,"02/08/2021, 18:04:43",2021,"02/08/2021, 18:04:43",2021,4,2,4,3.1,4.8,0
,"Separate runtime TerminalSettings from profile-TerminalSettings (#8602)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
The TerminalSettings object we create from profiles no longer gets passed into the control, instead, a child of that object gets passed into the control. Any overrides the control makes to the settings then live in the child. So, when we do a settings reload, we simply update the child's parent and the overrides will remain.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #xxx
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [x] I work here

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
Manual testing",,,,True,True,False,140,80,14,14,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/08/2021, 22:01:40",2021,"02/08/2021, 22:01:40",2021,4,2,4,3.2,4.2,0
,"Quickly fix a mistake in #8602 (#9078)

There was a mistake in #8602, this change fixes that.
(`using` and `include` moved to cpp file)",,,,True,True,False,2,3,2,2,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/09/2021, 01:07:11",2021,"02/09/2021, 01:07:11",2021,1,2,4,2.0,1.2,0
,"Spec for Tab Sizing (#4104)

This is the spec for #597 

I am proposing the `tabWidthMode` feature be added first, then `tabWidthMin` and `tabWidthMax` be added in a later release.

PR: #3876",,,,False,False,False,95,0,1,1,cinnamon@microsoft.com,noreply@github.com,"02/09/2021, 17:08:19",2021,"02/09/2021, 17:08:19",2021,3,2,4,5.0,1.5,0
,"Update #597 - Tab Sizing.md

spell check fix",,,,True,False,False,2,2,1,1,miniksa@microsoft.com,noreply@github.com,"02/09/2021, 18:50:20",2021,"02/09/2021, 18:50:20",2021,4,4,4,2.5,1.2,0
,"Update Cascadia Code to 2102.03 (#9088)

The February 2021 update of Cascadia Code fixes 23 issues and
introduces support for infinite arrow ligatures and control pictures.",,,,True,True,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"02/09/2021, 19:43:45",2021,"02/09/2021, 19:43:45",2021,4,2,4,2.5,1.2,0
,"Add support for ""focus follows mouse"" mode (#8965)

## PR Checklist
* [x] Closes #6459
* [x] CLA signed.
* [ ] Tests added/passed
* [x] Documentation updated here: https://github.com/MicrosoftDocs/terminal/pull/248
* [x] Schema updated.
* [x] I've discussed this with core contributors already.",,,,False,False,False,38,0,12,12,khvitaly@gmail.com,noreply@github.com,"02/09/2021, 22:18:20",2021,"02/09/2021, 22:18:20",2021,4,1,4,5.0,2.0,0
,"Fix ATS tab status indicators (#9076)

1. Fix progress value not updated
2. Introduce TabStatus object and bind both TabHeaderControl and CommandPalette to it
3. Add support for read-only mode indicator",,,,True,True,False,137,99,15,15,khvitaly@gmail.com,noreply@github.com,"02/10/2021, 11:27:29",2021,"02/10/2021, 11:27:29",2021,2,1,4,2.7,4.2,0
,"Add support for running a commandline in another WT window (#8898)

## Summary of the Pull Request

**If you're reading this PR and haven't signed off on #8135, go there first.**

![window-management-000](https://user-images.githubusercontent.com/18356694/103932910-25199380-50e8-11eb-97e3-594a31da62d2.gif)

This provides the basic parts of the implementation of #4472. Namely:
* We add support for the `--window,-w <window-id>` argument to `wt.exe`, to allow a commandline to be given to another window.
    * If `window-id` is `0`, run the given commands in _the current window_.
    * If `window-id` is a negative number, run the commands in a _new_ Terminal window.
    * If `window-id` is the ID of an existing window, then run the commandline in that window.
    * If `window-id` is _not_ the ID of an existing window, create a new window. That window will be assigned the ID provided in the commandline. The provided subcommands will be run in that new window.
    * If `window-id` is omitted, then create a new window.


## References
* Spec: #8135
* Megathread: #5000
* Project: projects/5

## PR Checklist
* [x] Closes #4472
* [x] I work here
* [x] Tests added/passed
* [ ] Requires documentation to be updated - **sure does**

## Detailed Description of the Pull Request / Additional comments

Note that `wt -w 1 -d c:\foo cmd.exe` does work, by causing window 1 to change 

There are limitations, and there are plenty of things to work on in the future:
* [ ] We don't support names for windows yet
* [ ] We don't support window glomming by default, or a setting to configure what happens when `-w` is omitted. I thought it best to lay the groundwork first, then come back to that.
* [ ] `-w 0` currently just uses the ""last activated"" window, not ""the current"". There's more follow-up work to try and smartly find the actual window we're being called from.
* [ ] Basically anything else that's listed in projects/5.

I'm cutting this PR where it currently is, because this is already a huge PR. I believe the remaining tasks will all be easier to land, once this is in. 

## Validation Steps Performed

I've been creating windows, and closing them, and running cmdlines for a while now. I'm gonna keep doing that while the PR is open, till no bugs remain.

# TODOs
* [x] There are a bunch of `GetID`, `GetPID` calls that aren't try/caught 😬 
  -  [x] `Monarch.cpp`
  -  [x] `Peasant.cpp`
  -  [x] `WindowManager.cpp`
  -  [x] `AppHost.cpp`
* [x] If the monarch gets hung, then _you can't launch any Terminals_ 😨 We should handle this gracefully.
  - Proposed idea: give the Monarch some time to respond to a proposal for a commandline. If there's no response in that timeframe, this window is now a _hermit_, outside of society entirely. It can't be elected Monarch. It can't receive command lines. It has no ID.  
  	- Could we gracefully recover from such a state? maybe, probably not though.
    -  Same deal if a peasant hangs, it could end up hanging the monarch, right? Like if you do `wt -w 2`, and `2` is hung, then does the monarch get hung waiting on the hung peasant?
  - After talking with @miniksa, **we're gonna punt this from the initial implementation**. If people legit hit this in the wild, we'll fix it then.",,,,True,False,False,1585,92,37,37,migrie@microsoft.com,noreply@github.com,"02/10/2021, 11:28:09",2021,"02/10/2021, 11:28:09",2021,2,4,4,4.7,5.0,0
,"Teach the renderer to keep thread alive if engine requests it (#9091)

Teaches renderer base to keep thread alive if engine requests it.
`DxEngine` now requests it if shaders are on.

- The render engine interface now has a true/false to return whether the
  specific renderer wants another frame to immediately follow up. The
  renderer base will ask for this information as it ends the paint on
  any particular engine (which is the time where invalid regions are
  typically cleaned up) and just poke the render thread the same as if
  an invalidation request came in from outside of render-land. That will
  trigger the render thread to just keep moving in the same way as any
  other invalidation.

## Validation Steps Performed
- [x] Actually built it
- [x] Actually try it

I promised this in #8994",,,,False,False,False,45,0,6,6,miniksa@microsoft.com,noreply@github.com,"02/10/2021, 19:24:45",2021,"02/10/2021, 19:24:45",2021,4,4,4,5.0,1.5,0
,"Fix CommandPalette to prefer inner interactions over bindings (#9056)

* Currently TerminalPage registers on CmdPal key events:
  * To invoke bindings when the palette is open
  * Since some key combinations are not triggered by KeyDown 
    it registers for PreviewKeyDown
* As a result bindings might be preferred over navigation
  (e.g., ctrl+v will paste into Terminal rather than into search box)
* To fix this, I moved all interactions inside the CmdPal into
  PreviewKeyDown as well
* In addition, added specific handling for copy/paste
  which now allow to interact with search box even if not focused

Closes #9044",,,,True,False,False,41,59,3,3,khvitaly@gmail.com,noreply@github.com,"02/10/2021, 20:35:46",2021,"02/10/2021, 20:35:46",2021,4,1,4,2.0,1.8,0
,"Bugfix: update color scheme references properly (#9103)

`CascadiaSettings::UpdateColorSchemeReferences` had two bugs in it:
1. we would never check/update the base layer
2. we would explicitly set the color scheme on a profile referencing the
   old name

This PR fixes both of those issues by checking/updating the base layer,
and ensuring that we check if a profile has an explicit reference before
updating it.

Since the affected code is in TSM, I also created an automated local
test.

## Validation Steps Performed
Bug repro steps.
Specifically tested [DHowett's scenario] too.
Test added.

Closes #9094 

[DHowett's scenario]: https://github.com/microsoft/terminal/issues/9094#issuecomment-776412781",,,,True,False,False,87,1,2,2,carlos.zamora@microsoft.com,noreply@github.com,"02/10/2021, 22:11:56",2021,"02/10/2021, 22:11:56",2021,4,2,4,4.9,1.8,0
,"Move CharToKeyEvents (and friends) into InteractivityBase (#9106)

These functions have a dependency on the ""VT Redirected"" versions of
VkKeyScanW, MapVirtualKeyW and GetKeyState. Those implementations depend
on the service locator and therefore the entire interactivity stack.

This meant that anybody depending on just Types had to pull in **the
entire host** worth of dependencies (!).

Since these functions are only used in places where we have or are
testing interactivity, it makes sense to consolidate them here.",,,,False,False,False,259,219,11,11,duhowett@microsoft.com,noreply@github.com,"02/11/2021, 01:10:56",2021,"02/11/2021, 01:10:56",2021,1,2,4,3.1,3.5,0
,"PICK: Move CharToKeyEvents into InteractivityBase (GH-9106)

These functions have a dependency on the ""VT Redirected"" versions of
VkKeyScanW, MapVirtualKeyW and GetKeyState. Those implementations depend
on the service locator and therefore the entire interactivity stack.

This meant that anybody depending on just Types had to pull in **the
entire host** worth of dependencies (!).

Since these functions are only used in places where we have or are
testing interactivity, it makes sense to consolidate them here.

(cherry picked from commit 8f73145d9d10aded2a583dd9698f813cb9040011)",,,,False,False,False,259,219,11,11,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 01:10:56",2021,"02/11/2021, 01:13:00",2021,1,2,2,3.1,3.5,0
,"Prevent read-only warning on mouse move, wheel and release (#9107)

Avoid sending mouse move / wheel / release to Terminal in the first place.
This kind of short-circuiting will prevent us reaching the
attempt to send input to connection
(that could result in the warning dialog in the read-only mode)

Closes #9074",,,,False,False,False,8,3,1,1,khvitaly@gmail.com,noreply@github.com,"02/11/2021, 15:16:36",2021,"02/11/2021, 15:16:36",2021,3,1,4,3.6,1.0,0
,"Merged PR 5676675: Reflect OS build fixes on top of ae8347f33

Due to a minor OS issue, we needed to shim PMR _even more_.

Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_wdx_dxp_windev a83daa5e2af50121d79be082d005ff2e969ad18e

Related work items: MSFT-31478342",,,,True,True,False,20,2,2,2,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 18:19:33",2021,"02/11/2021, 18:19:33",2021,4,2,2,4.5,1.2,0
,ci: add reimplementation to the dictionary,,,,False,False,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 19:47:51",2021,"02/11/2021, 19:47:51",2021,4,2,2,5.0,1.0,0
,ci: add dataobject to the dictionary,,,,False,False,False,1,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 19:52:22",2021,"02/11/2021, 19:52:22",2021,4,2,2,5.0,1.0,0
,"Merged PR 5677497: [Git2Git] Merged PR 5655213: Allow conhost to handoff to registered default app handler

Contains:
- Delegation Configurator that can lookup/edit/save configuration information to registry
- Conhost can lookup the CLSID of a registered default
- Conhost has the ability to handoff a starting visible-window interactive session to the registered default
- Velocity key since this is a big deal and we want to be careful
- IDL for the interface

Related work items: MSFT-16458099
Retrieved from https://microsoft.visualstudio.com os.2020 OS official/rs_wdx_dxp_windev 0ca55027d8180fbbaa145f2fe7a15005856c0f7c",,,,False,False,False,557,111,25,24,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 21:07:50",2021,"02/11/2021, 21:07:50",2021,4,2,2,4.3,4.8,0
,Format the incoming inbox code,,,,False,False,False,1,5,3,3,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 21:19:27",2021,"02/11/2021, 21:19:27",2021,4,2,2,0.8,1.0,0
,ci: fix spelling,,,,True,True,False,6,2,4,4,duhowett@microsoft.com,duhowett@microsoft.com,"02/11/2021, 21:48:28",2021,"02/11/2021, 22:08:37",2021,4,2,2,3.7,1.2,0
,"Fix the Host Proxy DLL reference in ServerLib (#9129)

Fixes #9128",,,,True,False,False,2,2,1,1,duhowett@microsoft.com,noreply@github.com,"02/12/2021, 18:54:23",2021,"02/12/2021, 18:54:23",2021,4,2,4,2.5,1.2,0
,"Re-enable navigation in ATS (#9140)

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/9130
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already.",,,,False,False,False,2,2,1,1,khvitaly@gmail.com,noreply@github.com,"02/13/2021, 04:00:13",2021,"02/13/2021, 04:00:13",2021,1,1,4,2.5,1.2,0
,"Remove accidental System.Core.dll from CascadiaPackage (#9153)

A bug in VS 16.8 makes the WAP packaging project copy System.Core.dll
from the CLR into all WAP packages. We don't need it, and it adds 300kb
to our package (670kb uncompressed).

VS 16.9 sets the AddAdditionalExplicitAssemblyReferences to suppress
this assembly. If we do the same, we can avoid the reference *and* be
eady for VS 16.9.",,,,True,True,False,4,0,1,1,duhowett@microsoft.com,noreply@github.com,"02/16/2021, 12:01:14",2021,"02/16/2021, 12:01:14",2021,3,2,4,5.0,1.2,0
,"Add Keyboard Navigation To Color Picker (#9144)

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request

Add the keyboard navigation to the color picker. 
Test manually.

<!-- Other than the issue solved, is this relevant to any other issues/existing PRs? --> 
## References

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [x] Closes #6675
* [x] CLA signed. If not, go over [here](https://cla.opensource.microsoft.com/microsoft/Terminal) and sign the CLA
* [ ] Tests added/passed
* [ ] Documentation updated. If checked, please file a pull request on [our docs repo](https://github.com/MicrosoftDocs/terminal) and link it here: #xxx
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #xxx

<!-- Provide a more detailed description of the PR, other things fixed or any additional comments/features here -->
## Detailed Description of the Pull Request / Additional comments

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed

Tested manually",,,,True,False,False,1,1,1,1,ben-constable@outlook.com,noreply@github.com,"02/16/2021, 17:36:34",2021,"02/16/2021, 17:36:34",2021,3,0,4,2.5,1.2,0
,"Eliminate more transient allocations: Titles and invalid rectangles and bitmap runs and utf8 conversions (#8621)

## References
* See also #8617 

## PR Checklist
* [x] Supports #3075
* [x] I work here.
* [x] Manual test.

## Detailed Description of the Pull Request / Additional comments

### Window Title Generation
Every time the renderer checks the title, it's doing two bad things that
I've fixed:
1. It's assembling the prefix to the full title doing a concatenation.
   No one ever gets just the prefix ever after it is set besides the
   concat. So instead of storing prefix and the title, I store the
   assembled prefix + title and the bare title.
2. A copy must be made because it was returning `std::wstring` instead
   of `std::wstring&`. Now it returns the ref.

### Dirty Area Return
Every time the renderer checks the dirty area, which is sometimes
multiple times per pass (regular text printing, again for selection,
etc.), a vector is created off the heap to return the rectangles. The
consumers only ever iterate this data. Now we return a span over a
rectangle or rectangles that the engine must store itself.
1. For some renderers, it's always a constant 1 element. They update
   that 1 element when dirty is queried and return it in the span with a
   span size of 1.
2. For other renderers with more complex behavior, they're already
   holding a cached vector of rectangles. Now it's effectively giving
   out the ref to those in the span for iteration.

### Bitmap Runs
The `til::bitmap` used a `std::optional<std::vector<til::rectangle>>`
inside itself to cache its runs and would clear the optional when the
runs became invalidated. Unfortunately doing `.reset()` to clear the
optional will destroy the underlying vector and have it release its
memory. We know it's about to get reallocated again, so we're just going
to make it a `std::pmr::vector` and give it a memory pool. 

The alternative solution here was to use a `bool` and
`std::vector<til::rectangle>` and just flag when the vector was invalid,
but that was honestly more code changes and I love excuses to try out
PMR now.

Also, instead of returning the ref to the vector... I'm just returning a
span now. Everyone just iterates it anyway, may as well not share the
implementation detail.

### UTF-8 conversions
When testing with Terminal and looking at the `conhost.exe`'s PTY
renderer, it spends a TON of allocation time on converting all the
UTF-16 stuff inside to UTF-8 before it sends it out the PTY. This was
because `ConvertToA` was allocating a string inside itself and returning
it just to have it freed after printing and looping back around again...
as a PTY does.

The change here is to use `til::u16u8` that accepts a buffer out
parameter so the caller can just hold onto it.

## Validation Steps Performed
- [x] `big.txt` in conhost.exe (GDI renderer)
- [x] `big.txt` in Terminal (DX, PTY renderer)
- [x] Ensure WDDM and BGFX build under Razzle with this change.",,,,True,False,False,187,135,36,36,miniksa@microsoft.com,noreply@github.com,"02/16/2021, 20:52:33",2021,"02/16/2021, 20:52:33",2021,4,4,4,2.9,4.8,0
,"Do not dismiss selection if the Windows keys is pressed as a key-combination (#9163)

Aims to fix #8791.

<!-- Enter a brief description/summary of your PR here. What does it fix/what does it change/how was it tested (even manually, if necessary)? -->
## Summary of the Pull Request
Prior to this PR, if the Windows key was pressed as a part of a key combination, then selection was being dismissed. For example,  when a user pressed `Windows` + `Shift` + `S` keys to invoke the _Capture & Annotate_ tool.
This PR adds an exception for not clearing selection when either of the two Windows keys are pressed as part of a key combination.
It was tested manually by trying to reproduce the issue.

<!-- Please review the items on the PR checklist before submitting-->
## PR Checklist
* [ ] Closes #8791
* [x ] CLA signed.
* [x ] I've discussed this with core contributors already. If not checked, I'm ready to accept this work might be rejected in favor of a different grand plan. Issue number where discussion took place: #8791

<!-- Describe how you validated the behavior. Add automated tests wherever possible, but list manual validation steps taken as well -->
## Validation Steps Performed
1. Build Terminal.
2. Write anything & make a selection.
3. Press `Windows`+ `Shift` + `S` keys.
4. The _Capture & Annotate_ tool appears but the selection made in step 2 isn't dismissed (doesn't disappear).",,,,True,False,False,13,3,1,1,76181208+imaginary-person@users.noreply.github.com,noreply@github.com,"02/17/2021, 17:41:25",2021,"02/17/2021, 17:41:25",2021,3,0,4,4.1,1.2,0
,"Perform polish of miscellaneous Settings UI bugs (#9126)

- 0b0dbdf Makes the browse buttons center vertically aligned
  - This is now made possible by #8919. The ""center"" used to include the height of the header. Now that it's separated, the center is solely calculated to be the text box.
  - Closes #8764 
- 0288f06 Fix keyboard navigation focus for color schemes rename button
  - Enter/Esc when in the scheme renamer now focuses the combo box
  - Keyboard-invoking accept/cancel button focuses the rename button
  - References #8765 and #8768
- d5ef552 Cyclical tab navigation
  - now, if you try to tab past the save button, you cycle back to the beginning of the navigation view
  - this is consistent with the xaml controls gallery
  - References #8768 
- a613b08 AutomationProperties for Save, Reset, and open json buttons
  - References #8899",,,,True,False,False,14,3,5,5,carlos.zamora@microsoft.com,noreply@github.com,"02/17/2021, 17:43:47",2021,"02/17/2021, 17:43:47",2021,3,2,4,4.1,1.2,0
,"Teach tab to focus terminal after rename (#9162)

## Summary of the Pull Request
After rename ends (either by enter or escape) the rename box
gets collapsed and the focus moves to the next tab stop
in the TabView (e.g., new tab button).

To overcome this:
* Added RenameEnded event to TabHeaderControl
* Forwarded it as RenamerDeactivated from TerminalTab
* Registered in the TerminalPage to focus the active control upon
RenamerDeactivated if focus didn't move to tab menu.

This means, no matter how you close the renamer,
the current terminal gains the focus.

## PR Checklist
* [x] Closes https://github.com/microsoft/terminal/issues/9160
* [x] CLA signed. 
* [ ] Tests added/passed
* [ ] Documentation updated. 
* [ ] Schema updated.
* [ ] I've discussed this with core contributors already.",,,,False,False,False,23,2,5,5,khvitaly@gmail.com,noreply@github.com,"02/17/2021, 20:00:23",2021,"02/17/2021, 20:00:23",2021,4,1,4,4.6,1.2,0
,"wpf: prevent a 0 size when VS builds the Terminal window too early (#9194)

The terminal WPF container might have a (0,0) render size when VS
eagerly attempts to initialize the terminal tool window when it is
pinned during startup, but no actual UI is shown due to the VS welcome
dialog that shows up before VS can build the terminal tool window.

We've fixed this issue previously in other areas but only recently did
we get a complete enough dump to find the corner cases for this issue. 

This should patch all the gaps that cause this bug.

## Validation Steps Performed
I've manually validated the scenarios shown in the user dumps.",,,,True,True,False,11,4,2,2,javier.delagarza@gmail.com,noreply@github.com,"02/17/2021, 21:00:50",2021,"02/17/2021, 21:00:50",2021,4,1,4,3.7,1.2,0
,"Fix command palette accessibility (#9143)

Fixes a regression of command palette accessibility. The regression was
introduced in #8377 by setting `IsTabStop` to false. Though the commands
would light up, the focus didn't technically get on the command, so the
screen reader would just read the text box.

## Validation Steps Performed
Opened the command palette while NVDA is active. It now reads the
commands as focus moves on them.",,,,True,True,False,0,2,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/17/2021, 21:30:45",2021,"02/17/2021, 21:30:45",2021,4,2,4,0.0,1.2,0
,"Ensure hyperlinks de-underline when pointer leaves terminal (#9195)

Introduced PointerExited handler to nullify last hovered cell
(which will also de-underline the hyperlink if required).

Closes #9141",,,,False,False,False,75,44,3,3,khvitaly@gmail.com,noreply@github.com,"02/17/2021, 21:33:53",2021,"02/17/2021, 21:33:53",2021,4,1,4,3.2,2.0,0
,"Force activate existing windows when running a commandline in them (#9137)

This will make sure to summon the terminal window when running a
commandline in it. 
* If the window is on another desktop, the OS will switch to the desktop
  the window is on. 
* If the window is minimized, it will restore it.

This is taken from my quake mode branch. It works aggressively. 848682a,
fee6473, 342d3f2, 5052d31 all had other attempts at doing this, but they
didn't work reliably. Part of the trick is that I don't _think_ Windows
wants one process to be able to move another process into the
foreground. In this case though, we _do_ want to move ourself into the
foreground, and this `AttachThreadInput` hack seems to be the only way
to do it reliably.

References #5000
Uses code authored for #653

Closes https://github.com/microsoft/terminal/projects/5#card-54636373",,,,False,False,False,41,0,4,4,migrie@microsoft.com,noreply@github.com,"02/17/2021, 21:37:22",2021,"02/17/2021, 21:37:22",2021,4,4,4,5.0,1.0,0
,"Add support for XTPUSHSGR / XTPOPSGR (#1978)

Implement the `XTPUSHSGR` and `XTPOPSGR` control sequences (see #1796).

This change adds a new pair of methods to `ITermDispatch`:
`PushGraphicsRendition` and `PopGraphicsRendition`, and then plumbs the
change through `AdaptDispatch`, `TerminalDispatch`, `ITerminalApi` and
`TerminalApi`.

The stack logic is encapsulated in the `SgrStack` class, to allow it to
be reused between the two APIs (`AdaptDispatch` and `TerminalDispatch`).

Like xterm, only ten levels of nesting are supported.

The stack is implemented as a ""ring stack"": if you push when the stack
is full, the bottom of the stack will be dropped to make room.

Partial pushes (see the description of `XTPUSHSGR` in Issue #1796) are
implemented per xterm spec.

## Validation Steps Performed
Tests added, plus manual verification of the feature.

Closes #1796",,,,False,False,False,641,1,22,22,danthom@microsoft.com,noreply@github.com,"02/18/2021, 02:31:52",2021,"02/18/2021, 02:31:52",2021,1,1,4,5.0,4.8,0
,"Add support for double-width/double-height lines in conhost (#8664)

This PR adds support for the VT line rendition attributes, which allow
for double-width and double-height line renditions. These renditions are
enabled with the `DECDWL` (double-width line) and `DECDHL`
(double-height line) escape sequences. Both reset to the default
rendition with the `DECSWL` (single-width line) escape sequence. For now
this functionality is only supported by the GDI renderer in conhost.

There are a lot of changes, so this is just a general overview of the
main areas affected.

Previously it was safe to assume that the screen had a fixed width, at
least for a given point in time. But now we need to deal with the
possibility of different lines have different widths, so all the
functions that are constrained by the right border (text wrapping,
cursor movement operations, and sequences like `EL` and `ICH`) now need
to lookup the width of the active line in order to behave correctly.

Similarly it used to be safe to assume that buffer and screen
coordinates were the same thing, but that is no longer true. Lots of
places now need to translate back and forth between coordinate systems
dependent on the line rendition. This includes clipboard handling, the
conhost color selection and search, accessibility location tracking and
screen reading, IME editor positioning, ""snapping"" the viewport, and of
course all the rendering calculations.

For the rendering itself, I've had to introduce a new
`PrepareLineTransform` method that the render engines can use to setup
the necessary transform matrix for a given line rendition. This is also
now used to handle the horizontal viewport offset, since that could no
longer be achieved just by changing the target coordinates (on a double
width line, the viewport offset may be halfway through a character).

I've also had to change the renderer's existing `InvalidateCursor`
method to take a `SMALL_RECT` rather than a `COORD`, to allow for the
cursor being a variable width. Technically this was already a problem,
because the cursor could occupy two screen cells when over a
double-width character, but now it can be anything between one and four
screen cells (e.g. a double-width character on the double-width line).

In terms of architectural changes, there is now a new `lineRendition`
field in the `ROW` class that keeps track of the line rendition for each
row, and several new methods in the `ROW` and `TextBuffer` classes for
manipulating that state. This includes a few helper methods for handling
the various issues discussed above, e.g. position clamping and
translating between coordinate systems.

## Validation Steps Performed

I've manually confirmed all the double-width and double-height tests in
_Vttest_ are now working as expected, and the _VT100 Torture Test_ now
renders correctly (at least the line rendition aspects). I've also got
my own test scripts that check many of the line rendition boundary cases
and have confirmed that those are now passing.

I've manually tested as many areas of the conhost UI that I could think
of, that might be affected by line rendition, including things like
searching, selection, copying, and color highlighting. For
accessibility, I've confirmed that the _Magnifier_ and _Narrator_
correctly handle double-width lines. And I've also tested the Japanese
IME, which while not perfect, is at least useable.

Closes #7865",,,,True,False,False,660,107,50,50,j4_james@hotmail.com,noreply@github.com,"02/18/2021, 05:44:50",2021,"02/18/2021, 05:44:50",2021,1,2,4,4.3,5.0,0
,"Introduce DxFontRenderData (#9096)

This is my attempt to isolate all the dwrite font related thing by
introducing a new layer - `DxFontRenderData`. This will free
`DxRenderer` & `CustomTextLayout` from the burden of handling fonts &
box effects. The logic is more simplified & streamlined.

In short I just moved everything fonts-related into `DxFontRenderData`
and started from there. There's no modification to code logic. Just pure
structural stuff.

SGR support tracking issue: #6879
Initial Italic support PR: #8580",,,,False,False,False,928,875,10,10,skyline75489@outlook.com,noreply@github.com,"02/18/2021, 06:11:38",2021,"02/18/2021, 06:11:38",2021,2,2,4,3.1,4.2,0
,"Fix FFM to apply only if tab is focused (#9198)

In the FFM mode, hovering on the pane might dismiss renamer.
To address this we want to make sure that FFM is applied
only if the Terminal Tab is focused.",,,,True,True,False,16,1,4,4,khvitaly@gmail.com,noreply@github.com,"02/18/2021, 17:15:44",2021,"02/18/2021, 17:15:44",2021,3,1,4,4.7,1.2,0
,"Add `findNext`, `findPrev` actions (#8917)

This PR is a resurrection of #8522. @Hegunumo has apparently deleted
their account, but the contribution was still valuable. I'm just here to
get it across the finish line.

This PR adds new action for navigating to the next & previous search
results. These actions are unbound by default. These actions can be used
from directly within the search dialog also, to immediately navigate the
results. 

Furthermore, if you have a search started, and close the search box,
then press this keybinding, _it will still perform the search_. So you
can just hit <kbd>F3</kbd> repeatedly with the dialog closed to keep
searching new results. Neat!

If you dispatch the action on the key down, then dismiss a selection on
a key up, we'll end up immediately destroying the selection when you
release the bound key. That's annoying. It also bothers @carlos-zamora
in #3758. However, I _think_ we can just only dismiss the selection on a
key up. I _think_ that's fine. It _seems_ fine so far. We've got an
entire release cycle to futz with it.

## Validation Steps Performed
I've played with it all day and it seems _crisp_.

Closes #7695 

Co-authored-by: Kiminori Kaburagi <yukawa_hidenori@icloud.com>",,,,False,False,False,168,4,18,18,migrie@microsoft.com,noreply@github.com,"02/18/2021, 19:21:35",2021,"02/18/2021, 19:21:35",2021,4,4,4,4.9,3.6,0
,"A bunch of test fixes (#9192)

A bunch of our local tests regressed recently. I'm unsure as to when
this happened. Clearly, we all do a super good job of running these
tests 😄.
* I had to make sure the call to `AppLogic::CurrentAppSettings` was
  try/caught, because that doesn't work in the tests
* I had to make the `Pointer*` events take a weak pointer to the
  `TerminalPage` because for whatever reason, they'd be called at a
  weird point in the test init, causing the tests to fail. It was weird.
  Almost as if the TerminalPage had been released, but the test logs
  showed it hadn't barely been set up yet? Whatever, this fixes it.
* The `VerifyCommandPaletteTabSwitcherOrder` test needed to take a time
  out, for reasons that are not totally clear to me. That one was flakey
  and I hate it.

### Checklist:
* [x] Doesn't close anything, this is just something I noticed.
* [x] Doesn't require docs to be updated, it's test fixes
* [x] Yea, I ran the tests 

/cc @Don-Vito: The `FilteredCommandTests` all crashed immediately for
me. I'm not sure what's causing that - I _think_ everything we need for
those tests is set up right? The generated `AppxManifest.xml` had all
the right classes listed in it, I really can't be sure what was wrong
there. These tests aren't run in CI so it's not a super big deal, but I
thought I'd let you know.

(cherry picked from commit ccda434f69d5fd39042d9573f1610aa6ff01d0e7)",,,,True,True,False,157,33,11,11,migrie@microsoft.com,noreply@github.com,"02/18/2021, 20:47:14",2021,"02/18/2021, 20:47:14",2021,4,4,4,4.1,3.6,0
,"Add support for ""fragment extensions"" (#7632)

Support for fragment extensions, according to the implementation
outlined in #7584 (which calls them proto extensions.)

See #7584 for more information.

## Validation Steps Performed
Self-testing by creating the folder 
`%LOCALAPPDATA%\Microsoft\Windows Terminal\Fragments`
and adding a json file into it to modify and add profiles

Also self-tested with an app extension

Closes #1690",,,,False,False,False,343,17,10,10,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/19/2021, 02:12:16",2021,"02/19/2021, 02:12:16",2021,1,2,4,4.8,3.0,0
,"Enable text search on combo boxes (#9206)

`ComboBox` has a text search function that allows users to type letters, and the `ComboBoxItem` starting with those letters is shown. In order to enable this functionality, the underlying items must be `IStringable`. This exposes a `ToString()` function and fixes all of our issues.

This PR adds the `IStringable` interface to `ColorScheme`, `Profile`, and `EnumEntry`.

## References
#6800 - Settings UI Epic
#8768 - Keyboard Navigation
https://github.com/microsoft/microsoft-ui-xaml/issues/4182 - discussion with WinUI about how to overcome this issue

## Validation Steps Performed
Tested...
- Launch > Default Profile
- Color Schemes > Name
- Profile > Appearance > Color scheme
- Profile > Appearance > Font weight

Also tested radio buttons, but those still don't work, unfortunately. Looks like they don't have the same underlying mechanism.",,,,True,False,False,20,3,7,7,carlos.zamora@microsoft.com,noreply@github.com,"02/19/2021, 18:11:07",2021,"02/19/2021, 18:11:07",2021,4,2,4,4.3,1.8,0
,"Redesign color schemes page (#9196)

This PR performs a large overall polish of the color schemes page:
- Ensures keyboard navigation is holistically improved (i.e. fully
  accessible, no lost focus, etc...)
- Adds tooltips and automation properties to all controls
- Redesigns the page according to @mdtauk's approved design
  ([link](https://github.com/microsoft/terminal/pull/8997#issuecomment-771623842)).
  Note, there are some minor modifications to the design that were
  approved by @cinnamon-msft.
- Automatically reflow's the color buttons when they do not fit in
  horizontal mode

## Detailed Description of the Pull Request / Additional comments
- Redesign
  - a data template was introduced to make color representation
    consistent and straightforward
  - `ContentControl` is used to hold a reference to the
    `ColorTableEntry` and represent it properly using the aforementioned
    data template.
  - The design is mainly a StackPanel holding two grids: color table &
    functional colors.
  - The color table is populated via code. After much thought, this
    seems to be the easiest way to correctly bind 16 controls that are
    very similar.
  - The functional colors are populated via XAML manually.
  - We need a grid to separate the text and the buttons. This allows for
    scenarios like ""selection background is the longest string"" to force
    the buttons and text to be aligned.
- Reflow
  - A `VisualStateManager` uses an `AdaptiveTrigger` to change the
    orientation of the color tables' stack panel. The adaptive trigger
    was carefully calculated to align with the navigation view's
    breakpoint.
- Keyboard Navigation
  - (a lesson from `SettingContainer`) `ContentControl` can be focused
    as opposed to the content inside of it. We don't want that, so we
    set `IsTabStop` to false on it. That basically fixes all of our
    keyboard navigation issues in this new design.
- Automation Properties and ToolTips
  - As in my previous PRs, I can't seem to figure out how to bind to a
    control's automation property to its own tooltip. So I had to do
    this in the code and add a few `x:Name` around.

## Validation Steps Performed
- Manually tested...
  - tab navigation
  - accessibility insights
  - NVDA
  - changing color schemes updates color table
- specific scenario:
  - change a color table color and a functional color
  - navigate to a different color scheme
  - navigate back to the first color scheme
  - if the colors persist, the changes were propagated to the settings model

References #8997 - Based on the work from @Chips1234
References #6800 - Settings UI Epic
Closes #8765 - Polish Color Schemes page
Closes #8899 - Automation Properties
Closes #8768 - Keyboard Navigation",,,,True,False,False,353,239,5,5,carlos.zamora@microsoft.com,noreply@github.com,"02/19/2021, 18:20:04",2021,"02/19/2021, 18:20:04",2021,4,2,4,3.4,3.6,0
,"Always show the bell indicator when BEL is emitted (#9212)

Regardless of whether the bellstyle is set to visual,
show the bell indicator in the tab header",,,,False,False,False,12,11,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/19/2021, 18:21:35",2021,"02/19/2021, 18:21:35",2021,4,2,4,2.6,1.0,0
,"Fix FilteredCommand tests to run on UI thread (#9209)

Fixes exception in FilteredCommandTests, caused due to
an attempt to instantiate PropertyChangedEventArgs on non-UI thread.

Though the diff might look scary it is just wrapping with `RunOnUIThread`",,,,True,True,False,187,170,1,1,khvitaly@gmail.com,noreply@github.com,"02/19/2021, 18:22:09",2021,"02/19/2021, 18:22:09",2021,4,1,4,2.6,3.0,0
,"Add support for the `windowingBehavior` setting (#9118)

Adds support for the `windowingBehavior` global setting. This setting
controls how mutiple instances of `wt` behave in the absence of the `-w`
parameter. This setting has three values:
* `""useNew""`: (default) Multiple `wt` invocations (without the `-w`
  param) always create new windows. 
* `""useAnyExisting""`: When starting a new `wt`, we'll instead default to
  any existing windows. `wt -w -1` will still create new windows. 
* `""useExisting""`: Similar to `useAnyExisting`, but limits to
  windows on the current desktop. 

The IVirtualDesktopManager interface is _very_ limited. Hence why we
have to track the HWNDs manually, and ask if they're on the current
desktop. 

## Validation Steps Performed
I've been playing with it for a week now. 

References #5000
References projects/5
References #8898
Spec'd in #8135
Closes #2227
Closes https://github.com/microsoft/terminal/projects/5#card-51431448
Closes https://github.com/microsoft/terminal/projects/5#card-51431433",,,,False,False,False,844,84,27,27,migrie@microsoft.com,noreply@github.com,"02/19/2021, 21:09:17",2021,"02/19/2021, 21:09:17",2021,4,4,4,4.5,5.0,0
,"Polish settings UI localized text (#9124)

Updates the following text in the settings UI
- focus follow mouse mode is introduced to be more instructional
- focus follow mouse mode tooltip removed
- avoid double negative in ""disable pane animation""

Closes #8900 
Updates #6459 Settings UI text",,,,False,False,False,59,28,7,7,carlos.zamora@microsoft.com,noreply@github.com,"02/19/2021, 22:27:30",2021,"02/19/2021, 22:27:30",2021,4,2,4,3.4,2.0,0
,"Add `centerOnLaunch` setting (#9036)

This PR is a resurrection of #8414. @Hegunumo has apparently deleted
their account, but the contribution was still valuable. I'm just here to
get it across the finish line.

This PR adds new global setting `centerOnLaunch`. When set to `true`,
the Terminal window will be centered on the display it opens on. 

So the interactions are like:

* `initialPos: x,y`, `centered: true`, `launchMode: default`
  center on the monitor that x,y is on 

* `initialPos: x,y`, `centered: true`, `launchMode: maximized`
  maximized on the monitor that x,y is on (centered adds nothing)

* `initialPos: <omitted>`, `centered: true`, `launchMode: default`
  center on the default monitor

* `initialPos: <omitted>`, `centered: true`, `launchMode: focus`
  center, focus mode on the default monitor

* `initialPos: <omitted>`, `centered: true`, `launchMode: maximized`
  maximized on the default monitor (centered adds nothing)

## Validation Steps Performed
I've played with it on multiple different monitors, and it seems to work
on all of them.

Closes #8414 (original PR)
Closes #7722 

Co-authored-by: Kiminori Kaburagi <yukawa_hidenori@icloud.com>",,,,False,False,False,47,2,8,8,migrie@microsoft.com,noreply@github.com,"02/19/2021, 22:30:24",2021,"02/19/2021, 22:30:24",2021,4,4,4,4.8,1.8,0
,"Support the ""file"" URI scheme (#7526)

We now support the file URI schemes where the hostname is either
""localhost"" or the empty string

References #5001

Fixes #7699",,,,True,False,False,36,1,3,3,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/19/2021, 22:32:54",2021,"02/19/2021, 22:32:54",2021,4,2,4,4.9,1.2,0
,"Introduce setting override tracking and update SettingContainer (#9079)

This PR adds improved override message generation for inheritance in
SUI. The settings model now has an `OriginTag` to be able to denote
where a `Profile` came from. This tag is used in the `SettingContainer`
to generate a more specific override message.

## References
#6800 - SUI Epic
#8919 - SUI Inheritance PR
#8804 - SUI Inheritance (old issue)

## Detailed Description of the Pull Request / Additional comments
- **Terminal Settings Model**
  - Introduced `PROJECTED_SETTING` as a macro to more easily declare the
    functions for each setting
  - Introduced `<setting>OverrideSource` which finds the `Profile` that
    has \<setting\> defined
  - Introduced `OriginTag Profile::Origin {Custom, InBox, Generated}` to
    trace where a profile came from
  - `DefaultProfileUtils` creates profiles for profile generators. So
    that now sets the `Origin` tag to `Generated`
  - `CascadiaSettings::LoadDefaults()` tags all profiles created as
    `InBox`.
  - The view model had to ingest the API change to be able to interact
    with `<setting>OverrideSource`
- **Override Message Generation**
  - The reset button now has a more specific tooltip
  - The reset button now only appears if base layer is being overridden
  - We use the settings model changes to determine the message to
    display for the target

## Validation Steps Performed
Tested the following cases:
- overrides nothing (inherited setting)
- overrides value inherited from...
  - base layer
  - a profile generator
  - in-box profile
- global settings should not have this feature",,,,False,False,False,504,515,21,21,carlos.zamora@microsoft.com,noreply@github.com,"02/19/2021, 23:50:52",2021,"02/19/2021, 23:50:52",2021,4,2,4,3.0,4.8,0
,"Add support for the `newWindow` action (#9208)

Finally implements the `newWindow` action. It does so by
`ShellExecute`ing `wt.exe` with commandline args corresponding to the
ones that would create the same `NewTerminalArgs`. This works with #8898
and #9118 to allow new windows (even with `windowingBehavior:
useExisting`)

This is taken from my auto-elevate branch, hence the references to
elevation

References #5000
References projects/5
References #8898
References #9118
Closes #1051",,,,False,False,False,466,107,17,17,migrie@microsoft.com,noreply@github.com,"02/19/2021, 23:51:30",2021,"02/19/2021, 23:51:30",2021,4,4,4,3.6,4.0,0
,"res: prepend XML line to SVG files, to pass strict svg checks (#9226)

A header line is missing from a few `.svg` files, denying their use (via
a security error) in WordPress (if svg support is enabled). The upload
is rejected even though the web browser could display the image if it
were dragged into its own tab.

The `.svg` images appear to have been edited at different times and with
different tools.  Their contents are in a different style.  Two of them
are beautiful and the rest do not follow suit and do not function the
same.

I don't know enough to make them all the same style, but changes can be
made to three of them to make them work the way I was expecting (see
below).

## Validation Steps Performed
- Perform the change with a text editor
- Open a new WordPress post page
- Drag-and-drop the changed file into that WordPress edit box
- (The WordPress media upload dialog appears and the file is uploaded)
- Confirmed that the file does not trigger a ""security error"" (as seen
  at the top of the right-hand column)
- Confirmed that the image appears as a thumbnail preview

`Terminal_Pre_HC.svg` is not fixable in this way, and I don't understand
svg well enough to troubleshoot easily.",,,,True,True,False,3,0,3,3,492880+spiralofhope@users.noreply.github.com,noreply@github.com,"02/20/2021, 01:15:04",2021,"02/20/2021, 01:15:04",2021,1,0,4,5.0,1.2,0
,"Hide the Command Palette's key binding label from UIA (#9234)

The command palette's list items explicitly specify the ""AcceleratorKey""
property (for UIA) and set it to the key binding. Putting it in a label
inside the list item makes Narrator read it out twice (""New Tab ...
ctrl+shift+t ... ctrl+shift+t"").

Addresses #7913 (to be closed when a11y re-evaluates)",,,,False,False,False,10,3,1,1,duhowett@microsoft.com,noreply@github.com,"02/22/2021, 18:30:08",2021,"02/22/2021, 18:30:08",2021,4,2,4,3.8,1.0,0
,"Fix `wt --help` (#9246)

When the user executes `--help`, make sure we force the creation of a new window, so that the `MessageBox` will actually appear. 

Add tests too. 

* [x] I work here
* [x] Fixes #9230
* [x] Tests added


I'm gonna have to immediately rewrite those tests for https://github.com/microsoft/terminal/projects/5#card-51431478, but this issue is ship-blocking so I don't care",,,,True,False,False,143,2,4,4,migrie@microsoft.com,noreply@github.com,"02/22/2021, 18:50:39",2021,"02/22/2021, 18:50:39",2021,4,4,4,4.9,2.4,0
,"Control 'Touch Keyboard and Handwriting Panel Service' warning (#9015)

Add a setting to turn off the warning if 'Touch Keyboard and
Handwriting Panel Service' is disabled.

The service might not start in some case, and it doesn't affect the
input in some computer.  This PR turn off the warning even if the
service is disabled.  The setting name is  ""inputServiceWarning"".

## Validation Steps Performed
I manually set the service to ""Disabled"", restarted the Terminal,
verified the warning up, then set ""inputServiceWarning"" to false and
restarted the Terminal, and the warning didn't appear.

References #8095
References https://github.com/microsoft/terminal/issues/7886#issuecomment-729350169",,,,False,False,False,21,4,7,7,54934396+wvvxm@users.noreply.github.com,noreply@github.com,"02/22/2021, 20:08:49",2021,"02/22/2021, 20:08:49",2021,4,0,4,4.2,1.8,0
,"PICK: Work around an optimizer issue with SetPixelShaderPath (#9249)

It appears as though the optimizer is generating a sequence of
instructions on x64 that results in a nonsense std::wstring_view being
passed to SetPixelShaderPath when it's converted from a winrt::hstring.

Initially, I suspected that the issue was in us caching `_settings`
before we broke off the coroutine to update settings on the UI thread. I
implemented a quick fix for this (applying values off the new settings
object while also storing it in the control instance), but it didn't
actually lead anywhere. I do think it's the right thing to do for code
health's sake. Pankaj already changed how this works in 1.7: we no
longer (ever) re-seat the `_settings` reference... we only ever change
its parentage. Whether this is right or wrong is not for this paragraph
to discuss.

Eventually, I started looking more closely at the time travel traces. It
seriously looks like the wstring_view is generated wrong to begin with.
The debugger points directly at `return { L"""", 0 };` (which is correct),
but the values we get immediately on the other side of the call are
something like `{ 0x7FFFFFFF, 0 }` or `{ 0x0, 0x48454C4C }`.

I moved _just_ the call to SetPixelShaderPath into a separate function.
The bug miraculously disappeared when I marked it **noinline**. It
reappeared when the function was fully inlined.

To avoid any future issues, I moved the whole UI thread body of
UpdateSettings out into its own function, to be called only while on the
UI thread. This fixes the bug.

Closes #8723.
Closes #9064.

I found a repro (update the settings file every 0.5 seconds and resize
the terminal wildly while it's doing so) that would trigger the bug
within ~10 seconds. It stopped doing so.

(cherry picked from commit 91b867102c0fb9522a4fa3100f207cfa72aac3cc)",,,,True,False,False,74,53,2,2,duhowett@microsoft.com,noreply@github.com,"02/22/2021, 21:01:51",2021,"02/22/2021, 21:01:51",2021,4,2,4,3.3,2.4,0
,"TabHeader: put TraceLogging events in the right category (#9257)

Fixes MSFT-31615100",,,,True,True,False,2,2,1,1,duhowett@microsoft.com,noreply@github.com,"02/23/2021, 23:14:04",2021,"02/23/2021, 23:14:04",2021,4,2,4,2.5,1.2,0
,"Add a simple page for keybindings (#9253)

This was the only thing blocking me from signing off on #9224 in 1.7.

! CHANGE WARNING !
If we bind to `T.S.M.Command`s in XAML, then the compiler gets _very
angry_ at us. It generates two different versions of
`GetReferenceTypeMember_Icon` in `XamlTypeInfo.g.cpp`. Presumably
because there's an Icon on a NavViewItem and an Icon on a Command. We
don't really know why. Fortunately, the fix is ""rename Command::Icon"" to
""Command::IconPath"". It's dumb, but it works. Thanks for the help with
that one Carlos ☺️ 

Unblocks #9224",,,,True,True,False,446,78,13,13,migrie@microsoft.com,noreply@github.com,"02/23/2021, 23:37:23",2021,"02/23/2021, 23:37:23",2021,4,4,4,4.3,4.8,0
,"Update automation properties for tab header control (#9258)

This sets the automation property (name) on the tab view item we expose in XAML.

## PR Checklist
* [x] Closes #9254 

## Validation Steps Performed
Tested under NVDA and Accessibility Insights",,,,False,False,False,1,0,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/23/2021, 23:40:42",2021,"02/23/2021, 23:40:42",2021,4,2,4,5.0,1.0,0
,"Make Settings UI the default experience (#9224)

This makes the settings UI the default settings experience.

As shown below, the following bindings are now default:
- <kbd>ctrl+,</kbd> --> settings ui
- <kbd>ctrl+shift+,</kbd> --> settings.json
- <kbd>ctrl+alt+,</kbd> --> defaults.json

The dropdown settings button aligns with this heuristic:
- click --> settings ui
- shift+click --> settings.json
- alt+click --> defaults.json
- if alt and shift both pressed, open settings.json

#6800 - Settings UI Epic",,,,False,False,False,30,10,4,4,carlos.zamora@microsoft.com,noreply@github.com,"02/24/2021, 00:14:13",2021,"02/24/2021, 00:14:13",2021,1,2,4,3.7,1.2,0
,version: bump to 1.4 on master,,,,False,False,False,1,1,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/24/2021, 00:35:25",2021,"02/24/2021, 00:35:25",2021,1,2,2,2.5,1.0,0
,[PICK] Cherry-pick loc key from 83d35c119,,,,False,False,False,3,0,1,1,duhowett@microsoft.com,duhowett@microsoft.com,"02/24/2021, 02:57:57",2021,"02/24/2021, 02:57:57",2021,1,2,2,5.0,1.0,0
,"Exclude MonarchPeasantPackage from AnyCPU/DotNet*Test configs (#9272)

Visual Studio automatically enabled this package to build in all
configurations. This results in a build error when we go to pack the WPF
control.",,,,True,True,False,0,18,1,1,duhowett@microsoft.com,noreply@github.com,"02/24/2021, 19:34:34",2021,"02/24/2021, 19:34:34",2021,4,2,4,0.0,1.2,0
,"Add help text to 'more options' in command palette (#9271)

Similar to #9262. This creates another data template specifically for
command palette items that open up more options. We leverage the
localization key from #9262 to apply help text to this template
automatically.

Using the data template approach, we now have no need for the
`HasNestedComandsVisibilityConverter`, so that set of files is now
deleted. The logic to detect nested commands was moved to the template
selector.

## Validation Steps Performed
Tested using NVDA.

Addresses #7908 better",,,,False,False,False,78,98,9,6,carlos.zamora@microsoft.com,noreply@github.com,"02/24/2021, 20:02:09",2021,"02/24/2021, 20:02:09",2021,4,2,4,2.8,2.5,0
,"Fix settings not updating on reload (#9289)

In #8602, we started passing a child of the `TerminalSettings` to the
control upon tab initialization, but forgot to do the same when new
controls get created on a pane split. 

## Validation Steps Performed
Settings reload with multiple panes works

Closes #9280",,,,True,False,False,2,2,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/25/2021, 21:00:20",2021,"02/25/2021, 21:00:20",2021,4,2,4,2.5,1.2,0
,"Update dropdown's settings keyboard accelerator (#9294)

Fixes a bug introduced by #9224 where the wrong keyboard accelerator
would appear in the new tab dropdown. We were looking for the ""settings
file"" version of the action, as opposed to the ""settings UI"" version. 

## References
#9224 - Settings UI as default
#6800 - Settings UI Epic",,,,True,False,False,1,1,1,1,carlos.zamora@microsoft.com,noreply@github.com,"02/25/2021, 22:44:24",2021,"02/25/2021, 22:44:24",2021,4,2,4,2.5,1.2,0
,"Fix updating with fragments ignoring original profile settings (#9293)

Turns out we were adding the fragment source to profiles we update. This
PR fixes it so we keep the original source. 

## Validation Steps Performed
Existing profile settings are maintained

Closes #9290",,,,True,False,False,0,1,1,1,pankaj.d.bhoj@gmail.com,noreply@github.com,"02/25/2021, 22:44:43",2021,"02/25/2021, 22:44:43",2021,4,2,4,0.0,1.2,0
,"Update Cascadia Code to 2102.25 (#9295)

This update fixes some issues in Cascadia Code's February update:

microsoft/cascadia-code#406 - updated anchor type to lock with the other equals-related ligatures
microsoft/cascadia-code#408 - corrected component used for glyph to align with Unicode
microsoft/cascadia-code#412 - updated locl features removing iacute_j ligature and Catalan substitution
microsoft/cascadia-code#414 - increased overlaps of middle glyph for arrow ligatures
microsoft/cascadia-code#415 - reduces width of macronbelow
microsoft/cascadia-code#416 - rolls back name ID 4 modification as JetBrains cannot process it correctly
microsoft/cascadia-code#428 - rolls back variation of the underline to prevent MVAR table generation

Full changelist:
* Repositioned tilde in related ligatures. Previously it was higher than the standard one.
* Added missing vietnamese anchors on acute and grave (futureproofing).
* Corrected / made consistent greater & less positioning in </> and <$> related ligatures.
* Otherwise reviewed hinting",,,,True,True,False,2,2,3,1,duhowett@microsoft.com,noreply@github.com,"02/25/2021, 22:47:03",2021,"02/25/2021, 22:47:03",2021,4,2,4,2.5,1.2,0
